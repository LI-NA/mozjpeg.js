// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
function djpeg(file, options, printFunction) {
    if (typeof file === 'undefined')
        return;

    var stdout = "";
    var stderr = "";

    // Default arguments. set output file
    var args = ['-outfile', '/output.jpg'];


    // You also can use array of options.
    if (Array.isArray(options)) {
        args = args.concat(options);
    } else {
        // Create command line options to passed using input `options` object
        for (var key in options) {
            if (typeof options[key] == "string") {
                args.push("-" + key);
                if (typeof options[key] !== "boolean") {
                    // option has a value
                    args.push(String(options[key]));
                }
            }
        }
    }

    // Target file name.
    args.push("/input.jpg");

    var Module = {
        "print": function(text) {
            stdout += text + "\n";
            if (typeof printFunction == "function") printFunction(text);
        },
        "printErr": function(text) {
            stderr += text + "\n";
            if (typeof printFunction == "function") printFunction(text);
        },

        // Mounting input file
        "preRun": [function() {
            FS.writeFile("/input.jpg", file, {
                encoding: "binary"
            });
        }],
        "arguments": args,
        "ENVIRONMENT": "SHELL" // maximum compatibility???
    };


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 18096;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

   

   

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiiii": invoke_viiiiiii, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__exit": __exit, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_getenv": _getenv, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __exit=env.__exit;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _getenv=env._getenv;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _keymatch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$014 = 0, $$015 = 0, $$01719 = 0, $$020 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   $$0$lcssa = 0;
  } else {
   $5 = $3 << 24 >> 24;
   $$01719 = $1;$$020 = 0;$$pn = $0;$11 = $5;
   while(1) {
    $6 = ((($$pn)) + 1|0);
    $7 = ((($$01719)) + 1|0);
    $8 = HEAP8[$$01719>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = ($8<<24>>24)==(0);
    if ($10) {
     $$014 = 0;
     label = 9;
     break;
    }
    $12 = (_isupper($11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$015 = $11;
    } else {
     $14 = (_tolower($11)|0);
     $$015 = $14;
    }
    $15 = ($$015|0)==($9|0);
    if (!($15)) {
     $$014 = 0;
     label = 9;
     break;
    }
    $16 = (($$020) + 1)|0;
    $17 = HEAP8[$6>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($17<<24>>24)==(0);
    if ($19) {
     $$0$lcssa = $16;
     break L1;
    } else {
     $$01719 = $7;$$020 = $16;$$pn = $6;$11 = $18;
    }
   }
   if ((label|0) == 9) {
    return ($$014|0);
   }
  }
 } while(0);
 $20 = ($$0$lcssa|0)>=($2|0);
 $$ = $20&1;
 $$014 = $$;
 return ($$014|0);
}
function _read_stdin() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[519]|0;
 return ($0|0);
}
function _write_stdout() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[551]|0;
 return ($0|0);
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$085 = 0, $$086 = 0, $$087 = 0, $$088 = 0, $$1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$neg90 = 0, $$neg91 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $sum = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(672|0);
 $vararg_buffer26 = sp + 528|0;
 $vararg_buffer22 = sp + 520|0;
 $vararg_buffer19 = sp + 512|0;
 $vararg_buffer16 = sp + 504|0;
 $vararg_buffer12 = sp + 496|0;
 $vararg_buffer9 = sp + 488|0;
 $vararg_buffer5 = sp + 480|0;
 $vararg_buffer1 = sp + 472|0;
 $vararg_buffer = sp + 464|0;
 $2 = sp;
 $3 = sp + 540|0;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[3855] = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  label = 3;
 } else {
  $6 = HEAP8[$4>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[3855] = 3000;
 }
 $8 = (_jpeg_std_error($3)|0);
 HEAP32[$2>>2] = $8;
 _jpeg_CreateDecompress($2,62,464);
 $9 = ((($3)) + 120|0);
 HEAP32[$9>>2] = 72;
 $10 = ((($3)) + 124|0);
 HEAP32[$10>>2] = 1000;
 $11 = ((($3)) + 128|0);
 HEAP32[$11>>2] = 1045;
 _jpeg_set_marker_processor($2,254,7);
 _jpeg_set_marker_processor($2,236,7);
 $12 = (_parse_switches($2,$0,$1,0)|0);
 $13 = (($0) + -1)|0;
 $14 = ($12|0)<($13|0);
 if ($14) {
  $15 = HEAP32[584]|0;
  $16 = HEAP32[3855]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  (_fprintf($15,3006,$vararg_buffer)|0);
  _usage();
  // unreachable;
 }
 $17 = ($12|0)<($0|0);
 if ($17) {
  $18 = (($1) + ($12<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_fopen($19,3031)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = HEAP32[584]|0;
   $23 = HEAP32[3855]|0;
   $24 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $23;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $24;
   (_fprintf($22,3034,$vararg_buffer1)|0);
   _exit(1);
   // unreachable;
  } else {
   $$085 = $20;
  }
 } else {
  $25 = (_read_stdin()|0);
  $$085 = $25;
 }
 $26 = HEAP32[3856]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $33 = (_write_stdout()|0);
  $$088 = $33;
 } else {
  $28 = (_fopen($26,3053)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = HEAP32[584]|0;
   $31 = HEAP32[3855]|0;
   $32 = HEAP32[3856]|0;
   HEAP32[$vararg_buffer5>>2] = $31;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $32;
   (_fprintf($30,3034,$vararg_buffer5)|0);
   _exit(1);
   // unreachable;
  } else {
   $$088 = $28;
  }
 }
 $34 = HEAP32[3846]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  _jpeg_stdio_src($2,$$085);
  $$1 = 0;
 } else {
  $$086 = 0;$$087 = 0;
  while(1) {
   $36 = (($$086) + 4096)|0;
   $37 = (_realloc($$087,$36)|0);
   $38 = ($37|0)==(0|0);
   if ($38) {
    label = 16;
    break;
   }
   $41 = (($37) + ($$086)|0);
   $42 = (_fread($41,1,4096,$$085)|0);
   $43 = ($42>>>0)<(4096);
   if ($43) {
    label = 18;
    break;
   }
   $51 = (($42) + ($$086))|0;
   $52 = ($42|0)==(4096);
   if ($52) {
    $$086 = $51;$$087 = $37;
   } else {
    $54 = $51;
    break;
   }
  }
  if ((label|0) == 16) {
   $39 = HEAP32[584]|0;
   $40 = HEAP32[3855]|0;
   HEAP32[$vararg_buffer9>>2] = $40;
   (_fprintf($39,3056,$vararg_buffer9)|0);
   _exit(1);
   // unreachable;
  }
  if ((label|0) == 18) {
   $44 = (_ferror($$085)|0);
   $45 = ($44|0)==(0);
   do {
    if (!($45)) {
     $46 = HEAP32[584]|0;
     $47 = HEAP32[3855]|0;
     if ($17) {
      $48 = (($1) + ($12<<2)|0);
      $49 = HEAP32[$48>>2]|0;
      HEAP32[$vararg_buffer12>>2] = $47;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = $49;
      (_fprintf($46,3087,$vararg_buffer12)|0);
      break;
     } else {
      HEAP32[$vararg_buffer16>>2] = $47;
      (_fprintf($46,3111,$vararg_buffer16)|0);
      break;
     }
    }
   } while(0);
   $50 = (($42) + ($$086))|0;
   $54 = $50;
  }
  $53 = HEAP32[584]|0;
  HEAP32[$vararg_buffer19>>2] = $54;
  (_fprintf($53,3138,$vararg_buffer19)|0);
  _jpeg_mem_src($2,$37,$54);
  $$1 = $37;
 }
 (_jpeg_read_header($2,1)|0);
 (_parse_switches($2,$0,$1,1)|0);
 $55 = HEAP32[3857]|0;
 switch ($55|0) {
 case 0:  {
  $56 = (_jinit_write_bmp($2,0)|0);
  $$0 = $56;
  break;
 }
 case 2:  {
  $57 = (_jinit_write_bmp($2,1)|0);
  $$0 = $57;
  break;
 }
 case 1:  {
  $58 = (_jinit_write_gif($2)|0);
  $$0 = $58;
  break;
 }
 case 3:  {
  $59 = (_jinit_write_ppm($2)|0);
  $$0 = $59;
  break;
 }
 case 5:  {
  $60 = (_jinit_write_targa($2)|0);
  $$0 = $60;
  break;
 }
 default: {
  $61 = HEAP32[$2>>2]|0;
  $62 = ((($61)) + 20|0);
  HEAP32[$62>>2] = 1044;
  $63 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vi[$63 & 255]($2);
  $$0 = 0;
 }
 }
 $64 = ((($$0)) + 16|0);
 HEAP32[$64>>2] = $$088;
 (_jpeg_start_decompress($2)|0);
 $65 = HEAP32[3847]|0;
 $66 = ($65|0)==(0);
 L45: do {
  if ($66) {
   $107 = HEAP32[3850]|0;
   $108 = ($107|0)==(0);
   if ($108) {
    $154 = HEAP32[$$0>>2]|0;
    FUNCTION_TABLE_vii[$154 & 255]($2,$$0);
    $155 = ((($2)) + 140|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 116|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($156>>>0)<($158>>>0);
    if (!($159)) {
     break;
    }
    $160 = ((($$0)) + 20|0);
    $161 = ((($$0)) + 24|0);
    $162 = ((($$0)) + 4|0);
    while(1) {
     $163 = HEAP32[$160>>2]|0;
     $164 = HEAP32[$161>>2]|0;
     $165 = (_jpeg_read_scanlines($2,$163,$164)|0);
     $166 = HEAP32[$162>>2]|0;
     FUNCTION_TABLE_viii[$166 & 31]($2,$$0,$165);
     $167 = HEAP32[$155>>2]|0;
     $168 = HEAP32[$157>>2]|0;
     $169 = ($167>>>0)<($168>>>0);
     if (!($169)) {
      break L45;
     }
    }
   }
   $109 = HEAP32[3851]|0;
   $110 = HEAP32[3852]|0;
   $111 = (($110) + ($109))|0;
   $112 = ((($2)) + 112|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($111>>>0)>($113>>>0);
   if ($114) {
    $$phi$trans$insert = ((($2)) + 116|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $123 = $$pre;
    $121 = HEAP32[584]|0;
    $122 = HEAP32[3855]|0;
    HEAP32[$vararg_buffer26>>2] = $122;
    $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $113;
    $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
    HEAP32[$vararg_ptr30>>2] = $123;
    (_fprintf($121,3208,$vararg_buffer26)|0);
    _exit(1);
    // unreachable;
   }
   $115 = HEAP32[3853]|0;
   $116 = HEAP32[3854]|0;
   $117 = (($116) + ($115))|0;
   $118 = ((($2)) + 116|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($117>>>0)>($119>>>0);
   if ($120) {
    $123 = $119;
    $121 = HEAP32[584]|0;
    $122 = HEAP32[3855]|0;
    HEAP32[$vararg_buffer26>>2] = $122;
    $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $113;
    $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
    HEAP32[$vararg_ptr30>>2] = $123;
    (_fprintf($121,3208,$vararg_buffer26)|0);
    _exit(1);
    // unreachable;
   }
   _jpeg_crop_scanline($2,15404,15408);
   $124 = ((($$0)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(0|0);
   if ($126) {
    $127 = HEAP32[$2>>2]|0;
    $128 = ((($127)) + 20|0);
    HEAP32[$128>>2] = 1044;
    $129 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vi[$129 & 255]($2);
   } else {
    FUNCTION_TABLE_vii[$125 & 255]($2,$$0);
   }
   $130 = HEAP32[$118>>2]|0;
   $131 = HEAP32[3854]|0;
   HEAP32[$118>>2] = $131;
   $132 = HEAP32[$$0>>2]|0;
   FUNCTION_TABLE_vii[$132 & 255]($2,$$0);
   HEAP32[$118>>2] = $130;
   $133 = HEAP32[3853]|0;
   (_jpeg_skip_scanlines($2,$133)|0);
   $134 = ((($2)) + 140|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = HEAP32[3853]|0;
   $137 = HEAP32[3854]|0;
   $138 = (($137) + ($136))|0;
   $139 = ($135>>>0)<($138>>>0);
   if ($139) {
    $140 = ((($$0)) + 20|0);
    $141 = ((($$0)) + 24|0);
    $142 = ((($$0)) + 4|0);
    while(1) {
     $143 = HEAP32[$140>>2]|0;
     $144 = HEAP32[$141>>2]|0;
     $145 = (_jpeg_read_scanlines($2,$143,$144)|0);
     $146 = HEAP32[$142>>2]|0;
     FUNCTION_TABLE_viii[$146 & 31]($2,$$0,$145);
     $147 = HEAP32[$134>>2]|0;
     $148 = HEAP32[3853]|0;
     $149 = HEAP32[3854]|0;
     $150 = (($149) + ($148))|0;
     $151 = ($147>>>0)<($150>>>0);
     if (!($151)) {
      $$lcssa = $149;$$lcssa97 = $148;
      break;
     }
    }
   } else {
    $$lcssa = $137;$$lcssa97 = $136;
   }
   $152 = HEAP32[$118>>2]|0;
   $sum = (($$lcssa) + ($$lcssa97))|0;
   $153 = (($152) - ($sum))|0;
   (_jpeg_skip_scanlines($2,$153)|0);
  } else {
   $67 = HEAP32[3848]|0;
   $68 = ((($2)) + 116|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + -1)|0;
   $71 = ($67>>>0)>($70>>>0);
   if ($71) {
    $72 = HEAP32[584]|0;
    $73 = HEAP32[3855]|0;
    HEAP32[$vararg_buffer22>>2] = $73;
    $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
    HEAP32[$vararg_ptr25>>2] = $69;
    (_fprintf($72,3167,$vararg_buffer22)|0);
    _exit(1);
    // unreachable;
   }
   $74 = HEAP32[3849]|0;
   $$neg90 = $67 ^ -1;
   $$neg91 = (($69) + ($$neg90))|0;
   $75 = (($$neg91) + ($74))|0;
   HEAP32[$68>>2] = $75;
   $76 = HEAP32[$$0>>2]|0;
   FUNCTION_TABLE_vii[$76 & 255]($2,$$0);
   HEAP32[$68>>2] = $69;
   $77 = ((($2)) + 140|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = HEAP32[3849]|0;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = ((($$0)) + 20|0);
    $82 = ((($$0)) + 24|0);
    $83 = ((($$0)) + 4|0);
    while(1) {
     $84 = HEAP32[$81>>2]|0;
     $85 = HEAP32[$82>>2]|0;
     $86 = (_jpeg_read_scanlines($2,$84,$85)|0);
     $87 = HEAP32[$83>>2]|0;
     FUNCTION_TABLE_viii[$87 & 31]($2,$$0,$86);
     $88 = HEAP32[$77>>2]|0;
     $89 = HEAP32[3849]|0;
     $90 = ($88>>>0)<($89>>>0);
     if (!($90)) {
      $$lcssa98 = $89;
      break;
     }
    }
   } else {
    $$lcssa98 = $79;
   }
   $91 = HEAP32[3848]|0;
   $92 = (1 - ($$lcssa98))|0;
   $93 = (($92) + ($91))|0;
   (_jpeg_skip_scanlines($2,$93)|0);
   $94 = HEAP32[$77>>2]|0;
   $95 = HEAP32[$68>>2]|0;
   $96 = ($94>>>0)<($95>>>0);
   if ($96) {
    $97 = ((($$0)) + 20|0);
    $98 = ((($$0)) + 24|0);
    $99 = ((($$0)) + 4|0);
    while(1) {
     $100 = HEAP32[$97>>2]|0;
     $101 = HEAP32[$98>>2]|0;
     $102 = (_jpeg_read_scanlines($2,$100,$101)|0);
     $103 = HEAP32[$99>>2]|0;
     FUNCTION_TABLE_viii[$103 & 31]($2,$$0,$102);
     $104 = HEAP32[$77>>2]|0;
     $105 = HEAP32[$68>>2]|0;
     $106 = ($104>>>0)<($105>>>0);
     if (!($106)) {
      break;
     }
    }
   }
  }
 } while(0);
 $170 = ((($$0)) + 8|0);
 $171 = HEAP32[$170>>2]|0;
 FUNCTION_TABLE_vii[$171 & 255]($2,$$0);
 (_jpeg_finish_decompress($2)|0);
 _jpeg_destroy_decompress($2);
 $172 = HEAP32[519]|0;
 $173 = ($$085|0)==($172|0);
 if (!($173)) {
  (_fclose($$085)|0);
 }
 $174 = HEAP32[551]|0;
 $175 = ($$088|0)==($174|0);
 if (!($175)) {
  (_fclose($$088)|0);
 }
 $176 = HEAP32[3846]|0;
 $177 = ($176|0)!=(0);
 $178 = ($$1|0)!=(0|0);
 $or$cond = $178 & $177;
 if (!($or$cond)) {
  $179 = ((($3)) + 108|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)!=(0);
  $182 = $181 ? 2 : 0;
  _exit(($182|0));
  // unreachable;
 }
 _free($$1);
 $179 = ((($3)) + 108|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0);
 $182 = $181 ? 2 : 0;
 _exit(($182|0));
 // unreachable;
 return (0)|0;
}
function _print_text_marker($0) {
 $0 = $0|0;
 var $$0$ph$us$be = 0, $$0$ph$us51 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 127]($0)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 20|0);
   HEAP32[$15>>2] = 24;
   $16 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vi[$16 & 255]($0);
  }
 }
 $17 = HEAP32[$7>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$7>>2] = $18;
 $19 = HEAP32[$6>>2]|0;
 $20 = ((($19)) + 1|0);
 HEAP32[$6>>2] = $20;
 $21 = HEAP8[$19>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = ((($24)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_ii[$29 & 127]($0)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 20|0);
   HEAP32[$33>>2] = 24;
   $34 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vi[$34 & 255]($0);
  }
 }
 $35 = HEAP32[$25>>2]|0;
 $36 = (($35) + -1)|0;
 HEAP32[$25>>2] = $36;
 $37 = HEAP32[$24>>2]|0;
 $38 = ((($37)) + 1|0);
 HEAP32[$24>>2] = $38;
 $39 = HEAP8[$37>>0]|0;
 $40 = $39&255;
 $41 = $23 | $40;
 $42 = (($41) + -2)|0;
 L9: do {
  if ($4) {
   $43 = ((($0)) + 416|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(254);
   $46 = HEAP32[584]|0;
   if ($45) {
    HEAP32[$vararg_buffer>>2] = $42;
    (_fprintf($46,5753,$vararg_buffer)|0);
   } else {
    $47 = (($44) + -224)|0;
    HEAP32[$vararg_buffer1>>2] = $47;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $42;
    (_fprintf($46,5775,$vararg_buffer1)|0);
   }
   $50 = ($41>>>0)>(2);
   if ($50) {
    $51 = (($41) + -3)|0;
    $$0$ph$us51 = 0;$57 = $51;
    while(1) {
     $59 = HEAP32[$5>>2]|0;
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0);
     if ($62) {
      $63 = ((($59)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (FUNCTION_TABLE_ii[$64 & 127]($0)|0);
      $66 = ($65|0)==(0);
      if ($66) {
       $67 = HEAP32[$0>>2]|0;
       $68 = ((($67)) + 20|0);
       HEAP32[$68>>2] = 24;
       $69 = HEAP32[$67>>2]|0;
       FUNCTION_TABLE_vi[$69 & 255]($0);
      }
     }
     $70 = HEAP32[$60>>2]|0;
     $71 = (($70) + -1)|0;
     HEAP32[$60>>2] = $71;
     $72 = HEAP32[$59>>2]|0;
     $73 = ((($72)) + 1|0);
     HEAP32[$59>>2] = $73;
     $74 = HEAP8[$72>>0]|0;
     $53 = $74&255;
     L22: do {
      switch ($74<<24>>24) {
      case 13:  {
       (_fputc(10,$46)|0);
       $$0$ph$us$be = 13;
       break;
      }
      case 10:  {
       $52 = ($$0$ph$us51|0)==(13);
       if ($52) {
        $$0$ph$us$be = 10;
       } else {
        (_fputc(10,$46)|0);
        $$0$ph$us$be = 10;
       }
       break;
      }
      case 92:  {
       (_fwrite(5795,2,1,$46)|0);
       $$0$ph$us$be = 92;
       break;
      }
      default: {
       $54 = (_isprint($53)|0);
       $55 = ($54|0)==(0);
       if ($55) {
        HEAP32[$vararg_buffer5>>2] = $53;
        (_fprintf($46,5798,$vararg_buffer5)|0);
        $$0$ph$us$be = $53;
        break L22;
       } else {
        (_putc($53,$46)|0);
        $$0$ph$us$be = $53;
        break L22;
       }
      }
      }
     } while(0);
     $56 = (($57) + -1)|0;
     $58 = ($57|0)>(0);
     if ($58) {
      $$0$ph$us51 = $$0$ph$us$be;$57 = $56;
     } else {
      $93 = $46;
      break L9;
     }
    }
   } else {
    $93 = $46;
   }
  } else {
   $$pre = HEAP32[584]|0;
   $48 = ($41>>>0)>(2);
   if ($48) {
    $49 = (($41) + -3)|0;
    $91 = $49;
    while(1) {
     $75 = HEAP32[$5>>2]|0;
     $76 = ((($75)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0);
     if ($78) {
      $79 = ((($75)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 127]($0)|0);
      $82 = ($81|0)==(0);
      if ($82) {
       $83 = HEAP32[$0>>2]|0;
       $84 = ((($83)) + 20|0);
       HEAP32[$84>>2] = 24;
       $85 = HEAP32[$83>>2]|0;
       FUNCTION_TABLE_vi[$85 & 255]($0);
      }
     }
     $86 = HEAP32[$76>>2]|0;
     $87 = (($86) + -1)|0;
     HEAP32[$76>>2] = $87;
     $88 = HEAP32[$75>>2]|0;
     $89 = ((($88)) + 1|0);
     HEAP32[$75>>2] = $89;
     $90 = (($91) + -1)|0;
     $92 = ($91|0)>(0);
     if ($92) {
      $91 = $90;
     } else {
      $93 = $$pre;
      break;
     }
    }
   } else {
    $93 = $$pre;
   }
  }
 } while(0);
 if (!($4)) {
  STACKTOP = sp;return 1;
 }
 (_fputc(10,$93)|0);
 STACKTOP = sp;return 1;
}
function _parse_switches($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$020 = 0, $$1 = 0, $$old = 0, $$old1 = 0, $$old2 = 0, $$old3 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer33 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 117|0;
 $7 = sp + 116|0;
 HEAP32[3857] = 3;
 HEAP32[3856] = 0;
 HEAP32[3846] = 0;
 HEAP32[3847] = 0;
 HEAP32[3850] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 104|0);
 HEAP32[$9>>2] = 0;
 $10 = ($1|0)>(1);
 if (!($10)) {
  $$0$lcssa = 1;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $11 = ((($0)) + 48|0);
 $12 = ((($0)) + 52|0);
 $13 = ((($0)) + 92|0);
 $14 = ((($0)) + 76|0);
 $15 = ((($0)) + 4|0);
 $16 = ($3|0)==(0);
 $17 = ((($0)) + 84|0);
 $18 = ((($0)) + 44|0);
 $19 = ((($0)) + 88|0);
 $20 = ((($0)) + 96|0);
 $21 = ((($0)) + 72|0);
 $22 = HEAP32[584]|0;
 $$020 = 1;
 L4: while(1) {
  $23 = (($2) + ($$020<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(45);
  L6: do {
   if ($26) {
    $28 = ((($24)) + 1|0);
    $29 = (_keymatch($28,4899,1)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     HEAP32[3857] = 0;
     $$1 = $$020;
     break;
    }
    $31 = (_keymatch($28,4903,1)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = (_keymatch($28,4910,1)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = (_keymatch($28,4918,1)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       $37 = (_keymatch($28,4927,1)|0);
       $38 = ($37|0)==(0);
       if ($38) {
        $46 = (_keymatch($28,4939,2)|0);
        $47 = ($46|0)==(0);
        if (!($47)) {
         $48 = (($$020) + 1)|0;
         $49 = ($48|0)<($1|0);
         if (!($49)) {
          label = 19;
          break L4;
         }
         $50 = (($2) + ($48<<2)|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = (_keymatch($51,4943,1)|0);
         $53 = ($52|0)==(0);
         if (!($53)) {
          HEAP32[$21>>2] = 0;
          $$1 = $48;
          break;
         }
         $54 = HEAP32[$50>>2]|0;
         $55 = (_keymatch($54,4947,2)|0);
         $56 = ($55|0)==(0);
         if (!($56)) {
          HEAP32[$21>>2] = 1;
          $$1 = $48;
          break;
         }
         $57 = HEAP32[$50>>2]|0;
         $58 = (_keymatch($57,4952,2)|0);
         $59 = ($58|0)==(0);
         if ($59) {
          label = 26;
          break L4;
         }
         HEAP32[$21>>2] = 2;
         $$1 = $48;
         break;
        }
        $60 = (_keymatch($28,4958,2)|0);
        $61 = ($60|0)==(0);
        if (!($61)) {
         $62 = (($$020) + 1)|0;
         $63 = ($62|0)<($1|0);
         if (!($63)) {
          label = 29;
          break L4;
         }
         $64 = (($2) + ($62<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = (_keymatch($65,4965,2)|0);
         $67 = ($66|0)==(0);
         if (!($67)) {
          HEAP32[$19>>2] = 2;
          $$1 = $62;
          break;
         }
         $68 = HEAP32[$64>>2]|0;
         $69 = (_keymatch($68,4968,2)|0);
         $70 = ($69|0)==(0);
         if (!($70)) {
          HEAP32[$19>>2] = 0;
          $$1 = $62;
          break;
         }
         $71 = HEAP32[$64>>2]|0;
         $72 = (_keymatch($71,4973,2)|0);
         $73 = ($72|0)==(0);
         if ($73) {
          label = 36;
          break L4;
         }
         HEAP32[$19>>2] = 1;
         $$1 = $62;
         break;
        }
        $74 = (_keymatch($28,4981,1)|0);
        $75 = ($74|0)==(0);
        if ($75) {
         $76 = (_keymatch($28,4987,1)|0);
         $77 = ($76|0)==(0);
         if ($77) {
          $84 = (_keymatch($28,5601,4)|0);
          $85 = ($84|0)==(0);
          if (!($85)) {
           label = 43;
           break L4;
          }
          $86 = (_keymatch($28,4947,1)|0);
          $87 = ($86|0)==(0);
          if (!($87)) {
           HEAP32[$13>>2] = 0;
           HEAP32[$19>>2] = 1;
           $88 = HEAP32[$17>>2]|0;
           $89 = ($88|0)==(0);
           if ($89) {
            HEAP32[$20>>2] = 216;
           }
           HEAP32[$21>>2] = 1;
           HEAP32[$14>>2] = 0;
           $$1 = $$020;
           break;
          }
          $90 = (_keymatch($28,5609,1)|0);
          $91 = ($90|0)==(0);
          if (!($91)) {
           HEAP32[3857] = 1;
           $$1 = $$020;
           break;
          }
          $92 = (_keymatch($28,5613,2)|0);
          $93 = ($92|0)==(0);
          do {
           if ($93) {
            $94 = (_keymatch($28,5623,2)|0);
            $95 = ($94|0)==(0);
            if (!($95)) {
             break;
            }
            $96 = (_keymatch($28,5633,2)|0);
            $97 = ($96|0)==(0);
            if (!($97)) {
             HEAP32[$18>>2] = 2;
             $$1 = $$020;
             break L6;
            }
            $98 = (_keymatch($28,5637,2)|0);
            $99 = ($98|0)==(0);
            if (!($99)) {
             HEAP32[$18>>2] = 16;
             $$1 = $$020;
             break L6;
            }
            $100 = (_keymatch($28,5644,3)|0);
            $101 = ($100|0)==(0);
            if (!($101)) {
             $102 = (($$020) + 1)|0;
             $103 = ($102|0)<($1|0);
             if (!($103)) {
              label = 59;
              break L4;
             }
             if ($16) {
              $$1 = $102;
              break L6;
             }
             $104 = (($2) + ($102<<2)|0);
             $105 = HEAP32[$104>>2]|0;
             $106 = (_fopen($105,3031)|0);
             $107 = ($106|0)==(0|0);
             if ($107) {
              label = 62;
              break L4;
             }
             _read_color_map($0,$106);
             (_fclose($106)|0);
             HEAP32[$17>>2] = 1;
             $$1 = $102;
             break L6;
            }
            $110 = (_keymatch($28,5648,3)|0);
            $111 = ($110|0)==(0);
            if (!($111)) {
             HEAP8[$6>>0] = 120;
             $112 = (($$020) + 1)|0;
             $113 = ($112|0)<($1|0);
             if (!($113)) {
              label = 66;
              break L4;
             }
             $114 = (($2) + ($112<<2)|0);
             $115 = HEAP32[$114>>2]|0;
             HEAP32[$vararg_buffer21>>2] = $5;
             $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
             HEAP32[$vararg_ptr24>>2] = $6;
             $116 = (_sscanf($115,12255,$vararg_buffer21)|0);
             $117 = ($116|0)<(1);
             if ($117) {
              label = 68;
              break L4;
             }
             $118 = HEAP8[$6>>0]|0;
             switch ($118<<24>>24) {
             case 77: case 109:  {
              $119 = HEAP32[$5>>2]|0;
              $120 = ($119*1000)|0;
              HEAP32[$5>>2] = $120;
              $122 = $120;
              break;
             }
             default: {
              $$pre = HEAP32[$5>>2]|0;
              $122 = $$pre;
             }
             }
             $121 = ($122*1000)|0;
             $123 = HEAP32[$15>>2]|0;
             $124 = ((($123)) + 44|0);
             HEAP32[$124>>2] = $121;
             $$1 = $112;
             break L6;
            }
            $125 = (_keymatch($28,5658,3)|0);
            $126 = ($125|0)==(0);
            if (!($126)) {
             HEAP32[$14>>2] = 0;
             $$1 = $$020;
             break L6;
            }
            $127 = (_keymatch($28,5667,3)|0);
            $128 = ($127|0)==(0);
            if (!($128)) {
             HEAP32[$13>>2] = 0;
             $$1 = $$020;
             break L6;
            }
            $129 = (_keymatch($28,5675,3)|0);
            $130 = ($129|0)==(0);
            if (!($130)) {
             HEAP32[3857] = 2;
             $$1 = $$020;
             break L6;
            }
            $131 = (_keymatch($28,5679,4)|0);
            $132 = ($131|0)==(0);
            if (!($132)) {
             $133 = (($$020) + 1)|0;
             $134 = ($133|0)<($1|0);
             if (!($134)) {
              label = 81;
              break L4;
             }
             $135 = (($2) + ($133<<2)|0);
             $136 = HEAP32[$135>>2]|0;
             HEAP32[3856] = $136;
             $$1 = $133;
             break L6;
            }
            $137 = (_keymatch($28,5687,2)|0);
            $138 = ($137|0)==(0);
            if (!($138)) {
             HEAP32[3846] = 1;
             $$1 = $$020;
             break L6;
            }
            $139 = (_keymatch($28,5694,1)|0);
            $140 = ($139|0)==(0);
            do {
             if ($140) {
              $141 = (_keymatch($28,5698,1)|0);
              $142 = ($141|0)==(0);
              if (!($142)) {
               break;
              }
              $143 = (_keymatch($28,5702,1)|0);
              $144 = ($143|0)==(0);
              if (!($144)) {
               HEAP32[3857] = 4;
               $$1 = $$020;
               break L6;
              }
              $145 = (_keymatch($28,5706,2)|0);
              $146 = ($145|0)==(0);
              if (!($146)) {
               $147 = (($$020) + 1)|0;
               $148 = ($147|0)<($1|0);
               if (!($148)) {
                label = 92;
                break L4;
               }
               $149 = (($2) + ($147<<2)|0);
               $150 = HEAP32[$149>>2]|0;
               HEAP32[$vararg_buffer25>>2] = $11;
               $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
               HEAP32[$vararg_ptr28>>2] = $12;
               $151 = (_sscanf($150,5712,$vararg_buffer25)|0);
               $152 = ($151|0)==(2);
               if ($152) {
                $$1 = $147;
                break L6;
               } else {
                label = 94;
                break L4;
               }
              }
              $153 = (_keymatch($28,5718,2)|0);
              $154 = ($153|0)==(0);
              if (!($154)) {
               $155 = (($$020) + 1)|0;
               $156 = ($155|0)<($1|0);
               if (!($156)) {
                label = 97;
                break L4;
               }
               $157 = (($2) + ($155<<2)|0);
               $158 = HEAP32[$157>>2]|0;
               HEAP32[$vararg_buffer29>>2] = 15396;
               $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
               HEAP32[$vararg_ptr32>>2] = 15392;
               $159 = (_sscanf($158,5723,$vararg_buffer29)|0);
               $160 = ($159|0)==(2);
               if (!($160)) {
                label = 100;
                break L4;
               }
               $161 = HEAP32[3849]|0;
               $162 = HEAP32[3848]|0;
               $163 = ($161>>>0)>($162>>>0);
               if ($163) {
                label = 100;
                break L4;
               }
               HEAP32[3847] = 1;
               $$1 = $155;
               break L6;
              }
              $164 = (_keymatch($28,5729,2)|0);
              $165 = ($164|0)==(0);
              if ($165) {
               $179 = (_keymatch($28,5747,1)|0);
               $180 = ($179|0)==(0);
               if ($180) {
                label = 113;
                break L4;
               }
               HEAP32[3857] = 5;
               $$1 = $$020;
               break L6;
              }
              $166 = (($$020) + 1)|0;
              $167 = ($166|0)<($1|0);
              if (!($167)) {
               label = 104;
               break L4;
              }
              $168 = (($2) + ($166<<2)|0);
              $169 = HEAP32[$168>>2]|0;
              HEAP32[$vararg_buffer33>>2] = 15408;
              $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
              HEAP32[$vararg_ptr36>>2] = $7;
              $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
              HEAP32[$vararg_ptr37>>2] = 15416;
              $vararg_ptr38 = ((($vararg_buffer33)) + 12|0);
              HEAP32[$vararg_ptr38>>2] = 15404;
              $vararg_ptr39 = ((($vararg_buffer33)) + 16|0);
              HEAP32[$vararg_ptr39>>2] = 15412;
              $170 = (_sscanf($169,5734,$vararg_buffer33)|0);
              $171 = ($170|0)==(5);
              if (!($171)) {
               label = 109;
               break L4;
              }
              $172 = HEAP8[$7>>0]|0;
              $173 = ($172<<24>>24)==(88);
              if ($173) {
               $$old = HEAP32[3852]|0;
               $$old1 = ($$old|0)==(0);
               $$old2 = HEAP32[3854]|0;
               $$old3 = ($$old2|0)==(0);
               $or$cond6 = $$old1 | $$old3;
               if ($or$cond6) {
                label = 109;
                break L4;
               }
              } else {
               $174 = ($172<<24>>24)!=(120);
               $175 = HEAP32[3852]|0;
               $176 = ($175|0)==(0);
               $or$cond = $174 | $176;
               $177 = HEAP32[3854]|0;
               $178 = ($177|0)==(0);
               $or$cond4 = $or$cond | $178;
               if ($or$cond4) {
                label = 109;
                break L4;
               }
              }
              HEAP32[3850] = 1;
              $$1 = $166;
              break L6;
             }
            } while(0);
            HEAP32[3857] = 3;
            $$1 = $$020;
            break L6;
           }
          } while(0);
          HEAP32[$18>>2] = 1;
          $$1 = $$020;
          break;
         }
        }
        $78 = HEAP32[3858]|0;
        $79 = ($78|0)==(0);
        if ($79) {
         HEAP32[$vararg_buffer1>>2] = 5021;
         $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
         HEAP32[$vararg_ptr4>>2] = 5029;
         $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
         HEAP32[$vararg_ptr5>>2] = 5035;
         (_fprintf($22,4995,$vararg_buffer1)|0);
         HEAP32[$vararg_buffer6>>2] = 5049;
         (_fprintf($22,5044,$vararg_buffer6)|0);
         HEAP32[$vararg_buffer9>>2] = 9866;
         (_fprintf($22,5539,$vararg_buffer9)|0);
         HEAP32[3858] = 1;
        }
        $80 = HEAP32[$0>>2]|0;
        $81 = ((($80)) + 104|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($82) + 1)|0;
        HEAP32[$81>>2] = $83;
        $$1 = $$020;
        break;
       }
      }
     }
    }
    $39 = (($$020) + 1)|0;
    $40 = ($39|0)<($1|0);
    if (!($40)) {
     label = 13;
     break L4;
    }
    $41 = (($2) + ($39<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$vararg_buffer>>2] = $4;
    $43 = (_sscanf($42,4936,$vararg_buffer)|0);
    $44 = ($43|0)==(1);
    if (!($44)) {
     label = 15;
     break L4;
    }
    $45 = HEAP32[$4>>2]|0;
    HEAP32[$20>>2] = $45;
    HEAP32[$17>>2] = 1;
    $$1 = $39;
   } else {
    $27 = ($$020|0)<(1);
    if (!($27)) {
     $$0$lcssa = $$020;
     label = 115;
     break L4;
    }
    HEAP32[3856] = 0;
    $$1 = $$020;
   }
  } while(0);
  $181 = (($$1) + 1)|0;
  $182 = ($181|0)<($1|0);
  if ($182) {
   $$020 = $181;
  } else {
   $$0$lcssa = $181;
   label = 115;
   break;
  }
 }
 switch (label|0) {
  case 13: {
   _usage();
   // unreachable;
   break;
  }
  case 15: {
   _usage();
   // unreachable;
   break;
  }
  case 19: {
   _usage();
   // unreachable;
   break;
  }
  case 26: {
   _usage();
   // unreachable;
   break;
  }
  case 29: {
   _usage();
   // unreachable;
   break;
  }
  case 36: {
   _usage();
   // unreachable;
   break;
  }
  case 43: {
   HEAP32[$vararg_buffer12>>2] = 5021;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = 5029;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = 5035;
   (_fprintf($22,4995,$vararg_buffer12)|0);
   _exit(0);
   // unreachable;
   break;
  }
  case 59: {
   _usage();
   // unreachable;
   break;
  }
  case 62: {
   $108 = HEAP32[3855]|0;
   $109 = HEAP32[$104>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $108;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $109;
   (_fprintf($22,3034,$vararg_buffer17)|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 66: {
   _usage();
   // unreachable;
   break;
  }
  case 68: {
   _usage();
   // unreachable;
   break;
  }
  case 81: {
   _usage();
   // unreachable;
   break;
  }
  case 92: {
   _usage();
   // unreachable;
   break;
  }
  case 94: {
   _usage();
   // unreachable;
   break;
  }
  case 97: {
   _usage();
   // unreachable;
   break;
  }
  case 100: {
   _usage();
   // unreachable;
   break;
  }
  case 104: {
   _usage();
   // unreachable;
   break;
  }
  case 109: {
   _usage();
   // unreachable;
   break;
  }
  case 113: {
   _usage();
   // unreachable;
   break;
  }
  case 115: {
   STACKTOP = sp;return ($$0$lcssa|0);
   break;
  }
 }
 return (0)|0;
}
function _usage() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[584]|0;
 $1 = HEAP32[3855]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($0,3261,$vararg_buffer)|0);
 (_fwrite(3283,12,1,$0)|0);
 (_fwrite(3296,37,1,$0)|0);
 (_fwrite(3334,55,1,$0)|0);
 (_fwrite(3390,46,1,$0)|0);
 (_fwrite(3437,40,1,$0)|0);
 (_fwrite(3478,34,1,$0)|0);
 (_fwrite(3513,37,1,$0)|0);
 (_fwrite(3551,61,1,$0)|0);
 HEAP32[$vararg_buffer1>>2] = 16016;
 (_fprintf($0,3613,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = 16016;
 (_fprintf($0,3674,$vararg_buffer4)|0);
 HEAP32[$vararg_buffer7>>2] = 16016;
 (_fprintf($0,3719,$vararg_buffer7)|0);
 HEAP32[$vararg_buffer10>>2] = 3836;
 (_fprintf($0,3777,$vararg_buffer10)|0);
 HEAP32[$vararg_buffer13>>2] = 16016;
 (_fprintf($0,3847,$vararg_buffer13)|0);
 (_fwrite(3894,29,1,$0)|0);
 HEAP32[$vararg_buffer16>>2] = 3836;
 (_fprintf($0,3924,$vararg_buffer16)|0);
 HEAP32[$vararg_buffer19>>2] = 16016;
 (_fprintf($0,3967,$vararg_buffer19)|0);
 HEAP32[$vararg_buffer22>>2] = 16016;
 (_fprintf($0,4024,$vararg_buffer22)|0);
 (_fwrite(4074,45,1,$0)|0);
 (_fwrite(4120,53,1,$0)|0);
 (_fwrite(4174,62,1,$0)|0);
 (_fwrite(4237,56,1,$0)|0);
 (_fwrite(4294,51,1,$0)|0);
 (_fwrite(4346,61,1,$0)|0);
 (_fwrite(4408,51,1,$0)|0);
 (_fwrite(4460,46,1,$0)|0);
 (_fwrite(4507,66,1,$0)|0);
 (_fwrite(4574,80,1,$0)|0);
 (_fwrite(4655,70,1,$0)|0);
 (_fwrite(4726,75,1,$0)|0);
 (_fwrite(4802,43,1,$0)|0);
 (_fwrite(4846,52,1,$0)|0);
 _exit(1);
 // unreachable;
}
function _read_color_map($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$039$i$i = 0, $$039$i$us$i = 0, $$039$i81$us$i = 0, $$07991$us$i = 0, $$090$us$i = 0, $$140$i = 0, $$18095$us$i = 0, $$192$us$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i14 = 0, $exitcond101$i = 0, $exitcond102$i = 0, $exitcond99$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$i = 0, $or$cond3$i13 = 0, $or$cond43$i = 0, $or$cond5$us$i = 0, $or$cond7$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 127]($0,1,256,3)|0);
 $7 = ((($0)) + 136|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 132|0);
 HEAP32[$8>>2] = 0;
 $9 = (_getc($1)|0);
 switch ($9|0) {
 case 71:  {
  $10 = (_getc($1)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 20|0);
   HEAP32[$13>>2] = 1040;
   $14 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vi[$14 & 255]($0);
  }
  $15 = (_getc($1)|0);
  $16 = ($15|0)==(-1);
  if ($16) {
   $75 = HEAP32[$0>>2]|0;
   $76 = ((($75)) + 20|0);
   HEAP32[$76>>2] = 1040;
   $77 = HEAP32[$75>>2]|0;
   FUNCTION_TABLE_vi[$77 & 255]($0);
  }
  $78 = (_getc($1)|0);
  $79 = ($78|0)==(-1);
  if ($79) {
   $80 = HEAP32[$0>>2]|0;
   $81 = ((($80)) + 20|0);
   HEAP32[$81>>2] = 1040;
   $82 = HEAP32[$80>>2]|0;
   FUNCTION_TABLE_vi[$82 & 255]($0);
  }
  $83 = (_getc($1)|0);
  $84 = ($83|0)==(-1);
  if ($84) {
   $85 = HEAP32[$0>>2]|0;
   $86 = ((($85)) + 20|0);
   HEAP32[$86>>2] = 1040;
   $87 = HEAP32[$85>>2]|0;
   FUNCTION_TABLE_vi[$87 & 255]($0);
  }
  $88 = (_getc($1)|0);
  $89 = ($88|0)==(-1);
  if ($89) {
   $90 = HEAP32[$0>>2]|0;
   $91 = ((($90)) + 20|0);
   HEAP32[$91>>2] = 1040;
   $92 = HEAP32[$90>>2]|0;
   FUNCTION_TABLE_vi[$92 & 255]($0);
  }
  $93 = (_getc($1)|0);
  $94 = ($93|0)==(-1);
  if ($94) {
   $95 = HEAP32[$0>>2]|0;
   $96 = ((($95)) + 20|0);
   HEAP32[$96>>2] = 1040;
   $97 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vi[$97 & 255]($0);
  }
  $98 = (_getc($1)|0);
  $99 = ($98|0)==(-1);
  if ($99) {
   $100 = HEAP32[$0>>2]|0;
   $101 = ((($100)) + 20|0);
   HEAP32[$101>>2] = 1040;
   $102 = HEAP32[$100>>2]|0;
   FUNCTION_TABLE_vi[$102 & 255]($0);
  }
  $103 = (_getc($1)|0);
  $104 = ($103|0)==(-1);
  if ($104) {
   $105 = HEAP32[$0>>2]|0;
   $106 = ((($105)) + 20|0);
   HEAP32[$106>>2] = 1040;
   $107 = HEAP32[$105>>2]|0;
   FUNCTION_TABLE_vi[$107 & 255]($0);
  }
  $108 = (_getc($1)|0);
  $109 = ($108|0)==(-1);
  if ($109) {
   $110 = HEAP32[$0>>2]|0;
   $111 = ((($110)) + 20|0);
   HEAP32[$111>>2] = 1040;
   $112 = HEAP32[$110>>2]|0;
   FUNCTION_TABLE_vi[$112 & 255]($0);
  }
  $21 = (_getc($1)|0);
  $113 = ($21|0)==(-1);
  if ($113) {
   $114 = HEAP32[$0>>2]|0;
   $115 = ((($114)) + 20|0);
   HEAP32[$115>>2] = 1040;
   $116 = HEAP32[$114>>2]|0;
   FUNCTION_TABLE_vi[$116 & 255]($0);
  }
  $117 = (_getc($1)|0);
  $118 = ($117|0)==(-1);
  if ($118) {
   $119 = HEAP32[$0>>2]|0;
   $120 = ((($119)) + 20|0);
   HEAP32[$120>>2] = 1040;
   $121 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vi[$121 & 255]($0);
  }
  $122 = (_getc($1)|0);
  $123 = ($122|0)==(-1);
  if ($123) {
   $124 = HEAP32[$0>>2]|0;
   $125 = ((($124)) + 20|0);
   HEAP32[$125>>2] = 1040;
   $126 = HEAP32[$124>>2]|0;
   FUNCTION_TABLE_vi[$126 & 255]($0);
  }
  $127 = ($10|0)==(73);
  $128 = ($15|0)==(70);
  $or$cond43$i = $127 & $128;
  if (!($or$cond43$i)) {
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 20|0);
   HEAP32[$18>>2] = 1040;
   $19 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vi[$19 & 255]($0);
  }
  $20 = $21 & 128;
  $22 = ($20|0)==(0);
  if ($22) {
   $23 = HEAP32[$0>>2]|0;
   $24 = ((($23)) + 20|0);
   HEAP32[$24>>2] = 1040;
   $25 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vi[$25 & 255]($0);
  }
  $26 = $21 & 7;
  $27 = 2 << $26;
  $28 = ($27|0)>(0);
  if ($28) {
   $$140$i = 0;
  } else {
   return;
  }
  while(1) {
   $29 = (_getc($1)|0);
   $30 = (_getc($1)|0);
   $31 = (_getc($1)|0);
   $32 = ($29|0)==(-1);
   $33 = ($30|0)==(-1);
   $or$cond$i = $32 | $33;
   $34 = ($31|0)==(-1);
   $or$cond3$i = $or$cond$i | $34;
   if ($or$cond3$i) {
    $35 = HEAP32[$0>>2]|0;
    $36 = ((($35)) + 20|0);
    HEAP32[$36>>2] = 1040;
    $37 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vi[$37 & 255]($0);
   }
   $38 = HEAP32[$7>>2]|0;
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($38)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($38)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$8>>2]|0;
   $45 = ($44|0)>(0);
   L54: do {
    if ($45) {
     $$039$i$i = 0;
     while(1) {
      $46 = (($39) + ($$039$i$i)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = ($29|0)==($48|0);
      do {
       if ($49) {
        $50 = (($41) + ($$039$i$i)|0);
        $51 = HEAP8[$50>>0]|0;
        $52 = $51&255;
        $53 = ($30|0)==($52|0);
        if (!($53)) {
         break;
        }
        $54 = (($43) + ($$039$i$i)|0);
        $55 = HEAP8[$54>>0]|0;
        $56 = $55&255;
        $57 = ($31|0)==($56|0);
        if ($57) {
         break L54;
        }
       }
      } while(0);
      $58 = (($$039$i$i) + 1)|0;
      $59 = ($58|0)<($44|0);
      if ($59) {
       $$039$i$i = $58;
      } else {
       break;
      }
     }
     $60 = ($44|0)>(255);
     if (!($60)) {
      label = 18;
      break;
     }
     $61 = HEAP32[$0>>2]|0;
     $62 = ((($61)) + 20|0);
     HEAP32[$62>>2] = 57;
     $63 = ((($61)) + 24|0);
     HEAP32[$63>>2] = 256;
     $64 = HEAP32[$0>>2]|0;
     $65 = HEAP32[$64>>2]|0;
     FUNCTION_TABLE_vi[$65 & 255]($0);
     label = 18;
    } else {
     label = 18;
    }
   } while(0);
   if ((label|0) == 18) {
    label = 0;
    $66 = $29&255;
    $67 = (($39) + ($44)|0);
    HEAP8[$67>>0] = $66;
    $68 = $30&255;
    $69 = (($41) + ($44)|0);
    HEAP8[$69>>0] = $68;
    $70 = $31&255;
    $71 = (($43) + ($44)|0);
    HEAP8[$71>>0] = $70;
    $72 = HEAP32[$8>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[$8>>2] = $73;
   }
   $74 = (($$140$i) + 1)|0;
   $exitcond$i = ($74|0)==($27|0);
   if ($exitcond$i) {
    break;
   } else {
    $$140$i = $74;
   }
  }
  return;
  break;
 }
 case 80:  {
  $129 = (_getc($1)|0);
  $130 = (_read_pbm_integer($0,$1)|0);
  $131 = (_read_pbm_integer($0,$1)|0);
  $132 = (_read_pbm_integer($0,$1)|0);
  $133 = ($130|0)==(0);
  $134 = ($131|0)==(0);
  $or$cond$i12 = $133 | $134;
  $135 = ($132|0)==(0);
  $or$cond3$i13 = $or$cond$i12 | $135;
  if ($or$cond3$i13) {
   $136 = HEAP32[$0>>2]|0;
   $137 = ((($136)) + 20|0);
   HEAP32[$137>>2] = 1040;
   $138 = HEAP32[$136>>2]|0;
   FUNCTION_TABLE_vi[$138 & 255]($0);
  }
  $139 = ($132|0)==(255);
  if (!($139)) {
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 20|0);
   HEAP32[$141>>2] = 1040;
   $142 = HEAP32[$140>>2]|0;
   FUNCTION_TABLE_vi[$142 & 255]($0);
  }
  switch ($129|0) {
  case 51:  {
   if ($134) {
    return;
   }
   if ($133) {
    return;
   } else {
    $$07991$us$i = 0;
   }
   while(1) {
    $$090$us$i = 0;
    while(1) {
     $190 = (_read_pbm_integer($0,$1)|0);
     $191 = (_read_pbm_integer($0,$1)|0);
     $192 = (_read_pbm_integer($0,$1)|0);
     $193 = HEAP32[$7>>2]|0;
     $194 = HEAP32[$193>>2]|0;
     $195 = ((($193)) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((($193)) + 8|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = HEAP32[$8>>2]|0;
     $200 = ($199|0)>(0);
     L87: do {
      if ($200) {
       $$039$i$us$i = 0;
       while(1) {
        $201 = (($194) + ($$039$i$us$i)|0);
        $202 = HEAP8[$201>>0]|0;
        $203 = $202&255;
        $204 = ($190|0)==($203|0);
        if ($204) {
         $205 = (($196) + ($$039$i$us$i)|0);
         $206 = HEAP8[$205>>0]|0;
         $207 = $206&255;
         $208 = ($191|0)==($207|0);
         if ($208) {
          $209 = (($198) + ($$039$i$us$i)|0);
          $210 = HEAP8[$209>>0]|0;
          $211 = $210&255;
          $212 = ($192|0)==($211|0);
          if ($212) {
           break L87;
          }
         }
        }
        $213 = (($$039$i$us$i) + 1)|0;
        $214 = ($213|0)<($199|0);
        if ($214) {
         $$039$i$us$i = $213;
        } else {
         break;
        }
       }
       $215 = ($199|0)>(255);
       if ($215) {
        $216 = HEAP32[$0>>2]|0;
        $217 = ((($216)) + 20|0);
        HEAP32[$217>>2] = 57;
        $218 = ((($216)) + 24|0);
        HEAP32[$218>>2] = 256;
        $219 = HEAP32[$0>>2]|0;
        $220 = HEAP32[$219>>2]|0;
        FUNCTION_TABLE_vi[$220 & 255]($0);
        label = 72;
       } else {
        label = 72;
       }
      } else {
       label = 72;
      }
     } while(0);
     if ((label|0) == 72) {
      label = 0;
      $221 = $190&255;
      $222 = (($194) + ($199)|0);
      HEAP8[$222>>0] = $221;
      $223 = $191&255;
      $224 = (($196) + ($199)|0);
      HEAP8[$224>>0] = $223;
      $225 = $192&255;
      $226 = (($198) + ($199)|0);
      HEAP8[$226>>0] = $225;
      $227 = HEAP32[$8>>2]|0;
      $228 = (($227) + 1)|0;
      HEAP32[$8>>2] = $228;
     }
     $229 = (($$090$us$i) + 1)|0;
     $exitcond$i14 = ($229|0)==($130|0);
     if ($exitcond$i14) {
      break;
     } else {
      $$090$us$i = $229;
     }
    }
    $230 = (($$07991$us$i) + 1)|0;
    $exitcond99$i = ($230|0)==($131|0);
    if ($exitcond99$i) {
     break;
    } else {
     $$07991$us$i = $230;
    }
   }
   return;
   break;
  }
  case 54:  {
   if ($134) {
    return;
   }
   if ($133) {
    return;
   } else {
    $$18095$us$i = 0;
   }
   while(1) {
    $$192$us$i = 0;
    while(1) {
     $143 = (_getc($1)|0);
     $144 = (_getc($1)|0);
     $145 = (_getc($1)|0);
     $146 = ($143|0)==(-1);
     $147 = ($144|0)==(-1);
     $or$cond5$us$i = $146 | $147;
     $148 = ($145|0)==(-1);
     $or$cond7$us$i = $or$cond5$us$i | $148;
     if ($or$cond7$us$i) {
      $149 = HEAP32[$0>>2]|0;
      $150 = ((($149)) + 20|0);
      HEAP32[$150>>2] = 1040;
      $151 = HEAP32[$149>>2]|0;
      FUNCTION_TABLE_vi[$151 & 255]($0);
     }
     $152 = HEAP32[$7>>2]|0;
     $153 = HEAP32[$152>>2]|0;
     $154 = ((($152)) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($152)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = HEAP32[$8>>2]|0;
     $159 = ($158|0)>(0);
     L114: do {
      if ($159) {
       $$039$i81$us$i = 0;
       while(1) {
        $160 = (($153) + ($$039$i81$us$i)|0);
        $161 = HEAP8[$160>>0]|0;
        $162 = $161&255;
        $163 = ($143|0)==($162|0);
        if ($163) {
         $164 = (($155) + ($$039$i81$us$i)|0);
         $165 = HEAP8[$164>>0]|0;
         $166 = $165&255;
         $167 = ($144|0)==($166|0);
         if ($167) {
          $168 = (($157) + ($$039$i81$us$i)|0);
          $169 = HEAP8[$168>>0]|0;
          $170 = $169&255;
          $171 = ($145|0)==($170|0);
          if ($171) {
           break L114;
          }
         }
        }
        $172 = (($$039$i81$us$i) + 1)|0;
        $173 = ($172|0)<($158|0);
        if ($173) {
         $$039$i81$us$i = $172;
        } else {
         break;
        }
       }
       $174 = ($158|0)>(255);
       if ($174) {
        $175 = HEAP32[$0>>2]|0;
        $176 = ((($175)) + 20|0);
        HEAP32[$176>>2] = 57;
        $177 = ((($175)) + 24|0);
        HEAP32[$177>>2] = 256;
        $178 = HEAP32[$0>>2]|0;
        $179 = HEAP32[$178>>2]|0;
        FUNCTION_TABLE_vi[$179 & 255]($0);
        label = 59;
       } else {
        label = 59;
       }
      } else {
       label = 59;
      }
     } while(0);
     if ((label|0) == 59) {
      label = 0;
      $180 = $143&255;
      $181 = (($153) + ($158)|0);
      HEAP8[$181>>0] = $180;
      $182 = $144&255;
      $183 = (($155) + ($158)|0);
      HEAP8[$183>>0] = $182;
      $184 = $145&255;
      $185 = (($157) + ($158)|0);
      HEAP8[$185>>0] = $184;
      $186 = HEAP32[$8>>2]|0;
      $187 = (($186) + 1)|0;
      HEAP32[$8>>2] = $187;
     }
     $188 = (($$192$us$i) + 1)|0;
     $exitcond101$i = ($188|0)==($130|0);
     if ($exitcond101$i) {
      break;
     } else {
      $$192$us$i = $188;
     }
    }
    $189 = (($$18095$us$i) + 1)|0;
    $exitcond102$i = ($189|0)==($131|0);
    if ($exitcond102$i) {
     break;
    } else {
     $$18095$us$i = $189;
    }
   }
   return;
   break;
  }
  default: {
   $231 = HEAP32[$0>>2]|0;
   $232 = ((($231)) + 20|0);
   HEAP32[$232>>2] = 1040;
   $233 = HEAP32[$231>>2]|0;
   FUNCTION_TABLE_vi[$233 & 255]($0);
   return;
  }
  }
  break;
 }
 default: {
  $234 = HEAP32[$0>>2]|0;
  $235 = ((($234)) + 20|0);
  HEAP32[$235>>2] = 1040;
  $236 = HEAP32[$234>>2]|0;
  FUNCTION_TABLE_vi[$236 & 255]($0);
  return;
 }
 }
}
function _read_pbm_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i31 = 0, $$off = 0, $$off29 = 0, $$off35 = 0, $$pre$phi41Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $2 = (_getc($1)|0);
  $3 = ($2|0)==(35);
  L3: do {
   if ($3) {
    while(1) {
     $4 = (_getc($1)|0);
     switch ($4|0) {
     case 10: case -1:  {
      $$0$i = $4;
      break L3;
      break;
     }
     default: {
     }
     }
    }
   } else {
    $$0$i = $2;
   }
  } while(0);
  switch ($$0$i|0) {
  case 9: case 10: case 13: case 32:  {
   break;
  }
  case -1:  {
   label = 5;
   break L1;
   break;
  }
  default: {
   label = 6;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 1040;
  $7 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$7 & 255]($0);
  $$off35 = -49;$$pre$phi41Z2D = $0;$$pre$phiZ2D = $0;
  label = 8;
 }
 else if ((label|0) == 6) {
  $$off = (($$0$i) + -48)|0;
  $8 = ($$off>>>0)>(9);
  if ($8) {
   $$off35 = $$off;$$pre$phi41Z2D = $0;$$pre$phiZ2D = $0;
   label = 8;
  } else {
   $$0 = $$off;
  }
 }
 if ((label|0) == 8) {
  $9 = HEAP32[$$pre$phiZ2D>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 1040;
  $11 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($$pre$phi41Z2D);
  $$0 = $$off35;
 }
 while(1) {
  $12 = (_getc($1)|0);
  $13 = ($12|0)==(35);
  L15: do {
   if ($13) {
    while(1) {
     $14 = (_getc($1)|0);
     switch ($14|0) {
     case 10: case -1:  {
      $$0$i31 = $14;
      break L15;
      break;
     }
     default: {
     }
     }
    }
   } else {
    $$0$i31 = $12;
   }
  } while(0);
  $$off29 = (($$0$i31) + -48)|0;
  $15 = ($$off29>>>0)<(10);
  if (!($15)) {
   break;
  }
  $16 = ($$0*10)|0;
  $17 = (($$off29) + ($16))|0;
  $$0 = $17;
 }
 return ($$0|0);
}
function _jinit_write_gif($0) {
 $0 = $0|0;
 var $$off = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,320)|0);
 $5 = ((($4)) + 28|0);
 HEAP32[$5>>2] = $0;
 HEAP32[$4>>2] = 8;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 9;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = 10;
 $8 = ((($4)) + 12|0);
 HEAP32[$8>>2] = 11;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $$off = (($10) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $14 = $10;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($11)) + 20|0);
  HEAP32[$12>>2] = 1015;
  $13 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$13 & 255]($0);
  $$pr = HEAP32[$9>>2]|0;
  $14 = $$pr;
 }
 $15 = ($14|0)==(1);
 if ($15) {
  $16 = ((($0)) + 212|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(8);
  if ($18) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 84|0);
  HEAP32[$19>>2] = 1;
  $20 = ((($0)) + 96|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>(256);
  if ($22) {
   HEAP32[$20>>2] = 256;
  }
 }
 _jpeg_calc_output_dimensions($0);
 $23 = ((($0)) + 124|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1);
 if (!($25)) {
  $26 = HEAP32[$0>>2]|0;
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = 1013;
  $28 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vi[$28 & 255]($0);
 }
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 112|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_iiiii[$31 & 127]($0,1,$33,1)|0);
 $35 = ((($4)) + 20|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($4)) + 24|0);
 HEAP32[$36>>2] = 1;
 return ($4|0);
}
function _start_output_gif($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _emit_header($1,256,0);
  return;
 } else {
  $5 = ((($0)) + 132|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 136|0);
  $8 = HEAP32[$7>>2]|0;
  _emit_header($1,$6,$8);
  return;
 }
}
function _put_pixel_rows($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01113 = 0, $$014 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i7$i = 0, $$pre16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $storemerge$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 44|0);
 $10 = ((($1)) + 40|0);
 $11 = ((($1)) + 32|0);
 $12 = ((($1)) + 60|0);
 $13 = ((($1)) + 64|0);
 $14 = ((($1)) + 16|0);
 $15 = ((($1)) + 28|0);
 $16 = ((($1)) + 56|0);
 $17 = ((($1)) + 36|0);
 $18 = ((($1)) + 48|0);
 $$pre = HEAP32[$9>>2]|0;
 $$pre16 = HEAP32[$10>>2]|0;
 $$01113 = $8;$$014 = $4;$23 = $$pre;$25 = $$pre16;
 while(1) {
  $19 = ((($$01113)) + 1|0);
  $20 = HEAP8[$$01113>>0]|0;
  $21 = $20&255;
  $22 = $21 << $23;
  $24 = $25 | $22;
  HEAP32[$10>>2] = $24;
  $26 = HEAP32[$11>>2]|0;
  $27 = (($26) + ($23))|0;
  HEAP32[$9>>2] = $27;
  $28 = ($27|0)>(7);
  if ($28) {
   $$pre$i$i = HEAP32[$12>>2]|0;
   $30 = $24;$32 = $$pre$i$i;
   while(1) {
    $29 = $30&255;
    $31 = (($32) + 1)|0;
    HEAP32[$12>>2] = $31;
    $33 = (((($1)) + 64|0) + ($31)|0);
    HEAP8[$33>>0] = $29;
    $34 = HEAP32[$12>>2]|0;
    $35 = ($34|0)>(254);
    if ($35) {
     $36 = (($34) + 1)|0;
     HEAP32[$12>>2] = $36;
     $37 = $34&255;
     HEAP8[$13>>0] = $37;
     $38 = HEAP32[$14>>2]|0;
     $39 = (_fwrite($13,1,$36,$38)|0);
     $40 = HEAP32[$12>>2]|0;
     $41 = ($39|0)==($40|0);
     if (!($41)) {
      $42 = HEAP32[$15>>2]|0;
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($43)) + 20|0);
      HEAP32[$44>>2] = 37;
      $45 = HEAP32[$43>>2]|0;
      FUNCTION_TABLE_vi[$45 & 255]($42);
     }
     HEAP32[$12>>2] = 0;
     $89 = 0;
    } else {
     $89 = $34;
    }
    $46 = HEAP32[$10>>2]|0;
    $47 = $46 >> 8;
    HEAP32[$10>>2] = $47;
    $48 = HEAP32[$9>>2]|0;
    $49 = (($48) + -8)|0;
    HEAP32[$9>>2] = $49;
    $50 = ($48|0)>(15);
    if ($50) {
     $30 = $47;$32 = $89;
    } else {
     $57 = $49;$59 = $47;
     break;
    }
   }
  } else {
   $57 = $27;$59 = $24;
  }
  $51 = HEAP32[$16>>2]|0;
  $52 = HEAP32[$17>>2]|0;
  $53 = ($51|0)<($52|0);
  if ($53) {
   $54 = (($51) + 1)|0;
   $90 = $59;$91 = $57;$storemerge$i = $54;
  } else {
   $55 = HEAP32[$18>>2]|0;
   $56 = $55 << $57;
   $58 = $56 | $59;
   HEAP32[$10>>2] = $58;
   $60 = HEAP32[$11>>2]|0;
   $61 = (($60) + ($57))|0;
   HEAP32[$9>>2] = $61;
   $62 = ($61|0)>(7);
   if ($62) {
    $$pre$i7$i = HEAP32[$12>>2]|0;
    $64 = $58;$66 = $$pre$i7$i;
    while(1) {
     $63 = $64&255;
     $65 = (($66) + 1)|0;
     HEAP32[$12>>2] = $65;
     $67 = (((($1)) + 64|0) + ($65)|0);
     HEAP8[$67>>0] = $63;
     $68 = HEAP32[$12>>2]|0;
     $69 = ($68|0)>(254);
     if ($69) {
      $70 = (($68) + 1)|0;
      HEAP32[$12>>2] = $70;
      $71 = $68&255;
      HEAP8[$13>>0] = $71;
      $72 = HEAP32[$14>>2]|0;
      $73 = (_fwrite($13,1,$70,$72)|0);
      $74 = HEAP32[$12>>2]|0;
      $75 = ($73|0)==($74|0);
      if (!($75)) {
       $76 = HEAP32[$15>>2]|0;
       $77 = HEAP32[$76>>2]|0;
       $78 = ((($77)) + 20|0);
       HEAP32[$78>>2] = 37;
       $79 = HEAP32[$77>>2]|0;
       FUNCTION_TABLE_vi[$79 & 255]($76);
      }
      HEAP32[$12>>2] = 0;
      $94 = 0;
     } else {
      $94 = $68;
     }
     $80 = HEAP32[$10>>2]|0;
     $81 = $80 >> 8;
     HEAP32[$10>>2] = $81;
     $82 = HEAP32[$9>>2]|0;
     $83 = (($82) + -8)|0;
     HEAP32[$9>>2] = $83;
     $84 = ($82|0)>(15);
     if ($84) {
      $64 = $81;$66 = $94;
     } else {
      break;
     }
    }
    $$pre$i = HEAP32[$18>>2]|0;
    $86 = $$pre$i;$92 = $81;$93 = $83;
   } else {
    $86 = $55;$92 = $58;$93 = $61;
   }
   $85 = (($86) + 2)|0;
   $90 = $92;$91 = $93;$storemerge$i = $85;
  }
  HEAP32[$16>>2] = $storemerge$i;
  $87 = (($$014) + -1)|0;
  $88 = ($87|0)==(0);
  if ($88) {
   break;
  } else {
   $$01113 = $19;$$014 = $87;$23 = $91;$25 = $90;
  }
 }
 return;
}
function _finish_output_gif($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phi$iZ2D = 0, $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3 << $5;
 $7 = ((($1)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 HEAP32[$7>>2] = $9;
 $10 = ((($1)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($5))|0;
 HEAP32[$4>>2] = $12;
 $13 = ($12|0)>(7);
 if ($13) {
  $14 = ((($1)) + 60|0);
  $15 = ((($1)) + 64|0);
  $16 = ((($1)) + 16|0);
  $17 = ((($1)) + 28|0);
  $$pre$i$i = HEAP32[$14>>2]|0;
  $19 = $9;$21 = $$pre$i$i;
  while(1) {
   $18 = $19&255;
   $20 = (($21) + 1)|0;
   HEAP32[$14>>2] = $20;
   $22 = (((($1)) + 64|0) + ($20)|0);
   HEAP8[$22>>0] = $18;
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)>(254);
   if ($24) {
    $25 = (($23) + 1)|0;
    HEAP32[$14>>2] = $25;
    $26 = $23&255;
    HEAP8[$15>>0] = $26;
    $27 = HEAP32[$16>>2]|0;
    $28 = (_fwrite($15,1,$25,$27)|0);
    $29 = HEAP32[$14>>2]|0;
    $30 = ($28|0)==($29|0);
    if (!($30)) {
     $31 = HEAP32[$17>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     HEAP32[$33>>2] = 37;
     $34 = HEAP32[$32>>2]|0;
     FUNCTION_TABLE_vi[$34 & 255]($31);
    }
    HEAP32[$14>>2] = 0;
    $88 = 0;
   } else {
    $88 = $23;
   }
   $35 = HEAP32[$7>>2]|0;
   $36 = $35 >> 8;
   HEAP32[$7>>2] = $36;
   $37 = HEAP32[$4>>2]|0;
   $38 = (($37) + -8)|0;
   HEAP32[$4>>2] = $38;
   $39 = ($37|0)>(15);
   if ($39) {
    $19 = $36;$21 = $88;
   } else {
    $40 = $38;$43 = $36;
    break;
   }
  }
 } else {
  $40 = $12;$43 = $9;
 }
 $41 = ($40|0)>(0);
 if ($41) {
  $42 = $43&255;
  $44 = ((($1)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$44>>2] = $46;
  $47 = (((($1)) + 64|0) + ($46)|0);
  HEAP8[$47>>0] = $42;
  $48 = HEAP32[$44>>2]|0;
  $49 = ($48|0)>(254);
  if ($49) {
   $50 = (($48) + 1)|0;
   HEAP32[$44>>2] = $50;
   $51 = $48&255;
   $52 = ((($1)) + 64|0);
   HEAP8[$52>>0] = $51;
   $53 = ((($1)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_fwrite($52,1,$50,$54)|0);
   $56 = HEAP32[$44>>2]|0;
   $57 = ($55|0)==($56|0);
   if ($57) {
    $$sink$i = $44;
    label = 16;
   } else {
    $58 = ((($1)) + 28|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 20|0);
    HEAP32[$61>>2] = 37;
    $62 = HEAP32[$60>>2]|0;
    FUNCTION_TABLE_vi[$62 & 255]($59);
    $$sink$i = $44;
    label = 16;
   }
  } else {
   $$pre$phi$iZ2D = $44;$63 = $48;
   label = 13;
  }
 } else {
  $$phi$trans$insert$i = ((($1)) + 60|0);
  $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $$pre$phi$iZ2D = $$phi$trans$insert$i;$63 = $$pre$i;
  label = 13;
 }
 if ((label|0) == 13) {
  $64 = ($63|0)>(0);
  if ($64) {
   $65 = (($63) + 1)|0;
   HEAP32[$$pre$phi$iZ2D>>2] = $65;
   $66 = $63&255;
   $67 = ((($1)) + 64|0);
   HEAP8[$67>>0] = $66;
   $68 = ((($1)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_fwrite($67,1,$65,$69)|0);
   $71 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $72 = ($70|0)==($71|0);
   if ($72) {
    $$sink$i = $$pre$phi$iZ2D;
    label = 16;
   } else {
    $73 = ((($1)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + 20|0);
    HEAP32[$76>>2] = 37;
    $77 = HEAP32[$75>>2]|0;
    FUNCTION_TABLE_vi[$77 & 255]($74);
    $$sink$i = $$pre$phi$iZ2D;
    label = 16;
   }
  }
 }
 if ((label|0) == 16) {
  HEAP32[$$sink$i>>2] = 0;
 }
 $78 = ((($1)) + 16|0);
 $79 = HEAP32[$78>>2]|0;
 (_putc(0,$79)|0);
 $80 = HEAP32[$78>>2]|0;
 (_putc(59,$80)|0);
 $81 = HEAP32[$78>>2]|0;
 (_fflush($81)|0);
 $82 = HEAP32[$78>>2]|0;
 $83 = (_ferror($82)|0);
 $84 = ($83|0)==(0);
 if ($84) {
  return;
 }
 $85 = HEAP32[$0>>2]|0;
 $86 = ((($85)) + 20|0);
 HEAP32[$86>>2] = 37;
 $87 = HEAP32[$85>>2]|0;
 FUNCTION_TABLE_vi[$87 & 255]($0);
 return;
}
function _calc_buffer_dimensions_gif($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _emit_header($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$079 = 0, $$079 = 0, $$081 = 0, $$081$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -8)|0;
 $8 = ($1|0)>(256);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 1041;
  $11 = ((($9)) + 24|0);
  HEAP32[$11>>2] = $1;
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 255]($12);
  $$079 = 1;
 } else {
  $$079 = 1;
 }
 while(1) {
  $15 = 1 << $$079;
  $16 = ($15|0)<($1|0);
  $17 = (($$079) + 1)|0;
  if ($16) {
   $$079 = $17;
  } else {
   break;
  }
 }
 $18 = ($$079|0)>(2);
 $$$079 = $18 ? $$079 : 2;
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 (_putc(71,$20)|0);
 $21 = HEAP32[$19>>2]|0;
 (_putc(73,$21)|0);
 $22 = HEAP32[$19>>2]|0;
 (_putc(70,$22)|0);
 $23 = HEAP32[$19>>2]|0;
 (_putc(56,$23)|0);
 $24 = HEAP32[$19>>2]|0;
 (_putc(55,$24)|0);
 $25 = HEAP32[$19>>2]|0;
 (_putc(97,$25)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = ((($26)) + 112|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 255;
 $30 = HEAP32[$19>>2]|0;
 (_putc($29,$30)|0);
 $31 = $28 >>> 8;
 $32 = $31 & 255;
 $33 = HEAP32[$19>>2]|0;
 (_putc($32,$33)|0);
 $34 = HEAP32[$3>>2]|0;
 $35 = ((($34)) + 116|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 255;
 $38 = HEAP32[$19>>2]|0;
 (_putc($37,$38)|0);
 $39 = $36 >>> 8;
 $40 = $39 & 255;
 $41 = HEAP32[$19>>2]|0;
 (_putc($40,$41)|0);
 $42 = (($$079) + -1)|0;
 $43 = $42 << 4;
 $44 = $42 | $43;
 $45 = $44 | 128;
 $46 = HEAP32[$19>>2]|0;
 (_putc($45,$46)|0);
 $47 = HEAP32[$19>>2]|0;
 (_putc(0,$47)|0);
 $48 = HEAP32[$19>>2]|0;
 (_putc(0,$48)|0);
 $49 = ($$079|0)==(31);
 L6: do {
  if (!($49)) {
   $50 = ($2|0)==(0|0);
   $51 = (($1) + -1)|0;
   $52 = (($51|0) / 2)&-1;
   $53 = ((($2)) + 4|0);
   $54 = ((($2)) + 8|0);
   if ($50) {
    $$081$us = 0;
    while(1) {
     $55 = ($$081$us|0)<($1|0);
     if ($55) {
      $59 = ($$081$us*255)|0;
      $60 = (($59) + ($52))|0;
      $61 = (($60|0) / ($51|0))&-1;
      $62 = HEAP32[$19>>2]|0;
      (_putc($61,$62)|0);
      $63 = HEAP32[$19>>2]|0;
      (_putc($61,$63)|0);
      $64 = HEAP32[$19>>2]|0;
      (_putc($61,$64)|0);
     } else {
      $56 = HEAP32[$19>>2]|0;
      (_putc(0,$56)|0);
      $57 = HEAP32[$19>>2]|0;
      (_putc(0,$57)|0);
      $58 = HEAP32[$19>>2]|0;
      (_putc(0,$58)|0);
     }
     $65 = (($$081$us) + 1)|0;
     $66 = ($65|0)<($15|0);
     if ($66) {
      $$081$us = $65;
     } else {
      break L6;
     }
    }
   } else {
    $$081 = 0;
   }
   while(1) {
    $67 = ($$081|0)<($1|0);
    do {
     if ($67) {
      $68 = HEAP32[$3>>2]|0;
      $69 = ((($68)) + 44|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(2);
      $72 = HEAP32[$2>>2]|0;
      $73 = (($72) + ($$081)|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = $74&255;
      $76 = $75 >>> $7;
      $77 = HEAP32[$19>>2]|0;
      if ($71) {
       (_putc($76,$77)|0);
       $78 = HEAP32[$53>>2]|0;
       $79 = (($78) + ($$081)|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = $80&255;
       $82 = $81 >>> $7;
       $83 = HEAP32[$19>>2]|0;
       (_putc($82,$83)|0);
       $84 = HEAP32[$54>>2]|0;
       $85 = (($84) + ($$081)|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = $86&255;
       $88 = $87 >>> $7;
       $89 = HEAP32[$19>>2]|0;
       (_putc($88,$89)|0);
       break;
      } else {
       (_putc($76,$77)|0);
       $90 = HEAP32[$19>>2]|0;
       (_putc($76,$90)|0);
       $91 = HEAP32[$19>>2]|0;
       (_putc($76,$91)|0);
       break;
      }
     } else {
      $92 = HEAP32[$19>>2]|0;
      (_putc(0,$92)|0);
      $93 = HEAP32[$19>>2]|0;
      (_putc(0,$93)|0);
      $94 = HEAP32[$19>>2]|0;
      (_putc(0,$94)|0);
     }
    } while(0);
    $95 = (($$081) + 1)|0;
    $96 = ($95|0)<($15|0);
    if ($96) {
     $$081 = $95;
    } else {
     break;
    }
   }
  }
 } while(0);
 $97 = HEAP32[$19>>2]|0;
 (_putc(44,$97)|0);
 $98 = HEAP32[$19>>2]|0;
 (_putc(0,$98)|0);
 $99 = HEAP32[$19>>2]|0;
 (_putc(0,$99)|0);
 $100 = HEAP32[$19>>2]|0;
 (_putc(0,$100)|0);
 $101 = HEAP32[$19>>2]|0;
 (_putc(0,$101)|0);
 $102 = HEAP32[$3>>2]|0;
 $103 = ((($102)) + 112|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 & 255;
 $106 = HEAP32[$19>>2]|0;
 (_putc($105,$106)|0);
 $107 = $104 >>> 8;
 $108 = $107 & 255;
 $109 = HEAP32[$19>>2]|0;
 (_putc($108,$109)|0);
 $110 = HEAP32[$3>>2]|0;
 $111 = ((($110)) + 116|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 255;
 $114 = HEAP32[$19>>2]|0;
 (_putc($113,$114)|0);
 $115 = $112 >>> 8;
 $116 = $115 & 255;
 $117 = HEAP32[$19>>2]|0;
 (_putc($116,$117)|0);
 $118 = HEAP32[$19>>2]|0;
 (_putc(0,$118)|0);
 $119 = HEAP32[$19>>2]|0;
 (_putc($$$079,$119)|0);
 $120 = (($$$079) + 1)|0;
 $121 = ((($0)) + 32|0);
 HEAP32[$121>>2] = $120;
 $122 = 2 << $$$079;
 $123 = (($122) + -1)|0;
 $124 = ((($0)) + 36|0);
 HEAP32[$124>>2] = $123;
 $125 = 1 << $$$079;
 $126 = ((($0)) + 48|0);
 HEAP32[$126>>2] = $125;
 $127 = (($125) + 1)|0;
 $128 = ((($0)) + 52|0);
 HEAP32[$128>>2] = $127;
 $129 = (($125) + 2)|0;
 $130 = ((($0)) + 56|0);
 HEAP32[$130>>2] = $129;
 $131 = ((($0)) + 60|0);
 HEAP32[$131>>2] = 0;
 $132 = ((($0)) + 40|0);
 $133 = ((($0)) + 44|0);
 HEAP32[$132>>2] = $125;
 HEAP32[$133>>2] = $120;
 $134 = ($$$079>>>0)>(6);
 if (!($134)) {
  return;
 }
 $135 = ((($0)) + 64|0);
 $137 = $125;$139 = 0;
 while(1) {
  $136 = $137&255;
  $138 = (($139) + 1)|0;
  HEAP32[$131>>2] = $138;
  $140 = (((($0)) + 64|0) + ($138)|0);
  HEAP8[$140>>0] = $136;
  $141 = HEAP32[$131>>2]|0;
  $142 = ($141|0)>(254);
  if ($142) {
   $143 = (($141) + 1)|0;
   HEAP32[$131>>2] = $143;
   $144 = $141&255;
   HEAP8[$135>>0] = $144;
   $145 = HEAP32[$19>>2]|0;
   $146 = (_fwrite($135,1,$143,$145)|0);
   $147 = HEAP32[$131>>2]|0;
   $148 = ($146|0)==($147|0);
   if (!($148)) {
    $149 = HEAP32[$3>>2]|0;
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($150)) + 20|0);
    HEAP32[$151>>2] = 37;
    $152 = HEAP32[$150>>2]|0;
    FUNCTION_TABLE_vi[$152 & 255]($149);
   }
   HEAP32[$131>>2] = 0;
   $158 = 0;
  } else {
   $158 = $141;
  }
  $153 = HEAP32[$132>>2]|0;
  $154 = $153 >> 8;
  HEAP32[$132>>2] = $154;
  $155 = HEAP32[$133>>2]|0;
  $156 = (($155) + -8)|0;
  HEAP32[$133>>2] = $156;
  $157 = ($155|0)>(15);
  if ($157) {
   $137 = $154;$139 = $158;
  } else {
   break;
  }
 }
 return;
}
function _jinit_write_ppm($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $put_demapped_rgb$sink = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,44)|0);
 HEAP32[$4>>2] = 12;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 13;
 $6 = ((($4)) + 12|0);
 HEAP32[$6>>2] = 14;
 _jpeg_calc_output_dimensions($0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vii[$7 & 255]($0,$4);
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($4)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$9 & 255]($0,1,$11)|0);
 $13 = ((($4)) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $35 = ((($4)) + 32|0);
  HEAP32[$35>>2] = $12;
  $36 = ((($4)) + 20|0);
  HEAP32[$36>>2] = $35;
  $37 = ((($4)) + 24|0);
  HEAP32[$37>>2] = 1;
  $38 = ((($4)) + 4|0);
  HEAP32[$38>>2] = 18;
  return ($4|0);
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 124|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($23, $21)|0;
 $25 = (FUNCTION_TABLE_iiiii[$19 & 127]($0,1,$24,1)|0);
 $26 = ((($4)) + 20|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($4)) + 24|0);
 HEAP32[$27>>2] = 1;
 $28 = HEAP32[$14>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = ((($4)) + 4|0);
  HEAP32[$30>>2] = 15;
  return ($4|0);
 } else {
  $31 = ((($0)) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(1);
  $34 = ((($4)) + 4|0);
  $put_demapped_rgb$sink = $33 ? 17 : 16;
  HEAP32[$34>>2] = $put_demapped_rgb$sink;
  return ($4|0);
 }
 return (0)|0;
}
function _start_output_ppm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 1:  {
  $4 = ((($1)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 112|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 255;
  (_fprintf($5,7181,$vararg_buffer)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $10 = ((($1)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 112|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $13;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $15;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 255;
  (_fprintf($11,7196,$vararg_buffer3)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 20|0);
  HEAP32[$17>>2] = 1026;
  $18 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$18 & 255]($0);
  STACKTOP = sp;return;
 }
 }
}
function _finish_output_ppm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 (_fflush($3)|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = (_ferror($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 20|0);
 HEAP32[$8>>2] = 37;
 $9 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$9 & 255]($0);
 return;
}
function _calc_buffer_dimensions_ppm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $3)|0;
 $7 = ((($1)) + 40|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($1)) + 36|0);
 HEAP32[$8>>2] = $6;
 return;
}
function _copy_pixel_rows($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01720 = 0, $$01819 = 0, $$021 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $20 = $4;
 } else {
  $8 = ((($1)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $$01720 = $10;$$01819 = $4;$$021 = $6;
  while(1) {
   $11 = ((($$01720)) + 1|0);
   $12 = HEAP8[$$01720>>0]|0;
   $13 = ((($$01819)) + 1|0);
   HEAP8[$$01819>>0] = $12;
   $14 = (($$021) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$01720 = $11;$$01819 = $13;$$021 = $14;
   }
  }
  $$pre = HEAP32[$3>>2]|0;
  $20 = $$pre;
 }
 $16 = ((($1)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 (_fwrite($20,1,$17,$19)|0);
 return;
}
function _put_demapped_gray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02124 = 0, $$02223 = 0, $$025 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $26 = $7;
 } else {
  $11 = ((($1)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $$02124 = $7;$$02223 = $13;$$025 = $9;
  while(1) {
   $14 = ((($$02223)) + 1|0);
   $15 = HEAP8[$$02223>>0]|0;
   $16 = $15&255;
   $17 = (($5) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ((($$02124)) + 1|0);
   HEAP8[$$02124>>0] = $18;
   $20 = (($$025) + -1)|0;
   $21 = ($20|0)==(0);
   if ($21) {
    break;
   } else {
    $$02124 = $19;$$02223 = $14;$$025 = $20;
   }
  }
  $$pre = HEAP32[$6>>2]|0;
  $26 = $$pre;
 }
 $22 = ((($1)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 (_fwrite($26,1,$23,$25)|0);
 return;
}
function _put_demapped_rgb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03639 = 0, $$03738 = 0, $$040 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 112|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $36 = $11;
  $32 = ((($1)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($1)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  (_fwrite($36,1,$33,$35)|0);
  return;
 }
 $15 = ((($1)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $$03639 = $11;$$03738 = $17;$$040 = $13;
 while(1) {
  $18 = ((($$03738)) + 1|0);
  $19 = HEAP8[$$03738>>0]|0;
  $20 = $19&255;
  $21 = (($5) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ((($$03639)) + 1|0);
  HEAP8[$$03639>>0] = $22;
  $24 = (($7) + ($20)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ((($$03639)) + 2|0);
  HEAP8[$23>>0] = $25;
  $27 = (($9) + ($20)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ((($$03639)) + 3|0);
  HEAP8[$26>>0] = $28;
  $30 = (($$040) + -1)|0;
  $31 = ($30|0)==(0);
  if ($31) {
   break;
  } else {
   $$03639 = $29;$$03738 = $18;$$040 = $30;
  }
 }
 $$pre = HEAP32[$10>>2]|0;
 $36 = $$pre;
 $32 = ((($1)) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 (_fwrite($36,1,$33,$35)|0);
 return;
}
function _put_pixel_rows_77($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 (_fwrite($4,1,$6,$8)|0);
 return;
}
function _jinit_write_bmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $put_pixel_rows$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($0,1,52)|0);
 HEAP32[$5>>2] = 19;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 20;
 $7 = ((($5)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 28|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 1:  {
  $11 = ((($5)) + 4|0);
  HEAP32[$11>>2] = 21;
  break;
 }
 case 2:  {
  $12 = ((($0)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  $15 = ((($5)) + 4|0);
  $put_pixel_rows$sink = $14 ? 21 : 22;
  HEAP32[$15>>2] = $put_pixel_rows$sink;
  break;
 }
 case 16:  {
  $16 = ((($5)) + 4|0);
  HEAP32[$16>>2] = 22;
  break;
 }
 default: {
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = 1005;
  $19 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$19 & 255]($0);
 }
 }
 _jpeg_calc_output_dimensions($0);
 $20 = HEAP32[$9>>2]|0;
 $21 = ($20|0)==(16);
 $22 = ((($0)) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 if ($21) {
  $24 = $23 << 1;
  $25 = ($23*3)|0;
  $$0 = $24;$30 = $25;
 } else {
  $26 = ((($0)) + 124|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($27, $23)|0;
  $$0 = $28;$30 = $28;
 }
 $29 = ((($5)) + 36|0);
 HEAP32[$29>>2] = $30;
 $31 = ((($5)) + 40|0);
 $33 = $30;
 while(1) {
  $32 = $33 & 3;
  $34 = ($32|0)==(0);
  $35 = (($33) + 1)|0;
  if ($34) {
   break;
  } else {
   $33 = $35;
  }
 }
 HEAP32[$31>>2] = $33;
 $36 = (($33) - ($30))|0;
 $37 = ((($5)) + 44|0);
 HEAP32[$37>>2] = $36;
 if ($21) {
  $$1 = $$0;
  while(1) {
   $38 = $$1 & 3;
   $39 = ($38|0)==(0);
   $40 = (($$1) + 1)|0;
   if ($39) {
    $$2 = $$1;
    break;
   } else {
    $$1 = $40;
   }
  }
 } else {
  $$2 = $33;
 }
 $41 = HEAP32[$2>>2]|0;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($0)) + 116|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (FUNCTION_TABLE_iiiiiii[$43 & 127]($0,1,0,$33,$45,1)|0);
 $47 = ((($5)) + 32|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($5)) + 48|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($0)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  $55 = HEAP32[$2>>2]|0;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (FUNCTION_TABLE_iiiii[$57 & 127]($0,1,$$2,1)|0);
  $59 = ((($5)) + 20|0);
  HEAP32[$59>>2] = $58;
  $60 = ((($5)) + 24|0);
  HEAP32[$60>>2] = 1;
  return ($5|0);
 }
 $52 = ((($50)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$52>>2] = $54;
 $55 = HEAP32[$2>>2]|0;
 $56 = ((($55)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_iiiii[$57 & 127]($0,1,$$2,1)|0);
 $59 = ((($5)) + 20|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($5)) + 24|0);
 HEAP32[$60>>2] = 1;
 return ($5|0);
}
function _start_output_bmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _finish_output_bmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$$i48 = 0, $$0$i = 0, $$0$i49 = 0, $$038$i = 0, $$04651 = 0, $$04651$us = 0, $$04753 = 0, $$04753$us = 0, $$052 = 0, $$052$us = 0, $$053$i = 0, $$39$i = 0, $$54$i = 0, $$idx$val$i = 0, $$idx$val$i50 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $74 = ((($0)) + 44|0);
  $75 = HEAP32[$74>>2]|0;
  switch ($75|0) {
  case 2:  {
   $76 = ((($0)) + 84|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0);
   $$$i48 = $78 ? 24 : 8;
   $$54$i = $78 ? 0 : 256;
   $$0$i49 = $$54$i;$$053$i = $$$i48;
   break;
  }
  case 16:  {
   $$0$i49 = 0;$$053$i = 24;
   break;
  }
  default: {
   $$0$i49 = 256;$$053$i = 8;
  }
  }
  $79 = $$0$i49 << 2;
  $80 = $79 | 54;
  $81 = ((($1)) + 40|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($0)) + 116|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = Math_imul($84, $82)|0;
  $86 = (($85) + ($80))|0;
  $87 = ((($3)) + 6|0);
  HEAP8[$87>>0]=0&255;HEAP8[$87+1>>0]=(0>>8)&255;HEAP8[$87+2>>0]=(0>>16)&255;HEAP8[$87+3>>0]=0>>24;
  $88 = ((($2)) + 2|0);
  dest=$88; stop=dest+38|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  HEAP8[$3>>0] = 66;
  $89 = ((($3)) + 1|0);
  HEAP8[$89>>0] = 77;
  $90 = $86&255;
  $91 = ((($3)) + 2|0);
  HEAP8[$91>>0] = $90;
  $92 = $86 >>> 8;
  $93 = $92&255;
  $94 = ((($3)) + 3|0);
  HEAP8[$94>>0] = $93;
  $95 = $86 >>> 16;
  $96 = $95&255;
  $97 = ((($3)) + 4|0);
  HEAP8[$97>>0] = $96;
  $98 = $86 >>> 24;
  $99 = $98&255;
  $100 = ((($3)) + 5|0);
  HEAP8[$100>>0] = $99;
  $101 = ((($3)) + 10|0);
  HEAP8[$101>>0] = 54;
  $102 = $$0$i49 >>> 6;
  $103 = $102&255;
  $104 = ((($3)) + 11|0);
  HEAP8[$104>>0] = $103;
  $105 = ((($3)) + 12|0);
  HEAP8[$105>>0] = 0;
  $106 = ((($3)) + 13|0);
  HEAP8[$106>>0] = 0;
  HEAP8[$2>>0] = 40;
  $107 = ((($2)) + 1|0);
  HEAP8[$107>>0] = 0;
  $108 = ((($0)) + 112|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $109&255;
  $111 = ((($2)) + 4|0);
  HEAP8[$111>>0] = $110;
  $112 = $109 >>> 8;
  $113 = $112&255;
  $114 = ((($2)) + 5|0);
  HEAP8[$114>>0] = $113;
  $115 = $109 >>> 16;
  $116 = $115&255;
  $117 = ((($2)) + 6|0);
  HEAP8[$117>>0] = $116;
  $118 = $109 >>> 24;
  $119 = $118&255;
  $120 = ((($2)) + 7|0);
  HEAP8[$120>>0] = $119;
  $121 = $84&255;
  $122 = ((($2)) + 8|0);
  HEAP8[$122>>0] = $121;
  $123 = $84 >>> 8;
  $124 = $123&255;
  $125 = ((($2)) + 9|0);
  HEAP8[$125>>0] = $124;
  $126 = $84 >>> 16;
  $127 = $126&255;
  $128 = ((($2)) + 10|0);
  HEAP8[$128>>0] = $127;
  $129 = $84 >>> 24;
  $130 = $129&255;
  $131 = ((($2)) + 11|0);
  HEAP8[$131>>0] = $130;
  $132 = ((($2)) + 12|0);
  HEAP8[$132>>0] = 1;
  $133 = ((($2)) + 13|0);
  HEAP8[$133>>0] = 0;
  $134 = ((($2)) + 14|0);
  HEAP8[$134>>0] = $$053$i;
  $135 = ((($2)) + 15|0);
  HEAP8[$135>>0] = 0;
  $136 = ((($0)) + 286|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = ($137<<24>>24)==(2);
  if ($138) {
   $139 = ((($0)) + 288|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = ($140*100)|0;
   $142 = $141&255;
   $143 = ((($2)) + 24|0);
   HEAP8[$143>>0] = $142;
   $144 = $140&65535;
   $145 = ($144*100)|0;
   $146 = $145 >>> 8;
   $147 = $146&255;
   $148 = ((($2)) + 25|0);
   HEAP8[$148>>0] = $147;
   $149 = $145 >>> 16;
   $150 = $149&255;
   $151 = ((($2)) + 26|0);
   HEAP8[$151>>0] = $150;
   $152 = ((($2)) + 27|0);
   HEAP8[$152>>0] = 0;
   $153 = ((($0)) + 290|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = ($154*100)|0;
   $156 = $155&255;
   $157 = ((($2)) + 28|0);
   HEAP8[$157>>0] = $156;
   $158 = $154&65535;
   $159 = ($158*100)|0;
   $160 = $159 >>> 8;
   $161 = $160&255;
   $162 = ((($2)) + 29|0);
   HEAP8[$162>>0] = $161;
   $163 = $159 >>> 16;
   $164 = $163&255;
   $165 = ((($2)) + 30|0);
   HEAP8[$165>>0] = $164;
   $166 = ((($2)) + 31|0);
   HEAP8[$166>>0] = 0;
  }
  $167 = ((($2)) + 32|0);
  HEAP8[$167>>0] = 0;
  $168 = $$0$i49 >>> 8;
  $169 = $168&255;
  $170 = ((($2)) + 33|0);
  HEAP8[$170>>0] = $169;
  $171 = (_fwrite($3,1,14,$6)|0);
  $172 = ($171|0)==(14);
  if (!($172)) {
   $173 = HEAP32[$0>>2]|0;
   $174 = ((($173)) + 20|0);
   HEAP32[$174>>2] = 37;
   $175 = HEAP32[$173>>2]|0;
   FUNCTION_TABLE_vi[$175 & 255]($0);
  }
  $176 = HEAP32[$5>>2]|0;
  $177 = (_fwrite($2,1,40,$176)|0);
  $178 = ($177|0)==(40);
  if (!($178)) {
   $179 = HEAP32[$0>>2]|0;
   $180 = ((($179)) + 20|0);
   HEAP32[$180>>2] = 37;
   $181 = HEAP32[$179>>2]|0;
   FUNCTION_TABLE_vi[$181 & 255]($0);
  }
  $182 = ($$0$i49|0)==(0);
  if (!($182)) {
   $$idx$val$i50 = HEAP32[$5>>2]|0;
   _write_colormap($0,$$idx$val$i50,$$0$i49,4);
  }
  $$pre$phiZ2D = $83;
 } else {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  switch ($13|0) {
  case 2:  {
   $14 = ((($0)) + 84|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   $$$i = $16 ? 24 : 8;
   $$39$i = $16 ? 0 : 256;
   $$0$i = $$39$i;$$038$i = $$$i;
   break;
  }
  case 16:  {
   $$0$i = 0;$$038$i = 24;
   break;
  }
  default: {
   $$0$i = 256;$$038$i = 8;
  }
  }
  $17 = ($$0$i*3)|0;
  $18 = $17 | 26;
  $19 = ((($1)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 116|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = Math_imul($22, $20)|0;
  $24 = (($23) + ($18))|0;
  $25 = ((($3)) + 6|0);
  HEAP8[$25>>0]=0&255;HEAP8[$25+1>>0]=(0>>8)&255;HEAP8[$25+2>>0]=(0>>16)&255;HEAP8[$25+3>>0]=0>>24;
  $26 = ((($4)) + 2|0);
  HEAP8[$26>>0]=0&255;HEAP8[$26+1>>0]=0>>8;
  HEAP8[$3>>0] = 66;
  $27 = ((($3)) + 1|0);
  HEAP8[$27>>0] = 77;
  $28 = $24&255;
  $29 = ((($3)) + 2|0);
  HEAP8[$29>>0] = $28;
  $30 = $24 >>> 8;
  $31 = $30&255;
  $32 = ((($3)) + 3|0);
  HEAP8[$32>>0] = $31;
  $33 = $24 >>> 16;
  $34 = $33&255;
  $35 = ((($3)) + 4|0);
  HEAP8[$35>>0] = $34;
  $36 = $24 >>> 24;
  $37 = $36&255;
  $38 = ((($3)) + 5|0);
  HEAP8[$38>>0] = $37;
  $39 = ((($3)) + 10|0);
  HEAP8[$39>>0] = 26;
  $40 = $17 >>> 8;
  $41 = $40&255;
  $42 = ((($3)) + 11|0);
  HEAP8[$42>>0] = $41;
  $43 = ((($3)) + 12|0);
  HEAP8[$43>>0] = 0;
  $44 = ((($3)) + 13|0);
  HEAP8[$44>>0] = 0;
  HEAP8[$4>>0] = 12;
  $45 = ((($4)) + 1|0);
  HEAP8[$45>>0] = 0;
  $46 = ((($0)) + 112|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47&255;
  $49 = ((($4)) + 4|0);
  HEAP8[$49>>0] = $48;
  $50 = $47 >>> 8;
  $51 = $50&255;
  $52 = ((($4)) + 5|0);
  HEAP8[$52>>0] = $51;
  $53 = $22&255;
  $54 = ((($4)) + 6|0);
  HEAP8[$54>>0] = $53;
  $55 = $22 >>> 8;
  $56 = $55&255;
  $57 = ((($4)) + 7|0);
  HEAP8[$57>>0] = $56;
  $58 = ((($4)) + 8|0);
  HEAP8[$58>>0] = 1;
  $59 = ((($4)) + 9|0);
  HEAP8[$59>>0] = 0;
  $60 = ((($4)) + 10|0);
  HEAP8[$60>>0] = $$038$i;
  $61 = ((($4)) + 11|0);
  HEAP8[$61>>0] = 0;
  $62 = (_fwrite($3,1,14,$6)|0);
  $63 = ($62|0)==(14);
  if (!($63)) {
   $64 = HEAP32[$0>>2]|0;
   $65 = ((($64)) + 20|0);
   HEAP32[$65>>2] = 37;
   $66 = HEAP32[$64>>2]|0;
   FUNCTION_TABLE_vi[$66 & 255]($0);
  }
  $67 = HEAP32[$5>>2]|0;
  $68 = (_fwrite($4,1,12,$67)|0);
  $69 = ($68|0)==(12);
  if (!($69)) {
   $70 = HEAP32[$0>>2]|0;
   $71 = ((($70)) + 20|0);
   HEAP32[$71>>2] = 37;
   $72 = HEAP32[$70>>2]|0;
   FUNCTION_TABLE_vi[$72 & 255]($0);
  }
  $73 = ($$0$i|0)==(0);
  if (!($73)) {
   $$idx$val$i = HEAP32[$5>>2]|0;
   _write_colormap($0,$$idx$val$i,$$0$i,3);
  }
  $$pre$phiZ2D = $21;
 }
 $183 = HEAP32[$$pre$phiZ2D>>2]|0;
 $184 = ($183|0)==(0);
 $185 = ($8|0)!=(0|0);
 L34: do {
  if (!($184)) {
   $186 = ((($8)) + 4|0);
   $187 = ((($8)) + 8|0);
   $188 = ((($0)) + 4|0);
   $189 = ((($1)) + 32|0);
   $190 = ((($1)) + 40|0);
   if ($185) {
    $$04753$us = $183;$192 = $183;
   } else {
    $$04753 = $183;
    while(1) {
     $211 = HEAP32[$188>>2]|0;
     $212 = ((($211)) + 28|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = HEAP32[$189>>2]|0;
     $209 = (($$04753) + -1)|0;
     $215 = (FUNCTION_TABLE_iiiiii[$213 & 127]($0,$214,$209,1,0)|0);
     $216 = HEAP32[$190>>2]|0;
     $217 = ($216|0)==(0);
     if (!($217)) {
      $218 = HEAP32[$215>>2]|0;
      $$04651 = $216;$$052 = $218;
      while(1) {
       $219 = HEAP8[$$052>>0]|0;
       $220 = $219&255;
       (_putc($220,$6)|0);
       $221 = ((($$052)) + 1|0);
       $222 = (($$04651) + -1)|0;
       $223 = ($222|0)==(0);
       if ($223) {
        break;
       } else {
        $$04651 = $222;$$052 = $221;
       }
      }
     }
     $210 = ($209|0)==(0);
     if ($210) {
      break L34;
     } else {
      $$04753 = $209;
     }
    }
   }
   while(1) {
    $191 = (($192) - ($$04753$us))|0;
    HEAP32[$186>>2] = $191;
    HEAP32[$187>>2] = $192;
    $193 = HEAP32[$8>>2]|0;
    FUNCTION_TABLE_vi[$193 & 255]($0);
    $194 = HEAP32[$188>>2]|0;
    $195 = ((($194)) + 28|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = HEAP32[$189>>2]|0;
    $198 = (($$04753$us) + -1)|0;
    $199 = (FUNCTION_TABLE_iiiiii[$196 & 127]($0,$197,$198,1,0)|0);
    $200 = HEAP32[$190>>2]|0;
    $201 = ($200|0)==(0);
    if (!($201)) {
     $202 = HEAP32[$199>>2]|0;
     $$04651$us = $200;$$052$us = $202;
     while(1) {
      $203 = HEAP8[$$052$us>>0]|0;
      $204 = $203&255;
      (_putc($204,$6)|0);
      $205 = ((($$052$us)) + 1|0);
      $206 = (($$04651$us) + -1)|0;
      $207 = ($206|0)==(0);
      if ($207) {
       break;
      } else {
       $$04651$us = $206;$$052$us = $205;
      }
     }
    }
    $208 = ($198|0)==(0);
    if ($208) {
     break L34;
    }
    $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
    $$04753$us = $198;$192 = $$pre;
   }
  }
 } while(0);
 if ($185) {
  $224 = ((($8)) + 20|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + 1)|0;
  HEAP32[$224>>2] = $226;
 }
 (_fflush($6)|0);
 $227 = (_ferror($6)|0);
 $228 = ($227|0)==(0);
 if ($228) {
  STACKTOP = sp;return;
 }
 $229 = HEAP32[$0>>2]|0;
 $230 = ((($229)) + 20|0);
 HEAP32[$230>>2] = 37;
 $231 = HEAP32[$229>>2]|0;
 FUNCTION_TABLE_vi[$231 & 255]($0);
 STACKTOP = sp;return;
}
function _put_gray_rows($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02633 = 0, $$027$lcssa = 0, $$02732 = 0, $$02831 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiiiii[$6 & 127]($0,$8,$10,1,1)|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$9>>2] = $13;
 $14 = HEAP32[$11>>2]|0;
 $15 = ((($0)) + 112|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$027$lcssa = $14;
 } else {
  $18 = ((($1)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $$02633 = $16;$$02732 = $14;$$02831 = $20;
  while(1) {
   $21 = ((($$02831)) + 1|0);
   $22 = HEAP8[$$02831>>0]|0;
   $23 = ((($$02732)) + 1|0);
   HEAP8[$$02732>>0] = $22;
   $24 = (($$02633) + -1)|0;
   $25 = ($24|0)==(0);
   if ($25) {
    break;
   } else {
    $$02633 = $24;$$02732 = $23;$$02831 = $21;
   }
  }
  $scevgep = (($14) + ($16)|0);
  $$027$lcssa = $scevgep;
 }
 $26 = ((($1)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(0);
 if (!($28)) {
  return;
 }
 $29 = $27 ^ -1;
 $30 = ($29|0)>(-2);
 $smax = $30 ? $29 : -2;
 $31 = (($27) + ($smax))|0;
 $32 = (($31) + 2)|0;
 _memset(($$027$lcssa|0),0,($32|0))|0;
 return;
}
function _put_pixel_rows_146($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05772 = 0, $$05966 = 0, $$06065 = 0, $$067 = 0, $$16170 = 0, $$171 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep78 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiiiii[$6 & 127]($0,$8,$10,1,1)|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$9>>2] = $13;
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$11>>2]|0;
 $18 = ((($0)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(16);
 $21 = ((($0)) + 112|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($20) {
  if ($23) {
   $$2 = $17;
  } else {
   $24 = ($22*3)|0;
   $$05966 = $22;$$06065 = $17;$$067 = $16;
   while(1) {
    $25 = HEAP16[$$067>>1]|0;
    $26 = $25&65535;
    $27 = $26 << 3;
    $28 = $27&255;
    HEAP8[$$06065>>0] = $28;
    $29 = HEAP16[$$067>>1]|0;
    $30 = $29&65535;
    $31 = $30 >>> 3;
    $32 = $31 & 252;
    $33 = $32&255;
    $34 = ((($$06065)) + 1|0);
    HEAP8[$34>>0] = $33;
    $35 = HEAP16[$$067>>1]|0;
    $36 = $35&65535;
    $37 = $36 >>> 8;
    $38 = $37 & 248;
    $39 = $38&255;
    $40 = ((($$06065)) + 2|0);
    HEAP8[$40>>0] = $39;
    $41 = ((($$06065)) + 3|0);
    $42 = ((($$067)) + 2|0);
    $43 = (($$05966) + -1)|0;
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    } else {
     $$05966 = $43;$$06065 = $41;$$067 = $42;
    }
   }
   $scevgep = (($17) + ($24)|0);
   $$2 = $scevgep;
  }
 } else {
  if ($23) {
   $$2 = $17;
  } else {
   $45 = ($22*3)|0;
   $$05772 = $16;$$16170 = $17;$$171 = $22;
   while(1) {
    $46 = ((($$05772)) + 1|0);
    $47 = HEAP8[$$05772>>0]|0;
    $48 = ((($$16170)) + 2|0);
    HEAP8[$48>>0] = $47;
    $49 = ((($$05772)) + 2|0);
    $50 = HEAP8[$46>>0]|0;
    $51 = ((($$16170)) + 1|0);
    HEAP8[$51>>0] = $50;
    $52 = ((($$05772)) + 3|0);
    $53 = HEAP8[$49>>0]|0;
    HEAP8[$$16170>>0] = $53;
    $54 = ((($$16170)) + 3|0);
    $55 = (($$171) + -1)|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break;
    } else {
     $$05772 = $52;$$16170 = $54;$$171 = $55;
    }
   }
   $scevgep78 = (($17) + ($45)|0);
   $$2 = $scevgep78;
  }
 }
 $57 = ((($1)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)>(0);
 if (!($59)) {
  return;
 }
 $60 = $58 ^ -1;
 $61 = ($60|0)>(-2);
 $smax = $61 ? $60 : -2;
 $62 = (($58) + ($smax))|0;
 $63 = (($62) + 2)|0;
 _memset(($$2|0),0,($63|0))|0;
 return;
}
function _write_colormap($0,$$0$0$4$val,$1,$2) {
 $0 = $0|0;
 $$0$0$4$val = $$0$0$4$val|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$08 = 0, $$08$us = 0, $$110 = 0, $$110$us = 0, $$27 = 0, $$27$us = 0, $$3 = 0, $$46 = 0, $$46$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $exitcond26 = 0, $exitcond27 = 0, $exitcond28 = 0, $exitcond29 = 0, $exitcond30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==(0|0);
 do {
  if ($7) {
   $8 = ($2|0)==(4);
   if ($8) {
    $$27$us = 0;
    while(1) {
     (_putc($$27$us,$$0$0$4$val)|0);
     (_putc($$27$us,$$0$0$4$val)|0);
     (_putc($$27$us,$$0$0$4$val)|0);
     (_putc(0,$$0$0$4$val)|0);
     $9 = (($$27$us) + 1)|0;
     $exitcond25 = ($9|0)==(256);
     if ($exitcond25) {
      $$3 = 256;
      break;
     } else {
      $$27$us = $9;
     }
    }
   } else {
    $$27 = 0;
    while(1) {
     (_putc($$27,$$0$0$4$val)|0);
     (_putc($$27,$$0$0$4$val)|0);
     (_putc($$27,$$0$0$4$val)|0);
     $70 = (($$27) + 1)|0;
     $exitcond26 = ($70|0)==(256);
     if ($exitcond26) {
      $$3 = 256;
      break;
     } else {
      $$27 = $70;
     }
    }
   }
  } else {
   $10 = ((($0)) + 120|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(3);
   $13 = ($6|0)>(0);
   if ($12) {
    if (!($13)) {
     $$3 = 0;
     break;
    }
    $28 = ((($4)) + 8|0);
    $29 = ((($4)) + 4|0);
    $30 = ($2|0)==(4);
    if ($30) {
     $$08$us = 0;
     while(1) {
      $31 = HEAP32[$28>>2]|0;
      $32 = (($31) + ($$08$us)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = $33&255;
      (_putc($34,$$0$0$4$val)|0);
      $35 = HEAP32[$29>>2]|0;
      $36 = (($35) + ($$08$us)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      (_putc($38,$$0$0$4$val)|0);
      $39 = HEAP32[$4>>2]|0;
      $40 = (($39) + ($$08$us)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      (_putc($42,$$0$0$4$val)|0);
      (_putc(0,$$0$0$4$val)|0);
      $43 = (($$08$us) + 1)|0;
      $exitcond27 = ($43|0)==($6|0);
      if ($exitcond27) {
       $$3 = $6;
       break;
      } else {
       $$08$us = $43;
      }
     }
    } else {
     $$08 = 0;
     while(1) {
      $44 = HEAP32[$28>>2]|0;
      $45 = (($44) + ($$08)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46&255;
      (_putc($47,$$0$0$4$val)|0);
      $48 = HEAP32[$29>>2]|0;
      $49 = (($48) + ($$08)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      (_putc($51,$$0$0$4$val)|0);
      $52 = HEAP32[$4>>2]|0;
      $53 = (($52) + ($$08)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      (_putc($55,$$0$0$4$val)|0);
      $56 = (($$08) + 1)|0;
      $exitcond28 = ($56|0)==($6|0);
      if ($exitcond28) {
       $$3 = $6;
       break;
      } else {
       $$08 = $56;
      }
     }
    }
   } else {
    if (!($13)) {
     $$3 = 0;
     break;
    }
    $14 = ($2|0)==(4);
    if ($14) {
     $$110$us = 0;
     while(1) {
      $15 = HEAP32[$4>>2]|0;
      $16 = (($15) + ($$110$us)|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = $17&255;
      (_putc($18,$$0$0$4$val)|0);
      $19 = HEAP32[$4>>2]|0;
      $20 = (($19) + ($$110$us)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = $21&255;
      (_putc($22,$$0$0$4$val)|0);
      $23 = HEAP32[$4>>2]|0;
      $24 = (($23) + ($$110$us)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $25&255;
      (_putc($26,$$0$0$4$val)|0);
      (_putc(0,$$0$0$4$val)|0);
      $27 = (($$110$us) + 1)|0;
      $exitcond29 = ($27|0)==($6|0);
      if ($exitcond29) {
       $$3 = $6;
       break;
      } else {
       $$110$us = $27;
      }
     }
    } else {
     $$110 = 0;
     while(1) {
      $57 = HEAP32[$4>>2]|0;
      $58 = (($57) + ($$110)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      (_putc($60,$$0$0$4$val)|0);
      $61 = HEAP32[$4>>2]|0;
      $62 = (($61) + ($$110)|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      (_putc($64,$$0$0$4$val)|0);
      $65 = HEAP32[$4>>2]|0;
      $66 = (($65) + ($$110)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      (_putc($68,$$0$0$4$val)|0);
      $69 = (($$110) + 1)|0;
      $exitcond30 = ($69|0)==($6|0);
      if ($exitcond30) {
       $$3 = $6;
       break;
      } else {
       $$110 = $69;
      }
     }
    }
   }
  }
 } while(0);
 $71 = ($$3|0)>($1|0);
 if ($71) {
  $72 = HEAP32[$0>>2]|0;
  $73 = ((($72)) + 20|0);
  HEAP32[$73>>2] = 1041;
  $74 = ((($72)) + 24|0);
  HEAP32[$74>>2] = $$3;
  $75 = HEAP32[$0>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vi[$76 & 255]($0);
 }
 $77 = ($$3|0)<($1|0);
 if (!($77)) {
  return;
 }
 $78 = ($2|0)==(4);
 if ($78) {
  $$46$us = $$3;
  while(1) {
   (_putc(0,$$0$0$4$val)|0);
   (_putc(0,$$0$0$4$val)|0);
   (_putc(0,$$0$0$4$val)|0);
   (_putc(0,$$0$0$4$val)|0);
   $79 = (($$46$us) + 1)|0;
   $exitcond = ($79|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$46$us = $79;
   }
  }
  return;
 } else {
  $$46 = $$3;
  while(1) {
   (_putc(0,$$0$0$4$val)|0);
   (_putc(0,$$0$0$4$val)|0);
   (_putc(0,$$0$0$4$val)|0);
   $80 = (($$46) + 1)|0;
   $exitcond24 = ($80|0)==($1|0);
   if ($exitcond24) {
    break;
   } else {
    $$46 = $80;
   }
  }
  return;
 }
}
function _jinit_write_targa($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,36)|0);
 HEAP32[$4>>2] = 23;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 24;
 $6 = ((($4)) + 12|0);
 HEAP32[$6>>2] = 25;
 _jpeg_calc_output_dimensions($0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vii[$7 & 255]($0,$4);
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($4)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$9 & 255]($0,1,$11)|0);
 $13 = ((($4)) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = (FUNCTION_TABLE_iiiii[$16 & 127]($0,1,$17,1)|0);
 $19 = ((($4)) + 20|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($4)) + 24|0);
 HEAP32[$20>>2] = 1;
 return ($4|0);
}
function _start_output_tga($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$048 = 0, $$pre = 0, $$pre$pre = 0, $$sink$sink$i43 = 0, $$sink2$i = 0, $$sink2$sink$i42 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $put_gray_rows$sink = 0, $put_pixel_rows$sink = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 1:  {
  dest=$2; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $5 = ((($0)) + 112|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = ((($2)) + 12|0);
  HEAP8[$8>>0] = $7;
  $9 = $6 >>> 8;
  $10 = $9&255;
  $11 = ((($2)) + 13|0);
  HEAP8[$11>>0] = $10;
  $12 = ((($0)) + 116|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13&255;
  $15 = ((($2)) + 14|0);
  HEAP8[$15>>0] = $14;
  $16 = $13 >>> 8;
  $17 = $16&255;
  $18 = ((($2)) + 15|0);
  HEAP8[$18>>0] = $17;
  $19 = ((($2)) + 17|0);
  HEAP8[$19>>0] = 32;
  $20 = ((($2)) + 2|0);
  HEAP8[$20>>0] = 3;
  $21 = ((($2)) + 16|0);
  HEAP8[$21>>0] = 8;
  $22 = ((($1)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_fwrite($2,1,18,$23)|0);
  $25 = ($24|0)==(18);
  if (!($25)) {
   $26 = HEAP32[$0>>2]|0;
   $27 = ((($26)) + 20|0);
   HEAP32[$27>>2] = 37;
   $28 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vi[$28 & 255]($0);
  }
  $29 = ((($0)) + 84|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0);
  $32 = ((($1)) + 4|0);
  $put_gray_rows$sink = $31 ? 27 : 26;
  HEAP32[$32>>2] = $put_gray_rows$sink;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $33 = ((($0)) + 84|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   dest=$2; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $102 = ((($0)) + 112|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103&255;
   $105 = ((($2)) + 12|0);
   HEAP8[$105>>0] = $104;
   $106 = $103 >>> 8;
   $107 = $106&255;
   $108 = ((($2)) + 13|0);
   HEAP8[$108>>0] = $107;
   $109 = ((($0)) + 116|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110&255;
   $112 = ((($2)) + 14|0);
   HEAP8[$112>>0] = $111;
   $113 = $110 >>> 8;
   $114 = $113&255;
   $115 = ((($2)) + 15|0);
   HEAP8[$115>>0] = $114;
   $116 = ((($2)) + 17|0);
   HEAP8[$116>>0] = 32;
   $117 = ((($2)) + 2|0);
   HEAP8[$117>>0] = 2;
   $118 = ((($2)) + 16|0);
   HEAP8[$118>>0] = 24;
   $119 = ((($1)) + 16|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (_fwrite($2,1,18,$120)|0);
   $122 = ($121|0)==(18);
   if (!($122)) {
    $123 = HEAP32[$0>>2]|0;
    $124 = ((($123)) + 20|0);
    HEAP32[$124>>2] = 37;
    $125 = HEAP32[$123>>2]|0;
    FUNCTION_TABLE_vi[$125 & 255]($0);
   }
   $put_pixel_rows$sink = 28;
  } else {
   $36 = ((($0)) + 132|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)>(256);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 20|0);
    HEAP32[$40>>2] = 1041;
    $41 = ((($39)) + 24|0);
    HEAP32[$41>>2] = $37;
    $42 = HEAP32[$0>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_vi[$43 & 255]($0);
    dest=$2; stop=dest+18|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$pre$pre = HEAP32[$3>>2]|0;
    $$pre = $$pre$pre;$130 = $2;
    label = 9;
   } else {
    dest=$2; stop=dest+18|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $44 = ($37|0)>(0);
    if ($44) {
     $$pre = 2;$130 = $2;
     label = 9;
    } else {
     $67 = 2;$70 = 0;$75 = $2;
    }
   }
   if ((label|0) == 9) {
    $45 = ((($2)) + 1|0);
    HEAP8[$45>>0] = 1;
    $46 = $37&255;
    $47 = ((($2)) + 5|0);
    HEAP8[$47>>0] = $46;
    $48 = $37 >>> 8;
    $49 = $48&255;
    $50 = ((($2)) + 6|0);
    HEAP8[$50>>0] = $49;
    $51 = ((($2)) + 7|0);
    HEAP8[$51>>0] = 24;
    $67 = $$pre;$70 = 1;$75 = $130;
   }
   $52 = ((($0)) + 112|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53&255;
   $55 = ((($2)) + 12|0);
   HEAP8[$55>>0] = $54;
   $56 = $53 >>> 8;
   $57 = $56&255;
   $58 = ((($2)) + 13|0);
   HEAP8[$58>>0] = $57;
   $59 = ((($0)) + 116|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60&255;
   $62 = ((($2)) + 14|0);
   HEAP8[$62>>0] = $61;
   $63 = $60 >>> 8;
   $64 = $63&255;
   $65 = ((($2)) + 15|0);
   HEAP8[$65>>0] = $64;
   $66 = ((($2)) + 17|0);
   HEAP8[$66>>0] = 32;
   $68 = ($67|0)==(1);
   $69 = ((($2)) + 2|0);
   $$sink2$i = $70 ? 1 : 2;
   $$sink2$sink$i42 = $68 ? 3 : $$sink2$i;
   $71 = $70 | $68;
   $$sink$sink$i43 = $71 ? 8 : 24;
   HEAP8[$69>>0] = $$sink2$sink$i42;
   $72 = ((($2)) + 16|0);
   HEAP8[$72>>0] = $$sink$sink$i43;
   $73 = ((($1)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $76 = (_fwrite($75,1,18,$74)|0);
   $77 = ($76|0)==(18);
   if (!($77)) {
    $78 = HEAP32[$0>>2]|0;
    $79 = ((($78)) + 20|0);
    HEAP32[$79>>2] = 37;
    $80 = HEAP32[$78>>2]|0;
    FUNCTION_TABLE_vi[$80 & 255]($0);
   }
   $81 = HEAP32[$73>>2]|0;
   $82 = ($37|0)>(0);
   if ($82) {
    $83 = ((($0)) + 136|0);
    $$048 = 0;
    while(1) {
     $84 = HEAP32[$83>>2]|0;
     $85 = ((($84)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($$048)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     (_putc($89,$81)|0);
     $90 = HEAP32[$83>>2]|0;
     $91 = ((($90)) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($$048)|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     (_putc($95,$81)|0);
     $96 = HEAP32[$83>>2]|0;
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($$048)|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = $99&255;
     (_putc($100,$81)|0);
     $101 = (($$048) + 1)|0;
     $exitcond = ($101|0)==($37|0);
     if ($exitcond) {
      $put_pixel_rows$sink = 26;
      break;
     } else {
      $$048 = $101;
     }
    }
   } else {
    $put_pixel_rows$sink = 26;
   }
  }
  $126 = ((($1)) + 4|0);
  HEAP32[$126>>2] = $put_pixel_rows$sink;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $127 = HEAP32[$0>>2]|0;
  $128 = ((($127)) + 20|0);
  HEAP32[$128>>2] = 1036;
  $129 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vi[$129 & 255]($0);
  STACKTOP = sp;return;
 }
 }
}
function _finish_output_tga($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 (_fflush($3)|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = (_ferror($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 20|0);
 HEAP32[$8>>2] = 37;
 $9 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$9 & 255]($0);
 return;
}
function _calc_buffer_dimensions_tga($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $3)|0;
 $7 = ((($1)) + 32|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _put_demapped_gray_149($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02124 = 0, $$02223 = 0, $$025 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $26 = $7;
 } else {
  $11 = ((($1)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $$02124 = $13;$$02223 = $7;$$025 = $9;
  while(1) {
   $14 = ((($$02124)) + 1|0);
   $15 = HEAP8[$$02124>>0]|0;
   $16 = $15&255;
   $17 = (($5) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ((($$02223)) + 1|0);
   HEAP8[$$02223>>0] = $18;
   $20 = (($$025) + -1)|0;
   $21 = ($20|0)==(0);
   if ($21) {
    break;
   } else {
    $$02124 = $14;$$02223 = $19;$$025 = $20;
   }
  }
  $$pre = HEAP32[$6>>2]|0;
  $26 = $$pre;
 }
 $22 = ((($1)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 (_fwrite($26,1,$23,$25)|0);
 return;
}
function _put_gray_rows_150($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01720 = 0, $$01819 = 0, $$021 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $20 = $4;
 } else {
  $8 = ((($1)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $$01720 = $4;$$01819 = $10;$$021 = $6;
  while(1) {
   $11 = ((($$01819)) + 1|0);
   $12 = HEAP8[$$01819>>0]|0;
   $13 = ((($$01720)) + 1|0);
   HEAP8[$$01720>>0] = $12;
   $14 = (($$021) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$01720 = $13;$$01819 = $11;$$021 = $14;
   }
  }
  $$pre = HEAP32[$3>>2]|0;
  $20 = $$pre;
 }
 $16 = ((($1)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 (_fwrite($20,1,$17,$19)|0);
 return;
}
function _put_pixel_rows_151($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02326 = 0, $$02425 = 0, $$027 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $26 = $4;
  $22 = ((($1)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($1)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  (_fwrite($26,1,$23,$25)|0);
  return;
 }
 $8 = ((($1)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $$02326 = $4;$$02425 = $10;$$027 = $6;
 while(1) {
  $11 = ((($$02425)) + 2|0);
  $12 = HEAP8[$11>>0]|0;
  HEAP8[$$02326>>0] = $12;
  $13 = ((($$02425)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ((($$02326)) + 1|0);
  HEAP8[$15>>0] = $14;
  $16 = HEAP8[$$02425>>0]|0;
  $17 = ((($$02326)) + 2|0);
  HEAP8[$17>>0] = $16;
  $18 = ((($$02425)) + 3|0);
  $19 = ((($$02326)) + 3|0);
  $20 = (($$027) + -1)|0;
  $21 = ($20|0)==(0);
  if ($21) {
   break;
  } else {
   $$02326 = $19;$$02425 = $18;$$027 = $20;
  }
 }
 $$pre = HEAP32[$3>>2]|0;
 $26 = $$pre;
 $22 = ((($1)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 (_fwrite($26,1,$23,$25)|0);
 return;
}
function _jpeg_CreateDecompress($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(62);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 12;
  $7 = ((($5)) + 24|0);
  HEAP32[$7>>2] = 62;
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + 28|0);
  HEAP32[$9>>2] = $1;
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 $12 = ($2|0)==(464);
 if ($12) {
  $$pre$phiZ2D = $0;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = 21;
  $15 = ((($13)) + 24|0);
  HEAP32[$15>>2] = 464;
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 28|0);
  HEAP32[$17>>2] = $2;
  $18 = HEAP32[$0>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vi[$19 & 255]($0);
  $$pre$phiZ2D = $0;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 4|0);
 _memset(($23|0),0,460)|0;
 HEAP32[$0>>2] = $20;
 HEAP32[$21>>2] = $22;
 $24 = ((($0)) + 16|0);
 HEAP32[$24>>2] = 1;
 _jinit_memory_mgr($$pre$phiZ2D);
 $25 = ((($0)) + 8|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($0)) + 24|0);
 HEAP32[$26>>2] = 0;
 $scevgep = ((($0)) + 164|0);
 $27 = ((($0)) + 304|0);
 HEAP32[$27>>2] = 0;
 dest=$scevgep; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _jinit_marker_reader($0);
 _jinit_input_controller($0);
 $28 = ((($0)) + 20|0);
 HEAP32[$28>>2] = 200;
 $29 = HEAP32[$3>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_iiii[$30 & 255]($$pre$phiZ2D,0,120)|0);
 $32 = ((($0)) + 420|0);
 HEAP32[$32>>2] = $31;
 dest=$31; stop=dest+120|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _jpeg_destroy_decompress($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _jpeg_destroy($0);
 return;
}
function _jpeg_read_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -2;
 $switch = ($4|0)==(200);
 if (!($switch)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 20;
  $7 = ((($5)) + 24|0);
  HEAP32[$7>>2] = $3;
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 255]($0);
 }
 $10 = (_jpeg_consume_input($0)|0);
 switch ($10|0) {
 case 1:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 2:  {
  $11 = ($1|0)==(0);
  if ($11) {
   $$pre$phiZ2D = $0;
  } else {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 20|0);
   HEAP32[$13>>2] = 51;
   $14 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vi[$14 & 255]($0);
   $$pre$phiZ2D = $0;
  }
  _jpeg_abort($$pre$phiZ2D);
  $$0 = 2;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = $10;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _jpeg_consume_input($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink$i = 0, $$sink95$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond$i = 0, $or$cond10$i = 0, $or$cond12$i = 0, $or$cond8$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 200:  {
  $3 = ((($0)) + 436|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 255]($0);
  $7 = ((($0)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 255]($0);
  HEAP32[$1>>2] = 201;
  $$pre$phiZ2D = $3;
  break;
 }
 case 201:  {
  $$pre = ((($0)) + 436|0);
  $$pre$phiZ2D = $$pre;
  break;
 }
 case 210: case 208: case 207: case 206: case 205: case 204: case 203:  {
  $82 = ((($0)) + 436|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = (FUNCTION_TABLE_ii[$84 & 127]($0)|0);
  $$0 = $85;
  return ($$0|0);
  break;
 }
 case 202:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $86 = HEAP32[$0>>2]|0;
  $87 = ((($86)) + 20|0);
  HEAP32[$87>>2] = 20;
  $88 = ((($86)) + 24|0);
  HEAP32[$88>>2] = $2;
  $89 = HEAP32[$0>>2]|0;
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vi[$90 & 255]($0);
  $$0 = 0;
  return ($$0|0);
 }
 }
 $11 = HEAP32[$$pre$phiZ2D>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
 $14 = ($13|0)==(1);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($0)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 L13: do {
  switch ($16|0) {
  case 1:  {
   $$sink$i = 1;$$sink95$i = 1;
   break;
  }
  case 3:  {
   $17 = ((($0)) + 280|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($0)) + 292|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $32 = ((($0)) + 216|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($33)) + 84|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($33)) + 168|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($34|0)==(1);
     $40 = ($36|0)==(2);
     $or$cond$i = $39 & $40;
     $41 = ($38|0)==(3);
     $or$cond8$i = $or$cond$i & $41;
     if ($or$cond8$i) {
      $$sink$i = 2;$$sink95$i = 3;
      break L13;
     }
     $42 = ($34|0)==(82);
     $43 = ($36|0)==(71);
     $or$cond10$i = $42 & $43;
     $44 = ($38|0)==(66);
     $or$cond12$i = $or$cond10$i & $44;
     if ($or$cond12$i) {
      $$sink$i = 2;$$sink95$i = 2;
      break L13;
     }
     $45 = HEAP32[$0>>2]|0;
     $46 = ((($45)) + 24|0);
     HEAP32[$46>>2] = $34;
     $47 = ((($45)) + 28|0);
     HEAP32[$47>>2] = $36;
     $48 = ((($45)) + 32|0);
     HEAP32[$48>>2] = $38;
     $49 = ((($45)) + 20|0);
     HEAP32[$49>>2] = 111;
     $50 = ((($45)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     FUNCTION_TABLE_vii[$51 & 255]($0,1);
     $$sink$i = 2;$$sink95$i = 3;
     break L13;
    } else {
     $23 = ((($0)) + 296|0);
     $24 = HEAP8[$23>>0]|0;
     switch ($24<<24>>24) {
     case 0:  {
      $$sink$i = 2;$$sink95$i = 2;
      break L13;
      break;
     }
     case 1:  {
      $$sink$i = 2;$$sink95$i = 3;
      break L13;
      break;
     }
     default: {
      $25 = HEAP32[$0>>2]|0;
      $26 = ((($25)) + 20|0);
      HEAP32[$26>>2] = 114;
      $27 = $24&255;
      $28 = ((($25)) + 24|0);
      HEAP32[$28>>2] = $27;
      $29 = HEAP32[$0>>2]|0;
      $30 = ((($29)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      FUNCTION_TABLE_vii[$31 & 255]($0,-1);
      $$sink$i = 2;$$sink95$i = 3;
      break L13;
     }
     }
    }
   } else {
    $$sink$i = 2;$$sink95$i = 3;
   }
   break;
  }
  case 4:  {
   $52 = ((($0)) + 292|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $$sink$i = 4;$$sink95$i = 4;
   } else {
    $55 = ((($0)) + 296|0);
    $56 = HEAP8[$55>>0]|0;
    switch ($56<<24>>24) {
    case 0:  {
     $$sink$i = 4;$$sink95$i = 4;
     break L13;
     break;
    }
    case 2:  {
     $$sink$i = 4;$$sink95$i = 5;
     break L13;
     break;
    }
    default: {
     $57 = HEAP32[$0>>2]|0;
     $58 = ((($57)) + 20|0);
     HEAP32[$58>>2] = 114;
     $59 = $56&255;
     $60 = ((($57)) + 24|0);
     HEAP32[$60>>2] = $59;
     $61 = HEAP32[$0>>2]|0;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     FUNCTION_TABLE_vii[$63 & 255]($0,-1);
     $$sink$i = 4;$$sink95$i = 5;
     break L13;
    }
    }
   }
   break;
  }
  default: {
   $$sink$i = 0;$$sink95$i = 0;
  }
  }
 } while(0);
 $64 = ((($0)) + 40|0);
 HEAP32[$64>>2] = $$sink95$i;
 $65 = ((($0)) + 44|0);
 HEAP32[$65>>2] = $$sink$i;
 $66 = ((($0)) + 48|0);
 HEAP32[$66>>2] = 1;
 $67 = ((($0)) + 52|0);
 HEAP32[$67>>2] = 1;
 $68 = ((($0)) + 56|0);
 HEAPF64[$68>>3] = 1.0;
 $69 = ((($0)) + 64|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($0)) + 68|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($0)) + 72|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($0)) + 76|0);
 HEAP32[$72>>2] = 1;
 $73 = ((($0)) + 80|0);
 HEAP32[$73>>2] = 1;
 $74 = ((($0)) + 84|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($0)) + 88|0);
 HEAP32[$75>>2] = 2;
 $76 = ((($0)) + 92|0);
 HEAP32[$76>>2] = 1;
 $77 = ((($0)) + 96|0);
 HEAP32[$77>>2] = 256;
 $78 = ((($0)) + 136|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($0)) + 100|0);
 HEAP32[$79>>2] = 0;
 $80 = ((($0)) + 104|0);
 HEAP32[$80>>2] = 0;
 $81 = ((($0)) + 108|0);
 HEAP32[$81>>2] = 0;
 HEAP32[$1>>2] = 202;
 $$0 = 1;
 return ($$0|0);
}
function _jpeg_finish_decompress($0) {
 $0 = $0|0;
 var $$0 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $$off = (($2) + -205)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $3 = ((($0)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = ((($0)) + 140|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 116|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = HEAP32[$0>>2]|0;
    $12 = ((($11)) + 20|0);
    HEAP32[$12>>2] = 67;
    $13 = HEAP32[$11>>2]|0;
    FUNCTION_TABLE_vi[$13 & 255]($0);
   }
   $14 = ((($0)) + 420|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vi[$17 & 255]($0);
   HEAP32[$1>>2] = 210;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 L7: do {
  if ((label|0) == 6) {
   switch ($2|0) {
   case 210:  {
    break L7;
    break;
   }
   case 207:  {
    HEAP32[$1>>2] = 210;
    break L7;
    break;
   }
   default: {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($18)) + 20|0);
    HEAP32[$19>>2] = 20;
    $20 = ((($18)) + 24|0);
    HEAP32[$20>>2] = $2;
    $21 = HEAP32[$0>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    FUNCTION_TABLE_vi[$22 & 255]($0);
    break L7;
   }
   }
  }
 } while(0);
 $23 = ((($0)) + 436|0);
 while(1) {
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$24>>2]|0;
  $29 = (FUNCTION_TABLE_ii[$28 & 127]($0)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $31 = ((($0)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vi[$34 & 255]($0);
 _jpeg_abort($0);
 $$0 = 1;
 return ($$0|0);
}
function _jpeg_start_decompress($0) {
 $0 = $0|0;
 var $$2 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$pre$i = 0, $$pre33$i = 0, $$pre35$i = 0, $$pre35$i38 = 0, $$pre35$i39 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 L1: do {
  switch ($2|0) {
  case 202:  {
   _jinit_master_decompress($0);
   $3 = ((($0)) + 64|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$1>>2] = 203;
    label = 6;
    break L1;
   }
   HEAP32[$1>>2] = 207;
   $$2 = 1;
   return ($$2|0);
   break;
  }
  case 203:  {
   label = 6;
   break;
  }
  case 204:  {
   $$pre35$i38 = ((($0)) + 420|0);
   $$pre35$i39 = $$pre35$i38;
   break;
  }
  default: {
   $34 = HEAP32[$0>>2]|0;
   $35 = ((($34)) + 20|0);
   HEAP32[$35>>2] = 20;
   $36 = ((($34)) + 24|0);
   HEAP32[$36>>2] = $2;
   $37 = HEAP32[$0>>2]|0;
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vi[$38 & 255]($0);
   label = 16;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $6 = ((($0)) + 436|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  L11: do {
   if (!($10)) {
    $11 = ((($0)) + 8|0);
    $12 = ((($0)) + 320|0);
    $$pre = HEAP32[$11>>2]|0;
    $13 = $$pre;
    L13: while(1) {
     $14 = ($13|0)==(0|0);
     if (!($14)) {
      $15 = HEAP32[$13>>2]|0;
      FUNCTION_TABLE_vi[$15 & 255]($0);
     }
     $16 = HEAP32[$6>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = (FUNCTION_TABLE_ii[$17 & 127]($0)|0);
     switch ($18|0) {
     case 2:  {
      break L11;
      break;
     }
     case 0:  {
      $$2 = 0;
      break L13;
      break;
     }
     default: {
     }
     }
     $19 = HEAP32[$11>>2]|0;
     $20 = ($19|0)!=(0|0);
     $21 = $18 | 2;
     $22 = ($21|0)==(3);
     $or$cond = $22 & $20;
     if (!($or$cond)) {
      $13 = $19;
      continue;
     }
     $23 = ((($19)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[$23>>2] = $25;
     $26 = ((($19)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25|0)<($27|0);
     if ($28) {
      $13 = $19;
      continue;
     }
     $29 = HEAP32[$12>>2]|0;
     $30 = (($29) + ($27))|0;
     HEAP32[$26>>2] = $30;
     $13 = $19;
    }
    return ($$2|0);
   }
  } while(0);
  $31 = ((($0)) + 144|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 152|0);
  HEAP32[$33>>2] = $32;
  label = 16;
 }
 if ((label|0) == 16) {
  $$pr = HEAP32[$1>>2]|0;
  $phitmp = ($$pr|0)==(204);
  $$pre35$i = ((($0)) + 420|0);
  if ($phitmp) {
   $$pre35$i39 = $$pre35$i;
  } else {
   $39 = HEAP32[$$pre35$i>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   FUNCTION_TABLE_vi[$40 & 255]($0);
   $41 = ((($0)) + 140|0);
   HEAP32[$41>>2] = 0;
   HEAP32[$1>>2] = 204;
   $$pre35$i39 = $$pre35$i;
  }
 }
 $42 = HEAP32[$$pre35$i39>>2]|0;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 L27: do {
  if (!($45)) {
   $46 = ((($0)) + 140|0);
   $47 = ((($0)) + 116|0);
   $48 = ((($0)) + 8|0);
   $49 = ((($0)) + 424|0);
   $$pre$pre$i = HEAP32[$46>>2]|0;
   $$pre$i = $$pre$pre$i;
   L29: while(1) {
    $51 = $$pre$i;
    while(1) {
     $50 = HEAP32[$47>>2]|0;
     $52 = ($51>>>0)<($50>>>0);
     if (!($52)) {
      break;
     }
     $53 = HEAP32[$48>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      $63 = $51;
     } else {
      $55 = ((($53)) + 4|0);
      HEAP32[$55>>2] = $51;
      $56 = ((($53)) + 8|0);
      HEAP32[$56>>2] = $50;
      $57 = HEAP32[$53>>2]|0;
      FUNCTION_TABLE_vi[$57 & 255]($0);
      $$pre33$i = HEAP32[$46>>2]|0;
      $63 = $$pre33$i;
     }
     $58 = HEAP32[$49>>2]|0;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     FUNCTION_TABLE_viiii[$60 & 255]($0,0,$46,0);
     $61 = HEAP32[$46>>2]|0;
     $62 = ($61|0)==($63|0);
     if ($62) {
      $$2 = 0;
      break L29;
     } else {
      $51 = $61;
     }
    }
    $64 = HEAP32[$$pre35$i39>>2]|0;
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    FUNCTION_TABLE_vi[$66 & 255]($0);
    $67 = HEAP32[$$pre35$i39>>2]|0;
    $68 = HEAP32[$67>>2]|0;
    FUNCTION_TABLE_vi[$68 & 255]($0);
    HEAP32[$46>>2] = 0;
    $69 = HEAP32[$$pre35$i39>>2]|0;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     break L27;
    } else {
     $$pre$i = 0;
    }
   }
   return ($$2|0);
  }
 } while(0);
 $73 = ((($0)) + 68|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0);
 $76 = $75 ? 206 : 205;
 HEAP32[$1>>2] = $76;
 $$2 = 1;
 return ($$2|0);
}
function _jpeg_crop_scanline($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$090 = 0, $$$pre99 = 0, $$08994 = 0, $$09093 = 0, $$091 = 0, $$095 = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$phi$trans$insert98 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre96 = 0, $$pre99 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond92 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(205);
 if ($5) {
  $6 = ((($0)) + 140|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 20;
  $11 = ((($9)) + 24|0);
  HEAP32[$11>>2] = $4;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 255]($0);
 }
 $14 = ($1|0)!=(0|0);
 $15 = ($2|0)!=(0|0);
 $or$cond = $14 & $15;
 if (!($or$cond)) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 20|0);
  HEAP32[$17>>2] = 124;
  $18 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$18 & 255]($0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$pre105 = ((($0)) + 112|0);
  $$phi$trans$insert$pre$phiZZZZ2D = $$pre105;
  label = 9;
 } else {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + ($19))|0;
  $23 = ((($0)) + 112|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)>($24>>>0);
  if ($25) {
   $$phi$trans$insert$pre$phiZZZZ2D = $23;
   label = 9;
  } else {
   $$pre$phiZ2D = $23;$29 = $19;$31 = $24;
  }
 }
 if ((label|0) == 9) {
  $26 = HEAP32[$0>>2]|0;
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = 70;
  $28 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vi[$28 & 255]($0);
  $$pre = HEAP32[$2>>2]|0;
  $$pre96 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert$pre$phiZZZZ2D;$29 = $$pre;$31 = $$pre96;
 }
 $30 = ($29|0)==($31|0);
 if ($30) {
  return;
 }
 $32 = ((($0)) + 328|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 $35 = ((($0)) + 36|0);
 if ($34) {
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(1);
  if ($37) {
   $38 = ((($0)) + 316|0);
   $39 = HEAP32[$38>>2]|0;
   $$091 = $39;
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $40 = ((($0)) + 316|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($0)) + 308|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($43, $41)|0;
  $$091 = $44;
 }
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45>>>0) % ($$091>>>0))&-1;
 $47 = (($45) - ($46))|0;
 HEAP32[$1>>2] = $47;
 $48 = HEAP32[$2>>2]|0;
 $49 = (($46) + ($48))|0;
 HEAP32[$2>>2] = $49;
 HEAP32[$$pre$phiZ2D>>2] = $49;
 $50 = HEAP32[$1>>2]|0;
 $51 = (($50>>>0) / ($$091>>>0))&-1;
 $52 = ((($0)) + 420|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 12|0);
 HEAP32[$54>>2] = $51;
 $55 = HEAP32[$1>>2]|0;
 $56 = (($49) + ($55))|0;
 $57 = (_jdiv_round_up($56,$$091)|0);
 $58 = (($57) + -1)|0;
 $59 = HEAP32[$52>>2]|0;
 $60 = ((($59)) + 16|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$35>>2]|0;
 $62 = ($61|0)>(0);
 if (!($62)) {
  return;
 }
 $63 = ((($0)) + 216|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($0)) + 308|0);
 $$08994 = $64;$$09093 = 0;$$095 = 0;$68 = $61;
 while(1) {
  $66 = HEAP32[$32>>2]|0;
  $67 = ($66|0)==(1);
  $69 = ($68|0)==(1);
  $or$cond92 = $69 & $67;
  $$phi$trans$insert98 = ((($$08994)) + 8|0);
  $$pre99 = HEAP32[$$phi$trans$insert98>>2]|0;
  $$$pre99 = $or$cond92 ? 1 : $$pre99;
  $70 = ((($$08994)) + 40|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$$pre$phiZ2D>>2]|0;
  $73 = Math_imul($$pre99, $72)|0;
  $74 = HEAP32[$65>>2]|0;
  $75 = (_jdiv_round_up($73,$74)|0);
  HEAP32[$70>>2] = $75;
  $76 = ($75>>>0)<(2);
  $77 = ($71|0)>(1);
  $or$cond3 = $77 & $76;
  $$$090 = $or$cond3 ? 1 : $$09093;
  $78 = HEAP32[$1>>2]|0;
  $79 = Math_imul($78, $$$pre99)|0;
  $80 = (($79>>>0) / ($$091>>>0))&-1;
  $81 = HEAP32[$52>>2]|0;
  $82 = (((($81)) + 20|0) + ($$095<<2)|0);
  HEAP32[$82>>2] = $80;
  $83 = HEAP32[$1>>2]|0;
  $84 = HEAP32[$$pre$phiZ2D>>2]|0;
  $85 = (($84) + ($83))|0;
  $86 = Math_imul($85, $$$pre99)|0;
  $87 = (_jdiv_round_up($86,$$091)|0);
  $88 = (($87) + -1)|0;
  $89 = HEAP32[$52>>2]|0;
  $90 = (((($89)) + 60|0) + ($$095<<2)|0);
  HEAP32[$90>>2] = $88;
  $91 = (($$095) + 1)|0;
  $92 = ((($$08994)) + 84|0);
  $93 = HEAP32[$35>>2]|0;
  $94 = ($91|0)<($93|0);
  if ($94) {
   $$08994 = $92;$$09093 = $$$090;$$095 = $91;$68 = $93;
  } else {
   break;
  }
 }
 $phitmp = ($$$090|0)==(0);
 if ($phitmp) {
  return;
 }
 $95 = ((($89)) + 100|0);
 HEAP32[$95>>2] = 1;
 _jinit_upsampler($0);
 $96 = HEAP32[$52>>2]|0;
 $97 = ((($96)) + 100|0);
 HEAP32[$97>>2] = 0;
 return;
}
function _jpeg_read_scanlines($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(205);
 if (!($6)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 20|0);
  HEAP32[$8>>2] = 20;
  $9 = ((($7)) + 24|0);
  HEAP32[$9>>2] = $5;
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 $12 = ((($0)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 116|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)<($15>>>0);
 if (!($16)) {
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = 123;
  $19 = ((($17)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$20 & 255]($0,-1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($0)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = ((($22)) + 4|0);
  HEAP32[$24>>2] = $13;
  $25 = ((($22)) + 8|0);
  HEAP32[$25>>2] = $15;
  $26 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vi[$26 & 255]($0);
 }
 HEAP32[$3>>2] = 0;
 $27 = ((($0)) + 424|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_viiii[$30 & 255]($0,$1,$3,$2);
 $31 = HEAP32[$3>>2]|0;
 $32 = HEAP32[$12>>2]|0;
 $33 = (($32) + ($31))|0;
 HEAP32[$12>>2] = $33;
 $$0 = $31;
 STACKTOP = sp;return ($$0|0);
}
function _jpeg_skip_scanlines($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i181 = 0, $$0$i$i201 = 0, $$0$i171 = 0, $$0$i191 = 0, $$0154 = 0, $$0155218 = 0, $$0156215 = 0, $$0157216 = 0, $$01920$i = 0, $$01920$i$i = 0, $$01920$i$i182 = 0, $$01920$i$i202 = 0, $$01920$i172 = 0, $$01920$i192 = 0, $$05759$i = 0, $$05860$i = 0, $$061$i = 0;
 var $$1 = 0, $$1$sink164 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i185 = 0, $$pre$i$i205 = 0, $$pre$i175 = 0, $$pre$i195 = 0, $$pre$pre = 0, $$pre224 = 0, $$pre225 = 0, $$pre226 = 0, $$pre227 = 0, $$pre228 = 0, $$sink = 0, $$sink$i = 0, $$sink$sink$i = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i$i183 = 0, $exitcond$i$i203 = 0, $exitcond$i167 = 0, $exitcond$i173 = 0, $exitcond$i193 = 0, $not$ = 0, $or$cond = 0, $or$cond159 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 424|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 428|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 452|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(205);
 if (!($16)) {
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = 20;
  $19 = ((($17)) + 24|0);
  HEAP32[$19>>2] = $15;
  $20 = HEAP32[$0>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vi[$21 & 255]($0);
 }
 $22 = ((($0)) + 140|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($1))|0;
 $25 = ((($0)) + 116|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24>>>0)<($26>>>0);
 if (!($27)) {
  HEAP32[$22>>2] = $26;
  $28 = ((($0)) + 436|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vi[$31 & 255]($0);
  $32 = HEAP32[$28>>2]|0;
  $33 = ((($32)) + 20|0);
  HEAP32[$33>>2] = 1;
  $34 = HEAP32[$25>>2]|0;
  $35 = HEAP32[$22>>2]|0;
  $36 = (($34) - ($35))|0;
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ($1|0)==(0);
 if ($37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($0)) + 316|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($0)) + 312|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($41, $39)|0;
 $43 = (($23>>>0) % ($42>>>0))&-1;
 $44 = (($42) - ($43))|0;
 $45 = (($44>>>0) % ($42>>>0))&-1;
 $46 = (($1) - ($45))|0;
 $47 = HEAP32[$12>>2]|0;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 L11: do {
  if ($50) {
   $156 = ($45>>>0)>($1>>>0);
   if (!($156)) {
    $208 = (($45) + ($23))|0;
    HEAP32[$22>>2] = $208;
    $209 = ((($9)) + 48|0);
    HEAP32[$209>>2] = 0;
    $210 = ((($9)) + 52|0);
    $$1 = $46;$$sink = $210;$218 = $47;
    break;
   }
   $157 = HEAP32[$8>>2]|0;
   $158 = (($1>>>0) / ($41>>>0))&-1;
   $159 = ((($157)) + 52|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($158))|0;
   HEAP32[$159>>2] = $161;
   $162 = (($1>>>0) % ($41>>>0))&-1;
   $163 = (($1) - ($162))|0;
   $164 = (($163) + ($23))|0;
   HEAP32[$22>>2] = $164;
   $165 = ((($0)) + 456|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ((($166)) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   HEAP32[$167>>2] = 29;
   $169 = ((($0)) + 460|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)==(0|0);
   if ($171) {
    $$0$i$i = 0;
   } else {
    $172 = ((($170)) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    if ($174) {
     $$0$i$i = 0;
    } else {
     HEAP32[$172>>2] = 30;
     $$0$i$i = $173;
    }
   }
   $175 = ($162|0)==(0);
   if ($175) {
    $204 = $166;
   } else {
    $176 = ((($0)) + 8|0);
    $$01920$i$i = 0;
    while(1) {
     $177 = HEAP32[$14>>2]|0;
     $178 = ($177|0)==(205);
     if (!($178)) {
      $179 = HEAP32[$0>>2]|0;
      $180 = ((($179)) + 20|0);
      HEAP32[$180>>2] = 20;
      $181 = ((($179)) + 24|0);
      HEAP32[$181>>2] = $177;
      $182 = HEAP32[$0>>2]|0;
      $183 = HEAP32[$182>>2]|0;
      FUNCTION_TABLE_vi[$183 & 255]($0);
     }
     $184 = HEAP32[$22>>2]|0;
     $185 = HEAP32[$25>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $191 = HEAP32[$176>>2]|0;
      $192 = ($191|0)==(0|0);
      if (!($192)) {
       $193 = ((($191)) + 4|0);
       HEAP32[$193>>2] = $184;
       $194 = ((($191)) + 8|0);
       HEAP32[$194>>2] = $185;
       $195 = HEAP32[$191>>2]|0;
       FUNCTION_TABLE_vi[$195 & 255]($0);
      }
      HEAP32[$6>>2] = 0;
      $196 = HEAP32[$8>>2]|0;
      $197 = ((($196)) + 4|0);
      $198 = HEAP32[$197>>2]|0;
      FUNCTION_TABLE_viiii[$198 & 255]($0,0,$6,1);
      $199 = HEAP32[$6>>2]|0;
      $200 = HEAP32[$22>>2]|0;
      $201 = (($200) + ($199))|0;
      HEAP32[$22>>2] = $201;
     } else {
      $187 = HEAP32[$0>>2]|0;
      $188 = ((($187)) + 20|0);
      HEAP32[$188>>2] = 123;
      $189 = ((($187)) + 4|0);
      $190 = HEAP32[$189>>2]|0;
      FUNCTION_TABLE_vii[$190 & 255]($0,-1);
     }
     $202 = (($$01920$i$i) + 1)|0;
     $exitcond$i$i = ($202|0)==($162|0);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01920$i$i = $202;
     }
    }
    $$pre$i$i = HEAP32[$165>>2]|0;
    $204 = $$pre$i$i;
   }
   $203 = ((($204)) + 4|0);
   HEAP32[$203>>2] = $168;
   $205 = ($$0$i$i|0)==(0|0);
   if ($205) {
    $$0 = $1;
    STACKTOP = sp;return ($$0|0);
   }
   $206 = HEAP32[$169>>2]|0;
   $207 = ((($206)) + 4|0);
   HEAP32[$207>>2] = $$0$i$i;
   $$0 = $1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $51 = (($45) + 1)|0;
   $52 = ($51>>>0)>($1>>>0);
   do {
    if (!($52)) {
     $53 = ($45>>>0)<(2);
     if ($53) {
      $54 = ((($9)) + 48|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)!=(0);
      $57 = (($42) + 1)|0;
      $58 = ($46>>>0)<($57>>>0);
      $or$cond159 = $58 & $56;
      if ($or$cond159) {
       break;
      }
      $100 = ($55|0)==(0);
      if ($100) {
       label = 26;
      } else {
       $101 = (($42) + ($23))|0;
       $102 = (($101) + ($45))|0;
       HEAP32[$22>>2] = $102;
       $103 = (($46) - ($42))|0;
       $$0154 = $103;
      }
     } else {
      label = 26;
     }
     if ((label|0) == 26) {
      $104 = (($23) + ($45))|0;
      HEAP32[$22>>2] = $104;
      $$0154 = $46;
     }
     $105 = ((($9)) + 76|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==(0);
     if ($107) {
      label = 29;
     } else {
      $108 = ($106|0)==(1);
      $109 = ($45>>>0)>(2);
      $or$cond = $109 & $108;
      if ($or$cond) {
       label = 29;
      } else {
       $$pre = $47;
      }
     }
     if ((label|0) == 29) {
      $110 = HEAP32[$8>>2]|0;
      $111 = ((($0)) + 36|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)>(0);
      if ($113) {
       $114 = ((($0)) + 216|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ((($110)) + 56|0);
       $117 = ((($110)) + 60|0);
       $118 = (($39) + 1)|0;
       $119 = (($39) + 2)|0;
       $$05860$i = $115;$$061$i = 0;
       while(1) {
        $120 = ((($$05860$i)) + 12|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ((($$05860$i)) + 36|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = Math_imul($123, $121)|0;
        $125 = (($124|0) / ($39|0))&-1;
        $126 = HEAP32[$116>>2]|0;
        $127 = (($126) + ($$061$i<<2)|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = HEAP32[$117>>2]|0;
        $130 = (($129) + ($$061$i<<2)|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = ($125|0)>(0);
        if ($132) {
         $133 = Math_imul($125, $118)|0;
         $134 = Math_imul($125, $119)|0;
         $$05759$i = 0;
         while(1) {
          $135 = (($$05759$i) + ($133))|0;
          $136 = (($128) + ($135<<2)|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = (($$05759$i) - ($125))|0;
          $139 = (($128) + ($138<<2)|0);
          HEAP32[$139>>2] = $137;
          $140 = (($131) + ($135<<2)|0);
          $141 = HEAP32[$140>>2]|0;
          $142 = (($131) + ($138<<2)|0);
          HEAP32[$142>>2] = $141;
          $143 = (($128) + ($$05759$i<<2)|0);
          $144 = HEAP32[$143>>2]|0;
          $145 = (($$05759$i) + ($134))|0;
          $146 = (($128) + ($145<<2)|0);
          HEAP32[$146>>2] = $144;
          $147 = (($131) + ($$05759$i<<2)|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = (($131) + ($145<<2)|0);
          HEAP32[$149>>2] = $148;
          $150 = (($$05759$i) + 1)|0;
          $exitcond$i167 = ($150|0)==($125|0);
          if ($exitcond$i167) {
           break;
          } else {
           $$05759$i = $150;
          }
         }
        }
        $151 = (($$061$i) + 1)|0;
        $152 = ((($$05860$i)) + 84|0);
        $exitcond = ($151|0)==($112|0);
        if ($exitcond) {
         break;
        } else {
         $$05860$i = $152;$$061$i = $151;
        }
       }
       $$pre$pre = HEAP32[$12>>2]|0;
       $$pre = $$pre$pre;
      } else {
       $$pre = $47;
      }
     }
     $153 = ((($9)) + 48|0);
     HEAP32[$153>>2] = 0;
     $154 = ((($9)) + 52|0);
     HEAP32[$154>>2] = 0;
     $155 = ((($9)) + 68|0);
     $$1 = $$0154;$$sink = $155;$218 = $$pre;
     break L11;
    }
   } while(0);
   $59 = ((($0)) + 456|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$61>>2] = 29;
   $63 = ((($0)) + 460|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0|0);
   if ($65) {
    $$0$i = 0;
   } else {
    $66 = ((($64)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0|0);
    if ($68) {
     $$0$i = 0;
    } else {
     HEAP32[$66>>2] = 30;
     $$0$i = $67;
    }
   }
   $69 = ((($0)) + 8|0);
   $$01920$i = 0;
   while(1) {
    $70 = HEAP32[$14>>2]|0;
    $71 = ($70|0)==(205);
    if (!($71)) {
     $72 = HEAP32[$0>>2]|0;
     $73 = ((($72)) + 20|0);
     HEAP32[$73>>2] = 20;
     $74 = ((($72)) + 24|0);
     HEAP32[$74>>2] = $70;
     $75 = HEAP32[$0>>2]|0;
     $76 = HEAP32[$75>>2]|0;
     FUNCTION_TABLE_vi[$76 & 255]($0);
    }
    $77 = HEAP32[$22>>2]|0;
    $78 = HEAP32[$25>>2]|0;
    $79 = ($77>>>0)<($78>>>0);
    if ($79) {
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = ((($84)) + 4|0);
      HEAP32[$86>>2] = $77;
      $87 = ((($84)) + 8|0);
      HEAP32[$87>>2] = $78;
      $88 = HEAP32[$84>>2]|0;
      FUNCTION_TABLE_vi[$88 & 255]($0);
     }
     HEAP32[$7>>2] = 0;
     $89 = HEAP32[$8>>2]|0;
     $90 = ((($89)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     FUNCTION_TABLE_viiii[$91 & 255]($0,0,$7,1);
     $92 = HEAP32[$7>>2]|0;
     $93 = HEAP32[$22>>2]|0;
     $94 = (($93) + ($92))|0;
     HEAP32[$22>>2] = $94;
    } else {
     $80 = HEAP32[$0>>2]|0;
     $81 = ((($80)) + 20|0);
     HEAP32[$81>>2] = 123;
     $82 = ((($80)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     FUNCTION_TABLE_vii[$83 & 255]($0,-1);
    }
    $95 = (($$01920$i) + 1)|0;
    $exitcond$i = ($95|0)==($1|0);
    if ($exitcond$i) {
     break;
    } else {
     $$01920$i = $95;
    }
   }
   $$pre$i = HEAP32[$59>>2]|0;
   $96 = ((($$pre$i)) + 4|0);
   HEAP32[$96>>2] = $62;
   $97 = ($$0$i|0)==(0|0);
   if ($97) {
    $$0 = $1;
    STACKTOP = sp;return ($$0|0);
   }
   $98 = HEAP32[$63>>2]|0;
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $$0$i;
   $$0 = $1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$sink>>2] = 0;
 $211 = HEAP32[$40>>2]|0;
 $212 = ((($13)) + 92|0);
 HEAP32[$212>>2] = $211;
 $213 = HEAP32[$25>>2]|0;
 $214 = HEAP32[$22>>2]|0;
 $215 = (($213) - ($214))|0;
 $216 = ((($13)) + 96|0);
 HEAP32[$216>>2] = $215;
 $217 = ((($218)) + 8|0);
 $219 = HEAP32[$217>>2]|0;
 $220 = ($219|0)==(0);
 $not$ = $220 ^ 1;
 $221 = $not$ << 31 >> 31;
 $$1$sink164 = (($$1) + ($221))|0;
 $222 = (($$1$sink164>>>0) % ($42>>>0))&-1;
 $223 = (($$1$sink164) - ($222))|0;
 $224 = (($$1) - ($223))|0;
 $225 = ((($0)) + 436|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ((($226)) + 16|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ($228|0)==(0);
 if (!($229)) {
  $239 = (($214) + ($223))|0;
  HEAP32[$22>>2] = $239;
  $240 = (($$1$sink164>>>0) / ($42>>>0))&-1;
  $241 = ((($0)) + 156|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($242) + ($240))|0;
  HEAP32[$241>>2] = $243;
  if ($220) {
   $291 = HEAP32[$8>>2]|0;
   $292 = (($224>>>0) / ($211>>>0))&-1;
   $293 = ((($291)) + 52|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (($294) + ($292))|0;
   HEAP32[$293>>2] = $295;
   $296 = (($224>>>0) % ($211>>>0))&-1;
   $297 = (($224) - ($296))|0;
   $298 = (($297) + ($239))|0;
   HEAP32[$22>>2] = $298;
   $299 = ((($0)) + 456|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ((($300)) + 4|0);
   $302 = HEAP32[$301>>2]|0;
   HEAP32[$301>>2] = 29;
   $303 = ((($0)) + 460|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = ($304|0)==(0|0);
   if ($305) {
    $$0$i$i181 = 0;
   } else {
    $306 = ((($304)) + 4|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)==(0|0);
    if ($308) {
     $$0$i$i181 = 0;
    } else {
     HEAP32[$306>>2] = 30;
     $$0$i$i181 = $307;
    }
   }
   $309 = ($296|0)==(0);
   if ($309) {
    $338 = $300;
   } else {
    $310 = ((($0)) + 8|0);
    $$01920$i$i182 = 0;
    while(1) {
     $311 = HEAP32[$14>>2]|0;
     $312 = ($311|0)==(205);
     if (!($312)) {
      $313 = HEAP32[$0>>2]|0;
      $314 = ((($313)) + 20|0);
      HEAP32[$314>>2] = 20;
      $315 = ((($313)) + 24|0);
      HEAP32[$315>>2] = $311;
      $316 = HEAP32[$0>>2]|0;
      $317 = HEAP32[$316>>2]|0;
      FUNCTION_TABLE_vi[$317 & 255]($0);
     }
     $318 = HEAP32[$22>>2]|0;
     $319 = HEAP32[$25>>2]|0;
     $320 = ($318>>>0)<($319>>>0);
     if ($320) {
      $325 = HEAP32[$310>>2]|0;
      $326 = ($325|0)==(0|0);
      if (!($326)) {
       $327 = ((($325)) + 4|0);
       HEAP32[$327>>2] = $318;
       $328 = ((($325)) + 8|0);
       HEAP32[$328>>2] = $319;
       $329 = HEAP32[$325>>2]|0;
       FUNCTION_TABLE_vi[$329 & 255]($0);
      }
      HEAP32[$4>>2] = 0;
      $330 = HEAP32[$8>>2]|0;
      $331 = ((($330)) + 4|0);
      $332 = HEAP32[$331>>2]|0;
      FUNCTION_TABLE_viiii[$332 & 255]($0,0,$4,1);
      $333 = HEAP32[$4>>2]|0;
      $334 = HEAP32[$22>>2]|0;
      $335 = (($334) + ($333))|0;
      HEAP32[$22>>2] = $335;
     } else {
      $321 = HEAP32[$0>>2]|0;
      $322 = ((($321)) + 20|0);
      HEAP32[$322>>2] = 123;
      $323 = ((($321)) + 4|0);
      $324 = HEAP32[$323>>2]|0;
      FUNCTION_TABLE_vii[$324 & 255]($0,-1);
     }
     $336 = (($$01920$i$i182) + 1)|0;
     $exitcond$i$i183 = ($336|0)==($296|0);
     if ($exitcond$i$i183) {
      break;
     } else {
      $$01920$i$i182 = $336;
     }
    }
    $$pre$i$i185 = HEAP32[$299>>2]|0;
    $338 = $$pre$i$i185;
   }
   $337 = ((($338)) + 4|0);
   HEAP32[$337>>2] = $302;
   $339 = ($$0$i$i181|0)==(0|0);
   if (!($339)) {
    $340 = HEAP32[$303>>2]|0;
    $341 = ((($340)) + 4|0);
    HEAP32[$341>>2] = $$0$i$i181;
   }
  } else {
   $244 = (($$1>>>0) / ($42>>>0))&-1;
   $245 = ((($9)) + 76|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($246) + ($244))|0;
   HEAP32[$245>>2] = $247;
   $248 = ((($0)) + 456|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ((($249)) + 4|0);
   $251 = HEAP32[$250>>2]|0;
   HEAP32[$250>>2] = 29;
   $252 = ((($0)) + 460|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253|0)==(0|0);
   if ($254) {
    $$0$i171 = 0;
   } else {
    $255 = ((($253)) + 4|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ($256|0)==(0|0);
    if ($257) {
     $$0$i171 = 0;
    } else {
     HEAP32[$255>>2] = 30;
     $$0$i171 = $256;
    }
   }
   $258 = ($224|0)==(0);
   if ($258) {
    $287 = $249;
   } else {
    $259 = ((($0)) + 8|0);
    $$01920$i172 = 0;
    while(1) {
     $260 = HEAP32[$14>>2]|0;
     $261 = ($260|0)==(205);
     if (!($261)) {
      $262 = HEAP32[$0>>2]|0;
      $263 = ((($262)) + 20|0);
      HEAP32[$263>>2] = 20;
      $264 = ((($262)) + 24|0);
      HEAP32[$264>>2] = $260;
      $265 = HEAP32[$0>>2]|0;
      $266 = HEAP32[$265>>2]|0;
      FUNCTION_TABLE_vi[$266 & 255]($0);
     }
     $267 = HEAP32[$22>>2]|0;
     $268 = HEAP32[$25>>2]|0;
     $269 = ($267>>>0)<($268>>>0);
     if ($269) {
      $274 = HEAP32[$259>>2]|0;
      $275 = ($274|0)==(0|0);
      if (!($275)) {
       $276 = ((($274)) + 4|0);
       HEAP32[$276>>2] = $267;
       $277 = ((($274)) + 8|0);
       HEAP32[$277>>2] = $268;
       $278 = HEAP32[$274>>2]|0;
       FUNCTION_TABLE_vi[$278 & 255]($0);
      }
      HEAP32[$5>>2] = 0;
      $279 = HEAP32[$8>>2]|0;
      $280 = ((($279)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      FUNCTION_TABLE_viiii[$281 & 255]($0,0,$5,1);
      $282 = HEAP32[$5>>2]|0;
      $283 = HEAP32[$22>>2]|0;
      $284 = (($283) + ($282))|0;
      HEAP32[$22>>2] = $284;
     } else {
      $270 = HEAP32[$0>>2]|0;
      $271 = ((($270)) + 20|0);
      HEAP32[$271>>2] = 123;
      $272 = ((($270)) + 4|0);
      $273 = HEAP32[$272>>2]|0;
      FUNCTION_TABLE_vii[$273 & 255]($0,-1);
     }
     $285 = (($$01920$i172) + 1)|0;
     $exitcond$i173 = ($285|0)==($224|0);
     if ($exitcond$i173) {
      break;
     } else {
      $$01920$i172 = $285;
     }
    }
    $$pre$i175 = HEAP32[$248>>2]|0;
    $287 = $$pre$i175;
   }
   $286 = ((($287)) + 4|0);
   HEAP32[$286>>2] = $251;
   $288 = ($$0$i171|0)==(0|0);
   if (!($288)) {
    $289 = HEAP32[$252>>2]|0;
    $290 = ((($289)) + 4|0);
    HEAP32[$290>>2] = $$0$i171;
   }
  }
  $342 = HEAP32[$25>>2]|0;
  $343 = HEAP32[$22>>2]|0;
  $344 = (($342) - ($343))|0;
  HEAP32[$216>>2] = $344;
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $230 = ($223|0)==(0);
 if ($230) {
  $382 = $214;$383 = $219;
 } else {
  $231 = ((($11)) + 28|0);
  $232 = ((($0)) + 148|0);
  $233 = ((($0)) + 156|0);
  $234 = ((($0)) + 320|0);
  $235 = ((($0)) + 328|0);
  $236 = ((($0)) + 332|0);
  $237 = ((($0)) + 348|0);
  $238 = ((($0)) + 444|0);
  $$0155218 = 0;
  while(1) {
   $345 = HEAP32[$231>>2]|0;
   $346 = ($345|0)>(0);
   if ($346) {
    $$pre224 = HEAP32[$237>>2]|0;
    $$0157216 = 0;$347 = $$pre224;$487 = $345;
    while(1) {
     $348 = ($347|0)==(0);
     if ($348) {
      $357 = $487;$488 = 0;
     } else {
      $$0156215 = 0;
      while(1) {
       $349 = HEAP32[$238>>2]|0;
       $350 = ((($349)) + 4|0);
       $351 = HEAP32[$350>>2]|0;
       (FUNCTION_TABLE_iii[$351 & 255]($0,0)|0);
       $352 = (($$0156215) + 1)|0;
       $353 = HEAP32[$237>>2]|0;
       $354 = ($352>>>0)<($353>>>0);
       if ($354) {
        $$0156215 = $352;
       } else {
        break;
       }
      }
      $$pre225 = HEAP32[$231>>2]|0;
      $357 = $$pre225;$488 = $353;
     }
     $355 = (($$0157216) + 1)|0;
     $356 = ($355|0)<($357|0);
     if ($356) {
      $$0157216 = $355;$347 = $488;$487 = $357;
     } else {
      break;
     }
    }
   }
   $358 = HEAP32[$232>>2]|0;
   $359 = (($358) + 1)|0;
   HEAP32[$232>>2] = $359;
   $360 = HEAP32[$233>>2]|0;
   $361 = (($360) + 1)|0;
   HEAP32[$233>>2] = $361;
   $362 = HEAP32[$234>>2]|0;
   $363 = ($359>>>0)<($362>>>0);
   if ($363) {
    $364 = HEAP32[$10>>2]|0;
    $365 = HEAP32[$235>>2]|0;
    $366 = ($365|0)>(1);
    if ($366) {
     $$sink$sink$i = 1;
    } else {
     $367 = (($362) + -1)|0;
     $368 = ($359>>>0)<($367>>>0);
     $369 = HEAP32[$236>>2]|0;
     $370 = ((($369)) + 12|0);
     $371 = ((($369)) + 72|0);
     $$sink$i = $368 ? $370 : $371;
     $372 = HEAP32[$$sink$i>>2]|0;
     $$sink$sink$i = $372;
    }
    $373 = ((($364)) + 28|0);
    HEAP32[$373>>2] = $$sink$sink$i;
    $374 = ((($364)) + 20|0);
    HEAP32[$374>>2] = 0;
    $375 = ((($364)) + 24|0);
    HEAP32[$375>>2] = 0;
   } else {
    $376 = HEAP32[$225>>2]|0;
    $377 = ((($376)) + 12|0);
    $378 = HEAP32[$377>>2]|0;
    FUNCTION_TABLE_vi[$378 & 255]($0);
   }
   $379 = (($$0155218) + ($42))|0;
   $380 = ($379>>>0)<($223>>>0);
   if ($380) {
    $$0155218 = $379;
   } else {
    break;
   }
  }
  $$pre226 = HEAP32[$22>>2]|0;
  $$pre227 = HEAP32[$12>>2]|0;
  $$phi$trans$insert = ((($$pre227)) + 8|0);
  $$pre228 = HEAP32[$$phi$trans$insert>>2]|0;
  $382 = $$pre226;$383 = $$pre228;
 }
 $381 = (($382) + ($223))|0;
 HEAP32[$22>>2] = $381;
 $384 = ($383|0)==(0);
 if ($384) {
  $432 = HEAP32[$8>>2]|0;
  $433 = HEAP32[$40>>2]|0;
  $434 = (($224>>>0) / ($433>>>0))&-1;
  $435 = ((($432)) + 52|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = (($436) + ($434))|0;
  HEAP32[$435>>2] = $437;
  $438 = (($224>>>0) % ($433>>>0))&-1;
  $439 = (($224) - ($438))|0;
  $440 = (($439) + ($381))|0;
  HEAP32[$22>>2] = $440;
  $441 = ((($0)) + 456|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = ((($442)) + 4|0);
  $444 = HEAP32[$443>>2]|0;
  HEAP32[$443>>2] = 29;
  $445 = ((($0)) + 460|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = ($446|0)==(0|0);
  if ($447) {
   $$0$i$i201 = 0;
  } else {
   $448 = ((($446)) + 4|0);
   $449 = HEAP32[$448>>2]|0;
   $450 = ($449|0)==(0|0);
   if ($450) {
    $$0$i$i201 = 0;
   } else {
    HEAP32[$448>>2] = 30;
    $$0$i$i201 = $449;
   }
  }
  $451 = ($438|0)==(0);
  if ($451) {
   $480 = $442;
  } else {
   $452 = ((($0)) + 8|0);
   $$01920$i$i202 = 0;
   while(1) {
    $453 = HEAP32[$14>>2]|0;
    $454 = ($453|0)==(205);
    if (!($454)) {
     $455 = HEAP32[$0>>2]|0;
     $456 = ((($455)) + 20|0);
     HEAP32[$456>>2] = 20;
     $457 = ((($455)) + 24|0);
     HEAP32[$457>>2] = $453;
     $458 = HEAP32[$0>>2]|0;
     $459 = HEAP32[$458>>2]|0;
     FUNCTION_TABLE_vi[$459 & 255]($0);
    }
    $460 = HEAP32[$22>>2]|0;
    $461 = HEAP32[$25>>2]|0;
    $462 = ($460>>>0)<($461>>>0);
    if ($462) {
     $467 = HEAP32[$452>>2]|0;
     $468 = ($467|0)==(0|0);
     if (!($468)) {
      $469 = ((($467)) + 4|0);
      HEAP32[$469>>2] = $460;
      $470 = ((($467)) + 8|0);
      HEAP32[$470>>2] = $461;
      $471 = HEAP32[$467>>2]|0;
      FUNCTION_TABLE_vi[$471 & 255]($0);
     }
     HEAP32[$2>>2] = 0;
     $472 = HEAP32[$8>>2]|0;
     $473 = ((($472)) + 4|0);
     $474 = HEAP32[$473>>2]|0;
     FUNCTION_TABLE_viiii[$474 & 255]($0,0,$2,1);
     $475 = HEAP32[$2>>2]|0;
     $476 = HEAP32[$22>>2]|0;
     $477 = (($476) + ($475))|0;
     HEAP32[$22>>2] = $477;
    } else {
     $463 = HEAP32[$0>>2]|0;
     $464 = ((($463)) + 20|0);
     HEAP32[$464>>2] = 123;
     $465 = ((($463)) + 4|0);
     $466 = HEAP32[$465>>2]|0;
     FUNCTION_TABLE_vii[$466 & 255]($0,-1);
    }
    $478 = (($$01920$i$i202) + 1)|0;
    $exitcond$i$i203 = ($478|0)==($438|0);
    if ($exitcond$i$i203) {
     break;
    } else {
     $$01920$i$i202 = $478;
    }
   }
   $$pre$i$i205 = HEAP32[$441>>2]|0;
   $480 = $$pre$i$i205;
  }
  $479 = ((($480)) + 4|0);
  HEAP32[$479>>2] = $444;
  $481 = ($$0$i$i201|0)==(0|0);
  if (!($481)) {
   $482 = HEAP32[$445>>2]|0;
   $483 = ((($482)) + 4|0);
   HEAP32[$483>>2] = $$0$i$i201;
  }
 } else {
  $385 = (($$1$sink164>>>0) / ($42>>>0))&-1;
  $386 = ((($9)) + 76|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = (($387) + ($385))|0;
  HEAP32[$386>>2] = $388;
  $389 = ((($0)) + 456|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ((($390)) + 4|0);
  $392 = HEAP32[$391>>2]|0;
  HEAP32[$391>>2] = 29;
  $393 = ((($0)) + 460|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = ($394|0)==(0|0);
  if ($395) {
   $$0$i191 = 0;
  } else {
   $396 = ((($394)) + 4|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = ($397|0)==(0|0);
   if ($398) {
    $$0$i191 = 0;
   } else {
    HEAP32[$396>>2] = 30;
    $$0$i191 = $397;
   }
  }
  $399 = ($224|0)==(0);
  if ($399) {
   $428 = $390;
  } else {
   $400 = ((($0)) + 8|0);
   $$01920$i192 = 0;
   while(1) {
    $401 = HEAP32[$14>>2]|0;
    $402 = ($401|0)==(205);
    if (!($402)) {
     $403 = HEAP32[$0>>2]|0;
     $404 = ((($403)) + 20|0);
     HEAP32[$404>>2] = 20;
     $405 = ((($403)) + 24|0);
     HEAP32[$405>>2] = $401;
     $406 = HEAP32[$0>>2]|0;
     $407 = HEAP32[$406>>2]|0;
     FUNCTION_TABLE_vi[$407 & 255]($0);
    }
    $408 = HEAP32[$22>>2]|0;
    $409 = HEAP32[$25>>2]|0;
    $410 = ($408>>>0)<($409>>>0);
    if ($410) {
     $415 = HEAP32[$400>>2]|0;
     $416 = ($415|0)==(0|0);
     if (!($416)) {
      $417 = ((($415)) + 4|0);
      HEAP32[$417>>2] = $408;
      $418 = ((($415)) + 8|0);
      HEAP32[$418>>2] = $409;
      $419 = HEAP32[$415>>2]|0;
      FUNCTION_TABLE_vi[$419 & 255]($0);
     }
     HEAP32[$3>>2] = 0;
     $420 = HEAP32[$8>>2]|0;
     $421 = ((($420)) + 4|0);
     $422 = HEAP32[$421>>2]|0;
     FUNCTION_TABLE_viiii[$422 & 255]($0,0,$3,1);
     $423 = HEAP32[$3>>2]|0;
     $424 = HEAP32[$22>>2]|0;
     $425 = (($424) + ($423))|0;
     HEAP32[$22>>2] = $425;
    } else {
     $411 = HEAP32[$0>>2]|0;
     $412 = ((($411)) + 20|0);
     HEAP32[$412>>2] = 123;
     $413 = ((($411)) + 4|0);
     $414 = HEAP32[$413>>2]|0;
     FUNCTION_TABLE_vii[$414 & 255]($0,-1);
    }
    $426 = (($$01920$i192) + 1)|0;
    $exitcond$i193 = ($426|0)==($224|0);
    if ($exitcond$i193) {
     break;
    } else {
     $$01920$i192 = $426;
    }
   }
   $$pre$i195 = HEAP32[$389>>2]|0;
   $428 = $$pre$i195;
  }
  $427 = ((($428)) + 4|0);
  HEAP32[$427>>2] = $392;
  $429 = ($$0$i191|0)==(0|0);
  if (!($429)) {
   $430 = HEAP32[$393>>2]|0;
   $431 = ((($430)) + 4|0);
   HEAP32[$431>>2] = $$0$i191;
  }
 }
 $484 = HEAP32[$25>>2]|0;
 $485 = HEAP32[$22>>2]|0;
 $486 = (($484) - ($485))|0;
 HEAP32[$216>>2] = $486;
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _noop_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _noop_quantize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jpeg_stdio_src($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 255]($0,0,40)|0);
  HEAP32[$2>>2] = $8;
  $9 = HEAP32[$5>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iiii[$10 & 255]($0,0,4096)|0);
  $12 = ((($8)) + 32|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($3)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(31|0);
  if (!($15)) {
   $16 = HEAP32[$0>>2]|0;
   $17 = ((($16)) + 20|0);
   HEAP32[$17>>2] = 23;
   $18 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vi[$18 & 255]($0);
  }
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = 31;
 $21 = ((($19)) + 12|0);
 HEAP32[$21>>2] = 32;
 $22 = ((($19)) + 16|0);
 HEAP32[$22>>2] = 33;
 $23 = ((($19)) + 20|0);
 HEAP32[$23>>2] = 34;
 $24 = ((($19)) + 24|0);
 HEAP32[$24>>2] = 35;
 $25 = ((($19)) + 28|0);
 HEAP32[$25>>2] = $1;
 $26 = ((($19)) + 4|0);
 HEAP32[$26>>2] = 0;
 HEAP32[$19>>2] = 0;
 return;
}
function _init_source($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 36|0);
 HEAP32[$3>>2] = 1;
 return;
}
function _fill_input_buffer($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre$phi22Z2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_fread($4,1,4096,$6)|0);
 $8 = ($7|0)==(0);
 $9 = ((($2)) + 36|0);
 if (!($8)) {
  $$0 = $7;
  $22 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $22;
  $23 = ((($2)) + 4|0);
  HEAP32[$23>>2] = $$0;
  HEAP32[$9>>2] = 0;
  return 1;
 }
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$pre$phi22Z2D = $0;
 } else {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 20|0);
  HEAP32[$13>>2] = 42;
  $14 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$14 & 255]($0);
  $$pre$phi22Z2D = $0;
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = 120;
 $17 = ((($15)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vii[$18 & 255]($$pre$phi22Z2D,-1);
 $19 = HEAP32[$3>>2]|0;
 HEAP8[$19>>0] = -1;
 $20 = HEAP32[$3>>2]|0;
 $21 = ((($20)) + 1|0);
 HEAP8[$21>>0] = -39;
 $$0 = 2;
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $22;
 $23 = ((($2)) + 4|0);
 HEAP32[$23>>2] = $$0;
 HEAP32[$9>>2] = 0;
 return 1;
}
function _skip_input_data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($1|0);
 if ($7) {
  $8 = ((($3)) + 12|0);
  $$012 = $1;$10 = $6;
  while(1) {
   $9 = (($$012) - ($10))|0;
   $11 = HEAP32[$8>>2]|0;
   (FUNCTION_TABLE_ii[$11 & 127]($0)|0);
   $12 = HEAP32[$5>>2]|0;
   $13 = ($9|0)>($12|0);
   if ($13) {
    $$012 = $9;$10 = $12;
   } else {
    $$0$lcssa = $9;$17 = $12;
    break;
   }
  }
 } else {
  $$0$lcssa = $1;$17 = $6;
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = (($14) + ($$0$lcssa)|0);
 HEAP32[$3>>2] = $15;
 $16 = (($17) - ($$0$lcssa))|0;
 HEAP32[$5>>2] = $16;
 return;
}
function _term_source($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jpeg_mem_src($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 $4 = ($2|0)==(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 42;
  $7 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$7 & 255]($0);
 }
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($0,0,28)|0);
  HEAP32[$8>>2] = $14;
  $22 = $14;
 } else {
  $15 = ((($9)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(36|0);
  if ($17) {
   $22 = $9;
  } else {
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 20|0);
   HEAP32[$19>>2] = 23;
   $20 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$20 & 255]($0);
   $$pre = HEAP32[$8>>2]|0;
   $22 = $$pre;
  }
 }
 $21 = ((($22)) + 8|0);
 HEAP32[$21>>2] = 36;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = 37;
 $24 = ((($22)) + 16|0);
 HEAP32[$24>>2] = 33;
 $25 = ((($22)) + 20|0);
 HEAP32[$25>>2] = 34;
 $26 = ((($22)) + 24|0);
 HEAP32[$26>>2] = 35;
 $27 = ((($22)) + 4|0);
 HEAP32[$27>>2] = $2;
 HEAP32[$22>>2] = $1;
 return;
}
function _init_mem_source($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _fill_mem_input_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 HEAP32[$2>>2] = 120;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 255]($0,-1);
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = 7211;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 2;
 return 1;
}
function _jinit_input_controller($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,0,28)|0);
 $5 = ((($0)) + 436|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 38;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 39;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = 40;
 $8 = ((($4)) + 12|0);
 HEAP32[$8>>2] = 41;
 $9 = ((($4)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($4)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($4)) + 24|0);
 HEAP32[$11>>2] = 1;
 return;
}
function _consume_markers($0) {
 $0 = $0|0;
 var $$$i = 0, $$0 = 0, $$08896$i = 0, $$097$i = 0, $$18994$i = 0, $$195$i = 0, $$92$i = 0, $$off$i = 0, $$off93$i = 0, $$pre$i = 0, $$pre101$i = 0, $$pre102$i = 0, $$pre103$i = 0, $$pre104$i = 0, $$pre105$i = 0, $$pre107$i = 0, $$pre108$i = 0, $$pre110$i = 0, $$sink1$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 436|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 2;
  return ($$0|0);
 }
 $6 = ((($0)) + 440|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
 switch ($10|0) {
 case 1:  {
  $11 = ((($2)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $128 = ((($2)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(0);
   if ($130) {
    $131 = HEAP32[$0>>2]|0;
    $132 = ((($131)) + 20|0);
    HEAP32[$132>>2] = 35;
    $133 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vi[$133 & 255]($0);
   }
   _start_input_pass($0);
   $$0 = 1;
   return ($$0|0);
  }
  $14 = ((($0)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(65500);
  if ($16) {
   label = 6;
  } else {
   $17 = ((($0)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)>(65500);
   if ($19) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   $20 = HEAP32[$0>>2]|0;
   $21 = ((($20)) + 20|0);
   HEAP32[$21>>2] = 41;
   $22 = ((($20)) + 24|0);
   HEAP32[$22>>2] = 65500;
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vi[$24 & 255]($0);
  }
  $25 = ((($0)) + 212|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(8);
  if (!($27)) {
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 20|0);
   HEAP32[$29>>2] = 15;
   $30 = ((($28)) + 24|0);
   HEAP32[$30>>2] = $26;
   $31 = HEAP32[$0>>2]|0;
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vi[$32 & 255]($0);
  }
  $33 = ((($0)) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)>(10);
  if ($35) {
   $36 = HEAP32[$0>>2]|0;
   $37 = ((($36)) + 20|0);
   HEAP32[$37>>2] = 26;
   $38 = ((($36)) + 24|0);
   HEAP32[$38>>2] = $34;
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + 28|0);
   HEAP32[$40>>2] = 10;
   $41 = HEAP32[$0>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   FUNCTION_TABLE_vi[$42 & 255]($0);
   $$pre$i = HEAP32[$33>>2]|0;
   $46 = $$pre$i;
  } else {
   $46 = $34;
  }
  $43 = ((($0)) + 308|0);
  HEAP32[$43>>2] = 1;
  $44 = ((($0)) + 312|0);
  HEAP32[$44>>2] = 1;
  $45 = ((($0)) + 216|0);
  $47 = ($46|0)>(0);
  if ($47) {
   $49 = HEAP32[$45>>2]|0;
   $$08896$i = 0;$$097$i = $49;$149 = $46;$150 = 1;$151 = 1;
   while(1) {
    $50 = ((($$097$i)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $$off$i = (($51) + -1)|0;
    $52 = ($$off$i>>>0)>(3);
    $$pre110$i = ((($$097$i)) + 12|0);
    if ($52) {
     label = 16;
    } else {
     $53 = HEAP32[$$pre110$i>>2]|0;
     $$off93$i = (($53) + -1)|0;
     $54 = ($$off93$i>>>0)>(3);
     if ($54) {
      label = 16;
     } else {
      $58 = $151;$60 = $51;$62 = $150;$64 = $53;$68 = $149;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $55 = HEAP32[$0>>2]|0;
     $56 = ((($55)) + 20|0);
     HEAP32[$56>>2] = 18;
     $57 = HEAP32[$55>>2]|0;
     FUNCTION_TABLE_vi[$57 & 255]($0);
     $$pre101$i = HEAP32[$43>>2]|0;
     $$pre102$i = HEAP32[$50>>2]|0;
     $$pre103$i = HEAP32[$44>>2]|0;
     $$pre104$i = HEAP32[$$pre110$i>>2]|0;
     $$pre105$i = HEAP32[$33>>2]|0;
     $58 = $$pre101$i;$60 = $$pre102$i;$62 = $$pre103$i;$64 = $$pre104$i;$68 = $$pre105$i;
    }
    $59 = ($58|0)>($60|0);
    $61 = $59 ? $58 : $60;
    HEAP32[$43>>2] = $61;
    $63 = ($62|0)>($64|0);
    $$$i = $63 ? $62 : $64;
    HEAP32[$44>>2] = $$$i;
    $65 = (($$08896$i) + 1)|0;
    $66 = ((($$097$i)) + 84|0);
    $67 = ($65|0)<($68|0);
    if ($67) {
     $$08896$i = $65;$$097$i = $66;$149 = $68;$150 = $$$i;$151 = $61;
    } else {
     break;
    }
   }
   $69 = ((($0)) + 316|0);
   HEAP32[$69>>2] = 8;
   $70 = ($68|0)>(0);
   if ($70) {
    $71 = HEAP32[$45>>2]|0;
    $72 = ((($0)) + 28|0);
    $73 = ((($0)) + 420|0);
    $$18994$i = 0;$$195$i = $71;$80 = $61;
    while(1) {
     $74 = ((($$195$i)) + 36|0);
     HEAP32[$74>>2] = 8;
     $75 = HEAP32[$72>>2]|0;
     $76 = ((($$195$i)) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = Math_imul($77, $75)|0;
     $79 = $80 << 3;
     $81 = (_jdiv_round_up($78,$79)|0);
     $82 = ((($$195$i)) + 28|0);
     HEAP32[$82>>2] = $81;
     $83 = HEAP32[$14>>2]|0;
     $84 = ((($$195$i)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = Math_imul($85, $83)|0;
     $87 = HEAP32[$44>>2]|0;
     $88 = $87 << 3;
     $89 = (_jdiv_round_up($86,$88)|0);
     $90 = ((($$195$i)) + 32|0);
     HEAP32[$90>>2] = $89;
     $91 = HEAP32[$73>>2]|0;
     $92 = (((($91)) + 20|0) + ($$18994$i<<2)|0);
     HEAP32[$92>>2] = 0;
     $93 = HEAP32[$82>>2]|0;
     $94 = (($93) + -1)|0;
     $95 = (((($91)) + 60|0) + ($$18994$i<<2)|0);
     HEAP32[$95>>2] = $94;
     $96 = HEAP32[$72>>2]|0;
     $97 = HEAP32[$76>>2]|0;
     $98 = Math_imul($97, $96)|0;
     $99 = HEAP32[$43>>2]|0;
     $100 = (_jdiv_round_up($98,$99)|0);
     $101 = ((($$195$i)) + 40|0);
     HEAP32[$101>>2] = $100;
     $102 = HEAP32[$14>>2]|0;
     $103 = HEAP32[$84>>2]|0;
     $104 = Math_imul($103, $102)|0;
     $105 = HEAP32[$44>>2]|0;
     $106 = (_jdiv_round_up($104,$105)|0);
     $107 = ((($$195$i)) + 44|0);
     HEAP32[$107>>2] = $106;
     $108 = ((($$195$i)) + 48|0);
     HEAP32[$108>>2] = 1;
     $109 = ((($$195$i)) + 76|0);
     HEAP32[$109>>2] = 0;
     $110 = (($$18994$i) + 1)|0;
     $111 = HEAP32[$33>>2]|0;
     $112 = ($110|0)<($111|0);
     if (!($112)) {
      break;
     }
     $113 = ((($$195$i)) + 84|0);
     $$pre107$i = HEAP32[$43>>2]|0;
     $$18994$i = $110;$$195$i = $113;$80 = $$pre107$i;
    }
    $$pre108$i = HEAP32[$44>>2]|0;
    $116 = $$pre108$i;
   } else {
    $116 = $$$i;
   }
  } else {
   $48 = ((($0)) + 316|0);
   HEAP32[$48>>2] = 8;
   $116 = 1;
  }
  $114 = HEAP32[$14>>2]|0;
  $115 = $116 << 3;
  $117 = (_jdiv_round_up($114,$115)|0);
  $118 = ((($0)) + 320|0);
  HEAP32[$118>>2] = $117;
  $119 = ((($0)) + 328|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = HEAP32[$33>>2]|0;
  $122 = ($120|0)<($121|0);
  if ($122) {
   $$sink1$i = 1;
  } else {
   $123 = ((($0)) + 220|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($124|0)!=(0);
   $$92$i = $125&1;
   $$sink1$i = $$92$i;
  }
  $126 = HEAP32[$1>>2]|0;
  $127 = ((($126)) + 16|0);
  HEAP32[$127>>2] = $$sink1$i;
  HEAP32[$11>>2] = 0;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 2:  {
  HEAP32[$3>>2] = 1;
  $134 = ((($2)) + 24|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)==(0);
  if ($136) {
   $144 = ((($0)) + 152|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($0)) + 144|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($145|0)>($147|0);
   if (!($148)) {
    $$0 = 2;
    return ($$0|0);
   }
   HEAP32[$144>>2] = $147;
   $$0 = 2;
   return ($$0|0);
  } else {
   $137 = HEAP32[$6>>2]|0;
   $138 = ((($137)) + 16|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(0);
   if ($140) {
    $$0 = 2;
    return ($$0|0);
   }
   $141 = HEAP32[$0>>2]|0;
   $142 = ((($141)) + 20|0);
   HEAP32[$142>>2] = 59;
   $143 = HEAP32[$141>>2]|0;
   FUNCTION_TABLE_vi[$143 & 255]($0);
   $$0 = 2;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = $10;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _reset_input_controller($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 436|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = 38;
 $3 = ((($2)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 24|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 255]($0);
 $9 = ((($0)) + 440|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 255]($0);
 $12 = ((($0)) + 160|0);
 HEAP32[$12>>2] = 0;
 return;
}
function _start_input_pass($0) {
 $0 = $0|0;
 var $$$i = 0, $$030$i = 0, $$07679$i = 0, $$07780$i = 0, $$2$i = 0, $$78$i = 0, $$off$i = 0, $$pre$i = 0, $$pre$i9 = 0, $$pre33$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 328|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 332|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 348|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($5)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 352|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($5)) + 52|0);
  HEAP32[$12>>2] = 1;
  $13 = ((($5)) + 56|0);
  HEAP32[$13>>2] = 1;
  $14 = ((($5)) + 60|0);
  HEAP32[$14>>2] = 1;
  $15 = ((($5)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($5)) + 64|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 68|0);
  HEAP32[$18>>2] = 1;
  $19 = ((($5)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($10>>>0) % ($20>>>0))&-1;
  $22 = ($21|0)==(0);
  $$$i = $22 ? $20 : $21;
  $23 = ((($5)) + 72|0);
  HEAP32[$23>>2] = $$$i;
  $24 = ((($0)) + 356|0);
  HEAP32[$24>>2] = 1;
  $25 = ((($0)) + 360|0);
  HEAP32[$25>>2] = 0;
  $125 = 1;
 } else {
  $$off$i = (($2) + -1)|0;
  $26 = ($$off$i>>>0)>(3);
  if ($26) {
   $27 = HEAP32[$0>>2]|0;
   $28 = ((($27)) + 20|0);
   HEAP32[$28>>2] = 26;
   $29 = ((($27)) + 24|0);
   HEAP32[$29>>2] = $2;
   $30 = HEAP32[$0>>2]|0;
   $31 = ((($30)) + 28|0);
   HEAP32[$31>>2] = 4;
   $32 = HEAP32[$0>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vi[$33 & 255]($0);
  }
  $34 = ((($0)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 308|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37 << 3;
  $39 = (_jdiv_round_up($35,$38)|0);
  $40 = ((($0)) + 348|0);
  HEAP32[$40>>2] = $39;
  $41 = ((($0)) + 32|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($0)) + 312|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 << 3;
  $46 = (_jdiv_round_up($42,$45)|0);
  $47 = ((($0)) + 352|0);
  HEAP32[$47>>2] = $46;
  $48 = ((($0)) + 356|0);
  HEAP32[$48>>2] = 0;
  $49 = HEAP32[$1>>2]|0;
  $50 = ($49|0)>(0);
  if (!($50)) {
   $114 = ((($0)) + 444|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vi[$116 & 255]($0);
   $117 = ((($0)) + 428|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP32[$118>>2]|0;
   FUNCTION_TABLE_vi[$119 & 255]($0);
   $120 = HEAP32[$117>>2]|0;
   $121 = ((($120)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($0)) + 436|0);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$124>>2] = $122;
   return;
  }
  $$07780$i = 0;$76 = 0;
  while(1) {
   $51 = (((($0)) + 332|0) + ($$07780$i<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($52)) + 52|0);
   HEAP32[$55>>2] = $54;
   $56 = ((($52)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($52)) + 56|0);
   HEAP32[$58>>2] = $57;
   $59 = Math_imul($57, $54)|0;
   $60 = ((($52)) + 60|0);
   HEAP32[$60>>2] = $59;
   $61 = ((($52)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = Math_imul($62, $54)|0;
   $64 = ((($52)) + 64|0);
   HEAP32[$64>>2] = $63;
   $65 = ((($52)) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66>>>0) % ($54>>>0))&-1;
   $68 = ($67|0)==(0);
   $$78$i = $68 ? $54 : $67;
   $69 = ((($52)) + 68|0);
   HEAP32[$69>>2] = $$78$i;
   $70 = ((($52)) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71>>>0) % ($57>>>0))&-1;
   $73 = ($72|0)==(0);
   $$2$i = $73 ? $57 : $72;
   $74 = ((($52)) + 72|0);
   HEAP32[$74>>2] = $$2$i;
   $75 = (($59) + ($76))|0;
   $77 = ($75|0)>(10);
   if ($77) {
    $78 = HEAP32[$0>>2]|0;
    $79 = ((($78)) + 20|0);
    HEAP32[$79>>2] = 13;
    $80 = HEAP32[$78>>2]|0;
    FUNCTION_TABLE_vi[$80 & 255]($0);
   }
   $81 = ($59|0)>(0);
   if ($81) {
    $$07679$i = $59;
    while(1) {
     $82 = (($$07679$i) + -1)|0;
     $83 = HEAP32[$48>>2]|0;
     $84 = (($83) + 1)|0;
     HEAP32[$48>>2] = $84;
     $85 = (((($0)) + 360|0) + ($83<<2)|0);
     HEAP32[$85>>2] = $$07780$i;
     $86 = ($$07679$i|0)>(1);
     if ($86) {
      $$07679$i = $82;
     } else {
      break;
     }
    }
   }
   $87 = (($$07780$i) + 1)|0;
   $88 = HEAP32[$1>>2]|0;
   $89 = ($87|0)<($88|0);
   if (!($89)) {
    break;
   }
   $$pre$i = HEAP32[$48>>2]|0;
   $$07780$i = $87;$76 = $$pre$i;
  }
  $90 = ($88|0)>(0);
  if ($90) {
   $125 = $88;
  } else {
   $114 = ((($0)) + 444|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vi[$116 & 255]($0);
   $117 = ((($0)) + 428|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP32[$118>>2]|0;
   FUNCTION_TABLE_vi[$119 & 255]($0);
   $120 = HEAP32[$117>>2]|0;
   $121 = ((($120)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($0)) + 436|0);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$124>>2] = $122;
   return;
  }
 }
 $91 = ((($0)) + 4|0);
 $$030$i = 0;$126 = $125;
 while(1) {
  $92 = (((($0)) + 332|0) + ($$030$i<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 76|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $97 = ((($93)) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98>>>0)>(3);
   $$pre33$i = (((($0)) + 164|0) + ($98<<2)|0);
   if ($99) {
    label = 18;
   } else {
    $100 = HEAP32[$$pre33$i>>2]|0;
    $101 = ($100|0)==(0|0);
    if ($101) {
     label = 18;
    }
   }
   if ((label|0) == 18) {
    label = 0;
    $102 = HEAP32[$0>>2]|0;
    $103 = ((($102)) + 20|0);
    HEAP32[$103>>2] = 52;
    $104 = ((($102)) + 24|0);
    HEAP32[$104>>2] = $98;
    $105 = HEAP32[$0>>2]|0;
    $106 = HEAP32[$105>>2]|0;
    FUNCTION_TABLE_vi[$106 & 255]($0);
   }
   $107 = HEAP32[$91>>2]|0;
   $108 = HEAP32[$107>>2]|0;
   $109 = (FUNCTION_TABLE_iiii[$108 & 255]($0,1,132)|0);
   $110 = HEAP32[$$pre33$i>>2]|0;
   _memcpy(($109|0),($110|0),132)|0;
   HEAP32[$94>>2] = $109;
   $$pre$i9 = HEAP32[$1>>2]|0;
   $113 = $$pre$i9;
  } else {
   $113 = $126;
  }
  $111 = (($$030$i) + 1)|0;
  $112 = ($111|0)<($113|0);
  if ($112) {
   $$030$i = $111;$126 = $113;
  } else {
   break;
  }
 }
 $114 = ((($0)) + 444|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = HEAP32[$115>>2]|0;
 FUNCTION_TABLE_vi[$116 & 255]($0);
 $117 = ((($0)) + 428|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = HEAP32[$118>>2]|0;
 FUNCTION_TABLE_vi[$119 & 255]($0);
 $120 = HEAP32[$117>>2]|0;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($0)) + 436|0);
 $124 = HEAP32[$123>>2]|0;
 HEAP32[$124>>2] = $122;
 return;
}
function _finish_input_pass($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 436|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = 38;
 return;
}
function _jpeg_resync_to_restart($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $$0$us38 = 0, $$034$ph = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $trunc$us39 = 0, $trunc$us39$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 416|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 20|0);
 HEAP32[$5>>2] = 121;
 $6 = ((($4)) + 24|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = $1;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 255]($0,-1);
 $12 = (($1) + 1)|0;
 $13 = $12 & 7;
 $14 = $13 | 208;
 $15 = (($1) + 2)|0;
 $16 = $15 & 7;
 $17 = $16 | 208;
 $18 = (($1) + 7)|0;
 $19 = $18 & 7;
 $20 = $19 | 208;
 $21 = (($1) + 6)|0;
 $22 = $21 & 7;
 $23 = $22 | 208;
 $$034$ph = $3;
 L1: while(1) {
  $24 = ($$034$ph|0)<(192);
  $25 = ($$034$ph|0)==($14|0);
  $26 = ($$034$ph|0)==($17|0);
  $27 = ($$034$ph|0)==($20|0);
  $28 = ($$034$ph|0)==($23|0);
  $29 = $27 | $28;
  $$$ = $29 ? 2 : 1;
  L3: do {
   if ($24) {
    $30 = HEAP32[$0>>2]|0;
    $31 = ((($30)) + 20|0);
    HEAP32[$31>>2] = 97;
    $32 = ((($30)) + 24|0);
    HEAP32[$32>>2] = $$034$ph;
    $33 = HEAP32[$0>>2]|0;
    $34 = ((($33)) + 28|0);
    HEAP32[$34>>2] = 2;
    $35 = HEAP32[$0>>2]|0;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 255]($0,4);
   } else {
    $38 = $$034$ph & -8;
    $39 = ($38|0)==(208);
    if (!($39)) {
     label = 6;
     break L1;
    }
    $40 = $25 | $26;
    $$0$us38 = $40 ? 3 : $$$;
    $trunc$us39 = $$0$us38&255;
    while(1) {
     $49 = HEAP32[$0>>2]|0;
     $50 = ((($49)) + 20|0);
     HEAP32[$50>>2] = 97;
     $51 = ((($49)) + 24|0);
     HEAP32[$51>>2] = $$034$ph;
     $52 = HEAP32[$0>>2]|0;
     $53 = ((($52)) + 28|0);
     HEAP32[$53>>2] = $$0$us38;
     $54 = HEAP32[$0>>2]|0;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     FUNCTION_TABLE_vii[$56 & 255]($0,4);
     $trunc$us39$clear = $trunc$us39 & 3;
     switch ($trunc$us39$clear<<24>>24) {
     case 1:  {
      label = 8;
      break L1;
      break;
     }
     case 3:  {
      $$035 = 1;
      label = 11;
      break L1;
      break;
     }
     case 2:  {
      break L3;
      break;
     }
     default: {
     }
     }
    }
   }
  } while(0);
  $57 = (_next_marker($0)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $$035 = 0;
   label = 11;
   break;
  }
  $59 = HEAP32[$2>>2]|0;
  $$034$ph = $59;
 }
 if ((label|0) == 6) {
  $41 = HEAP32[$0>>2]|0;
  $42 = ((($41)) + 20|0);
  HEAP32[$42>>2] = 97;
  $43 = ((($41)) + 24|0);
  HEAP32[$43>>2] = $$034$ph;
  $44 = HEAP32[$0>>2]|0;
  $45 = ((($44)) + 28|0);
  HEAP32[$45>>2] = 3;
  $46 = HEAP32[$0>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  FUNCTION_TABLE_vii[$48 & 255]($0,4);
  $$035 = 1;
  return ($$035|0);
 }
 else if ((label|0) == 8) {
  HEAP32[$2>>2] = 0;
  $$035 = 1;
  return ($$035|0);
 }
 else if ((label|0) == 11) {
  return ($$035|0);
 }
 return (0)|0;
}
function _next_marker($0) {
 $0 = $0|0;
 var $$0 = 0, $$058 = 0, $$064 = 0, $$2 = 0, $$2$in$be = 0, $$2$in$ph = 0, $$260 = 0, $$26077 = 0, $$26079 = 0, $$276 = 0, $$278 = 0, $$361$sink$be = 0, $$361$sink$ph = 0, $$4 = 0, $$462 = 0, $$5 = 0, $$563 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 12|0);
 $7 = ((($0)) + 440|0);
 $$0 = $5;$$058 = $3;
 L1: while(1) {
  $8 = ($$0|0)==(0);
  if ($8) {
   $9 = HEAP32[$6>>2]|0;
   $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$064 = 0;
    label = 19;
    break;
   }
   $12 = HEAP32[$2>>2]|0;
   $13 = HEAP32[$4>>2]|0;
   $$2$in$ph = $13;$$361$sink$ph = $12;
  } else {
   $$2$in$ph = $$0;$$361$sink$ph = $$058;
  }
  $14 = HEAP8[$$361$sink$ph>>0]|0;
  $$276 = (($$2$in$ph) + -1)|0;
  $$26077 = ((($$361$sink$ph)) + 1|0);
  $15 = ($14<<24>>24)==(-1);
  if ($15) {
   $$4 = $$276;$$462 = $$26077;
  } else {
   $$26079 = $$26077;$$278 = $$276;
   while(1) {
    $16 = HEAP32[$7>>2]|0;
    $17 = ((($16)) + 24|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 1)|0;
    HEAP32[$17>>2] = $19;
    HEAP32[$2>>2] = $$26079;
    HEAP32[$4>>2] = $$278;
    $20 = ($$278|0)==(0);
    if ($20) {
     $21 = HEAP32[$6>>2]|0;
     $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$064 = 0;
      label = 19;
      break L1;
     }
     $24 = HEAP32[$2>>2]|0;
     $25 = HEAP32[$4>>2]|0;
     $$2$in$be = $25;$$361$sink$be = $24;
    } else {
     $$2$in$be = $$278;$$361$sink$be = $$26079;
    }
    $26 = HEAP8[$$361$sink$be>>0]|0;
    $$2 = (($$2$in$be) + -1)|0;
    $$260 = ((($$361$sink$be)) + 1|0);
    $27 = ($26<<24>>24)==(-1);
    if ($27) {
     $$4 = $$2;$$462 = $$260;
     break;
    } else {
     $$26079 = $$260;$$278 = $$2;
    }
   }
  }
  while(1) {
   $28 = ($$4|0)==(0);
   if ($28) {
    $29 = HEAP32[$6>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 127]($0)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $$064 = 0;
     label = 19;
     break L1;
    }
    $32 = HEAP32[$2>>2]|0;
    $33 = HEAP32[$4>>2]|0;
    $$5 = $33;$$563 = $32;
   } else {
    $$5 = $$4;$$563 = $$462;
   }
   $34 = (($$5) + -1)|0;
   $35 = ((($$563)) + 1|0);
   $36 = HEAP8[$$563>>0]|0;
   $37 = ($36<<24>>24)==(-1);
   if ($37) {
    $$4 = $34;$$462 = $35;
   } else {
    break;
   }
  }
  $38 = ($36<<24>>24)==(0);
  $39 = HEAP32[$7>>2]|0;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  if (!($38)) {
   label = 16;
   break;
  }
  $42 = (($41) + 2)|0;
  HEAP32[$40>>2] = $42;
  HEAP32[$2>>2] = $35;
  HEAP32[$4>>2] = $34;
  $$0 = $34;$$058 = $35;
 }
 if ((label|0) == 16) {
  $43 = $36&255;
  $44 = ($41|0)==(0);
  if (!($44)) {
   $45 = HEAP32[$0>>2]|0;
   $46 = ((($45)) + 20|0);
   HEAP32[$46>>2] = 116;
   $47 = ((($45)) + 24|0);
   HEAP32[$47>>2] = $41;
   $48 = HEAP32[$0>>2]|0;
   $49 = ((($48)) + 28|0);
   HEAP32[$49>>2] = $43;
   $50 = HEAP32[$0>>2]|0;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   FUNCTION_TABLE_vii[$52 & 255]($0,-1);
   $53 = HEAP32[$7>>2]|0;
   $54 = ((($53)) + 24|0);
   HEAP32[$54>>2] = 0;
  }
  $55 = ((($0)) + 416|0);
  HEAP32[$55>>2] = $43;
  HEAP32[$2>>2] = $35;
  HEAP32[$4>>2] = $34;
  $$064 = 1;
  return ($$064|0);
 }
 else if ((label|0) == 19) {
  return ($$064|0);
 }
 return (0)|0;
}
function _jinit_marker_reader($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,0,172)|0);
 $5 = ((($0)) + 440|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 42;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 43;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = 44;
 $8 = ((($4)) + 28|0);
 HEAP32[$8>>2] = 45;
 $9 = ((($4)) + 96|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($4)) + 32|0);
 $11 = ((($4)) + 100|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($4)) + 36|0);
 HEAP32[$12>>2] = 45;
 $13 = ((($4)) + 104|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($4)) + 40|0);
 HEAP32[$14>>2] = 45;
 $15 = ((($4)) + 108|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($4)) + 44|0);
 HEAP32[$16>>2] = 45;
 $17 = ((($4)) + 112|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($4)) + 48|0);
 HEAP32[$18>>2] = 45;
 $19 = ((($4)) + 116|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 52|0);
 HEAP32[$20>>2] = 45;
 $21 = ((($4)) + 120|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($4)) + 56|0);
 HEAP32[$22>>2] = 45;
 $23 = ((($4)) + 124|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($4)) + 60|0);
 HEAP32[$24>>2] = 45;
 $25 = ((($4)) + 128|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($4)) + 64|0);
 HEAP32[$26>>2] = 45;
 $27 = ((($4)) + 132|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($4)) + 68|0);
 HEAP32[$28>>2] = 45;
 $29 = ((($4)) + 136|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($4)) + 72|0);
 HEAP32[$30>>2] = 45;
 $31 = ((($4)) + 140|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($4)) + 76|0);
 HEAP32[$32>>2] = 45;
 $33 = ((($4)) + 144|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($4)) + 80|0);
 HEAP32[$34>>2] = 45;
 $35 = ((($4)) + 148|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($4)) + 84|0);
 HEAP32[$36>>2] = 45;
 $37 = ((($4)) + 152|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($4)) + 156|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($4)) + 92|0);
 HEAP32[$39>>2] = 45;
 $40 = ((($4)) + 160|0);
 HEAP32[$40>>2] = 0;
 HEAP32[$10>>2] = 46;
 $41 = ((($4)) + 88|0);
 HEAP32[$41>>2] = 46;
 $42 = HEAP32[$5>>2]|0;
 $43 = ((($0)) + 216|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($0)) + 144|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($0)) + 416|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($42)) + 12|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($42)) + 16|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($42)) + 24|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($42)) + 164|0);
 HEAP32[$49>>2] = 0;
 return;
}
function _reset_marker_reader($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 440|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 216|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 144|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 416|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 164|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _read_markers($0) {
 $0 = $0|0;
 var $$$i = 0, $$$v$i = 0, $$0 = 0, $$0$i = 0, $$0$i43 = 0, $$0$i73 = 0, $$0$i77 = 0, $$0137$i = 0, $$0138$i = 0, $$0144$lcssa$i = 0, $$0144186$i = 0, $$0145$i = 0, $$0146$i = 0, $$0147$lcssa$i = 0, $$0147167$i = 0, $$0149163$i = 0, $$0149163$us$i = 0, $$0156$i = 0, $$0181$i = 0, $$0182$i = 0;
 var $$0193$lcssa$i = 0, $$0193198$i = 0, $$0193203$i = 0, $$0194204$i = 0, $$0195202$i = 0, $$041$i = 0, $$042$i = 0, $$057$i = 0, $$087$i = 0, $$093$lcssa$i = 0, $$09397$i = 0, $$1$i = 0, $$1$i41 = 0, $$1$i44 = 0, $$1$i50 = 0, $$1$i62 = 0, $$1$i74 = 0, $$1$i78 = 0, $$1139$i = 0, $$1147$i = 0;
 var $$1150166$i = 0, $$1155180$i = 0, $$1183$i = 0, $$142$i = 0, $$143$i = 0, $$158$i = 0, $$188$i = 0, $$2$i = 0, $$2$i75 = 0, $$2$lcssa$i = 0, $$2$lcssa$i58 = 0, $$2$lcssa$i70 = 0, $$2140$lcssa$i = 0, $$2140168$i = 0, $$2148$lcssa$i = 0, $$2148184$i = 0, $$2169$i = 0, $$2184$i = 0, $$2185$i = 0, $$259$i = 0;
 var $$289$lcssa$i = 0, $$28998$i = 0, $$299$i = 0, $$3$i = 0, $$3$i46 = 0, $$3$i51 = 0, $$3$i64 = 0, $$3$i76 = 0, $$3$lcssa$i = 0, $$3141$i = 0, $$3149$i = 0, $$3185$i = 0, $$3185$lcssa$i = 0, $$3185209$i = 0, $$3185212$i = 0, $$3208$i = 0, $$3211$i = 0, $$360$i = 0, $$390$i = 0, $$4$1$i = 0;
 var $$4$10$i = 0, $$4$11$i = 0, $$4$12$i = 0, $$4$13$i = 0, $$4$14$i = 0, $$4$15$i = 0, $$4$2$i = 0, $$4$3$i = 0, $$4$4$i = 0, $$4$5$i = 0, $$4$6$i = 0, $$4$7$i = 0, $$4$8$i = 0, $$4$9$i = 0, $$4$i = 0, $$4$i47 = 0, $$4$i53 = 0, $$4$i67 = 0, $$4$lcssa$i = 0, $$4$us$i = 0;
 var $$4142$i = 0, $$4142$lcssa$i = 0, $$4142$us$i = 0, $$4142162$i = 0, $$4142165$i = 0, $$4142165$us$i = 0, $$4150$1$i = 0, $$4150$10$i = 0, $$4150$11$i = 0, $$4150$12$i = 0, $$4150$13$i = 0, $$4150$14$i = 0, $$4150$15$i = 0, $$4150$2$i = 0, $$4150$3$i = 0, $$4150$4$i = 0, $$4150$5$i = 0, $$4150$6$i = 0, $$4150$7$i = 0, $$4150$8$i = 0;
 var $$4150$9$i = 0, $$4150$i = 0, $$4150175$i = 0, $$4161$i = 0, $$4164$i = 0, $$4164$us$i = 0, $$4174$i = 0, $$4186$i = 0, $$491$i = 0, $$5$1$i = 0, $$5$10$i = 0, $$5$11$i = 0, $$5$12$i = 0, $$5$13$i = 0, $$5$14$i = 0, $$5$15$i = 0, $$5$2$i = 0, $$5$3$i = 0, $$5$4$i = 0, $$5$5$i = 0;
 var $$5$6$i = 0, $$5$7$i = 0, $$5$8$i = 0, $$5$9$i = 0, $$5$i = 0, $$5$i52 = 0, $$5$i65 = 0, $$5143$i = 0, $$5151$1$i = 0, $$5151$10$i = 0, $$5151$11$i = 0, $$5151$12$i = 0, $$5151$13$i = 0, $$5151$14$i = 0, $$5151$15$i = 0, $$5151$2$i = 0, $$5151$3$i = 0, $$5151$4$i = 0, $$5151$5$i = 0, $$5151$6$i = 0;
 var $$5151$7$i = 0, $$5151$8$i = 0, $$5151$9$i = 0, $$5151$i = 0, $$5187$i = 0, $$6$i = 0, $$6$i66 = 0, $$6$lcssa$i = 0, $$6144$i = 0, $$6152$lcssa$i = 0, $$6152181$i = 0, $$6182$i = 0, $$6188$i = 0, $$7$i = 0, $$7$i56 = 0, $$7$us$i = 0, $$7145$us$i = 0, $$7153$i = 0, $$7189$i = 0, $$8$i = 0;
 var $$8190$i = 0, $$lcssa$i = 0, $$pr$pre = 0, $$pre = 0, $$pre$i = 0, $$pre125 = 0, $$sroa$10$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$12$0$$sroa_idx = 0, $$sroa$13$0$$sroa_idx = 0, $$sroa$14$0$$sroa_idx = 0, $$sroa$15$0$$sroa_idx = 0, $$sroa$16$0$$sroa_idx = 0, $$sroa$17$0$$sroa_idx = 0, $$sroa$18$0$$sroa_idx = 0, $$sroa$19$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx = 0;
 var $$sroa$8$0$$sroa_idx = 0, $$sroa$9$0$$sroa_idx = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $indvars$iv$i = 0;
 var $indvars$iv$next$i = 0, $or$cond$i = 0, $or$cond$i61 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $1 = sp;
 $2 = ((($0)) + 416|0);
 $3 = ((($0)) + 440|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 228|0);
 $6 = ((($0)) + 244|0);
 $7 = ((($0)) + 260|0);
 $8 = ((($0)) + 229|0);
 $9 = ((($0)) + 245|0);
 $10 = ((($0)) + 261|0);
 $11 = ((($0)) + 230|0);
 $12 = ((($0)) + 246|0);
 $13 = ((($0)) + 262|0);
 $14 = ((($0)) + 231|0);
 $15 = ((($0)) + 247|0);
 $16 = ((($0)) + 263|0);
 $17 = ((($0)) + 232|0);
 $18 = ((($0)) + 248|0);
 $19 = ((($0)) + 264|0);
 $20 = ((($0)) + 233|0);
 $21 = ((($0)) + 249|0);
 $22 = ((($0)) + 265|0);
 $23 = ((($0)) + 234|0);
 $24 = ((($0)) + 250|0);
 $25 = ((($0)) + 266|0);
 $26 = ((($0)) + 235|0);
 $27 = ((($0)) + 251|0);
 $28 = ((($0)) + 267|0);
 $29 = ((($0)) + 236|0);
 $30 = ((($0)) + 252|0);
 $31 = ((($0)) + 268|0);
 $32 = ((($0)) + 237|0);
 $33 = ((($0)) + 253|0);
 $34 = ((($0)) + 269|0);
 $35 = ((($0)) + 238|0);
 $36 = ((($0)) + 254|0);
 $37 = ((($0)) + 270|0);
 $38 = ((($0)) + 239|0);
 $39 = ((($0)) + 255|0);
 $40 = ((($0)) + 271|0);
 $41 = ((($0)) + 240|0);
 $42 = ((($0)) + 256|0);
 $43 = ((($0)) + 272|0);
 $44 = ((($0)) + 241|0);
 $45 = ((($0)) + 257|0);
 $46 = ((($0)) + 273|0);
 $47 = ((($0)) + 242|0);
 $48 = ((($0)) + 258|0);
 $49 = ((($0)) + 274|0);
 $50 = ((($0)) + 243|0);
 $51 = ((($0)) + 259|0);
 $52 = ((($0)) + 275|0);
 $53 = ((($0)) + 276|0);
 $54 = ((($0)) + 40|0);
 $55 = ((($0)) + 300|0);
 $56 = ((($0)) + 280|0);
 $57 = ((($0)) + 284|0);
 $58 = ((($0)) + 285|0);
 $59 = ((($0)) + 286|0);
 $60 = ((($0)) + 288|0);
 $61 = ((($0)) + 290|0);
 $62 = ((($0)) + 292|0);
 $63 = ((($0)) + 296|0);
 $$pre = HEAP32[$2>>2]|0;
 $64 = $$pre;
 L1: while(1) {
  $65 = ($64|0)==(0);
  do {
   if ($65) {
    $66 = HEAP32[$3>>2]|0;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(0);
    if (!($69)) {
     $103 = (_next_marker($0)|0);
     $104 = ($103|0)==(0);
     if ($104) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $$pr$pre = HEAP32[$2>>2]|0;
     $105 = $$pr$pre;
     break;
    }
    $70 = HEAP32[$4>>2]|0;
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0);
    if ($73) {
     $74 = ((($70)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_ii[$75 & 127]($0)|0);
     $77 = ($76|0)==(0);
     if ($77) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $78 = HEAP32[$71>>2]|0;
     $$0$i = $78;
    } else {
     $$0$i = $72;
    }
    $$042$i = HEAP32[$70>>2]|0;
    $79 = (($$0$i) + -1)|0;
    $80 = ((($$042$i)) + 1|0);
    $81 = HEAP8[$$042$i>>0]|0;
    $82 = $81&255;
    $83 = ($79|0)==(0);
    if ($83) {
     $84 = ((($70)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_ii[$85 & 127]($0)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $88 = HEAP32[$70>>2]|0;
     $89 = HEAP32[$71>>2]|0;
     $$1$i = $89;$$143$i = $88;
    } else {
     $$1$i = $79;$$143$i = $80;
    }
    $90 = (($$1$i) + -1)|0;
    $91 = ((($$143$i)) + 1|0);
    $92 = HEAP8[$$143$i>>0]|0;
    $93 = $92&255;
    $94 = ($81<<24>>24)!=(-1);
    $95 = ($92<<24>>24)!=(-40);
    $or$cond$i = $94 | $95;
    if ($or$cond$i) {
     $96 = HEAP32[$0>>2]|0;
     $97 = ((($96)) + 20|0);
     HEAP32[$97>>2] = 53;
     $98 = ((($96)) + 24|0);
     HEAP32[$98>>2] = $82;
     $99 = HEAP32[$0>>2]|0;
     $100 = ((($99)) + 28|0);
     HEAP32[$100>>2] = $93;
     $101 = HEAP32[$0>>2]|0;
     $102 = HEAP32[$101>>2]|0;
     FUNCTION_TABLE_vi[$102 & 255]($0);
    }
    HEAP32[$2>>2] = $93;
    HEAP32[$70>>2] = $91;
    HEAP32[$71>>2] = $90;
    $105 = $93;
   } else {
    $105 = $64;
   }
  } while(0);
  do {
   switch ($105|0) {
   case 218:  {
    label = 24;
    break L1;
    break;
   }
   case 217:  {
    label = 65;
    break L1;
    break;
   }
   case 216:  {
    $106 = HEAP32[$0>>2]|0;
    $107 = ((($106)) + 20|0);
    HEAP32[$107>>2] = 102;
    $108 = ((($106)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    FUNCTION_TABLE_vii[$109 & 255]($0,1);
    $110 = HEAP32[$3>>2]|0;
    $111 = ((($110)) + 12|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(0);
    if ($113) {
     $118 = $110;
    } else {
     $114 = HEAP32[$0>>2]|0;
     $115 = ((($114)) + 20|0);
     HEAP32[$115>>2] = 61;
     $116 = HEAP32[$114>>2]|0;
     FUNCTION_TABLE_vi[$116 & 255]($0);
     $$pre125 = HEAP32[$3>>2]|0;
     $118 = $$pre125;
    }
    HEAP8[$5>>0] = 0;
    HEAP8[$6>>0] = 1;
    HEAP8[$7>>0] = 5;
    HEAP8[$8>>0] = 0;
    HEAP8[$9>>0] = 1;
    HEAP8[$10>>0] = 5;
    HEAP8[$11>>0] = 0;
    HEAP8[$12>>0] = 1;
    HEAP8[$13>>0] = 5;
    HEAP8[$14>>0] = 0;
    HEAP8[$15>>0] = 1;
    HEAP8[$16>>0] = 5;
    HEAP8[$17>>0] = 0;
    HEAP8[$18>>0] = 1;
    HEAP8[$19>>0] = 5;
    HEAP8[$20>>0] = 0;
    HEAP8[$21>>0] = 1;
    HEAP8[$22>>0] = 5;
    HEAP8[$23>>0] = 0;
    HEAP8[$24>>0] = 1;
    HEAP8[$25>>0] = 5;
    HEAP8[$26>>0] = 0;
    HEAP8[$27>>0] = 1;
    HEAP8[$28>>0] = 5;
    HEAP8[$29>>0] = 0;
    HEAP8[$30>>0] = 1;
    HEAP8[$31>>0] = 5;
    HEAP8[$32>>0] = 0;
    HEAP8[$33>>0] = 1;
    HEAP8[$34>>0] = 5;
    HEAP8[$35>>0] = 0;
    HEAP8[$36>>0] = 1;
    HEAP8[$37>>0] = 5;
    HEAP8[$38>>0] = 0;
    HEAP8[$39>>0] = 1;
    HEAP8[$40>>0] = 5;
    HEAP8[$41>>0] = 0;
    HEAP8[$42>>0] = 1;
    HEAP8[$43>>0] = 5;
    HEAP8[$44>>0] = 0;
    HEAP8[$45>>0] = 1;
    HEAP8[$46>>0] = 5;
    HEAP8[$47>>0] = 0;
    HEAP8[$48>>0] = 1;
    HEAP8[$49>>0] = 5;
    HEAP8[$50>>0] = 0;
    HEAP8[$51>>0] = 1;
    HEAP8[$52>>0] = 5;
    HEAP32[$53>>2] = 0;
    HEAP32[$54>>2] = 0;
    HEAP32[$55>>2] = 0;
    HEAP32[$56>>2] = 0;
    HEAP8[$57>>0] = 1;
    HEAP8[$58>>0] = 1;
    HEAP8[$59>>0] = 0;
    HEAP16[$60>>1] = 1;
    HEAP16[$61>>1] = 1;
    HEAP32[$62>>2] = 0;
    HEAP8[$63>>0] = 0;
    $117 = ((($118)) + 12|0);
    HEAP32[$117>>2] = 1;
    break;
   }
   case 193: case 192:  {
    $119 = (_get_sof($0,0,0)|0);
    $120 = ($119|0)==(0);
    if ($120) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 194:  {
    $121 = (_get_sof($0,1,0)|0);
    $122 = ($121|0)==(0);
    if ($122) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 201:  {
    $123 = (_get_sof($0,0,1)|0);
    $124 = ($123|0)==(0);
    if ($124) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 202:  {
    $125 = (_get_sof($0,1,1)|0);
    $126 = ($125|0)==(0);
    if ($126) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 207: case 206: case 205: case 203: case 200: case 199: case 198: case 197: case 195:  {
    $127 = HEAP32[$0>>2]|0;
    $128 = ((($127)) + 20|0);
    HEAP32[$128>>2] = 60;
    $129 = ((($127)) + 24|0);
    HEAP32[$129>>2] = $105;
    $130 = HEAP32[$0>>2]|0;
    $131 = HEAP32[$130>>2]|0;
    FUNCTION_TABLE_vi[$131 & 255]($0);
    break;
   }
   case 204:  {
    $317 = HEAP32[$4>>2]|0;
    $318 = ((($317)) + 4|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319|0)==(0);
    if ($320) {
     $321 = ((($317)) + 12|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = (FUNCTION_TABLE_ii[$322 & 127]($0)|0);
     $324 = ($323|0)==(0);
     if ($324) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $325 = HEAP32[$318>>2]|0;
     $$0$i43 = $325;
    } else {
     $$0$i43 = $319;
    }
    $$087$i = HEAP32[$317>>2]|0;
    $326 = (($$0$i43) + -1)|0;
    $327 = ((($$087$i)) + 1|0);
    $328 = HEAP8[$$087$i>>0]|0;
    $329 = $328&255;
    $330 = $329 << 8;
    $331 = ($326|0)==(0);
    if ($331) {
     $332 = ((($317)) + 12|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = (FUNCTION_TABLE_ii[$333 & 127]($0)|0);
     $335 = ($334|0)==(0);
     if ($335) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $336 = HEAP32[$317>>2]|0;
     $337 = HEAP32[$318>>2]|0;
     $$1$i44 = $337;$$188$i = $336;
    } else {
     $$1$i44 = $326;$$188$i = $327;
    }
    $338 = (($$1$i44) + -1)|0;
    $339 = ((($$188$i)) + 1|0);
    $340 = HEAP8[$$188$i>>0]|0;
    $341 = $340&255;
    $342 = $330 | $341;
    $343 = (($342) + -2)|0;
    $344 = ($342>>>0)>(2);
    if ($344) {
     $345 = ((($317)) + 12|0);
     $$09397$i = $343;$$28998$i = $339;$$299$i = $338;
     while(1) {
      $346 = ($$299$i|0)==(0);
      if ($346) {
       $347 = HEAP32[$345>>2]|0;
       $348 = (FUNCTION_TABLE_ii[$347 & 127]($0)|0);
       $349 = ($348|0)==(0);
       if ($349) {
        $$0 = 0;
        label = 232;
        break L1;
       }
       $350 = HEAP32[$317>>2]|0;
       $351 = HEAP32[$318>>2]|0;
       $$3$i46 = $351;$$390$i = $350;
      } else {
       $$3$i46 = $$299$i;$$390$i = $$28998$i;
      }
      $352 = (($$3$i46) + -1)|0;
      $353 = ((($$390$i)) + 1|0);
      $354 = HEAP8[$$390$i>>0]|0;
      $355 = $354&255;
      $356 = ($352|0)==(0);
      if ($356) {
       $357 = HEAP32[$345>>2]|0;
       $358 = (FUNCTION_TABLE_ii[$357 & 127]($0)|0);
       $359 = ($358|0)==(0);
       if ($359) {
        $$0 = 0;
        label = 232;
        break L1;
       }
       $360 = HEAP32[$317>>2]|0;
       $361 = HEAP32[$318>>2]|0;
       $$4$i47 = $361;$$491$i = $360;
      } else {
       $$4$i47 = $352;$$491$i = $353;
      }
      $362 = (($$4$i47) + -1)|0;
      $363 = ((($$491$i)) + 1|0);
      $364 = HEAP8[$$491$i>>0]|0;
      $365 = $364&255;
      $366 = (($$09397$i) + -2)|0;
      $367 = HEAP32[$0>>2]|0;
      $368 = ((($367)) + 20|0);
      HEAP32[$368>>2] = 79;
      $369 = ((($367)) + 24|0);
      HEAP32[$369>>2] = $355;
      $370 = HEAP32[$0>>2]|0;
      $371 = ((($370)) + 28|0);
      HEAP32[$371>>2] = $365;
      $372 = HEAP32[$0>>2]|0;
      $373 = ((($372)) + 4|0);
      $374 = HEAP32[$373>>2]|0;
      FUNCTION_TABLE_vii[$374 & 255]($0,1);
      $375 = ($354&255)>(31);
      if ($375) {
       $376 = HEAP32[$0>>2]|0;
       $377 = ((($376)) + 20|0);
       HEAP32[$377>>2] = 28;
       $378 = ((($376)) + 24|0);
       HEAP32[$378>>2] = $355;
       $379 = HEAP32[$0>>2]|0;
       $380 = HEAP32[$379>>2]|0;
       FUNCTION_TABLE_vi[$380 & 255]($0);
       label = 83;
      } else {
       $381 = ($354&255)>(15);
       if ($381) {
        label = 83;
       } else {
        $384 = $365 & 15;
        $385 = $384&255;
        $386 = (((($0)) + 228|0) + ($355)|0);
        HEAP8[$386>>0] = $385;
        $387 = ($364&255) >>> 4;
        $388 = (((($0)) + 244|0) + ($355)|0);
        HEAP8[$388>>0] = $387;
        $389 = $387&255;
        $390 = ($384>>>0)>($389>>>0);
        if ($390) {
         $392 = HEAP32[$0>>2]|0;
         $393 = ((($392)) + 20|0);
         HEAP32[$393>>2] = 29;
         $394 = ((($392)) + 24|0);
         HEAP32[$394>>2] = $365;
         $395 = HEAP32[$0>>2]|0;
         $396 = HEAP32[$395>>2]|0;
         FUNCTION_TABLE_vi[$396 & 255]($0);
        }
       }
      }
      if ((label|0) == 83) {
       label = 0;
       $382 = (($355) + -16)|0;
       $383 = (((($0)) + 260|0) + ($382)|0);
       HEAP8[$383>>0] = $364;
      }
      $391 = ($$09397$i|0)>(2);
      if ($391) {
       $$09397$i = $366;$$28998$i = $363;$$299$i = $362;
      } else {
       $$093$lcssa$i = $366;$$2$lcssa$i = $362;$$289$lcssa$i = $363;
       break;
      }
     }
    } else {
     $$093$lcssa$i = $343;$$2$lcssa$i = $338;$$289$lcssa$i = $339;
    }
    $397 = ($$093$lcssa$i|0)==(0);
    if (!($397)) {
     $398 = HEAP32[$0>>2]|0;
     $399 = ((($398)) + 20|0);
     HEAP32[$399>>2] = 11;
     $400 = HEAP32[$398>>2]|0;
     FUNCTION_TABLE_vi[$400 & 255]($0);
    }
    HEAP32[$317>>2] = $$289$lcssa$i;
    HEAP32[$318>>2] = $$2$lcssa$i;
    break;
   }
   case 196:  {
    $401 = HEAP32[$4>>2]|0;
    $402 = ((($401)) + 4|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = ($403|0)==(0);
    if ($404) {
     $405 = ((($401)) + 12|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (FUNCTION_TABLE_ii[$406 & 127]($0)|0);
     $408 = ($407|0)==(0);
     if ($408) {
      label = 168;
      break L1;
     }
     $409 = HEAP32[$402>>2]|0;
     $$0145$i = $409;
    } else {
     $$0145$i = $403;
    }
    $$0146$i = HEAP32[$401>>2]|0;
    $410 = (($$0145$i) + -1)|0;
    $411 = ((($$0146$i)) + 1|0);
    $412 = HEAP8[$$0146$i>>0]|0;
    $413 = $412&255;
    $414 = $413 << 8;
    $415 = ($410|0)==(0);
    if ($415) {
     $416 = ((($401)) + 12|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = (FUNCTION_TABLE_ii[$417 & 127]($0)|0);
     $419 = ($418|0)==(0);
     if ($419) {
      label = 168;
      break L1;
     }
     $420 = HEAP32[$401>>2]|0;
     $421 = HEAP32[$402>>2]|0;
     $$1$i50 = $421;$$1147$i = $420;
    } else {
     $$1$i50 = $410;$$1147$i = $411;
    }
    $422 = (($$1$i50) + -1)|0;
    $423 = ((($$1147$i)) + 1|0);
    $424 = HEAP8[$$1147$i>>0]|0;
    $425 = $424&255;
    $426 = $414 | $425;
    $427 = (($426) + -2)|0;
    $428 = ($426>>>0)>(18);
    if ($428) {
     $429 = ((($401)) + 12|0);
     $$0144186$i = $427;$$2148184$i = $423;$$2185$i = $422;
     while(1) {
      $430 = ($$2185$i|0)==(0);
      if ($430) {
       $431 = HEAP32[$429>>2]|0;
       $432 = (FUNCTION_TABLE_ii[$431 & 127]($0)|0);
       $433 = ($432|0)==(0);
       if ($433) {
        label = 168;
        break L1;
       }
       $434 = HEAP32[$401>>2]|0;
       $435 = HEAP32[$402>>2]|0;
       $$3$i51 = $435;$$3149$i = $434;
      } else {
       $$3$i51 = $$2185$i;$$3149$i = $$2148184$i;
      }
      $436 = HEAP8[$$3149$i>>0]|0;
      $437 = $436&255;
      $438 = HEAP32[$0>>2]|0;
      $439 = ((($438)) + 20|0);
      HEAP32[$439>>2] = 80;
      $440 = ((($438)) + 24|0);
      HEAP32[$440>>2] = $437;
      $441 = HEAP32[$0>>2]|0;
      $442 = ((($441)) + 4|0);
      $443 = HEAP32[$442>>2]|0;
      FUNCTION_TABLE_vii[$443 & 255]($0,1);
      $$4174$i = (($$3$i51) + -1)|0;
      $$4150175$i = ((($$3149$i)) + 1|0);
      $444 = ($$4174$i|0)==(0);
      if ($444) {
       $445 = HEAP32[$429>>2]|0;
       $446 = (FUNCTION_TABLE_ii[$445 & 127]($0)|0);
       $447 = ($446|0)==(0);
       if ($447) {
        label = 168;
        break L1;
       }
       $448 = HEAP32[$401>>2]|0;
       $449 = HEAP32[$402>>2]|0;
       $$5$i52 = $449;$$5151$i = $448;
      } else {
       $$5$i52 = $$4174$i;$$5151$i = $$4150175$i;
      }
      $450 = HEAP8[$$5151$i>>0]|0;
      $451 = $450&255;
      $$4$i53 = (($$5$i52) + -1)|0;
      $$4150$i = ((($$5151$i)) + 1|0);
      $452 = ($$4$i53|0)==(0);
      if ($452) {
       $518 = HEAP32[$429>>2]|0;
       $519 = (FUNCTION_TABLE_ii[$518 & 127]($0)|0);
       $520 = ($519|0)==(0);
       if ($520) {
        label = 168;
        break L1;
       }
       $521 = HEAP32[$401>>2]|0;
       $522 = HEAP32[$402>>2]|0;
       $$5$1$i = $522;$$5151$1$i = $521;
      } else {
       $$5$1$i = $$4$i53;$$5151$1$i = $$4150$i;
      }
      $496 = HEAP8[$$5151$1$i>>0]|0;
      $523 = $496&255;
      $524 = (($523) + ($451))|0;
      $$4$1$i = (($$5$1$i) + -1)|0;
      $$4150$1$i = ((($$5151$1$i)) + 1|0);
      $525 = ($$4$1$i|0)==(0);
      if ($525) {
       $526 = HEAP32[$429>>2]|0;
       $527 = (FUNCTION_TABLE_ii[$526 & 127]($0)|0);
       $528 = ($527|0)==(0);
       if ($528) {
        label = 168;
        break L1;
       }
       $529 = HEAP32[$401>>2]|0;
       $530 = HEAP32[$402>>2]|0;
       $$5$2$i = $530;$$5151$2$i = $529;
      } else {
       $$5$2$i = $$4$1$i;$$5151$2$i = $$4150$1$i;
      }
      $497 = HEAP8[$$5151$2$i>>0]|0;
      $531 = $497&255;
      $532 = (($524) + ($531))|0;
      $$4$2$i = (($$5$2$i) + -1)|0;
      $$4150$2$i = ((($$5151$2$i)) + 1|0);
      $533 = ($$4$2$i|0)==(0);
      if ($533) {
       $534 = HEAP32[$429>>2]|0;
       $535 = (FUNCTION_TABLE_ii[$534 & 127]($0)|0);
       $536 = ($535|0)==(0);
       if ($536) {
        label = 168;
        break L1;
       }
       $537 = HEAP32[$401>>2]|0;
       $538 = HEAP32[$402>>2]|0;
       $$5$3$i = $538;$$5151$3$i = $537;
      } else {
       $$5$3$i = $$4$2$i;$$5151$3$i = $$4150$2$i;
      }
      $498 = HEAP8[$$5151$3$i>>0]|0;
      $539 = $498&255;
      $540 = (($532) + ($539))|0;
      $$4$3$i = (($$5$3$i) + -1)|0;
      $$4150$3$i = ((($$5151$3$i)) + 1|0);
      $541 = ($$4$3$i|0)==(0);
      if ($541) {
       $542 = HEAP32[$429>>2]|0;
       $543 = (FUNCTION_TABLE_ii[$542 & 127]($0)|0);
       $544 = ($543|0)==(0);
       if ($544) {
        label = 168;
        break L1;
       }
       $545 = HEAP32[$401>>2]|0;
       $546 = HEAP32[$402>>2]|0;
       $$5$4$i = $546;$$5151$4$i = $545;
      } else {
       $$5$4$i = $$4$3$i;$$5151$4$i = $$4150$3$i;
      }
      $499 = HEAP8[$$5151$4$i>>0]|0;
      $547 = $499&255;
      $548 = (($540) + ($547))|0;
      $$4$4$i = (($$5$4$i) + -1)|0;
      $$4150$4$i = ((($$5151$4$i)) + 1|0);
      $549 = ($$4$4$i|0)==(0);
      if ($549) {
       $550 = HEAP32[$429>>2]|0;
       $551 = (FUNCTION_TABLE_ii[$550 & 127]($0)|0);
       $552 = ($551|0)==(0);
       if ($552) {
        label = 168;
        break L1;
       }
       $553 = HEAP32[$401>>2]|0;
       $554 = HEAP32[$402>>2]|0;
       $$5$5$i = $554;$$5151$5$i = $553;
      } else {
       $$5$5$i = $$4$4$i;$$5151$5$i = $$4150$4$i;
      }
      $500 = HEAP8[$$5151$5$i>>0]|0;
      $555 = $500&255;
      $556 = (($548) + ($555))|0;
      $$4$5$i = (($$5$5$i) + -1)|0;
      $$4150$5$i = ((($$5151$5$i)) + 1|0);
      $557 = ($$4$5$i|0)==(0);
      if ($557) {
       $558 = HEAP32[$429>>2]|0;
       $559 = (FUNCTION_TABLE_ii[$558 & 127]($0)|0);
       $560 = ($559|0)==(0);
       if ($560) {
        label = 168;
        break L1;
       }
       $561 = HEAP32[$401>>2]|0;
       $562 = HEAP32[$402>>2]|0;
       $$5$6$i = $562;$$5151$6$i = $561;
      } else {
       $$5$6$i = $$4$5$i;$$5151$6$i = $$4150$5$i;
      }
      $501 = HEAP8[$$5151$6$i>>0]|0;
      $563 = $501&255;
      $564 = (($556) + ($563))|0;
      $$4$6$i = (($$5$6$i) + -1)|0;
      $$4150$6$i = ((($$5151$6$i)) + 1|0);
      $565 = ($$4$6$i|0)==(0);
      if ($565) {
       $566 = HEAP32[$429>>2]|0;
       $567 = (FUNCTION_TABLE_ii[$566 & 127]($0)|0);
       $568 = ($567|0)==(0);
       if ($568) {
        label = 168;
        break L1;
       }
       $569 = HEAP32[$401>>2]|0;
       $570 = HEAP32[$402>>2]|0;
       $$5$7$i = $570;$$5151$7$i = $569;
      } else {
       $$5$7$i = $$4$6$i;$$5151$7$i = $$4150$6$i;
      }
      $502 = HEAP8[$$5151$7$i>>0]|0;
      $571 = $502&255;
      $572 = (($564) + ($571))|0;
      $$4$7$i = (($$5$7$i) + -1)|0;
      $$4150$7$i = ((($$5151$7$i)) + 1|0);
      $573 = ($$4$7$i|0)==(0);
      if ($573) {
       $574 = HEAP32[$429>>2]|0;
       $575 = (FUNCTION_TABLE_ii[$574 & 127]($0)|0);
       $576 = ($575|0)==(0);
       if ($576) {
        label = 168;
        break L1;
       }
       $577 = HEAP32[$401>>2]|0;
       $578 = HEAP32[$402>>2]|0;
       $$5$8$i = $578;$$5151$8$i = $577;
      } else {
       $$5$8$i = $$4$7$i;$$5151$8$i = $$4150$7$i;
      }
      $503 = HEAP8[$$5151$8$i>>0]|0;
      $579 = $503&255;
      $580 = (($572) + ($579))|0;
      $$4$8$i = (($$5$8$i) + -1)|0;
      $$4150$8$i = ((($$5151$8$i)) + 1|0);
      $581 = ($$4$8$i|0)==(0);
      if ($581) {
       $582 = HEAP32[$429>>2]|0;
       $583 = (FUNCTION_TABLE_ii[$582 & 127]($0)|0);
       $584 = ($583|0)==(0);
       if ($584) {
        label = 168;
        break L1;
       }
       $585 = HEAP32[$401>>2]|0;
       $586 = HEAP32[$402>>2]|0;
       $$5$9$i = $586;$$5151$9$i = $585;
      } else {
       $$5$9$i = $$4$8$i;$$5151$9$i = $$4150$8$i;
      }
      $504 = HEAP8[$$5151$9$i>>0]|0;
      $587 = $504&255;
      $588 = (($580) + ($587))|0;
      $$4$9$i = (($$5$9$i) + -1)|0;
      $$4150$9$i = ((($$5151$9$i)) + 1|0);
      $589 = ($$4$9$i|0)==(0);
      if ($589) {
       $590 = HEAP32[$429>>2]|0;
       $591 = (FUNCTION_TABLE_ii[$590 & 127]($0)|0);
       $592 = ($591|0)==(0);
       if ($592) {
        label = 168;
        break L1;
       }
       $593 = HEAP32[$401>>2]|0;
       $594 = HEAP32[$402>>2]|0;
       $$5$10$i = $594;$$5151$10$i = $593;
      } else {
       $$5$10$i = $$4$9$i;$$5151$10$i = $$4150$9$i;
      }
      $505 = HEAP8[$$5151$10$i>>0]|0;
      $595 = $505&255;
      $596 = (($588) + ($595))|0;
      $$4$10$i = (($$5$10$i) + -1)|0;
      $$4150$10$i = ((($$5151$10$i)) + 1|0);
      $597 = ($$4$10$i|0)==(0);
      if ($597) {
       $598 = HEAP32[$429>>2]|0;
       $599 = (FUNCTION_TABLE_ii[$598 & 127]($0)|0);
       $600 = ($599|0)==(0);
       if ($600) {
        label = 168;
        break L1;
       }
       $601 = HEAP32[$401>>2]|0;
       $602 = HEAP32[$402>>2]|0;
       $$5$11$i = $602;$$5151$11$i = $601;
      } else {
       $$5$11$i = $$4$10$i;$$5151$11$i = $$4150$10$i;
      }
      $506 = HEAP8[$$5151$11$i>>0]|0;
      $603 = $506&255;
      $604 = (($596) + ($603))|0;
      $$4$11$i = (($$5$11$i) + -1)|0;
      $$4150$11$i = ((($$5151$11$i)) + 1|0);
      $605 = ($$4$11$i|0)==(0);
      if ($605) {
       $606 = HEAP32[$429>>2]|0;
       $607 = (FUNCTION_TABLE_ii[$606 & 127]($0)|0);
       $608 = ($607|0)==(0);
       if ($608) {
        label = 168;
        break L1;
       }
       $609 = HEAP32[$401>>2]|0;
       $610 = HEAP32[$402>>2]|0;
       $$5$12$i = $610;$$5151$12$i = $609;
      } else {
       $$5$12$i = $$4$11$i;$$5151$12$i = $$4150$11$i;
      }
      $507 = HEAP8[$$5151$12$i>>0]|0;
      $611 = $507&255;
      $612 = (($604) + ($611))|0;
      $$4$12$i = (($$5$12$i) + -1)|0;
      $$4150$12$i = ((($$5151$12$i)) + 1|0);
      $613 = ($$4$12$i|0)==(0);
      if ($613) {
       $614 = HEAP32[$429>>2]|0;
       $615 = (FUNCTION_TABLE_ii[$614 & 127]($0)|0);
       $616 = ($615|0)==(0);
       if ($616) {
        label = 168;
        break L1;
       }
       $617 = HEAP32[$401>>2]|0;
       $618 = HEAP32[$402>>2]|0;
       $$5$13$i = $618;$$5151$13$i = $617;
      } else {
       $$5$13$i = $$4$12$i;$$5151$13$i = $$4150$12$i;
      }
      $508 = HEAP8[$$5151$13$i>>0]|0;
      $619 = $508&255;
      $620 = (($612) + ($619))|0;
      $$4$13$i = (($$5$13$i) + -1)|0;
      $$4150$13$i = ((($$5151$13$i)) + 1|0);
      $621 = ($$4$13$i|0)==(0);
      if ($621) {
       $622 = HEAP32[$429>>2]|0;
       $623 = (FUNCTION_TABLE_ii[$622 & 127]($0)|0);
       $624 = ($623|0)==(0);
       if ($624) {
        label = 168;
        break L1;
       }
       $625 = HEAP32[$401>>2]|0;
       $626 = HEAP32[$402>>2]|0;
       $$5$14$i = $626;$$5151$14$i = $625;
      } else {
       $$5$14$i = $$4$13$i;$$5151$14$i = $$4150$13$i;
      }
      $509 = HEAP8[$$5151$14$i>>0]|0;
      $627 = $509&255;
      $628 = (($620) + ($627))|0;
      $$4$14$i = (($$5$14$i) + -1)|0;
      $$4150$14$i = ((($$5151$14$i)) + 1|0);
      $629 = ($$4$14$i|0)==(0);
      if ($629) {
       $630 = HEAP32[$429>>2]|0;
       $631 = (FUNCTION_TABLE_ii[$630 & 127]($0)|0);
       $632 = ($631|0)==(0);
       if ($632) {
        label = 168;
        break L1;
       }
       $633 = HEAP32[$401>>2]|0;
       $634 = HEAP32[$402>>2]|0;
       $$5$15$i = $634;$$5151$15$i = $633;
      } else {
       $$5$15$i = $$4$14$i;$$5151$15$i = $$4150$14$i;
      }
      $510 = HEAP8[$$5151$15$i>>0]|0;
      $635 = $510&255;
      $456 = (($628) + ($635))|0;
      $$4$15$i = (($$5$15$i) + -1)|0;
      $$4150$15$i = ((($$5151$15$i)) + 1|0);
      $473 = (($$0144186$i) + -17)|0;
      $636 = HEAP32[$0>>2]|0;
      $637 = ((($636)) + 24|0);
      HEAP32[$637>>2] = $451;
      $638 = ((($636)) + 28|0);
      HEAP32[$638>>2] = $523;
      $639 = ((($636)) + 32|0);
      HEAP32[$639>>2] = $531;
      $640 = ((($636)) + 36|0);
      HEAP32[$640>>2] = $539;
      $641 = ((($636)) + 40|0);
      HEAP32[$641>>2] = $547;
      $642 = ((($636)) + 44|0);
      HEAP32[$642>>2] = $555;
      $643 = ((($636)) + 48|0);
      HEAP32[$643>>2] = $563;
      $644 = ((($636)) + 52|0);
      HEAP32[$644>>2] = $571;
      $645 = ((($636)) + 20|0);
      HEAP32[$645>>2] = 86;
      $646 = ((($636)) + 4|0);
      $647 = HEAP32[$646>>2]|0;
      FUNCTION_TABLE_vii[$647 & 255]($0,2);
      $648 = HEAP32[$0>>2]|0;
      $649 = ((($648)) + 24|0);
      HEAP32[$649>>2] = $579;
      $650 = ((($648)) + 28|0);
      HEAP32[$650>>2] = $587;
      $651 = ((($648)) + 32|0);
      HEAP32[$651>>2] = $595;
      $652 = ((($648)) + 36|0);
      HEAP32[$652>>2] = $603;
      $653 = ((($648)) + 40|0);
      HEAP32[$653>>2] = $611;
      $654 = ((($648)) + 44|0);
      HEAP32[$654>>2] = $619;
      $655 = ((($648)) + 48|0);
      HEAP32[$655>>2] = $627;
      $656 = ((($648)) + 52|0);
      HEAP32[$656>>2] = $635;
      $657 = ((($648)) + 20|0);
      HEAP32[$657>>2] = 86;
      $658 = ((($648)) + 4|0);
      $659 = HEAP32[$658>>2]|0;
      FUNCTION_TABLE_vii[$659 & 255]($0,2);
      $660 = ($456|0)>(256);
      $661 = ($473|0)<($456|0);
      $or$cond$i61 = $660 | $661;
      if ($or$cond$i61) {
       $453 = HEAP32[$0>>2]|0;
       $454 = ((($453)) + 20|0);
       HEAP32[$454>>2] = 8;
       $455 = HEAP32[$453>>2]|0;
       FUNCTION_TABLE_vi[$455 & 255]($0);
      }
      $457 = ($456|0)>(0);
      if ($457) {
       $$1155180$i = 0;$$6152181$i = $$4150$15$i;$$6182$i = $$4$15$i;
       while(1) {
        $458 = ($$6182$i|0)==(0);
        if ($458) {
         $459 = HEAP32[$429>>2]|0;
         $460 = (FUNCTION_TABLE_ii[$459 & 127]($0)|0);
         $461 = ($460|0)==(0);
         if ($461) {
          label = 168;
          break L1;
         }
         $462 = HEAP32[$401>>2]|0;
         $463 = HEAP32[$402>>2]|0;
         $$7$i56 = $463;$$7153$i = $462;
        } else {
         $$7$i56 = $$6182$i;$$7153$i = $$6152181$i;
        }
        $464 = (($$7$i56) + -1)|0;
        $465 = ((($$7153$i)) + 1|0);
        $466 = HEAP8[$$7153$i>>0]|0;
        $467 = (($1) + ($$1155180$i)|0);
        HEAP8[$467>>0] = $466;
        $468 = (($$1155180$i) + 1)|0;
        $469 = ($468|0)<($456|0);
        if ($469) {
         $$1155180$i = $468;$$6152181$i = $465;$$6182$i = $464;
        } else {
         $$6$lcssa$i = $464;$$6152$lcssa$i = $465;
         break;
        }
       }
      } else {
       $$6$lcssa$i = $$4$15$i;$$6152$lcssa$i = $$4150$15$i;
      }
      $470 = (($1) + ($456)|0);
      $471 = (256 - ($456))|0;
      _memset(($470|0),0,($471|0))|0;
      $472 = (($473) - ($456))|0;
      $474 = $437 & 16;
      $475 = ($474|0)==(0);
      if ($475) {
       $485 = ($436&255)>(3);
       if ($485) {
        $486 = HEAP32[$0>>2]|0;
        $487 = ((($486)) + 20|0);
        HEAP32[$487>>2] = 30;
        $488 = ((($486)) + 24|0);
        HEAP32[$488>>2] = $437;
        $489 = HEAP32[$0>>2]|0;
        $490 = HEAP32[$489>>2]|0;
        FUNCTION_TABLE_vi[$490 & 255]($0);
       }
       $491 = (((($0)) + 180|0) + ($437<<2)|0);
       $$0156$i = $491;
      } else {
       $476 = (($437) + -16)|0;
       $477 = $436 & -4;
       $478 = ($477<<24>>24)==(16);
       if (!($478)) {
        $479 = HEAP32[$0>>2]|0;
        $480 = ((($479)) + 20|0);
        HEAP32[$480>>2] = 30;
        $481 = ((($479)) + 24|0);
        HEAP32[$481>>2] = $476;
        $482 = HEAP32[$0>>2]|0;
        $483 = HEAP32[$482>>2]|0;
        FUNCTION_TABLE_vi[$483 & 255]($0);
       }
       $484 = (((($0)) + 196|0) + ($476<<2)|0);
       $$0156$i = $484;
      }
      $492 = HEAP32[$$0156$i>>2]|0;
      $493 = ($492|0)==(0|0);
      if ($493) {
       $494 = (_jpeg_alloc_huff_table($0)|0);
       HEAP32[$$0156$i>>2] = $494;
       $495 = $494;
      } else {
       $495 = $492;
      }
      HEAP8[$495>>0] = 0;
      $$sroa$4$0$$sroa_idx = ((($495)) + 1|0);
      HEAP8[$$sroa$4$0$$sroa_idx>>0] = $450;
      $$sroa$5$0$$sroa_idx = ((($495)) + 2|0);
      HEAP8[$$sroa$5$0$$sroa_idx>>0] = $496;
      $$sroa$6$0$$sroa_idx = ((($495)) + 3|0);
      HEAP8[$$sroa$6$0$$sroa_idx>>0] = $497;
      $$sroa$7$0$$sroa_idx = ((($495)) + 4|0);
      HEAP8[$$sroa$7$0$$sroa_idx>>0] = $498;
      $$sroa$8$0$$sroa_idx = ((($495)) + 5|0);
      HEAP8[$$sroa$8$0$$sroa_idx>>0] = $499;
      $$sroa$9$0$$sroa_idx = ((($495)) + 6|0);
      HEAP8[$$sroa$9$0$$sroa_idx>>0] = $500;
      $$sroa$10$0$$sroa_idx = ((($495)) + 7|0);
      HEAP8[$$sroa$10$0$$sroa_idx>>0] = $501;
      $$sroa$11$0$$sroa_idx = ((($495)) + 8|0);
      HEAP8[$$sroa$11$0$$sroa_idx>>0] = $502;
      $$sroa$12$0$$sroa_idx = ((($495)) + 9|0);
      HEAP8[$$sroa$12$0$$sroa_idx>>0] = $503;
      $$sroa$13$0$$sroa_idx = ((($495)) + 10|0);
      HEAP8[$$sroa$13$0$$sroa_idx>>0] = $504;
      $$sroa$14$0$$sroa_idx = ((($495)) + 11|0);
      HEAP8[$$sroa$14$0$$sroa_idx>>0] = $505;
      $$sroa$15$0$$sroa_idx = ((($495)) + 12|0);
      HEAP8[$$sroa$15$0$$sroa_idx>>0] = $506;
      $$sroa$16$0$$sroa_idx = ((($495)) + 13|0);
      HEAP8[$$sroa$16$0$$sroa_idx>>0] = $507;
      $$sroa$17$0$$sroa_idx = ((($495)) + 14|0);
      HEAP8[$$sroa$17$0$$sroa_idx>>0] = $508;
      $$sroa$18$0$$sroa_idx = ((($495)) + 15|0);
      HEAP8[$$sroa$18$0$$sroa_idx>>0] = $509;
      $$sroa$19$0$$sroa_idx = ((($495)) + 16|0);
      HEAP8[$$sroa$19$0$$sroa_idx>>0] = $510;
      $511 = HEAP32[$$0156$i>>2]|0;
      $512 = ((($511)) + 17|0);
      _memcpy(($512|0),($1|0),256)|0;
      $513 = ($472|0)>(16);
      if ($513) {
       $$0144186$i = $472;$$2148184$i = $$6152$lcssa$i;$$2185$i = $$6$lcssa$i;
      } else {
       $$0144$lcssa$i = $472;$$2$lcssa$i58 = $$6$lcssa$i;$$2148$lcssa$i = $$6152$lcssa$i;
       break;
      }
     }
    } else {
     $$0144$lcssa$i = $427;$$2$lcssa$i58 = $422;$$2148$lcssa$i = $423;
    }
    $514 = ($$0144$lcssa$i|0)==(0);
    if (!($514)) {
     $515 = HEAP32[$0>>2]|0;
     $516 = ((($515)) + 20|0);
     HEAP32[$516>>2] = 11;
     $517 = HEAP32[$515>>2]|0;
     FUNCTION_TABLE_vi[$517 & 255]($0);
    }
    HEAP32[$401>>2] = $$2148$lcssa$i;
    HEAP32[$402>>2] = $$2$lcssa$i58;
    break;
   }
   case 219:  {
    $662 = HEAP32[$4>>2]|0;
    $663 = ((($662)) + 4|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = ($664|0)==(0);
    if ($665) {
     $666 = ((($662)) + 12|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = (FUNCTION_TABLE_ii[$667 & 127]($0)|0);
     $669 = ($668|0)==(0);
     if ($669) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $670 = HEAP32[$663>>2]|0;
     $$0137$i = $670;
    } else {
     $$0137$i = $664;
    }
    $$0138$i = HEAP32[$662>>2]|0;
    $671 = (($$0137$i) + -1)|0;
    $672 = ((($$0138$i)) + 1|0);
    $673 = HEAP8[$$0138$i>>0]|0;
    $674 = $673&255;
    $675 = $674 << 8;
    $676 = ($671|0)==(0);
    if ($676) {
     $677 = ((($662)) + 12|0);
     $678 = HEAP32[$677>>2]|0;
     $679 = (FUNCTION_TABLE_ii[$678 & 127]($0)|0);
     $680 = ($679|0)==(0);
     if ($680) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $681 = HEAP32[$662>>2]|0;
     $682 = HEAP32[$663>>2]|0;
     $$1$i62 = $682;$$1139$i = $681;
    } else {
     $$1$i62 = $671;$$1139$i = $672;
    }
    $683 = (($$1$i62) + -1)|0;
    $684 = ((($$1139$i)) + 1|0);
    $685 = HEAP8[$$1139$i>>0]|0;
    $686 = $685&255;
    $687 = $675 | $686;
    $688 = (($687) + -2)|0;
    $689 = ($687>>>0)>(2);
    if ($689) {
     $690 = ((($662)) + 12|0);
     $$0147167$i = $688;$$2140168$i = $684;$$2169$i = $683;
     while(1) {
      $691 = ($$2169$i|0)==(0);
      if ($691) {
       $692 = HEAP32[$690>>2]|0;
       $693 = (FUNCTION_TABLE_ii[$692 & 127]($0)|0);
       $694 = ($693|0)==(0);
       if ($694) {
        $$0 = 0;
        label = 232;
        break L1;
       }
       $695 = HEAP32[$662>>2]|0;
       $696 = HEAP32[$663>>2]|0;
       $$3$i64 = $696;$$3141$i = $695;
      } else {
       $$3$i64 = $$2169$i;$$3141$i = $$2140168$i;
      }
      $697 = HEAP8[$$3141$i>>0]|0;
      $698 = $697&255;
      $699 = $698 >>> 4;
      $700 = $698 & 15;
      $701 = HEAP32[$0>>2]|0;
      $702 = ((($701)) + 20|0);
      HEAP32[$702>>2] = 81;
      $703 = ((($701)) + 24|0);
      HEAP32[$703>>2] = $700;
      $704 = HEAP32[$0>>2]|0;
      $705 = ((($704)) + 28|0);
      HEAP32[$705>>2] = $699;
      $706 = HEAP32[$0>>2]|0;
      $707 = ((($706)) + 4|0);
      $708 = HEAP32[$707>>2]|0;
      FUNCTION_TABLE_vii[$708 & 255]($0,1);
      $709 = ($700>>>0)>(3);
      if ($709) {
       $710 = HEAP32[$0>>2]|0;
       $711 = ((($710)) + 20|0);
       HEAP32[$711>>2] = 31;
       $712 = ((($710)) + 24|0);
       HEAP32[$712>>2] = $700;
       $713 = HEAP32[$0>>2]|0;
       $714 = HEAP32[$713>>2]|0;
       FUNCTION_TABLE_vi[$714 & 255]($0);
      }
      $715 = (((($0)) + 164|0) + ($700<<2)|0);
      $716 = HEAP32[$715>>2]|0;
      $717 = ($716|0)==(0|0);
      if ($717) {
       $718 = (_jpeg_alloc_quant_table($0)|0);
       HEAP32[$715>>2] = $718;
       $731 = $718;
      } else {
       $731 = $716;
      }
      $$4161$i = (($$3$i64) + -1)|0;
      $$4142162$i = ((($$3141$i)) + 1|0);
      $719 = ($699|0)==(0);
      if ($719) {
       $$0149163$us$i = 0;$$4142165$us$i = $$4142162$i;$$4164$us$i = $$4161$i;
       while(1) {
        $720 = ($$4164$us$i|0)==(0);
        if ($720) {
         $721 = HEAP32[$690>>2]|0;
         $722 = (FUNCTION_TABLE_ii[$721 & 127]($0)|0);
         $723 = ($722|0)==(0);
         if ($723) {
          $$0 = 0;
          label = 232;
          break L1;
         }
         $724 = HEAP32[$662>>2]|0;
         $725 = HEAP32[$663>>2]|0;
         $$7$us$i = $725;$$7145$us$i = $724;
        } else {
         $$7$us$i = $$4164$us$i;$$7145$us$i = $$4142165$us$i;
        }
        $726 = HEAP8[$$7145$us$i>>0]|0;
        $727 = $726&255;
        $728 = (996 + ($$0149163$us$i<<2)|0);
        $729 = HEAP32[$728>>2]|0;
        $730 = (($731) + ($729<<1)|0);
        HEAP16[$730>>1] = $727;
        $732 = (($$0149163$us$i) + 1)|0;
        $$4$us$i = (($$7$us$i) + -1)|0;
        $$4142$us$i = ((($$7145$us$i)) + 1|0);
        $733 = ($$0149163$us$i|0)<(63);
        if ($733) {
         $$0149163$us$i = $732;$$4142165$us$i = $$4142$us$i;$$4164$us$i = $$4$us$i;
        } else {
         $$4$lcssa$i = $$4$us$i;$$4142$lcssa$i = $$4142$us$i;
         break;
        }
       }
      } else {
       $$0149163$i = 0;$$4142165$i = $$4142162$i;$$4164$i = $$4161$i;
       while(1) {
        $734 = ($$4164$i|0)==(0);
        if ($734) {
         $735 = HEAP32[$690>>2]|0;
         $736 = (FUNCTION_TABLE_ii[$735 & 127]($0)|0);
         $737 = ($736|0)==(0);
         if ($737) {
          $$0 = 0;
          label = 232;
          break L1;
         }
         $738 = HEAP32[$662>>2]|0;
         $739 = HEAP32[$663>>2]|0;
         $$5$i65 = $739;$$5143$i = $738;
        } else {
         $$5$i65 = $$4164$i;$$5143$i = $$4142165$i;
        }
        $740 = (($$5$i65) + -1)|0;
        $741 = ((($$5143$i)) + 1|0);
        $742 = HEAP8[$$5143$i>>0]|0;
        $743 = $742&255;
        $744 = $743 << 8;
        $745 = ($740|0)==(0);
        if ($745) {
         $746 = HEAP32[$690>>2]|0;
         $747 = (FUNCTION_TABLE_ii[$746 & 127]($0)|0);
         $748 = ($747|0)==(0);
         if ($748) {
          $$0 = 0;
          label = 232;
          break L1;
         }
         $749 = HEAP32[$662>>2]|0;
         $750 = HEAP32[$663>>2]|0;
         $$6$i66 = $750;$$6144$i = $749;
        } else {
         $$6$i66 = $740;$$6144$i = $741;
        }
        $751 = HEAP8[$$6144$i>>0]|0;
        $752 = $751&255;
        $753 = $744 | $752;
        $754 = $753&65535;
        $755 = (996 + ($$0149163$i<<2)|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = (($731) + ($756<<1)|0);
        HEAP16[$757>>1] = $754;
        $758 = (($$0149163$i) + 1)|0;
        $$4$i67 = (($$6$i66) + -1)|0;
        $$4142$i = ((($$6144$i)) + 1|0);
        $759 = ($$0149163$i|0)<(63);
        if ($759) {
         $$0149163$i = $758;$$4142165$i = $$4142$i;$$4164$i = $$4$i67;
        } else {
         $$4$lcssa$i = $$4$i67;$$4142$lcssa$i = $$4142$i;
         break;
        }
       }
      }
      $760 = HEAP32[$0>>2]|0;
      $761 = ((($760)) + 104|0);
      $762 = HEAP32[$761>>2]|0;
      $763 = ($762|0)>(1);
      L215: do {
       if ($763) {
        $$1150166$i = 0;$765 = $760;
        while(1) {
         $764 = ((($765)) + 24|0);
         $766 = (($731) + ($$1150166$i<<1)|0);
         $767 = HEAP16[$766>>1]|0;
         $768 = $767&65535;
         HEAP32[$764>>2] = $768;
         $769 = $$1150166$i | 1;
         $770 = (($731) + ($769<<1)|0);
         $771 = HEAP16[$770>>1]|0;
         $772 = $771&65535;
         $773 = ((($765)) + 28|0);
         HEAP32[$773>>2] = $772;
         $774 = $$1150166$i | 2;
         $775 = (($731) + ($774<<1)|0);
         $776 = HEAP16[$775>>1]|0;
         $777 = $776&65535;
         $778 = ((($765)) + 32|0);
         HEAP32[$778>>2] = $777;
         $779 = $$1150166$i | 3;
         $780 = (($731) + ($779<<1)|0);
         $781 = HEAP16[$780>>1]|0;
         $782 = $781&65535;
         $783 = ((($765)) + 36|0);
         HEAP32[$783>>2] = $782;
         $784 = $$1150166$i | 4;
         $785 = (($731) + ($784<<1)|0);
         $786 = HEAP16[$785>>1]|0;
         $787 = $786&65535;
         $788 = ((($765)) + 40|0);
         HEAP32[$788>>2] = $787;
         $789 = $$1150166$i | 5;
         $790 = (($731) + ($789<<1)|0);
         $791 = HEAP16[$790>>1]|0;
         $792 = $791&65535;
         $793 = ((($765)) + 44|0);
         HEAP32[$793>>2] = $792;
         $794 = $$1150166$i | 6;
         $795 = (($731) + ($794<<1)|0);
         $796 = HEAP16[$795>>1]|0;
         $797 = $796&65535;
         $798 = ((($765)) + 48|0);
         HEAP32[$798>>2] = $797;
         $799 = $$1150166$i | 7;
         $800 = (($731) + ($799<<1)|0);
         $801 = HEAP16[$800>>1]|0;
         $802 = $801&65535;
         $803 = ((($765)) + 52|0);
         HEAP32[$803>>2] = $802;
         $804 = ((($765)) + 20|0);
         HEAP32[$804>>2] = 93;
         $805 = ((($765)) + 4|0);
         $806 = HEAP32[$805>>2]|0;
         FUNCTION_TABLE_vii[$806 & 255]($0,2);
         $807 = ($$1150166$i|0)<(56);
         if (!($807)) {
          break L215;
         }
         $808 = (($$1150166$i) + 8)|0;
         $$pre$i = HEAP32[$0>>2]|0;
         $$1150166$i = $808;$765 = $$pre$i;
        }
       }
      } while(0);
      $$$v$i = $719 ? -65 : -129;
      $$$i = (($$$v$i) + ($$0147167$i))|0;
      $809 = ($$$i|0)>(0);
      if ($809) {
       $$0147167$i = $$$i;$$2140168$i = $$4142$lcssa$i;$$2169$i = $$4$lcssa$i;
      } else {
       $$0147$lcssa$i = $$$i;$$2$lcssa$i70 = $$4$lcssa$i;$$2140$lcssa$i = $$4142$lcssa$i;
       break;
      }
     }
    } else {
     $$0147$lcssa$i = $688;$$2$lcssa$i70 = $683;$$2140$lcssa$i = $684;
    }
    $810 = ($$0147$lcssa$i|0)==(0);
    if (!($810)) {
     $811 = HEAP32[$0>>2]|0;
     $812 = ((($811)) + 20|0);
     HEAP32[$812>>2] = 11;
     $813 = HEAP32[$811>>2]|0;
     FUNCTION_TABLE_vi[$813 & 255]($0);
    }
    HEAP32[$662>>2] = $$2140$lcssa$i;
    HEAP32[$663>>2] = $$2$lcssa$i70;
    break;
   }
   case 221:  {
    $814 = HEAP32[$4>>2]|0;
    $815 = ((($814)) + 4|0);
    $816 = HEAP32[$815>>2]|0;
    $817 = ($816|0)==(0);
    if ($817) {
     $818 = ((($814)) + 12|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = (FUNCTION_TABLE_ii[$819 & 127]($0)|0);
     $821 = ($820|0)==(0);
     if ($821) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $822 = HEAP32[$815>>2]|0;
     $$0$i73 = $822;
    } else {
     $$0$i73 = $816;
    }
    $$057$i = HEAP32[$814>>2]|0;
    $823 = (($$0$i73) + -1)|0;
    $824 = ((($$057$i)) + 1|0);
    $825 = HEAP8[$$057$i>>0]|0;
    $826 = $825&255;
    $827 = $826 << 8;
    $828 = ($823|0)==(0);
    if ($828) {
     $829 = ((($814)) + 12|0);
     $830 = HEAP32[$829>>2]|0;
     $831 = (FUNCTION_TABLE_ii[$830 & 127]($0)|0);
     $832 = ($831|0)==(0);
     if ($832) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $833 = HEAP32[$814>>2]|0;
     $834 = HEAP32[$815>>2]|0;
     $$1$i74 = $834;$$158$i = $833;
    } else {
     $$1$i74 = $823;$$158$i = $824;
    }
    $835 = (($$1$i74) + -1)|0;
    $836 = ((($$158$i)) + 1|0);
    $837 = HEAP8[$$158$i>>0]|0;
    $838 = $837&255;
    $839 = $827 | $838;
    $840 = ($839|0)==(4);
    if (!($840)) {
     $841 = HEAP32[$0>>2]|0;
     $842 = ((($841)) + 20|0);
     HEAP32[$842>>2] = 11;
     $843 = HEAP32[$841>>2]|0;
     FUNCTION_TABLE_vi[$843 & 255]($0);
    }
    $844 = ($835|0)==(0);
    if ($844) {
     $845 = ((($814)) + 12|0);
     $846 = HEAP32[$845>>2]|0;
     $847 = (FUNCTION_TABLE_ii[$846 & 127]($0)|0);
     $848 = ($847|0)==(0);
     if ($848) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $849 = HEAP32[$814>>2]|0;
     $850 = HEAP32[$815>>2]|0;
     $$2$i75 = $850;$$259$i = $849;
    } else {
     $$2$i75 = $835;$$259$i = $836;
    }
    $851 = (($$2$i75) + -1)|0;
    $852 = ((($$259$i)) + 1|0);
    $853 = HEAP8[$$259$i>>0]|0;
    $854 = $853&255;
    $855 = $854 << 8;
    $856 = ($851|0)==(0);
    if ($856) {
     $857 = ((($814)) + 12|0);
     $858 = HEAP32[$857>>2]|0;
     $859 = (FUNCTION_TABLE_ii[$858 & 127]($0)|0);
     $860 = ($859|0)==(0);
     if ($860) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $861 = HEAP32[$814>>2]|0;
     $862 = HEAP32[$815>>2]|0;
     $$3$i76 = $862;$$360$i = $861;
    } else {
     $$3$i76 = $851;$$360$i = $852;
    }
    $863 = (($$3$i76) + -1)|0;
    $864 = ((($$360$i)) + 1|0);
    $865 = HEAP8[$$360$i>>0]|0;
    $866 = $865&255;
    $867 = $855 | $866;
    $868 = HEAP32[$0>>2]|0;
    $869 = ((($868)) + 20|0);
    HEAP32[$869>>2] = 82;
    $870 = ((($868)) + 24|0);
    HEAP32[$870>>2] = $867;
    $871 = HEAP32[$0>>2]|0;
    $872 = ((($871)) + 4|0);
    $873 = HEAP32[$872>>2]|0;
    FUNCTION_TABLE_vii[$873 & 255]($0,1);
    HEAP32[$53>>2] = $867;
    HEAP32[$814>>2] = $864;
    HEAP32[$815>>2] = $863;
    break;
   }
   case 239: case 238: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 230: case 229: case 228: case 227: case 226: case 225: case 224:  {
    $874 = HEAP32[$3>>2]|0;
    $875 = (($105) + -224)|0;
    $876 = (((($874)) + 32|0) + ($875<<2)|0);
    $877 = HEAP32[$876>>2]|0;
    $878 = (FUNCTION_TABLE_ii[$877 & 127]($0)|0);
    $879 = ($878|0)==(0);
    if ($879) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 254:  {
    $880 = HEAP32[$3>>2]|0;
    $881 = ((($880)) + 28|0);
    $882 = HEAP32[$881>>2]|0;
    $883 = (FUNCTION_TABLE_ii[$882 & 127]($0)|0);
    $884 = ($883|0)==(0);
    if ($884) {
     $$0 = 0;
     label = 232;
     break L1;
    }
    break;
   }
   case 1: case 215: case 214: case 213: case 212: case 211: case 210: case 209: case 208:  {
    $885 = HEAP32[$0>>2]|0;
    $886 = ((($885)) + 20|0);
    HEAP32[$886>>2] = 92;
    $887 = ((($885)) + 24|0);
    HEAP32[$887>>2] = $105;
    $888 = HEAP32[$0>>2]|0;
    $889 = ((($888)) + 4|0);
    $890 = HEAP32[$889>>2]|0;
    FUNCTION_TABLE_vii[$890 & 255]($0,1);
    break;
   }
   case 220:  {
    $891 = HEAP32[$4>>2]|0;
    $892 = ((($891)) + 4|0);
    $893 = HEAP32[$892>>2]|0;
    $894 = ($893|0)==(0);
    if ($894) {
     $895 = ((($891)) + 12|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = (FUNCTION_TABLE_ii[$896 & 127]($0)|0);
     $898 = ($897|0)==(0);
     if ($898) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $899 = HEAP32[$892>>2]|0;
     $$0$i77 = $899;
    } else {
     $$0$i77 = $893;
    }
    $$041$i = HEAP32[$891>>2]|0;
    $900 = (($$0$i77) + -1)|0;
    $901 = ((($$041$i)) + 1|0);
    $902 = HEAP8[$$041$i>>0]|0;
    $903 = $902&255;
    $904 = $903 << 8;
    $905 = ($900|0)==(0);
    if ($905) {
     $906 = ((($891)) + 12|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = (FUNCTION_TABLE_ii[$907 & 127]($0)|0);
     $909 = ($908|0)==(0);
     if ($909) {
      $$0 = 0;
      label = 232;
      break L1;
     }
     $910 = HEAP32[$891>>2]|0;
     $911 = HEAP32[$892>>2]|0;
     $$1$i78 = $911;$$142$i = $910;
    } else {
     $$1$i78 = $900;$$142$i = $901;
    }
    $912 = (($$1$i78) + -1)|0;
    $913 = ((($$142$i)) + 1|0);
    $914 = HEAP8[$$142$i>>0]|0;
    $915 = $914&255;
    $916 = $904 | $915;
    $917 = (($916) + -2)|0;
    $918 = HEAP32[$0>>2]|0;
    $919 = ((($918)) + 20|0);
    HEAP32[$919>>2] = 91;
    $920 = HEAP32[$2>>2]|0;
    $921 = ((($918)) + 24|0);
    HEAP32[$921>>2] = $920;
    $922 = HEAP32[$0>>2]|0;
    $923 = ((($922)) + 28|0);
    HEAP32[$923>>2] = $917;
    $924 = HEAP32[$0>>2]|0;
    $925 = ((($924)) + 4|0);
    $926 = HEAP32[$925>>2]|0;
    FUNCTION_TABLE_vii[$926 & 255]($0,1);
    HEAP32[$891>>2] = $913;
    HEAP32[$892>>2] = $912;
    $927 = ($916>>>0)>(2);
    if ($927) {
     $928 = HEAP32[$4>>2]|0;
     $929 = ((($928)) + 16|0);
     $930 = HEAP32[$929>>2]|0;
     FUNCTION_TABLE_vii[$930 & 255]($0,$917);
    }
    break;
   }
   default: {
    $931 = HEAP32[$0>>2]|0;
    $932 = ((($931)) + 20|0);
    HEAP32[$932>>2] = 68;
    $933 = ((($931)) + 24|0);
    HEAP32[$933>>2] = $105;
    $934 = HEAP32[$0>>2]|0;
    $935 = HEAP32[$934>>2]|0;
    FUNCTION_TABLE_vi[$935 & 255]($0);
   }
   }
  } while(0);
  HEAP32[$2>>2] = 0;
  $64 = 0;
 }
 if ((label|0) == 24) {
  $132 = HEAP32[$4>>2]|0;
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($132)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[$3>>2]|0;
  $137 = ((($136)) + 16|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(0);
  if ($139) {
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 20|0);
   HEAP32[$141>>2] = 62;
   $142 = HEAP32[$140>>2]|0;
   FUNCTION_TABLE_vi[$142 & 255]($0);
  }
  $143 = ($135|0)==(0);
  do {
   if ($143) {
    $144 = ((($132)) + 12|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 127]($0)|0);
    $147 = ($146|0)==(0);
    if ($147) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $148 = HEAP32[$132>>2]|0;
     $149 = HEAP32[$134>>2]|0;
     $$0181$i = $149;$$0182$i = $148;
     break;
    }
   } else {
    $$0181$i = $135;$$0182$i = $133;
   }
  } while(0);
  $150 = (($$0181$i) + -1)|0;
  $151 = ((($$0182$i)) + 1|0);
  $152 = HEAP8[$$0182$i>>0]|0;
  $153 = $152&255;
  $154 = $153 << 8;
  $155 = ($150|0)==(0);
  do {
   if ($155) {
    $156 = ((($132)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (FUNCTION_TABLE_ii[$157 & 127]($0)|0);
    $159 = ($158|0)==(0);
    if ($159) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $160 = HEAP32[$132>>2]|0;
     $161 = HEAP32[$134>>2]|0;
     $$1$i41 = $161;$$1183$i = $160;
     break;
    }
   } else {
    $$1$i41 = $150;$$1183$i = $151;
   }
  } while(0);
  $162 = (($$1$i41) + -1)|0;
  $163 = ((($$1183$i)) + 1|0);
  $164 = HEAP8[$$1183$i>>0]|0;
  $165 = $164&255;
  $166 = $154 | $165;
  $167 = ($162|0)==(0);
  do {
   if ($167) {
    $168 = ((($132)) + 12|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = (FUNCTION_TABLE_ii[$169 & 127]($0)|0);
    $171 = ($170|0)==(0);
    if ($171) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $172 = HEAP32[$132>>2]|0;
     $173 = HEAP32[$134>>2]|0;
     $$2$i = $173;$$2184$i = $172;
     break;
    }
   } else {
    $$2$i = $162;$$2184$i = $163;
   }
  } while(0);
  $174 = HEAP8[$$2184$i>>0]|0;
  $175 = $174&255;
  $176 = HEAP32[$0>>2]|0;
  $177 = ((($176)) + 20|0);
  HEAP32[$177>>2] = 103;
  $178 = ((($176)) + 24|0);
  HEAP32[$178>>2] = $175;
  $179 = HEAP32[$0>>2]|0;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  FUNCTION_TABLE_vii[$181 & 255]($0,1);
  $182 = $175 << 1;
  $183 = (($182) + 6)|0;
  $184 = ($166|0)!=($183|0);
  $185 = (($174) + -1)<<24>>24;
  $186 = ($185&255)>(3);
  $187 = $186 | $184;
  if ($187) {
   $188 = HEAP32[$0>>2]|0;
   $189 = ((($188)) + 20|0);
   HEAP32[$189>>2] = 11;
   $190 = HEAP32[$188>>2]|0;
   FUNCTION_TABLE_vi[$190 & 255]($0);
  }
  $191 = ((($0)) + 328|0);
  HEAP32[$191>>2] = $175;
  $scevgep$i = ((($0)) + 332|0);
  ;HEAP32[$scevgep$i>>2]=0|0;HEAP32[$scevgep$i+4>>2]=0|0;HEAP32[$scevgep$i+8>>2]=0|0;HEAP32[$scevgep$i+12>>2]=0|0;
  $$3208$i = (($$2$i) + -1)|0;
  $$3185209$i = ((($$2184$i)) + 1|0);
  $192 = ($174<<24>>24)==(0);
  $193 = ($$3208$i|0)==(0);
  L290: do {
   if ($192) {
    $$3$lcssa$i = $$3208$i;$$3185$lcssa$i = $$3185209$i;$$lcssa$i = $193;
   } else {
    $194 = ((($132)) + 12|0);
    $195 = ((($0)) + 216|0);
    $196 = ((($0)) + 36|0);
    $$3185212$i = $$3185209$i;$$3211$i = $$3208$i;$936 = $193;$indvars$iv$i = 0;
    while(1) {
     if ($936) {
      $197 = HEAP32[$194>>2]|0;
      $198 = (FUNCTION_TABLE_ii[$197 & 127]($0)|0);
      $199 = ($198|0)==(0);
      if ($199) {
       $$0 = 0;
       label = 232;
       break;
      }
      $200 = HEAP32[$132>>2]|0;
      $201 = HEAP32[$134>>2]|0;
      $$4$i = $201;$$4186$i = $200;
     } else {
      $$4$i = $$3211$i;$$4186$i = $$3185212$i;
     }
     $202 = (($$4$i) + -1)|0;
     $203 = ((($$4186$i)) + 1|0);
     $204 = HEAP8[$$4186$i>>0]|0;
     $205 = $204&255;
     $206 = ($202|0)==(0);
     if ($206) {
      $207 = HEAP32[$194>>2]|0;
      $208 = (FUNCTION_TABLE_ii[$207 & 127]($0)|0);
      $209 = ($208|0)==(0);
      if ($209) {
       $$0 = 0;
       label = 232;
       break;
      }
      $210 = HEAP32[$132>>2]|0;
      $211 = HEAP32[$134>>2]|0;
      $$5$i = $211;$$5187$i = $210;
     } else {
      $$5$i = $202;$$5187$i = $203;
     }
     $212 = HEAP8[$$5187$i>>0]|0;
     $213 = $212&255;
     $214 = HEAP32[$195>>2]|0;
     $215 = HEAP32[$196>>2]|0;
     $216 = ($215|0)>(0);
     L302: do {
      if ($216) {
       $$0193203$i = $214;$$0195202$i = 0;
       while(1) {
        $217 = HEAP32[$$0193203$i>>2]|0;
        $218 = ($217|0)==($205|0);
        if ($218) {
         $219 = (((($0)) + 332|0) + ($$0195202$i<<2)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = ($220|0)==(0|0);
         if ($221) {
          $$0193198$i = $$0193203$i;
          break L302;
         }
        }
        $222 = (($$0195202$i) + 1)|0;
        $223 = ((($$0193203$i)) + 84|0);
        $224 = ($222|0)<($215|0);
        $225 = ($$0195202$i|0)<(3);
        $226 = $225 & $224;
        if ($226) {
         $$0193203$i = $223;$$0195202$i = $222;
        } else {
         $$0193$lcssa$i = $223;
         label = 49;
         break;
        }
       }
      } else {
       $$0193$lcssa$i = $214;
       label = 49;
      }
     } while(0);
     if ((label|0) == 49) {
      label = 0;
      $227 = HEAP32[$0>>2]|0;
      $228 = ((($227)) + 20|0);
      HEAP32[$228>>2] = 5;
      $229 = ((($227)) + 24|0);
      HEAP32[$229>>2] = $205;
      $230 = HEAP32[$0>>2]|0;
      $231 = HEAP32[$230>>2]|0;
      FUNCTION_TABLE_vi[$231 & 255]($0);
      $$0193198$i = $$0193$lcssa$i;
     }
     $232 = (((($0)) + 332|0) + ($indvars$iv$i<<2)|0);
     HEAP32[$232>>2] = $$0193198$i;
     $233 = $213 >>> 4;
     $234 = ((($$0193198$i)) + 20|0);
     HEAP32[$234>>2] = $233;
     $235 = $213 & 15;
     $236 = ((($$0193198$i)) + 24|0);
     HEAP32[$236>>2] = $235;
     $237 = HEAP32[$0>>2]|0;
     $238 = ((($237)) + 24|0);
     HEAP32[$238>>2] = $205;
     $239 = HEAP32[$234>>2]|0;
     $240 = ((($237)) + 28|0);
     HEAP32[$240>>2] = $239;
     $241 = HEAP32[$236>>2]|0;
     $242 = ((($237)) + 32|0);
     HEAP32[$242>>2] = $241;
     $243 = ((($237)) + 20|0);
     HEAP32[$243>>2] = 104;
     $244 = ((($237)) + 4|0);
     $245 = HEAP32[$244>>2]|0;
     FUNCTION_TABLE_vii[$245 & 255]($0,1);
     $246 = ($indvars$iv$i|0)>(0);
     if ($246) {
      $$0194204$i = 0;
      while(1) {
       $247 = (((($0)) + 332|0) + ($$0194204$i<<2)|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = ($248|0)==($$0193198$i|0);
       if ($249) {
        $250 = HEAP32[$0>>2]|0;
        $251 = ((($250)) + 20|0);
        HEAP32[$251>>2] = 5;
        $252 = ((($250)) + 24|0);
        HEAP32[$252>>2] = $205;
        $253 = HEAP32[$0>>2]|0;
        $254 = HEAP32[$253>>2]|0;
        FUNCTION_TABLE_vi[$254 & 255]($0);
       }
       $255 = (($$0194204$i) + 1)|0;
       $exitcond$i = ($255|0)==($indvars$iv$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $$0194204$i = $255;
       }
      }
     }
     $indvars$iv$next$i = (($indvars$iv$i) + 1)|0;
     $$3$i = (($$5$i) + -1)|0;
     $$3185$i = ((($$5187$i)) + 1|0);
     $256 = ($indvars$iv$next$i|0)<($175|0);
     $257 = ($$3$i|0)==(0);
     if ($256) {
      $$3185212$i = $$3185$i;$$3211$i = $$3$i;$936 = $257;$indvars$iv$i = $indvars$iv$next$i;
     } else {
      $$3$lcssa$i = $$3$i;$$3185$lcssa$i = $$3185$i;$$lcssa$i = $257;
      break L290;
     }
    }
    if ((label|0) == 232) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  do {
   if ($$lcssa$i) {
    $258 = ((($132)) + 12|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = (FUNCTION_TABLE_ii[$259 & 127]($0)|0);
    $261 = ($260|0)==(0);
    if ($261) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $262 = HEAP32[$132>>2]|0;
     $263 = HEAP32[$134>>2]|0;
     $$6$i = $263;$$6188$i = $262;
     break;
    }
   } else {
    $$6$i = $$3$lcssa$i;$$6188$i = $$3185$lcssa$i;
   }
  } while(0);
  $264 = (($$6$i) + -1)|0;
  $265 = ((($$6188$i)) + 1|0);
  $266 = HEAP8[$$6188$i>>0]|0;
  $267 = $266&255;
  $268 = ((($0)) + 400|0);
  HEAP32[$268>>2] = $267;
  $269 = ($264|0)==(0);
  do {
   if ($269) {
    $270 = ((($132)) + 12|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = (FUNCTION_TABLE_ii[$271 & 127]($0)|0);
    $273 = ($272|0)==(0);
    if ($273) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $274 = HEAP32[$132>>2]|0;
     $275 = HEAP32[$134>>2]|0;
     $$7$i = $275;$$7189$i = $274;
     break;
    }
   } else {
    $$7$i = $264;$$7189$i = $265;
   }
  } while(0);
  $276 = (($$7$i) + -1)|0;
  $277 = ((($$7189$i)) + 1|0);
  $278 = HEAP8[$$7189$i>>0]|0;
  $279 = $278&255;
  $280 = ((($0)) + 404|0);
  HEAP32[$280>>2] = $279;
  $281 = ($276|0)==(0);
  do {
   if ($281) {
    $282 = ((($132)) + 12|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (FUNCTION_TABLE_ii[$283 & 127]($0)|0);
    $285 = ($284|0)==(0);
    if ($285) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $286 = HEAP32[$132>>2]|0;
     $287 = HEAP32[$134>>2]|0;
     $$8$i = $287;$$8190$i = $286;
     break;
    }
   } else {
    $$8$i = $276;$$8190$i = $277;
   }
  } while(0);
  $288 = (($$8$i) + -1)|0;
  $289 = ((($$8190$i)) + 1|0);
  $290 = HEAP8[$$8190$i>>0]|0;
  $291 = $290&255;
  $292 = $291 >>> 4;
  $293 = ((($0)) + 408|0);
  HEAP32[$293>>2] = $292;
  $294 = $291 & 15;
  $295 = ((($0)) + 412|0);
  HEAP32[$295>>2] = $294;
  $296 = HEAP32[$0>>2]|0;
  $297 = ((($296)) + 24|0);
  $298 = HEAP32[$268>>2]|0;
  HEAP32[$297>>2] = $298;
  $299 = HEAP32[$280>>2]|0;
  $300 = ((($296)) + 28|0);
  HEAP32[$300>>2] = $299;
  $301 = HEAP32[$293>>2]|0;
  $302 = ((($296)) + 32|0);
  HEAP32[$302>>2] = $301;
  $303 = HEAP32[$295>>2]|0;
  $304 = ((($296)) + 36|0);
  HEAP32[$304>>2] = $303;
  $305 = ((($296)) + 20|0);
  HEAP32[$305>>2] = 105;
  $306 = ((($296)) + 4|0);
  $307 = HEAP32[$306>>2]|0;
  FUNCTION_TABLE_vii[$307 & 255]($0,1);
  $308 = HEAP32[$3>>2]|0;
  $309 = ((($308)) + 20|0);
  HEAP32[$309>>2] = 0;
  $310 = ((($0)) + 144|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = (($311) + 1)|0;
  HEAP32[$310>>2] = $312;
  HEAP32[$132>>2] = $289;
  HEAP32[$134>>2] = $288;
  HEAP32[$2>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 65) {
  $313 = HEAP32[$0>>2]|0;
  $314 = ((($313)) + 20|0);
  HEAP32[$314>>2] = 85;
  $315 = ((($313)) + 4|0);
  $316 = HEAP32[$315>>2]|0;
  FUNCTION_TABLE_vii[$316 & 255]($0,1);
  HEAP32[$2>>2] = 0;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 168) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 232) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_restart_marker($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 416|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = (_next_marker($0)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$1>>2]|0;
    $11 = $$pre;
    break;
   }
  } else {
   $11 = $2;
  }
 } while(0);
 $6 = ((($0)) + 440|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 208)|0;
 $12 = ($11|0)==($10|0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = 98;
  $15 = ((($13)) + 24|0);
  HEAP32[$15>>2] = $9;
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vii[$18 & 255]($0,3);
  HEAP32[$1>>2] = 0;
 } else {
  $19 = ((($0)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iii[$22 & 255]($0,$9)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $25 = HEAP32[$6>>2]|0;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 $29 = $28 & 7;
 HEAP32[$26>>2] = $29;
 $$0 = 1;
 return ($$0|0);
}
function _skip_variable($0) {
 $0 = $0|0;
 var $$0 = 0, $$041 = 0, $$043 = 0, $$1 = 0, $$142 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = ((($2)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (FUNCTION_TABLE_ii[$7 & 127]($0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$043 = 0;
    return ($$043|0);
   } else {
    $10 = HEAP32[$3>>2]|0;
    $$0 = $10;
    break;
   }
  } else {
   $$0 = $4;
  }
 } while(0);
 $$041 = HEAP32[$2>>2]|0;
 $11 = (($$0) + -1)|0;
 $12 = ((($$041)) + 1|0);
 $13 = HEAP8[$$041>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = ($11|0)==(0);
 do {
  if ($16) {
   $17 = ((($2)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_ii[$18 & 127]($0)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$043 = 0;
    return ($$043|0);
   } else {
    $21 = HEAP32[$2>>2]|0;
    $22 = HEAP32[$3>>2]|0;
    $$1 = $22;$$142 = $21;
    break;
   }
  } else {
   $$1 = $11;$$142 = $12;
  }
 } while(0);
 $23 = (($$1) + -1)|0;
 $24 = ((($$142)) + 1|0);
 $25 = HEAP8[$$142>>0]|0;
 $26 = $25&255;
 $27 = $15 | $26;
 $28 = (($27) + -2)|0;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 20|0);
 HEAP32[$30>>2] = 91;
 $31 = ((($0)) + 416|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($29)) + 24|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$0>>2]|0;
 $35 = ((($34)) + 28|0);
 HEAP32[$35>>2] = $28;
 $36 = HEAP32[$0>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vii[$38 & 255]($0,1);
 HEAP32[$2>>2] = $24;
 HEAP32[$3>>2] = $23;
 $39 = ($27>>>0)>(2);
 if (!($39)) {
  $$043 = 1;
  return ($$043|0);
 }
 $40 = HEAP32[$1>>2]|0;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 255]($0,$28);
 $$043 = 1;
 return ($$043|0);
}
function _get_interesting_appn($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$066 = 0, $$070 = 0, $$071 = 0, $$07278 = 0, $$1 = 0, $$167 = 0, $$2 = 0, $$2$lcssa = 0, $$268 = 0, $$268$lcssa = 0, $$26877 = 0, $$26880 = 0, $$276 = 0, $$279 = 0, $$3 = 0, $$369 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = ((($3)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_ii[$8 & 127]($0)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$070 = 0;
    STACKTOP = sp;return ($$070|0);
   } else {
    $11 = HEAP32[$4>>2]|0;
    $$0 = $11;
    break;
   }
  } else {
   $$0 = $5;
  }
 } while(0);
 $$066 = HEAP32[$3>>2]|0;
 $12 = (($$0) + -1)|0;
 $13 = ((($$066)) + 1|0);
 $14 = HEAP8[$$066>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = ($12|0)==(0);
 do {
  if ($17) {
   $18 = ((($3)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 127]($0)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $$070 = 0;
    STACKTOP = sp;return ($$070|0);
   } else {
    $22 = HEAP32[$3>>2]|0;
    $23 = HEAP32[$4>>2]|0;
    $$1 = $23;$$167 = $22;
    break;
   }
  } else {
   $$1 = $12;$$167 = $13;
  }
 } while(0);
 $24 = HEAP8[$$167>>0]|0;
 $25 = $24&255;
 $26 = $16 | $25;
 $27 = (($26) + -2)|0;
 $28 = ($26>>>0)>(15);
 $29 = ($26>>>0)>(2);
 $$ = $29 ? $27 : 0;
 $$071 = $28 ? 14 : $$;
 $$276 = (($$1) + -1)|0;
 $$26877 = ((($$167)) + 1|0);
 $30 = ($$071|0)==(0);
 L13: do {
  if ($30) {
   $$2$lcssa = $$276;$$268$lcssa = $$26877;
  } else {
   $31 = ((($3)) + 12|0);
   $$07278 = 0;$$26880 = $$26877;$$279 = $$276;
   while(1) {
    $32 = ($$279|0)==(0);
    if ($32) {
     $33 = HEAP32[$31>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($0)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $$070 = 0;
      break;
     }
     $36 = HEAP32[$3>>2]|0;
     $37 = HEAP32[$4>>2]|0;
     $$3 = $37;$$369 = $36;
    } else {
     $$3 = $$279;$$369 = $$26880;
    }
    $38 = HEAP8[$$369>>0]|0;
    $39 = (($1) + ($$07278)|0);
    HEAP8[$39>>0] = $38;
    $40 = (($$07278) + 1)|0;
    $$2 = (($$3) + -1)|0;
    $$268 = ((($$369)) + 1|0);
    $41 = ($40>>>0)<($$071>>>0);
    if ($41) {
     $$07278 = $40;$$26880 = $$268;$$279 = $$2;
    } else {
     $$2$lcssa = $$2;$$268$lcssa = $$268;
     break L13;
    }
   }
   STACKTOP = sp;return ($$070|0);
  }
 } while(0);
 $42 = (($27) - ($$071))|0;
 $43 = ((($0)) + 416|0);
 $44 = HEAP32[$43>>2]|0;
 L23: do {
  switch ($44|0) {
  case 224:  {
   _examine_app0($0,$1,$$071,$42);
   break;
  }
  case 238:  {
   $45 = ($$071>>>0)>(11);
   $46 = HEAP8[$1>>0]|0;
   $47 = ($46<<24>>24)==(65);
   $or$cond = $45 & $47;
   if ($or$cond) {
    $48 = ((($1)) + 1|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)==(100);
    if ($50) {
     $51 = ((($1)) + 2|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ($52<<24>>24)==(111);
     if ($53) {
      $54 = ((($1)) + 3|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)==(98);
      if ($56) {
       $57 = ((($1)) + 4|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = ($58<<24>>24)==(101);
       if ($59) {
        $60 = ((($1)) + 5|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = $61&255;
        $63 = $62 << 8;
        $64 = ((($1)) + 6|0);
        $65 = HEAP8[$64>>0]|0;
        $66 = $65&255;
        $67 = $63 | $66;
        $68 = ((($1)) + 7|0);
        $69 = HEAP8[$68>>0]|0;
        $70 = $69&255;
        $71 = $70 << 8;
        $72 = ((($1)) + 8|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73&255;
        $75 = $71 | $74;
        $76 = ((($1)) + 9|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = $77&255;
        $79 = $78 << 8;
        $80 = ((($1)) + 10|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $83 = $79 | $82;
        $84 = ((($1)) + 11|0);
        $85 = HEAP8[$84>>0]|0;
        $86 = $85&255;
        $87 = HEAP32[$0>>2]|0;
        $88 = ((($87)) + 24|0);
        HEAP32[$88>>2] = $67;
        $89 = ((($87)) + 28|0);
        HEAP32[$89>>2] = $75;
        $90 = ((($87)) + 32|0);
        HEAP32[$90>>2] = $83;
        $91 = ((($87)) + 36|0);
        HEAP32[$91>>2] = $86;
        $92 = ((($87)) + 20|0);
        HEAP32[$92>>2] = 76;
        $93 = ((($87)) + 4|0);
        $94 = HEAP32[$93>>2]|0;
        FUNCTION_TABLE_vii[$94 & 255]($0,1);
        $95 = ((($0)) + 292|0);
        HEAP32[$95>>2] = 1;
        $96 = ((($0)) + 296|0);
        HEAP8[$96>>0] = $85;
        break L23;
       }
      }
     }
    }
   }
   $97 = HEAP32[$0>>2]|0;
   $98 = ((($97)) + 20|0);
   HEAP32[$98>>2] = 78;
   $99 = ((($97)) + 24|0);
   HEAP32[$99>>2] = $27;
   $100 = HEAP32[$0>>2]|0;
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vii[$102 & 255]($0,1);
   break;
  }
  default: {
   $103 = HEAP32[$0>>2]|0;
   $104 = ((($103)) + 20|0);
   HEAP32[$104>>2] = 68;
   $105 = ((($103)) + 24|0);
   HEAP32[$105>>2] = $44;
   $106 = HEAP32[$0>>2]|0;
   $107 = HEAP32[$106>>2]|0;
   FUNCTION_TABLE_vi[$107 & 255]($0);
  }
  }
 } while(0);
 HEAP32[$3>>2] = $$268$lcssa;
 HEAP32[$4>>2] = $$2$lcssa;
 $108 = ($42|0)>(0);
 if (!($108)) {
  $$070 = 1;
  STACKTOP = sp;return ($$070|0);
 }
 $109 = HEAP32[$2>>2]|0;
 $110 = ((($109)) + 16|0);
 $111 = HEAP32[$110>>2]|0;
 FUNCTION_TABLE_vii[$111 & 255]($0,$42);
 $$070 = 1;
 STACKTOP = sp;return ($$070|0);
}
function _examine_app0($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pr$pre = 0, $$pre = 0, $$pre$phi106Z2D = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $$pre103 = 0, $$pre98 = 0, $$pre99 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) + ($2))|0;
 $5 = ($2>>>0)>(13);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = ($6<<24>>24)==(74);
  if ($7) {
   $8 = ((($1)) + 1|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(70);
   if ($10) {
    $11 = ((($1)) + 2|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(73);
    if ($13) {
     $14 = ((($1)) + 3|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15<<24>>24)==(70);
     if ($16) {
      $17 = ((($1)) + 4|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $20 = ((($0)) + 280|0);
       HEAP32[$20>>2] = 1;
       $21 = ((($1)) + 5|0);
       $22 = HEAP8[$21>>0]|0;
       $23 = ((($0)) + 284|0);
       HEAP8[$23>>0] = $22;
       $24 = ((($1)) + 6|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ((($0)) + 285|0);
       HEAP8[$26>>0] = $25;
       $27 = ((($1)) + 7|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = ((($0)) + 286|0);
       HEAP8[$29>>0] = $28;
       $30 = ((($1)) + 8|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $33 = $32 << 8;
       $34 = ((($1)) + 9|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = $33 | $36;
       $38 = $37&65535;
       $39 = ((($0)) + 288|0);
       HEAP16[$39>>1] = $38;
       $40 = ((($1)) + 10|0);
       $41 = HEAP8[$40>>0]|0;
       $42 = $41&255;
       $43 = $42 << 8;
       $44 = ((($1)) + 11|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = $43 | $46;
       $48 = $47&65535;
       $49 = ((($0)) + 290|0);
       HEAP16[$49>>1] = $48;
       $50 = ($22<<24>>24)==(1);
       if ($50) {
        $$pre$phi106Z2D = $0;$65 = 1;$67 = $25;$70 = $38;$73 = $48;$76 = $28;
       } else {
        $51 = HEAP32[$0>>2]|0;
        $52 = ((($51)) + 20|0);
        HEAP32[$52>>2] = 119;
        $53 = $22&255;
        $54 = ((($51)) + 24|0);
        HEAP32[$54>>2] = $53;
        $55 = HEAP8[$26>>0]|0;
        $56 = $55&255;
        $57 = HEAP32[$0>>2]|0;
        $58 = ((($57)) + 28|0);
        HEAP32[$58>>2] = $56;
        $59 = HEAP32[$0>>2]|0;
        $60 = ((($59)) + 4|0);
        $61 = HEAP32[$60>>2]|0;
        FUNCTION_TABLE_vii[$61 & 255]($0,-1);
        $$pre = HEAP8[$23>>0]|0;
        $$pre98 = HEAP8[$26>>0]|0;
        $$pre99 = HEAP16[$39>>1]|0;
        $$pre100 = HEAP16[$49>>1]|0;
        $$pre101 = HEAP8[$29>>0]|0;
        $$pre$phi106Z2D = $0;$65 = $$pre;$67 = $$pre98;$70 = $$pre99;$73 = $$pre100;$76 = $$pre101;
       }
       $62 = HEAP32[$0>>2]|0;
       $63 = ((($62)) + 24|0);
       $64 = $65&255;
       HEAP32[$63>>2] = $64;
       $66 = $67&255;
       $68 = ((($62)) + 28|0);
       HEAP32[$68>>2] = $66;
       $69 = $70&65535;
       $71 = ((($62)) + 32|0);
       HEAP32[$71>>2] = $69;
       $72 = $73&65535;
       $74 = ((($62)) + 36|0);
       HEAP32[$74>>2] = $72;
       $75 = $76&255;
       $77 = ((($62)) + 40|0);
       HEAP32[$77>>2] = $75;
       $78 = ((($62)) + 20|0);
       HEAP32[$78>>2] = 87;
       $79 = ((($62)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       FUNCTION_TABLE_vii[$80 & 255]($$pre$phi106Z2D,1);
       $81 = ((($1)) + 12|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ((($1)) + 13|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = $84 | $82;
       $86 = ($85<<24>>24)==(0);
       if ($86) {
        $101 = $82;$103 = $84;
       } else {
        $87 = HEAP32[$0>>2]|0;
        $88 = ((($87)) + 20|0);
        HEAP32[$88>>2] = 90;
        $89 = HEAP8[$81>>0]|0;
        $90 = $89&255;
        $91 = ((($87)) + 24|0);
        HEAP32[$91>>2] = $90;
        $92 = HEAP8[$83>>0]|0;
        $93 = $92&255;
        $94 = HEAP32[$0>>2]|0;
        $95 = ((($94)) + 28|0);
        HEAP32[$95>>2] = $93;
        $96 = HEAP32[$0>>2]|0;
        $97 = ((($96)) + 4|0);
        $98 = HEAP32[$97>>2]|0;
        FUNCTION_TABLE_vii[$98 & 255]($$pre$phi106Z2D,1);
        $$pre102 = HEAP8[$81>>0]|0;
        $$pre103 = HEAP8[$83>>0]|0;
        $101 = $$pre102;$103 = $$pre103;
       }
       $99 = (($4) + -14)|0;
       $100 = $101&255;
       $102 = $103&255;
       $104 = ($100*3)|0;
       $105 = Math_imul($104, $102)|0;
       $106 = ($99|0)==($105|0);
       if ($106) {
        return;
       }
       $107 = HEAP32[$0>>2]|0;
       $108 = ((($107)) + 20|0);
       HEAP32[$108>>2] = 88;
       $109 = ((($107)) + 24|0);
       HEAP32[$109>>2] = $99;
       $110 = HEAP32[$0>>2]|0;
       $111 = ((($110)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       FUNCTION_TABLE_vii[$112 & 255]($$pre$phi106Z2D,1);
       return;
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
  }
 } else {
  $113 = ($2>>>0)>(5);
  if ($113) {
   $$pr$pre = HEAP8[$1>>0]|0;
   $phitmp = ($$pr$pre<<24>>24)==(74);
   if ($phitmp) {
    label = 16;
   }
  }
 }
 if ((label|0) == 16) {
  $114 = ((($1)) + 1|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = ($115<<24>>24)==(70);
  if ($116) {
   $117 = ((($1)) + 2|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118<<24>>24)==(88);
   if ($119) {
    $120 = ((($1)) + 3|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = ($121<<24>>24)==(88);
    if ($122) {
     $123 = ((($1)) + 4|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(0);
     if ($125) {
      $126 = ((($1)) + 5|0);
      $127 = HEAP8[$126>>0]|0;
      switch ($127<<24>>24) {
      case 16:  {
       $128 = HEAP32[$0>>2]|0;
       $129 = ((($128)) + 20|0);
       HEAP32[$129>>2] = 108;
       $130 = ((($128)) + 24|0);
       HEAP32[$130>>2] = $4;
       $131 = HEAP32[$0>>2]|0;
       $132 = ((($131)) + 4|0);
       $133 = HEAP32[$132>>2]|0;
       FUNCTION_TABLE_vii[$133 & 255]($0,1);
       return;
       break;
      }
      case 17:  {
       $134 = HEAP32[$0>>2]|0;
       $135 = ((($134)) + 20|0);
       HEAP32[$135>>2] = 109;
       $136 = ((($134)) + 24|0);
       HEAP32[$136>>2] = $4;
       $137 = HEAP32[$0>>2]|0;
       $138 = ((($137)) + 4|0);
       $139 = HEAP32[$138>>2]|0;
       FUNCTION_TABLE_vii[$139 & 255]($0,1);
       return;
       break;
      }
      case 19:  {
       $140 = HEAP32[$0>>2]|0;
       $141 = ((($140)) + 20|0);
       HEAP32[$141>>2] = 110;
       $142 = ((($140)) + 24|0);
       HEAP32[$142>>2] = $4;
       $143 = HEAP32[$0>>2]|0;
       $144 = ((($143)) + 4|0);
       $145 = HEAP32[$144>>2]|0;
       FUNCTION_TABLE_vii[$145 & 255]($0,1);
       return;
       break;
      }
      default: {
       $146 = HEAP32[$0>>2]|0;
       $147 = ((($146)) + 20|0);
       HEAP32[$147>>2] = 89;
       $148 = HEAP8[$126>>0]|0;
       $149 = $148&255;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $149;
       $151 = HEAP32[$0>>2]|0;
       $152 = ((($151)) + 28|0);
       HEAP32[$152>>2] = $4;
       $153 = HEAP32[$0>>2]|0;
       $154 = ((($153)) + 4|0);
       $155 = HEAP32[$154>>2]|0;
       FUNCTION_TABLE_vii[$155 & 255]($0,1);
       return;
      }
      }
     }
    }
   }
  }
 }
 $156 = HEAP32[$0>>2]|0;
 $157 = ((($156)) + 20|0);
 HEAP32[$157>>2] = 77;
 $158 = ((($156)) + 24|0);
 HEAP32[$158>>2] = $4;
 $159 = HEAP32[$0>>2]|0;
 $160 = ((($159)) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 FUNCTION_TABLE_vii[$161 & 255]($0,1);
 return;
}
function _get_sof($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0171 = 0, $$0172 = 0, $$0184191 = 0, $$0185190 = 0, $$1 = 0, $$10 = 0, $$10182 = 0, $$11 = 0, $$11183 = 0, $$1173 = 0, $$2 = 0, $$2174 = 0, $$3 = 0, $$3175 = 0, $$4 = 0, $$4176 = 0, $$5 = 0, $$5177 = 0, $$6 = 0;
 var $$6178 = 0, $$7 = 0, $$7179 = 0, $$8 = 0, $$8$lcssa = 0, $$8180 = 0, $$8180$lcssa = 0, $$8180189 = 0, $$8180193 = 0, $$8188 = 0, $$8192 = 0, $$9 = 0, $$9181 = 0, $$pre = 0, $$pre197 = 0, $$pre198 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 220|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($0)) + 224|0);
 HEAP32[$9>>2] = $2;
 $10 = ($7|0)==(0);
 do {
  if ($10) {
   $11 = ((($4)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 127]($0)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $15 = HEAP32[$4>>2]|0;
    $16 = HEAP32[$6>>2]|0;
    $$0171 = $16;$$0172 = $15;
    break;
   }
  } else {
   $$0171 = $7;$$0172 = $5;
  }
 } while(0);
 $17 = (($$0171) + -1)|0;
 $18 = ((($$0172)) + 1|0);
 $19 = HEAP8[$$0172>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = ($17|0)==(0);
 do {
  if ($22) {
   $23 = ((($4)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_ii[$24 & 127]($0)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $27 = HEAP32[$4>>2]|0;
    $28 = HEAP32[$6>>2]|0;
    $$1 = $28;$$1173 = $27;
    break;
   }
  } else {
   $$1 = $17;$$1173 = $18;
  }
 } while(0);
 $29 = (($$1) + -1)|0;
 $30 = ((($$1173)) + 1|0);
 $31 = HEAP8[$$1173>>0]|0;
 $32 = $31&255;
 $33 = $21 | $32;
 $34 = ($29|0)==(0);
 do {
  if ($34) {
   $35 = ((($4)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (FUNCTION_TABLE_ii[$36 & 127]($0)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $39 = HEAP32[$4>>2]|0;
    $40 = HEAP32[$6>>2]|0;
    $$2 = $40;$$2174 = $39;
    break;
   }
  } else {
   $$2 = $29;$$2174 = $30;
  }
 } while(0);
 $41 = (($$2) + -1)|0;
 $42 = ((($$2174)) + 1|0);
 $43 = HEAP8[$$2174>>0]|0;
 $44 = $43&255;
 $45 = ((($0)) + 212|0);
 HEAP32[$45>>2] = $44;
 $46 = ($41|0)==(0);
 do {
  if ($46) {
   $47 = ((($4)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_ii[$48 & 127]($0)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $51 = HEAP32[$4>>2]|0;
    $52 = HEAP32[$6>>2]|0;
    $$3 = $52;$$3175 = $51;
    break;
   }
  } else {
   $$3 = $41;$$3175 = $42;
  }
 } while(0);
 $53 = (($$3) + -1)|0;
 $54 = ((($$3175)) + 1|0);
 $55 = HEAP8[$$3175>>0]|0;
 $56 = $55&255;
 $57 = $56 << 8;
 $58 = ((($0)) + 32|0);
 HEAP32[$58>>2] = $57;
 $59 = ($53|0)==(0);
 do {
  if ($59) {
   $60 = ((($4)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (FUNCTION_TABLE_ii[$61 & 127]($0)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $64 = HEAP32[$4>>2]|0;
    $65 = HEAP32[$6>>2]|0;
    $$pre = HEAP32[$58>>2]|0;
    $$4 = $65;$$4176 = $64;$71 = $$pre;
    break;
   }
  } else {
   $$4 = $53;$$4176 = $54;$71 = $57;
  }
 } while(0);
 $66 = (($$4) + -1)|0;
 $67 = ((($$4176)) + 1|0);
 $68 = HEAP8[$$4176>>0]|0;
 $69 = $68&255;
 $70 = (($71) + ($69))|0;
 HEAP32[$58>>2] = $70;
 $72 = ($66|0)==(0);
 do {
  if ($72) {
   $73 = ((($4)) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($0)|0);
   $76 = ($75|0)==(0);
   if ($76) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $77 = HEAP32[$4>>2]|0;
    $78 = HEAP32[$6>>2]|0;
    $$5 = $78;$$5177 = $77;
    break;
   }
  } else {
   $$5 = $66;$$5177 = $67;
  }
 } while(0);
 $79 = (($$5) + -1)|0;
 $80 = ((($$5177)) + 1|0);
 $81 = HEAP8[$$5177>>0]|0;
 $82 = $81&255;
 $83 = $82 << 8;
 $84 = ((($0)) + 28|0);
 HEAP32[$84>>2] = $83;
 $85 = ($79|0)==(0);
 do {
  if ($85) {
   $86 = ((($4)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 127]($0)|0);
   $89 = ($88|0)==(0);
   if ($89) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $90 = HEAP32[$4>>2]|0;
    $91 = HEAP32[$6>>2]|0;
    $$pre197 = HEAP32[$84>>2]|0;
    $$6 = $91;$$6178 = $90;$97 = $$pre197;
    break;
   }
  } else {
   $$6 = $79;$$6178 = $80;$97 = $83;
  }
 } while(0);
 $92 = (($$6) + -1)|0;
 $93 = ((($$6178)) + 1|0);
 $94 = HEAP8[$$6178>>0]|0;
 $95 = $94&255;
 $96 = (($97) + ($95))|0;
 HEAP32[$84>>2] = $96;
 $98 = ($92|0)==(0);
 do {
  if ($98) {
   $99 = ((($4)) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (FUNCTION_TABLE_ii[$100 & 127]($0)|0);
   $102 = ($101|0)==(0);
   if ($102) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $103 = HEAP32[$4>>2]|0;
    $104 = HEAP32[$6>>2]|0;
    $$7 = $104;$$7179 = $103;
    break;
   }
  } else {
   $$7 = $92;$$7179 = $93;
  }
 } while(0);
 $105 = HEAP8[$$7179>>0]|0;
 $106 = $105&255;
 $107 = ((($0)) + 36|0);
 HEAP32[$107>>2] = $106;
 $108 = (($33) + -8)|0;
 $109 = HEAP32[$0>>2]|0;
 $110 = ((($109)) + 24|0);
 $111 = ((($0)) + 416|0);
 $112 = HEAP32[$111>>2]|0;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$84>>2]|0;
 $114 = ((($109)) + 28|0);
 HEAP32[$114>>2] = $113;
 $115 = HEAP32[$58>>2]|0;
 $116 = ((($109)) + 32|0);
 HEAP32[$116>>2] = $115;
 $117 = HEAP32[$107>>2]|0;
 $118 = ((($109)) + 36|0);
 HEAP32[$118>>2] = $117;
 $119 = ((($109)) + 20|0);
 HEAP32[$119>>2] = 100;
 $120 = ((($109)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 FUNCTION_TABLE_vii[$121 & 255]($0,1);
 $122 = ((($0)) + 440|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 16|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)==(0);
 if (!($126)) {
  $127 = HEAP32[$0>>2]|0;
  $128 = ((($127)) + 20|0);
  HEAP32[$128>>2] = 58;
  $129 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vi[$129 & 255]($0);
 }
 $130 = HEAP32[$58>>2]|0;
 $131 = ($130|0)==(0);
 if ($131) {
  label = 30;
 } else {
  $132 = HEAP32[$84>>2]|0;
  $133 = ($132|0)==(0);
  if ($133) {
   label = 30;
  } else {
   $134 = HEAP32[$107>>2]|0;
   $135 = ($134|0)<(1);
   if ($135) {
    label = 30;
   } else {
    $140 = $134;
   }
  }
 }
 if ((label|0) == 30) {
  $136 = HEAP32[$0>>2]|0;
  $137 = ((($136)) + 20|0);
  HEAP32[$137>>2] = 32;
  $138 = HEAP32[$136>>2]|0;
  FUNCTION_TABLE_vi[$138 & 255]($0);
  $$pre198 = HEAP32[$107>>2]|0;
  $140 = $$pre198;
 }
 $139 = ($140*3)|0;
 $141 = ($108|0)==($139|0);
 if (!($141)) {
  $142 = HEAP32[$0>>2]|0;
  $143 = ((($142)) + 20|0);
  HEAP32[$143>>2] = 11;
  $144 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vi[$144 & 255]($0);
 }
 $145 = ((($0)) + 216|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)==(0|0);
 if ($147) {
  $148 = ((($0)) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = HEAP32[$149>>2]|0;
  $151 = HEAP32[$107>>2]|0;
  $152 = ($151*84)|0;
  $153 = (FUNCTION_TABLE_iiii[$150 & 255]($0,1,$152)|0);
  HEAP32[$145>>2] = $153;
  $209 = $153;
 } else {
  $209 = $146;
 }
 $$8188 = (($$7) + -1)|0;
 $$8180189 = ((($$7179)) + 1|0);
 $154 = HEAP32[$107>>2]|0;
 $155 = ($154|0)>(0);
 L64: do {
  if ($155) {
   $156 = ((($4)) + 12|0);
   $$0184191 = 0;$$0185190 = $209;$$8180193 = $$8180189;$$8192 = $$8188;
   while(1) {
    $157 = ((($$0185190)) + 4|0);
    HEAP32[$157>>2] = $$0184191;
    $158 = ($$8192|0)==(0);
    if ($158) {
     $159 = HEAP32[$156>>2]|0;
     $160 = (FUNCTION_TABLE_ii[$159 & 127]($0)|0);
     $161 = ($160|0)==(0);
     if ($161) {
      $$0 = 0;
      label = 48;
      break;
     }
     $162 = HEAP32[$4>>2]|0;
     $163 = HEAP32[$6>>2]|0;
     $$9 = $163;$$9181 = $162;
    } else {
     $$9 = $$8192;$$9181 = $$8180193;
    }
    $164 = (($$9) + -1)|0;
    $165 = ((($$9181)) + 1|0);
    $166 = HEAP8[$$9181>>0]|0;
    $167 = $166&255;
    HEAP32[$$0185190>>2] = $167;
    $168 = ($164|0)==(0);
    if ($168) {
     $169 = HEAP32[$156>>2]|0;
     $170 = (FUNCTION_TABLE_ii[$169 & 127]($0)|0);
     $171 = ($170|0)==(0);
     if ($171) {
      $$0 = 0;
      label = 48;
      break;
     }
     $172 = HEAP32[$4>>2]|0;
     $173 = HEAP32[$6>>2]|0;
     $$10 = $173;$$10182 = $172;
    } else {
     $$10 = $164;$$10182 = $165;
    }
    $174 = (($$10) + -1)|0;
    $175 = ((($$10182)) + 1|0);
    $176 = HEAP8[$$10182>>0]|0;
    $177 = $176&255;
    $178 = $177 >>> 4;
    $179 = ((($$0185190)) + 8|0);
    HEAP32[$179>>2] = $178;
    $180 = $177 & 15;
    $181 = ((($$0185190)) + 12|0);
    HEAP32[$181>>2] = $180;
    $182 = ($174|0)==(0);
    if ($182) {
     $183 = HEAP32[$156>>2]|0;
     $184 = (FUNCTION_TABLE_ii[$183 & 127]($0)|0);
     $185 = ($184|0)==(0);
     if ($185) {
      $$0 = 0;
      label = 48;
      break;
     }
     $186 = HEAP32[$4>>2]|0;
     $187 = HEAP32[$6>>2]|0;
     $$11 = $187;$$11183 = $186;
    } else {
     $$11 = $174;$$11183 = $175;
    }
    $188 = HEAP8[$$11183>>0]|0;
    $189 = $188&255;
    $190 = ((($$0185190)) + 16|0);
    HEAP32[$190>>2] = $189;
    $191 = HEAP32[$0>>2]|0;
    $192 = ((($191)) + 24|0);
    $193 = HEAP32[$$0185190>>2]|0;
    HEAP32[$192>>2] = $193;
    $194 = HEAP32[$179>>2]|0;
    $195 = ((($191)) + 28|0);
    HEAP32[$195>>2] = $194;
    $196 = HEAP32[$181>>2]|0;
    $197 = ((($191)) + 32|0);
    HEAP32[$197>>2] = $196;
    $198 = HEAP32[$190>>2]|0;
    $199 = ((($191)) + 36|0);
    HEAP32[$199>>2] = $198;
    $200 = ((($191)) + 20|0);
    HEAP32[$200>>2] = 101;
    $201 = ((($191)) + 4|0);
    $202 = HEAP32[$201>>2]|0;
    FUNCTION_TABLE_vii[$202 & 255]($0,1);
    $203 = (($$0184191) + 1)|0;
    $204 = ((($$0185190)) + 84|0);
    $$8 = (($$11) + -1)|0;
    $$8180 = ((($$11183)) + 1|0);
    $205 = HEAP32[$107>>2]|0;
    $206 = ($203|0)<($205|0);
    if ($206) {
     $$0184191 = $203;$$0185190 = $204;$$8180193 = $$8180;$$8192 = $$8;
    } else {
     $$8$lcssa = $$8;$$8180$lcssa = $$8180;
     break L64;
    }
   }
   if ((label|0) == 48) {
    return ($$0|0);
   }
  } else {
   $$8$lcssa = $$8188;$$8180$lcssa = $$8180189;
  }
 } while(0);
 $207 = HEAP32[$122>>2]|0;
 $208 = ((($207)) + 16|0);
 HEAP32[$208>>2] = 1;
 HEAP32[$4>>2] = $$8180$lcssa;
 HEAP32[$6>>2] = $$8$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _jpeg_set_marker_processor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 440|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==(254);
 if ($5) {
  $6 = ((($4)) + 28|0);
  HEAP32[$6>>2] = $2;
  return;
 }
 $7 = $1 & -16;
 $8 = ($7|0)==(224);
 if ($8) {
  $9 = (($1) + -224)|0;
  $10 = (((($4)) + 32|0) + ($9<<2)|0);
  HEAP32[$10>>2] = $2;
  return;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($11)) + 20|0);
  HEAP32[$12>>2] = 68;
  $13 = ((($11)) + 24|0);
  HEAP32[$13>>2] = $1;
  $14 = HEAP32[$0>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 255]($0);
  return;
 }
}
function _jpeg_calc_output_dimensions($0) {
 $0 = $0|0;
 var $$0$lcssa$us = 0, $$0138143$i = 0, $$0144$i = 0, $$06176 = 0, $$06176$us = 0, $$06275 = 0, $$06275$us = 0, $$067$us = 0, $$16365 = 0, $$166 = 0, $$pre81 = 0, $$sink$ = 0, $$sink142$i = 0, $$sink3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(202);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 20|0);
  HEAP32[$5>>2] = 20;
  $6 = ((($4)) + 24|0);
  HEAP32[$6>>2] = $2;
  $7 = HEAP32[$0>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 255]($0);
 }
 $9 = ((($0)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 3;
 $12 = ((($0)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 do {
  if ($14) {
   $21 = $13 << 1;
   $22 = ($11>>>0)>($21>>>0);
   if (!($22)) {
    $23 = ((($0)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 << 1;
    $26 = (_jdiv_round_up($25,8)|0);
    $27 = ((($0)) + 112|0);
    HEAP32[$27>>2] = $26;
    $28 = ((($0)) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 << 1;
    $$sink142$i = $30;$170 = 2;
    break;
   }
   $31 = ($13*3)|0;
   $32 = ($11>>>0)>($31>>>0);
   if (!($32)) {
    $33 = ((($0)) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34*3)|0;
    $36 = (_jdiv_round_up($35,8)|0);
    $37 = ((($0)) + 112|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($0)) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39*3)|0;
    $$sink142$i = $40;$170 = 3;
    break;
   }
   $41 = $13 << 2;
   $42 = ($11>>>0)>($41>>>0);
   if (!($42)) {
    $43 = ((($0)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 << 2;
    $46 = (_jdiv_round_up($45,8)|0);
    $47 = ((($0)) + 112|0);
    HEAP32[$47>>2] = $46;
    $48 = ((($0)) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 << 2;
    $$sink142$i = $50;$170 = 4;
    break;
   }
   $51 = ($13*5)|0;
   $52 = ($11>>>0)>($51>>>0);
   if (!($52)) {
    $53 = ((($0)) + 28|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54*5)|0;
    $56 = (_jdiv_round_up($55,8)|0);
    $57 = ((($0)) + 112|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($0)) + 32|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59*5)|0;
    $$sink142$i = $60;$170 = 5;
    break;
   }
   $61 = ($13*6)|0;
   $62 = ($11>>>0)>($61>>>0);
   if (!($62)) {
    $63 = ((($0)) + 28|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64*6)|0;
    $66 = (_jdiv_round_up($65,8)|0);
    $67 = ((($0)) + 112|0);
    HEAP32[$67>>2] = $66;
    $68 = ((($0)) + 32|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69*6)|0;
    $$sink142$i = $70;$170 = 6;
    break;
   }
   $71 = ($13*7)|0;
   $72 = ($11>>>0)>($71>>>0);
   if (!($72)) {
    $73 = ((($0)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74*7)|0;
    $76 = (_jdiv_round_up($75,8)|0);
    $77 = ((($0)) + 112|0);
    HEAP32[$77>>2] = $76;
    $78 = ((($0)) + 32|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79*7)|0;
    $$sink142$i = $80;$170 = 7;
    break;
   }
   $81 = $13 << 3;
   $82 = ($11>>>0)>($81>>>0);
   if (!($82)) {
    $83 = ((($0)) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 << 3;
    $86 = (_jdiv_round_up($85,8)|0);
    $87 = ((($0)) + 112|0);
    HEAP32[$87>>2] = $86;
    $88 = ((($0)) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $89 << 3;
    $$sink142$i = $90;$170 = 8;
    break;
   }
   $91 = ($13*9)|0;
   $92 = ($11>>>0)>($91>>>0);
   if (!($92)) {
    $93 = ((($0)) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94*9)|0;
    $96 = (_jdiv_round_up($95,8)|0);
    $97 = ((($0)) + 112|0);
    HEAP32[$97>>2] = $96;
    $98 = ((($0)) + 32|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99*9)|0;
    $$sink142$i = $100;$170 = 9;
    break;
   }
   $101 = ($13*10)|0;
   $102 = ($11>>>0)>($101>>>0);
   if (!($102)) {
    $103 = ((($0)) + 28|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104*10)|0;
    $106 = (_jdiv_round_up($105,8)|0);
    $107 = ((($0)) + 112|0);
    HEAP32[$107>>2] = $106;
    $108 = ((($0)) + 32|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109*10)|0;
    $$sink142$i = $110;$170 = 10;
    break;
   }
   $111 = ($13*11)|0;
   $112 = ($11>>>0)>($111>>>0);
   if (!($112)) {
    $113 = ((($0)) + 28|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114*11)|0;
    $116 = (_jdiv_round_up($115,8)|0);
    $117 = ((($0)) + 112|0);
    HEAP32[$117>>2] = $116;
    $118 = ((($0)) + 32|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119*11)|0;
    $$sink142$i = $120;$170 = 11;
    break;
   }
   $121 = ($13*12)|0;
   $122 = ($11>>>0)>($121>>>0);
   if (!($122)) {
    $123 = ((($0)) + 28|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($124*12)|0;
    $126 = (_jdiv_round_up($125,8)|0);
    $127 = ((($0)) + 112|0);
    HEAP32[$127>>2] = $126;
    $128 = ((($0)) + 32|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129*12)|0;
    $$sink142$i = $130;$170 = 12;
    break;
   }
   $131 = ($13*13)|0;
   $132 = ($11>>>0)>($131>>>0);
   if (!($132)) {
    $133 = ((($0)) + 28|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134*13)|0;
    $136 = (_jdiv_round_up($135,8)|0);
    $137 = ((($0)) + 112|0);
    HEAP32[$137>>2] = $136;
    $138 = ((($0)) + 32|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139*13)|0;
    $$sink142$i = $140;$170 = 13;
    break;
   }
   $141 = ($13*14)|0;
   $142 = ($11>>>0)>($141>>>0);
   if (!($142)) {
    $143 = ((($0)) + 28|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144*14)|0;
    $146 = (_jdiv_round_up($145,8)|0);
    $147 = ((($0)) + 112|0);
    HEAP32[$147>>2] = $146;
    $148 = ((($0)) + 32|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149*14)|0;
    $$sink142$i = $150;$170 = 14;
    break;
   }
   $151 = ($13*15)|0;
   $152 = ($11>>>0)>($151>>>0);
   $153 = ((($0)) + 28|0);
   $154 = HEAP32[$153>>2]|0;
   if ($152) {
    $161 = $154 << 4;
    $162 = (_jdiv_round_up($161,8)|0);
    $163 = ((($0)) + 112|0);
    HEAP32[$163>>2] = $162;
    $164 = ((($0)) + 32|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $165 << 4;
    $$sink142$i = $166;$170 = 16;
    break;
   } else {
    $155 = ($154*15)|0;
    $156 = (_jdiv_round_up($155,8)|0);
    $157 = ((($0)) + 112|0);
    HEAP32[$157>>2] = $156;
    $158 = ((($0)) + 32|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159*15)|0;
    $$sink142$i = $160;$170 = 15;
    break;
   }
  } else {
   $15 = ((($0)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_jdiv_round_up($16,8)|0);
   $18 = ((($0)) + 112|0);
   HEAP32[$18>>2] = $17;
   $19 = ((($0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $$sink142$i = $20;$170 = 1;
  }
 } while(0);
 $167 = (_jdiv_round_up($$sink142$i,8)|0);
 $168 = ((($0)) + 116|0);
 HEAP32[$168>>2] = $167;
 $169 = ((($0)) + 316|0);
 HEAP32[$169>>2] = $170;
 $171 = ((($0)) + 36|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)>(0);
 $174 = ((($0)) + 216|0);
 if ($173) {
  $175 = HEAP32[$174>>2]|0;
  $$0138143$i = 0;$$0144$i = $175;
  while(1) {
   $176 = ((($$0144$i)) + 36|0);
   HEAP32[$176>>2] = $170;
   $177 = (($$0138143$i) + 1)|0;
   $178 = ((($$0144$i)) + 84|0);
   $exitcond = ($177|0)==($172|0);
   if ($exitcond) {
    break;
   } else {
    $$0138143$i = $177;$$0144$i = $178;
   }
  }
  if ($173) {
   $179 = ((($0)) + 312|0);
   $180 = ($170>>>0)<(8);
   if ($180) {
    $181 = ((($0)) + 308|0);
    $$pre81 = HEAP32[$181>>2]|0;
    $182 = Math_imul($170, $$pre81)|0;
    $$06176$us = $175;$$06275$us = 0;
    while(1) {
     $183 = ((($$06176$us)) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((($$06176$us)) + 12|0);
     $$067$us = $170;
     while(1) {
      $186 = $$067$us << 1;
      $187 = Math_imul($186, $184)|0;
      $188 = (($182|0) % ($187|0))&-1;
      $189 = ($188|0)==(0);
      if (!($189)) {
       $$0$lcssa$us = $$067$us;
       break;
      }
      $190 = HEAP32[$179>>2]|0;
      $191 = Math_imul($190, $170)|0;
      $192 = HEAP32[$185>>2]|0;
      $193 = Math_imul($186, $192)|0;
      $194 = (($191|0) % ($193|0))&-1;
      $195 = ($194|0)==(0);
      if (!($195)) {
       $$0$lcssa$us = $$067$us;
       break;
      }
      $200 = ($$067$us|0)<(4);
      if ($200) {
       $$067$us = $186;
      } else {
       $$0$lcssa$us = $186;
       break;
      }
     }
     $196 = ((($$06176$us)) + 36|0);
     HEAP32[$196>>2] = $$0$lcssa$us;
     $197 = (($$06275$us) + 1)|0;
     $198 = ((($$06176$us)) + 84|0);
     $199 = ($197|0)<($172|0);
     if ($199) {
      $$06176$us = $198;$$06275$us = $197;
     } else {
      break;
     }
    }
   } else {
    $$06176 = $175;$$06275 = 0;
    while(1) {
     $201 = ((($$06176)) + 36|0);
     HEAP32[$201>>2] = $170;
     $202 = (($$06275) + 1)|0;
     $203 = ((($$06176)) + 84|0);
     $204 = ($202|0)<($172|0);
     if ($204) {
      $$06176 = $203;$$06275 = $202;
     } else {
      break;
     }
    }
   }
   if ($173) {
    $205 = ((($0)) + 28|0);
    $206 = ((($0)) + 308|0);
    $207 = ((($0)) + 32|0);
    $208 = ((($0)) + 312|0);
    $$16365 = 0;$$166 = $175;
    while(1) {
     $209 = HEAP32[$205>>2]|0;
     $210 = ((($$166)) + 8|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((($$166)) + 36|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = Math_imul($211, $209)|0;
     $215 = Math_imul($214, $213)|0;
     $216 = HEAP32[$206>>2]|0;
     $217 = $216 << 3;
     $218 = (_jdiv_round_up($215,$217)|0);
     $219 = ((($$166)) + 40|0);
     HEAP32[$219>>2] = $218;
     $220 = HEAP32[$207>>2]|0;
     $221 = ((($$166)) + 12|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = HEAP32[$212>>2]|0;
     $224 = Math_imul($222, $220)|0;
     $225 = Math_imul($224, $223)|0;
     $226 = HEAP32[$208>>2]|0;
     $227 = $226 << 3;
     $228 = (_jdiv_round_up($225,$227)|0);
     $229 = ((($$166)) + 44|0);
     HEAP32[$229>>2] = $228;
     $230 = (($$16365) + 1)|0;
     $231 = ((($$166)) + 84|0);
     $232 = HEAP32[$171>>2]|0;
     $233 = ($230|0)<($232|0);
     if ($233) {
      $$16365 = $230;$$166 = $231;
     } else {
      $253 = $232;
      break;
     }
    }
   } else {
    $253 = $172;
   }
  } else {
   $253 = $172;
  }
 } else {
  $253 = $172;
 }
 $234 = ((($0)) + 44|0);
 $235 = HEAP32[$234>>2]|0;
 switch ($235|0) {
 case 1:  {
  $239 = 1;
  break;
 }
 case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 2:  {
  $236 = (1332 + ($235<<2)|0);
  $237 = HEAP32[$236>>2]|0;
  $239 = $237;
  break;
 }
 case 16: case 3:  {
  $239 = 3;
  break;
 }
 case 5: case 4:  {
  $239 = 4;
  break;
 }
 default: {
  $239 = $253;
 }
 }
 $238 = ((($0)) + 120|0);
 HEAP32[$238>>2] = $239;
 $240 = ((($0)) + 84|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)==(0);
 $$sink$ = $242 ? $239 : 1;
 $243 = ((($0)) + 124|0);
 HEAP32[$243>>2] = $$sink$;
 $244 = ((($0)) + 76|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = ($245|0)==(0);
 if (!($246)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $247 = ((($0)) + 300|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = ($248|0)==(0);
 if (!($249)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $250 = ((($0)) + 40|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ($251|0)==(3);
 $254 = ($253|0)==(3);
 $or$cond = $252 & $254;
 if (!($or$cond)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 switch ($235|0) {
 case 16:  {
  $255 = ($239|0)==(3);
  if (!($255)) {
   $$sink3 = 1;
   $290 = ((($0)) + 128|0);
   HEAP32[$290>>2] = $$sink3;
   return;
  }
  break;
 }
 case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 2:  {
  $256 = (1332 + ($235<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($239|0)==($257|0);
  if (!($258)) {
   $$sink3 = 1;
   $290 = ((($0)) + 128|0);
   HEAP32[$290>>2] = $$sink3;
   return;
  }
  break;
 }
 default: {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 }
 $259 = HEAP32[$174>>2]|0;
 $260 = ((($259)) + 8|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ($261|0)==(2);
 if (!($262)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $263 = ((($259)) + 92|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ($264|0)==(1);
 if (!($265)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $266 = ((($259)) + 176|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = ($267|0)==(1);
 if (!($268)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $269 = ((($259)) + 12|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = ($270|0)>(2);
 if ($271) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $272 = ((($259)) + 96|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ($273|0)==(1);
 if (!($274)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $275 = ((($259)) + 180|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = ($276|0)==(1);
 if (!($277)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $278 = ((($259)) + 36|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = HEAP32[$169>>2]|0;
 $281 = ($279|0)==($280|0);
 if (!($281)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $282 = ((($259)) + 120|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = ($283|0)==($279|0);
 if (!($284)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $285 = ((($259)) + 204|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = ($286|0)==($279|0);
 if (!($287)) {
  $$sink3 = 1;
  $290 = ((($0)) + 128|0);
  HEAP32[$290>>2] = $$sink3;
  return;
 }
 $288 = ((($0)) + 312|0);
 $289 = HEAP32[$288>>2]|0;
 $$sink3 = $289;
 $290 = ((($0)) + 128|0);
 HEAP32[$290>>2] = $$sink3;
 return;
}
function _jinit_master_decompress($0) {
 $0 = $0|0;
 var $$$i$i = 0, $$0$i = 0, $$021$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi87$iZ2D = 0, $$pre86$i = 0, $$sink$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $scevgep$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 420|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = 47;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 48;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 100|0);
 HEAP32[$5>>2] = 0;
 _jpeg_calc_output_dimensions($0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 255]($0,1,1408)|0);
 $10 = ((($9)) + 256|0);
 $11 = ((($0)) + 324|0);
 HEAP32[$11>>2] = $10;
 _memset(($9|0),0,256)|0;
 $$021$i$i = 0;
 while(1) {
  $12 = $$021$i$i&255;
  $13 = (($10) + ($$021$i$i)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($$021$i$i) + 1)|0;
  $exitcond$i$i = ($14|0)==(256);
  if ($exitcond$i$i) {
   break;
  } else {
   $$021$i$i = $14;
  }
 }
 $scevgep$i$i = ((($9)) + 512|0);
 _memset(($scevgep$i$i|0),-1,384)|0;
 $15 = ((($9)) + 896|0);
 _memset(($15|0),0,384)|0;
 $16 = ((($9)) + 1280|0);
 $17 = HEAP32[$11>>2]|0;
 dest=$16; src=$17; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $18 = ((($0)) + 120|0);
 $19 = ((($2)) + 104|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 L4: do {
  if ($22) {
   $23 = ((($0)) + 300|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = ((($0)) + 40|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(3);
    if ($28) {
     $29 = ((($0)) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(3);
     if ($31) {
      $32 = ((($0)) + 44|0);
      $33 = HEAP32[$32>>2]|0;
      switch ($33|0) {
      case 16:  {
       $34 = HEAP32[$18>>2]|0;
       $35 = ($34|0)==(3);
       if (!($35)) {
        $72 = 0;
        break L4;
       }
       break;
      }
      case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 2:  {
       $36 = HEAP32[$18>>2]|0;
       $37 = (1332 + ($33<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($36|0)==($38|0);
       if (!($39)) {
        $72 = 0;
        break L4;
       }
       break;
      }
      default: {
       $72 = 0;
       break L4;
      }
      }
      $40 = ((($0)) + 216|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(2);
      if ($44) {
       $45 = ((($41)) + 92|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(1);
       if ($47) {
        $48 = ((($41)) + 176|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==(1);
        if ($50) {
         $51 = ((($41)) + 12|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($52|0)>(2);
         if ($53) {
          $72 = 0;
         } else {
          $54 = ((($41)) + 96|0);
          $55 = HEAP32[$54>>2]|0;
          $56 = ($55|0)==(1);
          if ($56) {
           $57 = ((($41)) + 180|0);
           $58 = HEAP32[$57>>2]|0;
           $59 = ($58|0)==(1);
           if ($59) {
            $60 = ((($41)) + 36|0);
            $61 = HEAP32[$60>>2]|0;
            $62 = ((($0)) + 316|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = ($61|0)==($63|0);
            if ($64) {
             $65 = ((($41)) + 120|0);
             $66 = HEAP32[$65>>2]|0;
             $67 = ($66|0)==($61|0);
             if ($67) {
              $68 = ((($41)) + 204|0);
              $69 = HEAP32[$68>>2]|0;
              $70 = ($69|0)==($61|0);
              $$$i$i = $70&1;
              $72 = $$$i$i;
             } else {
              $72 = 0;
             }
            } else {
             $72 = 0;
            }
           } else {
            $72 = 0;
           }
          } else {
           $72 = 0;
          }
         }
        } else {
         $72 = 0;
        }
       } else {
        $72 = 0;
       }
      } else {
       $72 = 0;
      }
     } else {
      $72 = 0;
     }
    } else {
     $72 = 0;
    }
   } else {
    $72 = 0;
   }
  } else {
   $72 = 0;
  }
 } while(0);
 $71 = ((($2)) + 108|0);
 HEAP32[$71>>2] = $72;
 $73 = ((($2)) + 112|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($2)) + 116|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($0)) + 84|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0);
 do {
  if ($77) {
   $84 = ((($0)) + 100|0);
   HEAP32[$84>>2] = 0;
   $85 = ((($0)) + 104|0);
   HEAP32[$85>>2] = 0;
   $86 = ((($0)) + 108|0);
   HEAP32[$86>>2] = 0;
   $$pre86$i = ((($0)) + 68|0);
   $$pre$phi87$iZ2D = $$pre86$i;
  } else {
   $78 = ((($0)) + 64|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = ((($0)) + 100|0);
    HEAP32[$81>>2] = 0;
    $82 = ((($0)) + 104|0);
    HEAP32[$82>>2] = 0;
    $83 = ((($0)) + 108|0);
    HEAP32[$83>>2] = 0;
   }
   $87 = ((($0)) + 68|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(0);
   if (!($89)) {
    $90 = HEAP32[$0>>2]|0;
    $91 = ((($90)) + 20|0);
    HEAP32[$91>>2] = 47;
    $92 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vi[$92 & 255]($0);
   }
   $93 = HEAP32[$18>>2]|0;
   $94 = ($93|0)==(3);
   do {
    if ($94) {
     $99 = ((($0)) + 136|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(0|0);
     if ($101) {
      $103 = ((($0)) + 92|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)!=(0);
      $106 = ((($0)) + 100|0);
      $107 = ((($0)) + 108|0);
      $$sink$i = $105 ? $107 : $106;
      HEAP32[$$sink$i>>2] = 1;
      $$pre$phi$iZ2D = $106;
      break;
     } else {
      $102 = ((($0)) + 104|0);
      HEAP32[$102>>2] = 1;
      $$pre$i = ((($0)) + 100|0);
      $$pre$phi$iZ2D = $$pre$i;
      break;
     }
    } else {
     $95 = ((($0)) + 100|0);
     HEAP32[$95>>2] = 1;
     $96 = ((($0)) + 104|0);
     HEAP32[$96>>2] = 0;
     $97 = ((($0)) + 108|0);
     HEAP32[$97>>2] = 0;
     $98 = ((($0)) + 136|0);
     HEAP32[$98>>2] = 0;
     $$pre$phi$iZ2D = $95;
    }
   } while(0);
   $108 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $109 = ($108|0)==(0);
   if (!($109)) {
    _jinit_1pass_quantizer($0);
    $110 = ((($0)) + 460|0);
    $111 = HEAP32[$110>>2]|0;
    HEAP32[$73>>2] = $111;
   }
   $112 = ((($0)) + 108|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = ((($0)) + 104|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(0);
    if ($117) {
     $$pre$phi87$iZ2D = $87;
     break;
    }
   }
   _jinit_2pass_quantizer($0);
   $118 = ((($0)) + 460|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP32[$74>>2] = $119;
   $$pre$phi87$iZ2D = $87;
  }
 } while(0);
 $120 = HEAP32[$$pre$phi87$iZ2D>>2]|0;
 $121 = ($120|0)==(0);
 if ($121) {
  $122 = HEAP32[$71>>2]|0;
  $123 = ($122|0)==(0);
  if ($123) {
   _jinit_color_deconverter($0);
   _jinit_upsampler($0);
  } else {
   _jinit_merged_upsampler($0);
  }
  $124 = ((($0)) + 108|0);
  $125 = HEAP32[$124>>2]|0;
  _jinit_d_post_controller($0,$125);
 }
 _jinit_inverse_dct($0);
 $126 = ((($0)) + 224|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)==(0);
 do {
  if ($128) {
   $129 = ((($0)) + 220|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0);
   if ($131) {
    _jinit_huff_decoder($0);
    break;
   } else {
    _jinit_phuff_decoder($0);
    break;
   }
  } else {
   _jinit_arith_decoder($0);
  }
 } while(0);
 $132 = ((($0)) + 436|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ((($133)) + 16|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)==(0);
 if ($136) {
  $137 = ((($0)) + 64|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)!=(0);
  $phitmp$i = $139&1;
  $140 = $phitmp$i;
 } else {
  $140 = 1;
 }
 _jinit_d_coef_controller($0,$140);
 $141 = HEAP32[$$pre$phi87$iZ2D>>2]|0;
 $142 = ($141|0)==(0);
 if ($142) {
  _jinit_d_main_controller($0,0);
 }
 $143 = HEAP32[$6>>2]|0;
 $144 = ((($143)) + 24|0);
 $145 = HEAP32[$144>>2]|0;
 FUNCTION_TABLE_vi[$145 & 255]($0);
 $146 = HEAP32[$132>>2]|0;
 $147 = ((($146)) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 FUNCTION_TABLE_vi[$148 & 255]($0);
 $149 = HEAP32[$1>>2]|0;
 $150 = ((($149)) + 12|0);
 HEAP32[$150>>2] = 0;
 $151 = ((($0)) + 348|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($152) + -1)|0;
 $154 = ((($149)) + 16|0);
 HEAP32[$154>>2] = $153;
 $155 = ((($0)) + 8|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156|0)==(0|0);
 if ($157) {
  return;
 }
 $158 = ((($0)) + 64|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159|0)==(0);
 if (!($160)) {
  return;
 }
 $161 = HEAP32[$132>>2]|0;
 $162 = ((($161)) + 16|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)==(0);
 if ($164) {
  return;
 }
 $165 = ((($0)) + 220|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ($166|0)==(0);
 $168 = ((($0)) + 36|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169*3)|0;
 $171 = (($170) + 2)|0;
 $$0$i = $167 ? $169 : $171;
 $172 = ((($156)) + 4|0);
 HEAP32[$172>>2] = 0;
 $173 = ((($0)) + 320|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = Math_imul($$0$i, $174)|0;
 $176 = ((($156)) + 8|0);
 HEAP32[$176>>2] = $175;
 $177 = ((($156)) + 12|0);
 HEAP32[$177>>2] = 0;
 $178 = ((($0)) + 108|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = ($179|0)!=(0);
 $181 = $180 ? 3 : 2;
 $182 = ((($156)) + 16|0);
 HEAP32[$182>>2] = $181;
 $183 = HEAP32[$19>>2]|0;
 $184 = (($183) + 1)|0;
 HEAP32[$19>>2] = $184;
 return;
}
function _prepare_for_output_pass($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 420|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $15 = ((($0)) + 84|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  do {
   if (!($17)) {
    $18 = ((($0)) + 136|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $21 = ((($0)) + 92|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if (!($23)) {
      $24 = ((($0)) + 108|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0);
      if (!($26)) {
       $27 = ((($2)) + 116|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($0)) + 460|0);
       HEAP32[$29>>2] = $28;
       HEAP32[$3>>2] = 1;
       break;
      }
     }
     $30 = ((($0)) + 100|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $36 = HEAP32[$0>>2]|0;
      $37 = ((($36)) + 20|0);
      HEAP32[$37>>2] = 46;
      $38 = HEAP32[$36>>2]|0;
      FUNCTION_TABLE_vi[$38 & 255]($0);
      break;
     } else {
      $33 = ((($2)) + 112|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ((($0)) + 460|0);
      HEAP32[$35>>2] = $34;
      break;
     }
    }
   }
  } while(0);
  $39 = ((($0)) + 448|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  FUNCTION_TABLE_vi[$41 & 255]($0);
  $42 = ((($0)) + 428|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vi[$45 & 255]($0);
  $46 = ((($0)) + 68|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = ((($2)) + 108|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = ((($0)) + 456|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = HEAP32[$53>>2]|0;
    FUNCTION_TABLE_vi[$54 & 255]($0);
   }
   $55 = ((($0)) + 452|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   FUNCTION_TABLE_vi[$57 & 255]($0);
   $58 = HEAP32[$15>>2]|0;
   $59 = ($58|0)==(0);
   if (!($59)) {
    $60 = ((($0)) + 460|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP32[$3>>2]|0;
    FUNCTION_TABLE_vii[$62 & 255]($0,$63);
   }
   $64 = ((($0)) + 432|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[$3>>2]|0;
   $68 = ($67|0)!=(0);
   $69 = $68 ? 3 : 0;
   FUNCTION_TABLE_vii[$66 & 255]($0,$69);
   $70 = ((($0)) + 424|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   FUNCTION_TABLE_vii[$72 & 255]($0,0);
  }
 } else {
  HEAP32[$3>>2] = 0;
  $6 = ((($0)) + 460|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vii[$8 & 255]($0,0);
  $9 = ((($0)) + 432|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vii[$11 & 255]($0,2);
  $12 = ((($0)) + 424|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$14 & 255]($0,2);
 }
 $73 = ((($0)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  return;
 }
 $76 = ((($2)) + 104|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($74)) + 12|0);
 HEAP32[$78>>2] = $77;
 $79 = HEAP32[$3>>2]|0;
 $80 = ($79|0)!=(0);
 $81 = $80 ? 2 : 1;
 $82 = (($81) + ($77))|0;
 $83 = ((($74)) + 16|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($0)) + 64|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  return;
 }
 $87 = ((($0)) + 436|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($88)) + 20|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0);
 if (!($91)) {
  return;
 }
 $92 = ((($0)) + 108|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0);
 $95 = $94 ? 2 : 1;
 $96 = (($82) + ($95))|0;
 HEAP32[$83>>2] = $96;
 return;
}
function _finish_output_pass($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 420|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($0)) + 460|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 255]($0);
 }
 $10 = ((($2)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 return;
}
function _jinit_merged_upsampler($0) {
 $0 = $0|0;
 var $$03233$i = 0, $$034$i = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $h2v1_merged_upsample$sink = 0;
 var $h2v1_merged_upsample_565$sink = 0, $h2v2_merged_upsample$sink = 0, $h2v2_merged_upsample_565$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,48)|0);
 $5 = ((($0)) + 452|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 49;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($10, $8)|0;
 $12 = ((($4)) + 40|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 312|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(2);
 $16 = ((($4)) + 4|0);
 if ($15) {
  HEAP32[$16>>2] = 50;
  $17 = (_jsimd_can_h2v2_merged_upsample()|0);
  $18 = ($17|0)!=(0);
  $19 = ((($4)) + 12|0);
  $h2v2_merged_upsample$sink = $18 ? 52 : 51;
  HEAP32[$19>>2] = $h2v2_merged_upsample$sink;
  $20 = ((($0)) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(16);
  if ($22) {
   $23 = ((($0)) + 88|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   $h2v2_merged_upsample_565$sink = $25 ? 54 : 53;
   HEAP32[$19>>2] = $h2v2_merged_upsample_565$sink;
  }
  $26 = HEAP32[$1>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$12>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$28 & 255]($0,1,$29)|0);
  $$sink = $30;
 } else {
  HEAP32[$16>>2] = 55;
  $31 = (_jsimd_can_h2v1_merged_upsample()|0);
  $32 = ($31|0)!=(0);
  $33 = ((($4)) + 12|0);
  $h2v1_merged_upsample$sink = $32 ? 57 : 56;
  HEAP32[$33>>2] = $h2v1_merged_upsample$sink;
  $34 = ((($0)) + 44|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(16);
  if ($36) {
   $37 = ((($0)) + 88|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   $h2v1_merged_upsample_565$sink = $39 ? 59 : 58;
   HEAP32[$33>>2] = $h2v1_merged_upsample_565$sink;
   $$sink = 0;
  } else {
   $$sink = 0;
  }
 }
 $40 = ((($4)) + 32|0);
 HEAP32[$40>>2] = $$sink;
 $41 = HEAP32[$5>>2]|0;
 $42 = HEAP32[$1>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 255]($0,1,1024)|0);
 $45 = ((($41)) + 16|0);
 HEAP32[$45>>2] = $44;
 $46 = HEAP32[$1>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 255]($0,1,1024)|0);
 $49 = ((($41)) + 20|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$1>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = (FUNCTION_TABLE_iiii[$51 & 255]($0,1,1024)|0);
 $53 = ((($41)) + 24|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$1>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $56 = (FUNCTION_TABLE_iiii[$55 & 255]($0,1,1024)|0);
 $57 = ((($41)) + 28|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$45>>2]|0;
 $59 = HEAP32[$49>>2]|0;
 $60 = HEAP32[$53>>2]|0;
 $$03233$i = 0;$$034$i = -128;
 while(1) {
  $61 = ($$034$i*91881)|0;
  $62 = (($61) + 32768)|0;
  $63 = $62 >> 16;
  $64 = (($58) + ($$03233$i<<2)|0);
  HEAP32[$64>>2] = $63;
  $65 = ($$034$i*116130)|0;
  $66 = (($65) + 32768)|0;
  $67 = $66 >> 16;
  $68 = (($59) + ($$03233$i<<2)|0);
  HEAP32[$68>>2] = $67;
  $69 = Math_imul($$034$i, -46802)|0;
  $70 = (($60) + ($$03233$i<<2)|0);
  HEAP32[$70>>2] = $69;
  $71 = Math_imul($$034$i, -22554)|0;
  $72 = (($71) + 32768)|0;
  $73 = (($56) + ($$03233$i<<2)|0);
  HEAP32[$73>>2] = $72;
  $74 = (($$03233$i) + 1)|0;
  $75 = (($$034$i) + 1)|0;
  $exitcond$i = ($74|0)==(256);
  if ($exitcond$i) {
   break;
  } else {
   $$03233$i = $74;$$034$i = $75;
  }
 }
 return;
}
function _start_pass_merged_upsample($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 452|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 44|0);
 HEAP32[$6>>2] = $5;
 return;
}
function _merged_2v_upsample($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = ((($0)) + 452|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $24 = ((($9)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25>>>0)<(2);
  $$ = $26 ? $25 : 2;
  $27 = HEAP32[$5>>2]|0;
  $28 = (($6) - ($27))|0;
  $29 = ($$>>>0)>($28>>>0);
  $$1 = $29 ? $28 : $$;
  $30 = (($4) + ($27<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$7>>2] = $31;
  $32 = ($$1>>>0)>(1);
  if ($32) {
   $33 = (($27) + 1)|0;
   $34 = (($4) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($7)) + 4|0);
   HEAP32[$36>>2] = $35;
  } else {
   $37 = ((($9)) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($7)) + 4|0);
   HEAP32[$39>>2] = $38;
   HEAP32[$10>>2] = 1;
  }
  $40 = ((($9)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_viiii[$41 & 255]($0,$1,$42,$7);
  $$2 = $$1;$$pre$phiZ2D = $24;
 } else {
  $13 = ((($9)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(16);
  if ($17) {
   $18 = ((($0)) + 112|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 << 1;
   $$0 = $20;
  } else {
   $$0 = $14;
  }
  $21 = ((($9)) + 32|0);
  $22 = HEAP32[$5>>2]|0;
  $23 = (($4) + ($22<<2)|0);
  _jcopy_sample_rows($21,0,$23,0,1,$$0);
  HEAP32[$10>>2] = 0;
  $$pre = ((($9)) + 44|0);
  $$2 = 1;$$pre$phiZ2D = $$pre;
 }
 $43 = HEAP32[$5>>2]|0;
 $44 = (($43) + ($$2))|0;
 HEAP32[$5>>2] = $44;
 $45 = HEAP32[$$pre$phiZ2D>>2]|0;
 $46 = (($45) - ($$2))|0;
 HEAP32[$$pre$phiZ2D>>2] = $46;
 $47 = HEAP32[$10>>2]|0;
 $48 = ($47|0)==(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$2>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[$2>>2] = $50;
 STACKTOP = sp;return;
}
function _h2v2_merged_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0158$lcssa$i = 0, $$0158$lcssa$i167 = 0, $$0158$lcssa$i83 = 0, $$01588$i = 0, $$01588$i149 = 0, $$01588$i65 = 0, $$0159$lcssa$i = 0, $$0159$lcssa$i166 = 0, $$0159$lcssa$i82 = 0, $$01597$i = 0, $$01597$i150 = 0, $$01597$i66 = 0, $$0160$lcssa$i = 0, $$0160$lcssa$i165 = 0, $$0160$lcssa$i81 = 0, $$01606$i = 0, $$01606$i151 = 0, $$01606$i67 = 0, $$0161$lcssa$i = 0, $$0161$lcssa$i164 = 0;
 var $$0161$lcssa$i80 = 0, $$01615$i = 0, $$01615$i152 = 0, $$01615$i68 = 0, $$0162$lcssa$i = 0, $$0162$lcssa$i163 = 0, $$0162$lcssa$i79 = 0, $$01624$i = 0, $$01624$i153 = 0, $$01624$i69 = 0, $$0163$lcssa$i = 0, $$0163$lcssa$i162 = 0, $$0163$lcssa$i78 = 0, $$01633$i = 0, $$01633$i154 = 0, $$01633$i70 = 0, $$0164$lcssa$i = 0, $$0164$lcssa$i119 = 0, $$0164$lcssa$i143 = 0, $$0164$lcssa$i191 = 0;
 var $$01648$i = 0, $$01648$i101 = 0, $$01648$i125 = 0, $$01648$i173 = 0, $$0165$lcssa$i = 0, $$0165$lcssa$i118 = 0, $$0165$lcssa$i142 = 0, $$0165$lcssa$i190 = 0, $$01657$i = 0, $$01657$i102 = 0, $$01657$i126 = 0, $$01657$i174 = 0, $$0166$lcssa$i = 0, $$0166$lcssa$i117 = 0, $$0166$lcssa$i141 = 0, $$0166$lcssa$i189 = 0, $$01666$i = 0, $$01666$i103 = 0, $$01666$i127 = 0, $$01666$i175 = 0;
 var $$0167$lcssa$i = 0, $$0167$lcssa$i116 = 0, $$0167$lcssa$i140 = 0, $$0167$lcssa$i188 = 0, $$01675$i = 0, $$01675$i104 = 0, $$01675$i128 = 0, $$01675$i176 = 0, $$0168$lcssa$i = 0, $$0168$lcssa$i115 = 0, $$0168$lcssa$i139 = 0, $$0168$lcssa$i187 = 0, $$01684$i = 0, $$01684$i105 = 0, $$01684$i129 = 0, $$01684$i177 = 0, $$0169$lcssa$i = 0, $$0169$lcssa$i114 = 0, $$0169$lcssa$i138 = 0, $$0169$lcssa$i186 = 0;
 var $$01693$i = 0, $$01693$i106 = 0, $$01693$i130 = 0, $$01693$i178 = 0, $$09$i = 0, $$09$i100 = 0, $$09$i124 = 0, $$09$i148 = 0, $$09$i172 = 0, $$09$i64 = 0, $$09$i88 = 0, $$idx = 0, $$idx$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx30 = 0, $$idx30$val = 0, $$idx32 = 0, $$idx32$val = 0, $$idx33 = 0;
 var $$idx33$val = 0, $$idx35 = 0, $$idx35$val = 0, $$idx37 = 0, $$idx37$val = 0, $$idx38 = 0, $$idx38$val = 0, $$idx40 = 0, $$idx40$val = 0, $$idx42 = 0, $$idx42$val = 0, $$idx43 = 0, $$idx43$val = 0, $$idx45 = 0, $$idx45$val = 0, $$idx47 = 0, $$idx47$val = 0, $$idx48 = 0, $$idx48$val = 0, $$idx50 = 0;
 var $$idx50$val = 0, $$idx52 = 0, $$idx52$val = 0, $$idx53 = 0, $$idx53$val = 0, $$idx55 = 0, $$idx55$val = 0, $$idx57 = 0, $$idx57$val = 0, $$idx58 = 0, $$idx58$val = 0, $$idx60 = 0, $$idx60$val = 0, $$pre$i = 0, $$pre$i112 = 0, $$pre$i136 = 0, $$pre$i160 = 0, $$pre$i184 = 0, $$pre$i76 = 0, $$pre$i94 = 0;
 var $$val = 0, $$val29 = 0, $$val31 = 0, $$val34 = 0, $$val36 = 0, $$val39 = 0, $$val41 = 0, $$val44 = 0, $$val46 = 0, $$val49 = 0, $$val51 = 0, $$val54 = 0, $$val56 = 0, $$val59 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $scevgep$i = 0, $scevgep$i121 = 0, $scevgep$i145 = 0, $scevgep$i169 = 0, $scevgep$i61 = 0, $scevgep$i85 = 0, $scevgep$i97 = 0, $scevgep20$i = 0, $scevgep20$i108 = 0, $scevgep20$i132 = 0, $scevgep20$i156 = 0, $scevgep20$i180 = 0, $scevgep20$i72 = 0, $scevgep20$i90 = 0, $scevgep21$i = 0, $scevgep21$i109 = 0, $scevgep21$i133 = 0;
 var $scevgep21$i157 = 0, $scevgep21$i181 = 0, $scevgep21$i73 = 0, $scevgep21$i91 = 0, $scevgep22$i = 0, $scevgep22$i110 = 0, $scevgep22$i134 = 0, $scevgep22$i158 = 0, $scevgep22$i182 = 0, $scevgep22$i74 = 0, $scevgep22$i92 = 0, $scevgep23$i = 0, $scevgep23$i122 = 0, $scevgep23$i146 = 0, $scevgep23$i170 = 0, $scevgep23$i62 = 0, $scevgep23$i86 = 0, $scevgep23$i98 = 0, $scevgep24$i = 0, $scevgep24$i111 = 0;
 var $scevgep24$i135 = 0, $scevgep24$i159 = 0, $scevgep24$i183 = 0, $scevgep24$i75 = 0, $scevgep24$i93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 6:  {
  $$val = HEAP32[$1>>2]|0;
  $$idx = ((($1)) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx28 = ((($1)) + 8|0);
  $$idx28$val = HEAP32[$$idx28>>2]|0;
  $$val29 = HEAP32[$3>>2]|0;
  $$idx30 = ((($3)) + 4|0);
  $$idx30$val = HEAP32[$$idx30>>2]|0;
  $6 = ((($0)) + 452|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 324|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($7)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($7)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($7)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($7)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2 << 1;
  $19 = (($$val) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18 | 1;
  $22 = (($$val) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($$idx$val) + ($2<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($$idx28$val) + ($2<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($0)) + 112|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 1;
  $31 = ($30|0)==(0);
  if ($31) {
   $$0158$lcssa$i = $27;$$0159$lcssa$i = $25;$$0160$lcssa$i = $23;$$0161$lcssa$i = $20;$$0162$lcssa$i = $$idx30$val;$$0163$lcssa$i = $$val29;$113 = $29;
  } else {
   $scevgep$i = (($25) + ($30)|0);
   $32 = ($30*6)|0;
   $$01588$i = $27;$$01597$i = $25;$$01606$i = $23;$$01615$i = $20;$$01624$i = $$idx30$val;$$01633$i = $$val29;$$09$i = $30;
   while(1) {
    $33 = ((($$01597$i)) + 1|0);
    $34 = HEAP8[$$01597$i>>0]|0;
    $35 = $34&255;
    $36 = ((($$01588$i)) + 1|0);
    $37 = HEAP8[$$01588$i>>0]|0;
    $38 = $37&255;
    $39 = (($11) + ($38<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($17) + ($35<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($15) + ($38<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($42))|0;
    $46 = $45 >> 16;
    $47 = (($13) + ($35<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($$01615$i)) + 1|0);
    $50 = HEAP8[$$01615$i>>0]|0;
    $51 = $50&255;
    $52 = (($40) + ($51))|0;
    $53 = (($9) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    HEAP8[$$01633$i>>0] = $54;
    $55 = (($46) + ($51))|0;
    $56 = (($9) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($$01633$i)) + 1|0);
    HEAP8[$58>>0] = $57;
    $59 = (($48) + ($51))|0;
    $60 = (($9) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = ((($$01633$i)) + 2|0);
    HEAP8[$62>>0] = $61;
    $63 = ((($$01633$i)) + 3|0);
    $64 = ((($$01615$i)) + 2|0);
    $65 = HEAP8[$49>>0]|0;
    $66 = $65&255;
    $67 = (($40) + ($66))|0;
    $68 = (($9) + ($67)|0);
    $69 = HEAP8[$68>>0]|0;
    HEAP8[$63>>0] = $69;
    $70 = (($46) + ($66))|0;
    $71 = (($9) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = ((($$01633$i)) + 4|0);
    HEAP8[$73>>0] = $72;
    $74 = (($48) + ($66))|0;
    $75 = (($9) + ($74)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$01633$i)) + 5|0);
    HEAP8[$77>>0] = $76;
    $78 = ((($$01633$i)) + 6|0);
    $79 = ((($$01606$i)) + 1|0);
    $80 = HEAP8[$$01606$i>>0]|0;
    $81 = $80&255;
    $82 = (($40) + ($81))|0;
    $83 = (($9) + ($82)|0);
    $84 = HEAP8[$83>>0]|0;
    HEAP8[$$01624$i>>0] = $84;
    $85 = (($46) + ($81))|0;
    $86 = (($9) + ($85)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ((($$01624$i)) + 1|0);
    HEAP8[$88>>0] = $87;
    $89 = (($48) + ($81))|0;
    $90 = (($9) + ($89)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ((($$01624$i)) + 2|0);
    HEAP8[$92>>0] = $91;
    $93 = ((($$01624$i)) + 3|0);
    $94 = ((($$01606$i)) + 2|0);
    $95 = HEAP8[$79>>0]|0;
    $96 = $95&255;
    $97 = (($40) + ($96))|0;
    $98 = (($9) + ($97)|0);
    $99 = HEAP8[$98>>0]|0;
    HEAP8[$93>>0] = $99;
    $100 = (($46) + ($96))|0;
    $101 = (($9) + ($100)|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = ((($$01624$i)) + 4|0);
    HEAP8[$103>>0] = $102;
    $104 = (($48) + ($96))|0;
    $105 = (($9) + ($104)|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = ((($$01624$i)) + 5|0);
    HEAP8[$107>>0] = $106;
    $108 = ((($$01624$i)) + 6|0);
    $109 = (($$09$i) + -1)|0;
    $110 = ($109|0)==(0);
    if ($110) {
     break;
    } else {
     $$01588$i = $36;$$01597$i = $33;$$01606$i = $94;$$01615$i = $64;$$01624$i = $108;$$01633$i = $78;$$09$i = $109;
    }
   }
   $111 = $29 & -2;
   $scevgep23$i = (($23) + ($111)|0);
   $scevgep20$i = (($27) + ($30)|0);
   $scevgep21$i = (($20) + ($111)|0);
   $scevgep22$i = (($$val29) + ($32)|0);
   $scevgep24$i = (($$idx30$val) + ($32)|0);
   $$pre$i = HEAP32[$28>>2]|0;
   $$0158$lcssa$i = $scevgep20$i;$$0159$lcssa$i = $scevgep$i;$$0160$lcssa$i = $scevgep23$i;$$0161$lcssa$i = $scevgep21$i;$$0162$lcssa$i = $scevgep24$i;$$0163$lcssa$i = $scevgep22$i;$113 = $$pre$i;
  }
  $112 = $113 & 1;
  $114 = ($112|0)==(0);
  if ($114) {
   return;
  }
  $115 = HEAP8[$$0159$lcssa$i>>0]|0;
  $116 = $115&255;
  $117 = HEAP8[$$0158$lcssa$i>>0]|0;
  $118 = $117&255;
  $119 = (($11) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($17) + ($116<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($15) + ($118<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($122))|0;
  $126 = $125 >> 16;
  $127 = (($13) + ($116<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = HEAP8[$$0161$lcssa$i>>0]|0;
  $130 = $129&255;
  $131 = (($120) + ($130))|0;
  $132 = (($9) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  HEAP8[$$0163$lcssa$i>>0] = $133;
  $134 = (($126) + ($130))|0;
  $135 = (($9) + ($134)|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = ((($$0163$lcssa$i)) + 1|0);
  HEAP8[$137>>0] = $136;
  $138 = (($128) + ($130))|0;
  $139 = (($9) + ($138)|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ((($$0163$lcssa$i)) + 2|0);
  HEAP8[$141>>0] = $140;
  $142 = HEAP8[$$0160$lcssa$i>>0]|0;
  $143 = $142&255;
  $144 = (($120) + ($143))|0;
  $145 = (($9) + ($144)|0);
  $146 = HEAP8[$145>>0]|0;
  HEAP8[$$0162$lcssa$i>>0] = $146;
  $147 = (($126) + ($143))|0;
  $148 = (($9) + ($147)|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = ((($$0162$lcssa$i)) + 1|0);
  HEAP8[$150>>0] = $149;
  $151 = (($128) + ($143))|0;
  $152 = (($9) + ($151)|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = ((($$0162$lcssa$i)) + 2|0);
  HEAP8[$154>>0] = $153;
  return;
  break;
 }
 case 12: case 7:  {
  $$val31 = HEAP32[$1>>2]|0;
  $$idx32 = ((($1)) + 4|0);
  $$idx32$val = HEAP32[$$idx32>>2]|0;
  $$idx33 = ((($1)) + 8|0);
  $$idx33$val = HEAP32[$$idx33>>2]|0;
  $$val34 = HEAP32[$3>>2]|0;
  $$idx35 = ((($3)) + 4|0);
  $$idx35$val = HEAP32[$$idx35>>2]|0;
  $155 = ((($0)) + 452|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($0)) + 324|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($156)) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($156)) + 20|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($156)) + 24|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($156)) + 28|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $2 << 1;
  $168 = (($$val31) + ($167<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $167 | 1;
  $171 = (($$val31) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($$idx32$val) + ($2<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($$idx33$val) + ($2<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($0)) + 112|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $178 >>> 1;
  $180 = ($179|0)==(0);
  if ($180) {
   $$0164$lcssa$i191 = $176;$$0165$lcssa$i190 = $174;$$0166$lcssa$i189 = $172;$$0167$lcssa$i188 = $169;$$0168$lcssa$i187 = $$idx35$val;$$0169$lcssa$i186 = $$val34;$266 = $178;
  } else {
   $scevgep$i169 = (($174) + ($179)|0);
   $181 = $179 << 3;
   $$01648$i173 = $176;$$01657$i174 = $174;$$01666$i175 = $172;$$01675$i176 = $169;$$01684$i177 = $$idx35$val;$$01693$i178 = $$val34;$$09$i172 = $179;
   while(1) {
    $182 = ((($$01657$i174)) + 1|0);
    $183 = HEAP8[$$01657$i174>>0]|0;
    $184 = $183&255;
    $185 = ((($$01648$i173)) + 1|0);
    $186 = HEAP8[$$01648$i173>>0]|0;
    $187 = $186&255;
    $188 = (($160) + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($166) + ($184<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($164) + ($187<<2)|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + ($191))|0;
    $195 = $194 >> 16;
    $196 = (($162) + ($184<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($$01675$i176)) + 1|0);
    $199 = HEAP8[$$01675$i176>>0]|0;
    $200 = $199&255;
    $201 = (($189) + ($200))|0;
    $202 = (($158) + ($201)|0);
    $203 = HEAP8[$202>>0]|0;
    HEAP8[$$01693$i178>>0] = $203;
    $204 = (($195) + ($200))|0;
    $205 = (($158) + ($204)|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = ((($$01693$i178)) + 1|0);
    HEAP8[$207>>0] = $206;
    $208 = (($197) + ($200))|0;
    $209 = (($158) + ($208)|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = ((($$01693$i178)) + 2|0);
    HEAP8[$211>>0] = $210;
    $212 = ((($$01693$i178)) + 3|0);
    HEAP8[$212>>0] = -1;
    $213 = ((($$01693$i178)) + 4|0);
    $214 = ((($$01675$i176)) + 2|0);
    $215 = HEAP8[$198>>0]|0;
    $216 = $215&255;
    $217 = (($189) + ($216))|0;
    $218 = (($158) + ($217)|0);
    $219 = HEAP8[$218>>0]|0;
    HEAP8[$213>>0] = $219;
    $220 = (($195) + ($216))|0;
    $221 = (($158) + ($220)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = ((($$01693$i178)) + 5|0);
    HEAP8[$223>>0] = $222;
    $224 = (($197) + ($216))|0;
    $225 = (($158) + ($224)|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = ((($$01693$i178)) + 6|0);
    HEAP8[$227>>0] = $226;
    $228 = ((($$01693$i178)) + 7|0);
    HEAP8[$228>>0] = -1;
    $229 = ((($$01693$i178)) + 8|0);
    $230 = ((($$01666$i175)) + 1|0);
    $231 = HEAP8[$$01666$i175>>0]|0;
    $232 = $231&255;
    $233 = (($189) + ($232))|0;
    $234 = (($158) + ($233)|0);
    $235 = HEAP8[$234>>0]|0;
    HEAP8[$$01684$i177>>0] = $235;
    $236 = (($195) + ($232))|0;
    $237 = (($158) + ($236)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = ((($$01684$i177)) + 1|0);
    HEAP8[$239>>0] = $238;
    $240 = (($197) + ($232))|0;
    $241 = (($158) + ($240)|0);
    $242 = HEAP8[$241>>0]|0;
    $243 = ((($$01684$i177)) + 2|0);
    HEAP8[$243>>0] = $242;
    $244 = ((($$01684$i177)) + 3|0);
    HEAP8[$244>>0] = -1;
    $245 = ((($$01684$i177)) + 4|0);
    $246 = ((($$01666$i175)) + 2|0);
    $247 = HEAP8[$230>>0]|0;
    $248 = $247&255;
    $249 = (($189) + ($248))|0;
    $250 = (($158) + ($249)|0);
    $251 = HEAP8[$250>>0]|0;
    HEAP8[$245>>0] = $251;
    $252 = (($195) + ($248))|0;
    $253 = (($158) + ($252)|0);
    $254 = HEAP8[$253>>0]|0;
    $255 = ((($$01684$i177)) + 5|0);
    HEAP8[$255>>0] = $254;
    $256 = (($197) + ($248))|0;
    $257 = (($158) + ($256)|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = ((($$01684$i177)) + 6|0);
    HEAP8[$259>>0] = $258;
    $260 = ((($$01684$i177)) + 7|0);
    HEAP8[$260>>0] = -1;
    $261 = ((($$01684$i177)) + 8|0);
    $262 = (($$09$i172) + -1)|0;
    $263 = ($262|0)==(0);
    if ($263) {
     break;
    } else {
     $$01648$i173 = $185;$$01657$i174 = $182;$$01666$i175 = $246;$$01675$i176 = $214;$$01684$i177 = $261;$$01693$i178 = $229;$$09$i172 = $262;
    }
   }
   $264 = $178 & -2;
   $scevgep23$i170 = (($172) + ($264)|0);
   $scevgep20$i180 = (($176) + ($179)|0);
   $scevgep21$i181 = (($169) + ($264)|0);
   $scevgep22$i182 = (($$val34) + ($181)|0);
   $scevgep24$i183 = (($$idx35$val) + ($181)|0);
   $$pre$i184 = HEAP32[$177>>2]|0;
   $$0164$lcssa$i191 = $scevgep20$i180;$$0165$lcssa$i190 = $scevgep$i169;$$0166$lcssa$i189 = $scevgep23$i170;$$0167$lcssa$i188 = $scevgep21$i181;$$0168$lcssa$i187 = $scevgep24$i183;$$0169$lcssa$i186 = $scevgep22$i182;$266 = $$pre$i184;
  }
  $265 = $266 & 1;
  $267 = ($265|0)==(0);
  if ($267) {
   return;
  }
  $268 = HEAP8[$$0165$lcssa$i190>>0]|0;
  $269 = $268&255;
  $270 = HEAP8[$$0164$lcssa$i191>>0]|0;
  $271 = $270&255;
  $272 = (($160) + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($166) + ($269<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($164) + ($271<<2)|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = (($277) + ($275))|0;
  $279 = $278 >> 16;
  $280 = (($162) + ($269<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = HEAP8[$$0167$lcssa$i188>>0]|0;
  $283 = $282&255;
  $284 = (($273) + ($283))|0;
  $285 = (($158) + ($284)|0);
  $286 = HEAP8[$285>>0]|0;
  HEAP8[$$0169$lcssa$i186>>0] = $286;
  $287 = (($279) + ($283))|0;
  $288 = (($158) + ($287)|0);
  $289 = HEAP8[$288>>0]|0;
  $290 = ((($$0169$lcssa$i186)) + 1|0);
  HEAP8[$290>>0] = $289;
  $291 = (($281) + ($283))|0;
  $292 = (($158) + ($291)|0);
  $293 = HEAP8[$292>>0]|0;
  $294 = ((($$0169$lcssa$i186)) + 2|0);
  HEAP8[$294>>0] = $293;
  $295 = ((($$0169$lcssa$i186)) + 3|0);
  HEAP8[$295>>0] = -1;
  $296 = HEAP8[$$0166$lcssa$i189>>0]|0;
  $297 = $296&255;
  $298 = (($273) + ($297))|0;
  $299 = (($158) + ($298)|0);
  $300 = HEAP8[$299>>0]|0;
  HEAP8[$$0168$lcssa$i187>>0] = $300;
  $301 = (($279) + ($297))|0;
  $302 = (($158) + ($301)|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = ((($$0168$lcssa$i187)) + 1|0);
  HEAP8[$304>>0] = $303;
  $305 = (($281) + ($297))|0;
  $306 = (($158) + ($305)|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = ((($$0168$lcssa$i187)) + 2|0);
  HEAP8[$308>>0] = $307;
  $309 = ((($$0168$lcssa$i187)) + 3|0);
  HEAP8[$309>>0] = -1;
  return;
  break;
 }
 case 8:  {
  $$val36 = HEAP32[$1>>2]|0;
  $$idx37 = ((($1)) + 4|0);
  $$idx37$val = HEAP32[$$idx37>>2]|0;
  $$idx38 = ((($1)) + 8|0);
  $$idx38$val = HEAP32[$$idx38>>2]|0;
  $$val39 = HEAP32[$3>>2]|0;
  $$idx40 = ((($3)) + 4|0);
  $$idx40$val = HEAP32[$$idx40>>2]|0;
  $310 = ((($0)) + 452|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = ((($0)) + 324|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = ((($311)) + 16|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ((($311)) + 20|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = ((($311)) + 24|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ((($311)) + 28|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = $2 << 1;
  $323 = (($$val36) + ($322<<2)|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = $322 | 1;
  $326 = (($$val36) + ($325<<2)|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = (($$idx37$val) + ($2<<2)|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (($$idx38$val) + ($2<<2)|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = ((($0)) + 112|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = $333 >>> 1;
  $335 = ($334|0)==(0);
  if ($335) {
   $$0158$lcssa$i167 = $331;$$0159$lcssa$i166 = $329;$$0160$lcssa$i165 = $327;$$0161$lcssa$i164 = $324;$$0162$lcssa$i163 = $$idx40$val;$$0163$lcssa$i162 = $$val39;$417 = $333;
  } else {
   $scevgep$i145 = (($329) + ($334)|0);
   $336 = ($334*6)|0;
   $$01588$i149 = $331;$$01597$i150 = $329;$$01606$i151 = $327;$$01615$i152 = $324;$$01624$i153 = $$idx40$val;$$01633$i154 = $$val39;$$09$i148 = $334;
   while(1) {
    $337 = ((($$01597$i150)) + 1|0);
    $338 = HEAP8[$$01597$i150>>0]|0;
    $339 = $338&255;
    $340 = ((($$01588$i149)) + 1|0);
    $341 = HEAP8[$$01588$i149>>0]|0;
    $342 = $341&255;
    $343 = (($315) + ($342<<2)|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($321) + ($339<<2)|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($319) + ($342<<2)|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = (($348) + ($346))|0;
    $350 = $349 >> 16;
    $351 = (($317) + ($339<<2)|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ((($$01615$i152)) + 1|0);
    $354 = HEAP8[$$01615$i152>>0]|0;
    $355 = $354&255;
    $356 = (($344) + ($355))|0;
    $357 = (($313) + ($356)|0);
    $358 = HEAP8[$357>>0]|0;
    $359 = ((($$01633$i154)) + 2|0);
    HEAP8[$359>>0] = $358;
    $360 = (($350) + ($355))|0;
    $361 = (($313) + ($360)|0);
    $362 = HEAP8[$361>>0]|0;
    $363 = ((($$01633$i154)) + 1|0);
    HEAP8[$363>>0] = $362;
    $364 = (($352) + ($355))|0;
    $365 = (($313) + ($364)|0);
    $366 = HEAP8[$365>>0]|0;
    HEAP8[$$01633$i154>>0] = $366;
    $367 = ((($$01633$i154)) + 3|0);
    $368 = ((($$01615$i152)) + 2|0);
    $369 = HEAP8[$353>>0]|0;
    $370 = $369&255;
    $371 = (($344) + ($370))|0;
    $372 = (($313) + ($371)|0);
    $373 = HEAP8[$372>>0]|0;
    $374 = ((($$01633$i154)) + 5|0);
    HEAP8[$374>>0] = $373;
    $375 = (($350) + ($370))|0;
    $376 = (($313) + ($375)|0);
    $377 = HEAP8[$376>>0]|0;
    $378 = ((($$01633$i154)) + 4|0);
    HEAP8[$378>>0] = $377;
    $379 = (($352) + ($370))|0;
    $380 = (($313) + ($379)|0);
    $381 = HEAP8[$380>>0]|0;
    HEAP8[$367>>0] = $381;
    $382 = ((($$01633$i154)) + 6|0);
    $383 = ((($$01606$i151)) + 1|0);
    $384 = HEAP8[$$01606$i151>>0]|0;
    $385 = $384&255;
    $386 = (($344) + ($385))|0;
    $387 = (($313) + ($386)|0);
    $388 = HEAP8[$387>>0]|0;
    $389 = ((($$01624$i153)) + 2|0);
    HEAP8[$389>>0] = $388;
    $390 = (($350) + ($385))|0;
    $391 = (($313) + ($390)|0);
    $392 = HEAP8[$391>>0]|0;
    $393 = ((($$01624$i153)) + 1|0);
    HEAP8[$393>>0] = $392;
    $394 = (($352) + ($385))|0;
    $395 = (($313) + ($394)|0);
    $396 = HEAP8[$395>>0]|0;
    HEAP8[$$01624$i153>>0] = $396;
    $397 = ((($$01624$i153)) + 3|0);
    $398 = ((($$01606$i151)) + 2|0);
    $399 = HEAP8[$383>>0]|0;
    $400 = $399&255;
    $401 = (($344) + ($400))|0;
    $402 = (($313) + ($401)|0);
    $403 = HEAP8[$402>>0]|0;
    $404 = ((($$01624$i153)) + 5|0);
    HEAP8[$404>>0] = $403;
    $405 = (($350) + ($400))|0;
    $406 = (($313) + ($405)|0);
    $407 = HEAP8[$406>>0]|0;
    $408 = ((($$01624$i153)) + 4|0);
    HEAP8[$408>>0] = $407;
    $409 = (($352) + ($400))|0;
    $410 = (($313) + ($409)|0);
    $411 = HEAP8[$410>>0]|0;
    HEAP8[$397>>0] = $411;
    $412 = ((($$01624$i153)) + 6|0);
    $413 = (($$09$i148) + -1)|0;
    $414 = ($413|0)==(0);
    if ($414) {
     break;
    } else {
     $$01588$i149 = $340;$$01597$i150 = $337;$$01606$i151 = $398;$$01615$i152 = $368;$$01624$i153 = $412;$$01633$i154 = $382;$$09$i148 = $413;
    }
   }
   $415 = $333 & -2;
   $scevgep23$i146 = (($327) + ($415)|0);
   $scevgep20$i156 = (($331) + ($334)|0);
   $scevgep21$i157 = (($324) + ($415)|0);
   $scevgep22$i158 = (($$val39) + ($336)|0);
   $scevgep24$i159 = (($$idx40$val) + ($336)|0);
   $$pre$i160 = HEAP32[$332>>2]|0;
   $$0158$lcssa$i167 = $scevgep20$i156;$$0159$lcssa$i166 = $scevgep$i145;$$0160$lcssa$i165 = $scevgep23$i146;$$0161$lcssa$i164 = $scevgep21$i157;$$0162$lcssa$i163 = $scevgep24$i159;$$0163$lcssa$i162 = $scevgep22$i158;$417 = $$pre$i160;
  }
  $416 = $417 & 1;
  $418 = ($416|0)==(0);
  if ($418) {
   return;
  }
  $419 = HEAP8[$$0159$lcssa$i166>>0]|0;
  $420 = $419&255;
  $421 = HEAP8[$$0158$lcssa$i167>>0]|0;
  $422 = $421&255;
  $423 = (($315) + ($422<<2)|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (($321) + ($420<<2)|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = (($319) + ($422<<2)|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = (($428) + ($426))|0;
  $430 = $429 >> 16;
  $431 = (($317) + ($420<<2)|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = HEAP8[$$0161$lcssa$i164>>0]|0;
  $434 = $433&255;
  $435 = (($424) + ($434))|0;
  $436 = (($313) + ($435)|0);
  $437 = HEAP8[$436>>0]|0;
  $438 = ((($$0163$lcssa$i162)) + 2|0);
  HEAP8[$438>>0] = $437;
  $439 = (($430) + ($434))|0;
  $440 = (($313) + ($439)|0);
  $441 = HEAP8[$440>>0]|0;
  $442 = ((($$0163$lcssa$i162)) + 1|0);
  HEAP8[$442>>0] = $441;
  $443 = (($432) + ($434))|0;
  $444 = (($313) + ($443)|0);
  $445 = HEAP8[$444>>0]|0;
  HEAP8[$$0163$lcssa$i162>>0] = $445;
  $446 = HEAP8[$$0160$lcssa$i165>>0]|0;
  $447 = $446&255;
  $448 = (($424) + ($447))|0;
  $449 = (($313) + ($448)|0);
  $450 = HEAP8[$449>>0]|0;
  $451 = ((($$0162$lcssa$i163)) + 2|0);
  HEAP8[$451>>0] = $450;
  $452 = (($430) + ($447))|0;
  $453 = (($313) + ($452)|0);
  $454 = HEAP8[$453>>0]|0;
  $455 = ((($$0162$lcssa$i163)) + 1|0);
  HEAP8[$455>>0] = $454;
  $456 = (($432) + ($447))|0;
  $457 = (($313) + ($456)|0);
  $458 = HEAP8[$457>>0]|0;
  HEAP8[$$0162$lcssa$i163>>0] = $458;
  return;
  break;
 }
 case 13: case 9:  {
  $$val41 = HEAP32[$1>>2]|0;
  $$idx42 = ((($1)) + 4|0);
  $$idx42$val = HEAP32[$$idx42>>2]|0;
  $$idx43 = ((($1)) + 8|0);
  $$idx43$val = HEAP32[$$idx43>>2]|0;
  $$val44 = HEAP32[$3>>2]|0;
  $$idx45 = ((($3)) + 4|0);
  $$idx45$val = HEAP32[$$idx45>>2]|0;
  $459 = ((($0)) + 452|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = ((($0)) + 324|0);
  $462 = HEAP32[$461>>2]|0;
  $463 = ((($460)) + 16|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = ((($460)) + 20|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = ((($460)) + 24|0);
  $468 = HEAP32[$467>>2]|0;
  $469 = ((($460)) + 28|0);
  $470 = HEAP32[$469>>2]|0;
  $471 = $2 << 1;
  $472 = (($$val41) + ($471<<2)|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = $471 | 1;
  $475 = (($$val41) + ($474<<2)|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (($$idx42$val) + ($2<<2)|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = (($$idx43$val) + ($2<<2)|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = ((($0)) + 112|0);
  $482 = HEAP32[$481>>2]|0;
  $483 = $482 >>> 1;
  $484 = ($483|0)==(0);
  if ($484) {
   $$0164$lcssa$i143 = $480;$$0165$lcssa$i142 = $478;$$0166$lcssa$i141 = $476;$$0167$lcssa$i140 = $473;$$0168$lcssa$i139 = $$idx45$val;$$0169$lcssa$i138 = $$val44;$570 = $482;
  } else {
   $scevgep$i121 = (($478) + ($483)|0);
   $485 = $483 << 3;
   $$01648$i125 = $480;$$01657$i126 = $478;$$01666$i127 = $476;$$01675$i128 = $473;$$01684$i129 = $$idx45$val;$$01693$i130 = $$val44;$$09$i124 = $483;
   while(1) {
    $486 = ((($$01657$i126)) + 1|0);
    $487 = HEAP8[$$01657$i126>>0]|0;
    $488 = $487&255;
    $489 = ((($$01648$i125)) + 1|0);
    $490 = HEAP8[$$01648$i125>>0]|0;
    $491 = $490&255;
    $492 = (($464) + ($491<<2)|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = (($470) + ($488<<2)|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = (($468) + ($491<<2)|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = (($497) + ($495))|0;
    $499 = $498 >> 16;
    $500 = (($466) + ($488<<2)|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = ((($$01675$i128)) + 1|0);
    $503 = HEAP8[$$01675$i128>>0]|0;
    $504 = $503&255;
    $505 = (($493) + ($504))|0;
    $506 = (($462) + ($505)|0);
    $507 = HEAP8[$506>>0]|0;
    $508 = ((($$01693$i130)) + 2|0);
    HEAP8[$508>>0] = $507;
    $509 = (($499) + ($504))|0;
    $510 = (($462) + ($509)|0);
    $511 = HEAP8[$510>>0]|0;
    $512 = ((($$01693$i130)) + 1|0);
    HEAP8[$512>>0] = $511;
    $513 = (($501) + ($504))|0;
    $514 = (($462) + ($513)|0);
    $515 = HEAP8[$514>>0]|0;
    HEAP8[$$01693$i130>>0] = $515;
    $516 = ((($$01693$i130)) + 3|0);
    HEAP8[$516>>0] = -1;
    $517 = ((($$01693$i130)) + 4|0);
    $518 = ((($$01675$i128)) + 2|0);
    $519 = HEAP8[$502>>0]|0;
    $520 = $519&255;
    $521 = (($493) + ($520))|0;
    $522 = (($462) + ($521)|0);
    $523 = HEAP8[$522>>0]|0;
    $524 = ((($$01693$i130)) + 6|0);
    HEAP8[$524>>0] = $523;
    $525 = (($499) + ($520))|0;
    $526 = (($462) + ($525)|0);
    $527 = HEAP8[$526>>0]|0;
    $528 = ((($$01693$i130)) + 5|0);
    HEAP8[$528>>0] = $527;
    $529 = (($501) + ($520))|0;
    $530 = (($462) + ($529)|0);
    $531 = HEAP8[$530>>0]|0;
    HEAP8[$517>>0] = $531;
    $532 = ((($$01693$i130)) + 7|0);
    HEAP8[$532>>0] = -1;
    $533 = ((($$01693$i130)) + 8|0);
    $534 = ((($$01666$i127)) + 1|0);
    $535 = HEAP8[$$01666$i127>>0]|0;
    $536 = $535&255;
    $537 = (($493) + ($536))|0;
    $538 = (($462) + ($537)|0);
    $539 = HEAP8[$538>>0]|0;
    $540 = ((($$01684$i129)) + 2|0);
    HEAP8[$540>>0] = $539;
    $541 = (($499) + ($536))|0;
    $542 = (($462) + ($541)|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = ((($$01684$i129)) + 1|0);
    HEAP8[$544>>0] = $543;
    $545 = (($501) + ($536))|0;
    $546 = (($462) + ($545)|0);
    $547 = HEAP8[$546>>0]|0;
    HEAP8[$$01684$i129>>0] = $547;
    $548 = ((($$01684$i129)) + 3|0);
    HEAP8[$548>>0] = -1;
    $549 = ((($$01684$i129)) + 4|0);
    $550 = ((($$01666$i127)) + 2|0);
    $551 = HEAP8[$534>>0]|0;
    $552 = $551&255;
    $553 = (($493) + ($552))|0;
    $554 = (($462) + ($553)|0);
    $555 = HEAP8[$554>>0]|0;
    $556 = ((($$01684$i129)) + 6|0);
    HEAP8[$556>>0] = $555;
    $557 = (($499) + ($552))|0;
    $558 = (($462) + ($557)|0);
    $559 = HEAP8[$558>>0]|0;
    $560 = ((($$01684$i129)) + 5|0);
    HEAP8[$560>>0] = $559;
    $561 = (($501) + ($552))|0;
    $562 = (($462) + ($561)|0);
    $563 = HEAP8[$562>>0]|0;
    HEAP8[$549>>0] = $563;
    $564 = ((($$01684$i129)) + 7|0);
    HEAP8[$564>>0] = -1;
    $565 = ((($$01684$i129)) + 8|0);
    $566 = (($$09$i124) + -1)|0;
    $567 = ($566|0)==(0);
    if ($567) {
     break;
    } else {
     $$01648$i125 = $489;$$01657$i126 = $486;$$01666$i127 = $550;$$01675$i128 = $518;$$01684$i129 = $565;$$01693$i130 = $533;$$09$i124 = $566;
    }
   }
   $568 = $482 & -2;
   $scevgep23$i122 = (($476) + ($568)|0);
   $scevgep20$i132 = (($480) + ($483)|0);
   $scevgep21$i133 = (($473) + ($568)|0);
   $scevgep22$i134 = (($$val44) + ($485)|0);
   $scevgep24$i135 = (($$idx45$val) + ($485)|0);
   $$pre$i136 = HEAP32[$481>>2]|0;
   $$0164$lcssa$i143 = $scevgep20$i132;$$0165$lcssa$i142 = $scevgep$i121;$$0166$lcssa$i141 = $scevgep23$i122;$$0167$lcssa$i140 = $scevgep21$i133;$$0168$lcssa$i139 = $scevgep24$i135;$$0169$lcssa$i138 = $scevgep22$i134;$570 = $$pre$i136;
  }
  $569 = $570 & 1;
  $571 = ($569|0)==(0);
  if ($571) {
   return;
  }
  $572 = HEAP8[$$0165$lcssa$i142>>0]|0;
  $573 = $572&255;
  $574 = HEAP8[$$0164$lcssa$i143>>0]|0;
  $575 = $574&255;
  $576 = (($464) + ($575<<2)|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = (($470) + ($573<<2)|0);
  $579 = HEAP32[$578>>2]|0;
  $580 = (($468) + ($575<<2)|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = (($581) + ($579))|0;
  $583 = $582 >> 16;
  $584 = (($466) + ($573<<2)|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = HEAP8[$$0167$lcssa$i140>>0]|0;
  $587 = $586&255;
  $588 = (($577) + ($587))|0;
  $589 = (($462) + ($588)|0);
  $590 = HEAP8[$589>>0]|0;
  $591 = ((($$0169$lcssa$i138)) + 2|0);
  HEAP8[$591>>0] = $590;
  $592 = (($583) + ($587))|0;
  $593 = (($462) + ($592)|0);
  $594 = HEAP8[$593>>0]|0;
  $595 = ((($$0169$lcssa$i138)) + 1|0);
  HEAP8[$595>>0] = $594;
  $596 = (($585) + ($587))|0;
  $597 = (($462) + ($596)|0);
  $598 = HEAP8[$597>>0]|0;
  HEAP8[$$0169$lcssa$i138>>0] = $598;
  $599 = ((($$0169$lcssa$i138)) + 3|0);
  HEAP8[$599>>0] = -1;
  $600 = HEAP8[$$0166$lcssa$i141>>0]|0;
  $601 = $600&255;
  $602 = (($577) + ($601))|0;
  $603 = (($462) + ($602)|0);
  $604 = HEAP8[$603>>0]|0;
  $605 = ((($$0168$lcssa$i139)) + 2|0);
  HEAP8[$605>>0] = $604;
  $606 = (($583) + ($601))|0;
  $607 = (($462) + ($606)|0);
  $608 = HEAP8[$607>>0]|0;
  $609 = ((($$0168$lcssa$i139)) + 1|0);
  HEAP8[$609>>0] = $608;
  $610 = (($585) + ($601))|0;
  $611 = (($462) + ($610)|0);
  $612 = HEAP8[$611>>0]|0;
  HEAP8[$$0168$lcssa$i139>>0] = $612;
  $613 = ((($$0168$lcssa$i139)) + 3|0);
  HEAP8[$613>>0] = -1;
  return;
  break;
 }
 case 14: case 10:  {
  $$val46 = HEAP32[$1>>2]|0;
  $$idx47 = ((($1)) + 4|0);
  $$idx47$val = HEAP32[$$idx47>>2]|0;
  $$idx48 = ((($1)) + 8|0);
  $$idx48$val = HEAP32[$$idx48>>2]|0;
  $$val49 = HEAP32[$3>>2]|0;
  $$idx50 = ((($3)) + 4|0);
  $$idx50$val = HEAP32[$$idx50>>2]|0;
  $614 = ((($0)) + 452|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = ((($0)) + 324|0);
  $617 = HEAP32[$616>>2]|0;
  $618 = ((($615)) + 16|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = ((($615)) + 20|0);
  $621 = HEAP32[$620>>2]|0;
  $622 = ((($615)) + 24|0);
  $623 = HEAP32[$622>>2]|0;
  $624 = ((($615)) + 28|0);
  $625 = HEAP32[$624>>2]|0;
  $626 = $2 << 1;
  $627 = (($$val46) + ($626<<2)|0);
  $628 = HEAP32[$627>>2]|0;
  $629 = $626 | 1;
  $630 = (($$val46) + ($629<<2)|0);
  $631 = HEAP32[$630>>2]|0;
  $632 = (($$idx47$val) + ($2<<2)|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = (($$idx48$val) + ($2<<2)|0);
  $635 = HEAP32[$634>>2]|0;
  $636 = ((($0)) + 112|0);
  $637 = HEAP32[$636>>2]|0;
  $638 = $637 >>> 1;
  $639 = ($638|0)==(0);
  if ($639) {
   $$0164$lcssa$i119 = $635;$$0165$lcssa$i118 = $633;$$0166$lcssa$i117 = $631;$$0167$lcssa$i116 = $628;$$0168$lcssa$i115 = $$idx50$val;$$0169$lcssa$i114 = $$val49;$725 = $637;
  } else {
   $scevgep$i97 = (($633) + ($638)|0);
   $640 = $638 << 3;
   $$01648$i101 = $635;$$01657$i102 = $633;$$01666$i103 = $631;$$01675$i104 = $628;$$01684$i105 = $$idx50$val;$$01693$i106 = $$val49;$$09$i100 = $638;
   while(1) {
    $641 = ((($$01657$i102)) + 1|0);
    $642 = HEAP8[$$01657$i102>>0]|0;
    $643 = $642&255;
    $644 = ((($$01648$i101)) + 1|0);
    $645 = HEAP8[$$01648$i101>>0]|0;
    $646 = $645&255;
    $647 = (($619) + ($646<<2)|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = (($625) + ($643<<2)|0);
    $650 = HEAP32[$649>>2]|0;
    $651 = (($623) + ($646<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = (($652) + ($650))|0;
    $654 = $653 >> 16;
    $655 = (($621) + ($643<<2)|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = ((($$01675$i104)) + 1|0);
    $658 = HEAP8[$$01675$i104>>0]|0;
    $659 = $658&255;
    $660 = (($648) + ($659))|0;
    $661 = (($617) + ($660)|0);
    $662 = HEAP8[$661>>0]|0;
    $663 = ((($$01693$i106)) + 3|0);
    HEAP8[$663>>0] = $662;
    $664 = (($654) + ($659))|0;
    $665 = (($617) + ($664)|0);
    $666 = HEAP8[$665>>0]|0;
    $667 = ((($$01693$i106)) + 2|0);
    HEAP8[$667>>0] = $666;
    $668 = (($656) + ($659))|0;
    $669 = (($617) + ($668)|0);
    $670 = HEAP8[$669>>0]|0;
    $671 = ((($$01693$i106)) + 1|0);
    HEAP8[$671>>0] = $670;
    HEAP8[$$01693$i106>>0] = -1;
    $672 = ((($$01693$i106)) + 4|0);
    $673 = ((($$01675$i104)) + 2|0);
    $674 = HEAP8[$657>>0]|0;
    $675 = $674&255;
    $676 = (($648) + ($675))|0;
    $677 = (($617) + ($676)|0);
    $678 = HEAP8[$677>>0]|0;
    $679 = ((($$01693$i106)) + 7|0);
    HEAP8[$679>>0] = $678;
    $680 = (($654) + ($675))|0;
    $681 = (($617) + ($680)|0);
    $682 = HEAP8[$681>>0]|0;
    $683 = ((($$01693$i106)) + 6|0);
    HEAP8[$683>>0] = $682;
    $684 = (($656) + ($675))|0;
    $685 = (($617) + ($684)|0);
    $686 = HEAP8[$685>>0]|0;
    $687 = ((($$01693$i106)) + 5|0);
    HEAP8[$687>>0] = $686;
    HEAP8[$672>>0] = -1;
    $688 = ((($$01693$i106)) + 8|0);
    $689 = ((($$01666$i103)) + 1|0);
    $690 = HEAP8[$$01666$i103>>0]|0;
    $691 = $690&255;
    $692 = (($648) + ($691))|0;
    $693 = (($617) + ($692)|0);
    $694 = HEAP8[$693>>0]|0;
    $695 = ((($$01684$i105)) + 3|0);
    HEAP8[$695>>0] = $694;
    $696 = (($654) + ($691))|0;
    $697 = (($617) + ($696)|0);
    $698 = HEAP8[$697>>0]|0;
    $699 = ((($$01684$i105)) + 2|0);
    HEAP8[$699>>0] = $698;
    $700 = (($656) + ($691))|0;
    $701 = (($617) + ($700)|0);
    $702 = HEAP8[$701>>0]|0;
    $703 = ((($$01684$i105)) + 1|0);
    HEAP8[$703>>0] = $702;
    HEAP8[$$01684$i105>>0] = -1;
    $704 = ((($$01684$i105)) + 4|0);
    $705 = ((($$01666$i103)) + 2|0);
    $706 = HEAP8[$689>>0]|0;
    $707 = $706&255;
    $708 = (($648) + ($707))|0;
    $709 = (($617) + ($708)|0);
    $710 = HEAP8[$709>>0]|0;
    $711 = ((($$01684$i105)) + 7|0);
    HEAP8[$711>>0] = $710;
    $712 = (($654) + ($707))|0;
    $713 = (($617) + ($712)|0);
    $714 = HEAP8[$713>>0]|0;
    $715 = ((($$01684$i105)) + 6|0);
    HEAP8[$715>>0] = $714;
    $716 = (($656) + ($707))|0;
    $717 = (($617) + ($716)|0);
    $718 = HEAP8[$717>>0]|0;
    $719 = ((($$01684$i105)) + 5|0);
    HEAP8[$719>>0] = $718;
    HEAP8[$704>>0] = -1;
    $720 = ((($$01684$i105)) + 8|0);
    $721 = (($$09$i100) + -1)|0;
    $722 = ($721|0)==(0);
    if ($722) {
     break;
    } else {
     $$01648$i101 = $644;$$01657$i102 = $641;$$01666$i103 = $705;$$01675$i104 = $673;$$01684$i105 = $720;$$01693$i106 = $688;$$09$i100 = $721;
    }
   }
   $723 = $637 & -2;
   $scevgep23$i98 = (($631) + ($723)|0);
   $scevgep20$i108 = (($635) + ($638)|0);
   $scevgep21$i109 = (($628) + ($723)|0);
   $scevgep22$i110 = (($$val49) + ($640)|0);
   $scevgep24$i111 = (($$idx50$val) + ($640)|0);
   $$pre$i112 = HEAP32[$636>>2]|0;
   $$0164$lcssa$i119 = $scevgep20$i108;$$0165$lcssa$i118 = $scevgep$i97;$$0166$lcssa$i117 = $scevgep23$i98;$$0167$lcssa$i116 = $scevgep21$i109;$$0168$lcssa$i115 = $scevgep24$i111;$$0169$lcssa$i114 = $scevgep22$i110;$725 = $$pre$i112;
  }
  $724 = $725 & 1;
  $726 = ($724|0)==(0);
  if ($726) {
   return;
  }
  $727 = HEAP8[$$0165$lcssa$i118>>0]|0;
  $728 = $727&255;
  $729 = HEAP8[$$0164$lcssa$i119>>0]|0;
  $730 = $729&255;
  $731 = (($619) + ($730<<2)|0);
  $732 = HEAP32[$731>>2]|0;
  $733 = (($625) + ($728<<2)|0);
  $734 = HEAP32[$733>>2]|0;
  $735 = (($623) + ($730<<2)|0);
  $736 = HEAP32[$735>>2]|0;
  $737 = (($736) + ($734))|0;
  $738 = $737 >> 16;
  $739 = (($621) + ($728<<2)|0);
  $740 = HEAP32[$739>>2]|0;
  $741 = HEAP8[$$0167$lcssa$i116>>0]|0;
  $742 = $741&255;
  $743 = (($732) + ($742))|0;
  $744 = (($617) + ($743)|0);
  $745 = HEAP8[$744>>0]|0;
  $746 = ((($$0169$lcssa$i114)) + 3|0);
  HEAP8[$746>>0] = $745;
  $747 = (($738) + ($742))|0;
  $748 = (($617) + ($747)|0);
  $749 = HEAP8[$748>>0]|0;
  $750 = ((($$0169$lcssa$i114)) + 2|0);
  HEAP8[$750>>0] = $749;
  $751 = (($740) + ($742))|0;
  $752 = (($617) + ($751)|0);
  $753 = HEAP8[$752>>0]|0;
  $754 = ((($$0169$lcssa$i114)) + 1|0);
  HEAP8[$754>>0] = $753;
  HEAP8[$$0169$lcssa$i114>>0] = -1;
  $755 = HEAP8[$$0166$lcssa$i117>>0]|0;
  $756 = $755&255;
  $757 = (($732) + ($756))|0;
  $758 = (($617) + ($757)|0);
  $759 = HEAP8[$758>>0]|0;
  $760 = ((($$0168$lcssa$i115)) + 3|0);
  HEAP8[$760>>0] = $759;
  $761 = (($738) + ($756))|0;
  $762 = (($617) + ($761)|0);
  $763 = HEAP8[$762>>0]|0;
  $764 = ((($$0168$lcssa$i115)) + 2|0);
  HEAP8[$764>>0] = $763;
  $765 = (($740) + ($756))|0;
  $766 = (($617) + ($765)|0);
  $767 = HEAP8[$766>>0]|0;
  $768 = ((($$0168$lcssa$i115)) + 1|0);
  HEAP8[$768>>0] = $767;
  HEAP8[$$0168$lcssa$i115>>0] = -1;
  return;
  break;
 }
 case 15: case 11:  {
  $$val51 = HEAP32[$1>>2]|0;
  $$idx52 = ((($1)) + 4|0);
  $$idx52$val = HEAP32[$$idx52>>2]|0;
  $$idx53 = ((($1)) + 8|0);
  $$idx53$val = HEAP32[$$idx53>>2]|0;
  $$val54 = HEAP32[$3>>2]|0;
  $$idx55 = ((($3)) + 4|0);
  $$idx55$val = HEAP32[$$idx55>>2]|0;
  $769 = ((($0)) + 452|0);
  $770 = HEAP32[$769>>2]|0;
  $771 = ((($0)) + 324|0);
  $772 = HEAP32[$771>>2]|0;
  $773 = ((($770)) + 16|0);
  $774 = HEAP32[$773>>2]|0;
  $775 = ((($770)) + 20|0);
  $776 = HEAP32[$775>>2]|0;
  $777 = ((($770)) + 24|0);
  $778 = HEAP32[$777>>2]|0;
  $779 = ((($770)) + 28|0);
  $780 = HEAP32[$779>>2]|0;
  $781 = $2 << 1;
  $782 = (($$val51) + ($781<<2)|0);
  $783 = HEAP32[$782>>2]|0;
  $784 = $781 | 1;
  $785 = (($$val51) + ($784<<2)|0);
  $786 = HEAP32[$785>>2]|0;
  $787 = (($$idx52$val) + ($2<<2)|0);
  $788 = HEAP32[$787>>2]|0;
  $789 = (($$idx53$val) + ($2<<2)|0);
  $790 = HEAP32[$789>>2]|0;
  $791 = ((($0)) + 112|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = $792 >>> 1;
  $794 = ($793|0)==(0);
  if ($794) {
   $$0164$lcssa$i = $790;$$0165$lcssa$i = $788;$$0166$lcssa$i = $786;$$0167$lcssa$i = $783;$$0168$lcssa$i = $$idx55$val;$$0169$lcssa$i = $$val54;$880 = $792;
  } else {
   $scevgep$i85 = (($788) + ($793)|0);
   $795 = $793 << 3;
   $$01648$i = $790;$$01657$i = $788;$$01666$i = $786;$$01675$i = $783;$$01684$i = $$idx55$val;$$01693$i = $$val54;$$09$i88 = $793;
   while(1) {
    $796 = ((($$01657$i)) + 1|0);
    $797 = HEAP8[$$01657$i>>0]|0;
    $798 = $797&255;
    $799 = ((($$01648$i)) + 1|0);
    $800 = HEAP8[$$01648$i>>0]|0;
    $801 = $800&255;
    $802 = (($774) + ($801<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (($780) + ($798<<2)|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = (($778) + ($801<<2)|0);
    $807 = HEAP32[$806>>2]|0;
    $808 = (($807) + ($805))|0;
    $809 = $808 >> 16;
    $810 = (($776) + ($798<<2)|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = ((($$01675$i)) + 1|0);
    $813 = HEAP8[$$01675$i>>0]|0;
    $814 = $813&255;
    $815 = (($803) + ($814))|0;
    $816 = (($772) + ($815)|0);
    $817 = HEAP8[$816>>0]|0;
    $818 = ((($$01693$i)) + 1|0);
    HEAP8[$818>>0] = $817;
    $819 = (($809) + ($814))|0;
    $820 = (($772) + ($819)|0);
    $821 = HEAP8[$820>>0]|0;
    $822 = ((($$01693$i)) + 2|0);
    HEAP8[$822>>0] = $821;
    $823 = (($811) + ($814))|0;
    $824 = (($772) + ($823)|0);
    $825 = HEAP8[$824>>0]|0;
    $826 = ((($$01693$i)) + 3|0);
    HEAP8[$826>>0] = $825;
    HEAP8[$$01693$i>>0] = -1;
    $827 = ((($$01693$i)) + 4|0);
    $828 = ((($$01675$i)) + 2|0);
    $829 = HEAP8[$812>>0]|0;
    $830 = $829&255;
    $831 = (($803) + ($830))|0;
    $832 = (($772) + ($831)|0);
    $833 = HEAP8[$832>>0]|0;
    $834 = ((($$01693$i)) + 5|0);
    HEAP8[$834>>0] = $833;
    $835 = (($809) + ($830))|0;
    $836 = (($772) + ($835)|0);
    $837 = HEAP8[$836>>0]|0;
    $838 = ((($$01693$i)) + 6|0);
    HEAP8[$838>>0] = $837;
    $839 = (($811) + ($830))|0;
    $840 = (($772) + ($839)|0);
    $841 = HEAP8[$840>>0]|0;
    $842 = ((($$01693$i)) + 7|0);
    HEAP8[$842>>0] = $841;
    HEAP8[$827>>0] = -1;
    $843 = ((($$01693$i)) + 8|0);
    $844 = ((($$01666$i)) + 1|0);
    $845 = HEAP8[$$01666$i>>0]|0;
    $846 = $845&255;
    $847 = (($803) + ($846))|0;
    $848 = (($772) + ($847)|0);
    $849 = HEAP8[$848>>0]|0;
    $850 = ((($$01684$i)) + 1|0);
    HEAP8[$850>>0] = $849;
    $851 = (($809) + ($846))|0;
    $852 = (($772) + ($851)|0);
    $853 = HEAP8[$852>>0]|0;
    $854 = ((($$01684$i)) + 2|0);
    HEAP8[$854>>0] = $853;
    $855 = (($811) + ($846))|0;
    $856 = (($772) + ($855)|0);
    $857 = HEAP8[$856>>0]|0;
    $858 = ((($$01684$i)) + 3|0);
    HEAP8[$858>>0] = $857;
    HEAP8[$$01684$i>>0] = -1;
    $859 = ((($$01684$i)) + 4|0);
    $860 = ((($$01666$i)) + 2|0);
    $861 = HEAP8[$844>>0]|0;
    $862 = $861&255;
    $863 = (($803) + ($862))|0;
    $864 = (($772) + ($863)|0);
    $865 = HEAP8[$864>>0]|0;
    $866 = ((($$01684$i)) + 5|0);
    HEAP8[$866>>0] = $865;
    $867 = (($809) + ($862))|0;
    $868 = (($772) + ($867)|0);
    $869 = HEAP8[$868>>0]|0;
    $870 = ((($$01684$i)) + 6|0);
    HEAP8[$870>>0] = $869;
    $871 = (($811) + ($862))|0;
    $872 = (($772) + ($871)|0);
    $873 = HEAP8[$872>>0]|0;
    $874 = ((($$01684$i)) + 7|0);
    HEAP8[$874>>0] = $873;
    HEAP8[$859>>0] = -1;
    $875 = ((($$01684$i)) + 8|0);
    $876 = (($$09$i88) + -1)|0;
    $877 = ($876|0)==(0);
    if ($877) {
     break;
    } else {
     $$01648$i = $799;$$01657$i = $796;$$01666$i = $860;$$01675$i = $828;$$01684$i = $875;$$01693$i = $843;$$09$i88 = $876;
    }
   }
   $878 = $792 & -2;
   $scevgep23$i86 = (($786) + ($878)|0);
   $scevgep20$i90 = (($790) + ($793)|0);
   $scevgep21$i91 = (($783) + ($878)|0);
   $scevgep22$i92 = (($$val54) + ($795)|0);
   $scevgep24$i93 = (($$idx55$val) + ($795)|0);
   $$pre$i94 = HEAP32[$791>>2]|0;
   $$0164$lcssa$i = $scevgep20$i90;$$0165$lcssa$i = $scevgep$i85;$$0166$lcssa$i = $scevgep23$i86;$$0167$lcssa$i = $scevgep21$i91;$$0168$lcssa$i = $scevgep24$i93;$$0169$lcssa$i = $scevgep22$i92;$880 = $$pre$i94;
  }
  $879 = $880 & 1;
  $881 = ($879|0)==(0);
  if ($881) {
   return;
  }
  $882 = HEAP8[$$0165$lcssa$i>>0]|0;
  $883 = $882&255;
  $884 = HEAP8[$$0164$lcssa$i>>0]|0;
  $885 = $884&255;
  $886 = (($774) + ($885<<2)|0);
  $887 = HEAP32[$886>>2]|0;
  $888 = (($780) + ($883<<2)|0);
  $889 = HEAP32[$888>>2]|0;
  $890 = (($778) + ($885<<2)|0);
  $891 = HEAP32[$890>>2]|0;
  $892 = (($891) + ($889))|0;
  $893 = $892 >> 16;
  $894 = (($776) + ($883<<2)|0);
  $895 = HEAP32[$894>>2]|0;
  $896 = HEAP8[$$0167$lcssa$i>>0]|0;
  $897 = $896&255;
  $898 = (($887) + ($897))|0;
  $899 = (($772) + ($898)|0);
  $900 = HEAP8[$899>>0]|0;
  $901 = ((($$0169$lcssa$i)) + 1|0);
  HEAP8[$901>>0] = $900;
  $902 = (($893) + ($897))|0;
  $903 = (($772) + ($902)|0);
  $904 = HEAP8[$903>>0]|0;
  $905 = ((($$0169$lcssa$i)) + 2|0);
  HEAP8[$905>>0] = $904;
  $906 = (($895) + ($897))|0;
  $907 = (($772) + ($906)|0);
  $908 = HEAP8[$907>>0]|0;
  $909 = ((($$0169$lcssa$i)) + 3|0);
  HEAP8[$909>>0] = $908;
  HEAP8[$$0169$lcssa$i>>0] = -1;
  $910 = HEAP8[$$0166$lcssa$i>>0]|0;
  $911 = $910&255;
  $912 = (($887) + ($911))|0;
  $913 = (($772) + ($912)|0);
  $914 = HEAP8[$913>>0]|0;
  $915 = ((($$0168$lcssa$i)) + 1|0);
  HEAP8[$915>>0] = $914;
  $916 = (($893) + ($911))|0;
  $917 = (($772) + ($916)|0);
  $918 = HEAP8[$917>>0]|0;
  $919 = ((($$0168$lcssa$i)) + 2|0);
  HEAP8[$919>>0] = $918;
  $920 = (($895) + ($911))|0;
  $921 = (($772) + ($920)|0);
  $922 = HEAP8[$921>>0]|0;
  $923 = ((($$0168$lcssa$i)) + 3|0);
  HEAP8[$923>>0] = $922;
  HEAP8[$$0168$lcssa$i>>0] = -1;
  return;
  break;
 }
 default: {
  $$val56 = HEAP32[$1>>2]|0;
  $$idx57 = ((($1)) + 4|0);
  $$idx57$val = HEAP32[$$idx57>>2]|0;
  $$idx58 = ((($1)) + 8|0);
  $$idx58$val = HEAP32[$$idx58>>2]|0;
  $$val59 = HEAP32[$3>>2]|0;
  $$idx60 = ((($3)) + 4|0);
  $$idx60$val = HEAP32[$$idx60>>2]|0;
  $924 = ((($0)) + 452|0);
  $925 = HEAP32[$924>>2]|0;
  $926 = ((($0)) + 324|0);
  $927 = HEAP32[$926>>2]|0;
  $928 = ((($925)) + 16|0);
  $929 = HEAP32[$928>>2]|0;
  $930 = ((($925)) + 20|0);
  $931 = HEAP32[$930>>2]|0;
  $932 = ((($925)) + 24|0);
  $933 = HEAP32[$932>>2]|0;
  $934 = ((($925)) + 28|0);
  $935 = HEAP32[$934>>2]|0;
  $936 = $2 << 1;
  $937 = (($$val56) + ($936<<2)|0);
  $938 = HEAP32[$937>>2]|0;
  $939 = $936 | 1;
  $940 = (($$val56) + ($939<<2)|0);
  $941 = HEAP32[$940>>2]|0;
  $942 = (($$idx57$val) + ($2<<2)|0);
  $943 = HEAP32[$942>>2]|0;
  $944 = (($$idx58$val) + ($2<<2)|0);
  $945 = HEAP32[$944>>2]|0;
  $946 = ((($0)) + 112|0);
  $947 = HEAP32[$946>>2]|0;
  $948 = $947 >>> 1;
  $949 = ($948|0)==(0);
  if ($949) {
   $$0158$lcssa$i83 = $945;$$0159$lcssa$i82 = $943;$$0160$lcssa$i81 = $941;$$0161$lcssa$i80 = $938;$$0162$lcssa$i79 = $$idx60$val;$$0163$lcssa$i78 = $$val59;$1031 = $947;
  } else {
   $scevgep$i61 = (($943) + ($948)|0);
   $950 = ($948*6)|0;
   $$01588$i65 = $945;$$01597$i66 = $943;$$01606$i67 = $941;$$01615$i68 = $938;$$01624$i69 = $$idx60$val;$$01633$i70 = $$val59;$$09$i64 = $948;
   while(1) {
    $951 = ((($$01597$i66)) + 1|0);
    $952 = HEAP8[$$01597$i66>>0]|0;
    $953 = $952&255;
    $954 = ((($$01588$i65)) + 1|0);
    $955 = HEAP8[$$01588$i65>>0]|0;
    $956 = $955&255;
    $957 = (($929) + ($956<<2)|0);
    $958 = HEAP32[$957>>2]|0;
    $959 = (($935) + ($953<<2)|0);
    $960 = HEAP32[$959>>2]|0;
    $961 = (($933) + ($956<<2)|0);
    $962 = HEAP32[$961>>2]|0;
    $963 = (($962) + ($960))|0;
    $964 = $963 >> 16;
    $965 = (($931) + ($953<<2)|0);
    $966 = HEAP32[$965>>2]|0;
    $967 = ((($$01615$i68)) + 1|0);
    $968 = HEAP8[$$01615$i68>>0]|0;
    $969 = $968&255;
    $970 = (($958) + ($969))|0;
    $971 = (($927) + ($970)|0);
    $972 = HEAP8[$971>>0]|0;
    HEAP8[$$01633$i70>>0] = $972;
    $973 = (($964) + ($969))|0;
    $974 = (($927) + ($973)|0);
    $975 = HEAP8[$974>>0]|0;
    $976 = ((($$01633$i70)) + 1|0);
    HEAP8[$976>>0] = $975;
    $977 = (($966) + ($969))|0;
    $978 = (($927) + ($977)|0);
    $979 = HEAP8[$978>>0]|0;
    $980 = ((($$01633$i70)) + 2|0);
    HEAP8[$980>>0] = $979;
    $981 = ((($$01633$i70)) + 3|0);
    $982 = ((($$01615$i68)) + 2|0);
    $983 = HEAP8[$967>>0]|0;
    $984 = $983&255;
    $985 = (($958) + ($984))|0;
    $986 = (($927) + ($985)|0);
    $987 = HEAP8[$986>>0]|0;
    HEAP8[$981>>0] = $987;
    $988 = (($964) + ($984))|0;
    $989 = (($927) + ($988)|0);
    $990 = HEAP8[$989>>0]|0;
    $991 = ((($$01633$i70)) + 4|0);
    HEAP8[$991>>0] = $990;
    $992 = (($966) + ($984))|0;
    $993 = (($927) + ($992)|0);
    $994 = HEAP8[$993>>0]|0;
    $995 = ((($$01633$i70)) + 5|0);
    HEAP8[$995>>0] = $994;
    $996 = ((($$01633$i70)) + 6|0);
    $997 = ((($$01606$i67)) + 1|0);
    $998 = HEAP8[$$01606$i67>>0]|0;
    $999 = $998&255;
    $1000 = (($958) + ($999))|0;
    $1001 = (($927) + ($1000)|0);
    $1002 = HEAP8[$1001>>0]|0;
    HEAP8[$$01624$i69>>0] = $1002;
    $1003 = (($964) + ($999))|0;
    $1004 = (($927) + ($1003)|0);
    $1005 = HEAP8[$1004>>0]|0;
    $1006 = ((($$01624$i69)) + 1|0);
    HEAP8[$1006>>0] = $1005;
    $1007 = (($966) + ($999))|0;
    $1008 = (($927) + ($1007)|0);
    $1009 = HEAP8[$1008>>0]|0;
    $1010 = ((($$01624$i69)) + 2|0);
    HEAP8[$1010>>0] = $1009;
    $1011 = ((($$01624$i69)) + 3|0);
    $1012 = ((($$01606$i67)) + 2|0);
    $1013 = HEAP8[$997>>0]|0;
    $1014 = $1013&255;
    $1015 = (($958) + ($1014))|0;
    $1016 = (($927) + ($1015)|0);
    $1017 = HEAP8[$1016>>0]|0;
    HEAP8[$1011>>0] = $1017;
    $1018 = (($964) + ($1014))|0;
    $1019 = (($927) + ($1018)|0);
    $1020 = HEAP8[$1019>>0]|0;
    $1021 = ((($$01624$i69)) + 4|0);
    HEAP8[$1021>>0] = $1020;
    $1022 = (($966) + ($1014))|0;
    $1023 = (($927) + ($1022)|0);
    $1024 = HEAP8[$1023>>0]|0;
    $1025 = ((($$01624$i69)) + 5|0);
    HEAP8[$1025>>0] = $1024;
    $1026 = ((($$01624$i69)) + 6|0);
    $1027 = (($$09$i64) + -1)|0;
    $1028 = ($1027|0)==(0);
    if ($1028) {
     break;
    } else {
     $$01588$i65 = $954;$$01597$i66 = $951;$$01606$i67 = $1012;$$01615$i68 = $982;$$01624$i69 = $1026;$$01633$i70 = $996;$$09$i64 = $1027;
    }
   }
   $1029 = $947 & -2;
   $scevgep23$i62 = (($941) + ($1029)|0);
   $scevgep20$i72 = (($945) + ($948)|0);
   $scevgep21$i73 = (($938) + ($1029)|0);
   $scevgep22$i74 = (($$val59) + ($950)|0);
   $scevgep24$i75 = (($$idx60$val) + ($950)|0);
   $$pre$i76 = HEAP32[$946>>2]|0;
   $$0158$lcssa$i83 = $scevgep20$i72;$$0159$lcssa$i82 = $scevgep$i61;$$0160$lcssa$i81 = $scevgep23$i62;$$0161$lcssa$i80 = $scevgep21$i73;$$0162$lcssa$i79 = $scevgep24$i75;$$0163$lcssa$i78 = $scevgep22$i74;$1031 = $$pre$i76;
  }
  $1030 = $1031 & 1;
  $1032 = ($1030|0)==(0);
  if ($1032) {
   return;
  }
  $1033 = HEAP8[$$0159$lcssa$i82>>0]|0;
  $1034 = $1033&255;
  $1035 = HEAP8[$$0158$lcssa$i83>>0]|0;
  $1036 = $1035&255;
  $1037 = (($929) + ($1036<<2)|0);
  $1038 = HEAP32[$1037>>2]|0;
  $1039 = (($935) + ($1034<<2)|0);
  $1040 = HEAP32[$1039>>2]|0;
  $1041 = (($933) + ($1036<<2)|0);
  $1042 = HEAP32[$1041>>2]|0;
  $1043 = (($1042) + ($1040))|0;
  $1044 = $1043 >> 16;
  $1045 = (($931) + ($1034<<2)|0);
  $1046 = HEAP32[$1045>>2]|0;
  $1047 = HEAP8[$$0161$lcssa$i80>>0]|0;
  $1048 = $1047&255;
  $1049 = (($1038) + ($1048))|0;
  $1050 = (($927) + ($1049)|0);
  $1051 = HEAP8[$1050>>0]|0;
  HEAP8[$$0163$lcssa$i78>>0] = $1051;
  $1052 = (($1044) + ($1048))|0;
  $1053 = (($927) + ($1052)|0);
  $1054 = HEAP8[$1053>>0]|0;
  $1055 = ((($$0163$lcssa$i78)) + 1|0);
  HEAP8[$1055>>0] = $1054;
  $1056 = (($1046) + ($1048))|0;
  $1057 = (($927) + ($1056)|0);
  $1058 = HEAP8[$1057>>0]|0;
  $1059 = ((($$0163$lcssa$i78)) + 2|0);
  HEAP8[$1059>>0] = $1058;
  $1060 = HEAP8[$$0160$lcssa$i81>>0]|0;
  $1061 = $1060&255;
  $1062 = (($1038) + ($1061))|0;
  $1063 = (($927) + ($1062)|0);
  $1064 = HEAP8[$1063>>0]|0;
  HEAP8[$$0162$lcssa$i79>>0] = $1064;
  $1065 = (($1044) + ($1061))|0;
  $1066 = (($927) + ($1065)|0);
  $1067 = HEAP8[$1066>>0]|0;
  $1068 = ((($$0162$lcssa$i79)) + 1|0);
  HEAP8[$1068>>0] = $1067;
  $1069 = (($1046) + ($1061))|0;
  $1070 = (($927) + ($1069)|0);
  $1071 = HEAP8[$1070>>0]|0;
  $1072 = ((($$0162$lcssa$i79)) + 2|0);
  HEAP8[$1072>>0] = $1071;
  return;
 }
 }
}
function _h2v2_merged_upsample_565D($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa$i = 0, $$011$i = 0, $$0210$lcssa$i = 0, $$021010$i = 0, $$02119$i = 0, $$0212$lcssa$i = 0, $$02128$i = 0, $$0213$lcssa$i = 0, $$02137$i = 0, $$0214$lcssa$i = 0, $$02146$i = 0, $$0215$lcssa$i = 0, $$02155$i = 0, $$0216$lcssa$i = 0, $$02164$i = 0, $$0217$lcssa$i = 0, $$02173$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0;
 var $$idx3$val = 0, $$idx5 = 0, $$idx5$val = 0, $$pre$i = 0, $$val = 0, $$val4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $scevgep$i = 0, $scevgep26$i = 0, $scevgep27$i = 0, $scevgep28$i = 0, $scevgep29$i = 0, $scevgep30$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$val = HEAP32[$1>>2]|0;
 $$idx = ((($1)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx3 = ((($1)) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$val4 = HEAP32[$3>>2]|0;
 $$idx5 = ((($3)) + 4|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $4 = ((($0)) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($5)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 3;
 $19 = (1400 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + 1)|0;
 $22 = $21 & 3;
 $23 = (1400 + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $2 << 1;
 $26 = (($$val) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25 | 1;
 $29 = (($$val) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($$idx$val) + ($2<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($$idx3$val) + ($2<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 112|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 1;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0$lcssa$i = $24;$$0210$lcssa$i = $20;$$0212$lcssa$i = $34;$$0213$lcssa$i = $32;$$0214$lcssa$i = $30;$$0215$lcssa$i = $27;$$0216$lcssa$i = $$idx5$val;$$0217$lcssa$i = $$val4;$188 = $36;
 } else {
  $scevgep$i = (($32) + ($37)|0);
  $39 = $37 << 2;
  $$011$i = $24;$$021010$i = $20;$$02119$i = $37;$$02128$i = $34;$$02137$i = $32;$$02146$i = $30;$$02155$i = $27;$$02164$i = $$idx5$val;$$02173$i = $$val4;
  while(1) {
   $40 = ((($$02137$i)) + 1|0);
   $41 = HEAP8[$$02137$i>>0]|0;
   $42 = $41&255;
   $43 = ((($$02128$i)) + 1|0);
   $44 = HEAP8[$$02128$i>>0]|0;
   $45 = $44&255;
   $46 = (($9) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($15) + ($42<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($13) + ($45<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($49))|0;
   $53 = $52 >> 16;
   $54 = (($11) + ($42<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($$02155$i)) + 1|0);
   $57 = HEAP8[$$02155$i>>0]|0;
   $58 = $57&255;
   $59 = $$021010$i & 255;
   $60 = (($47) + ($59))|0;
   $61 = (($60) + ($58))|0;
   $62 = (($7) + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $59 >>> 1;
   $66 = (($53) + ($65))|0;
   $67 = (($66) + ($58))|0;
   $68 = (($7) + ($67)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = (($55) + ($59))|0;
   $72 = (($71) + ($58))|0;
   $73 = (($7) + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $$021010$i << 24;
   $77 = $$021010$i >>> 8;
   $78 = $76 | $77;
   $79 = $64 << 8;
   $80 = $79 & 63488;
   $81 = $70 << 3;
   $82 = $81 & 2016;
   $83 = $82 | $80;
   $84 = $75 >>> 3;
   $85 = $83 | $84;
   $86 = ((($$02155$i)) + 2|0);
   $87 = HEAP8[$56>>0]|0;
   $88 = $87&255;
   $89 = $$011$i & 255;
   $90 = (($47) + ($89))|0;
   $91 = (($90) + ($88))|0;
   $92 = (($7) + ($91)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $89 >>> 1;
   $96 = (($53) + ($95))|0;
   $97 = (($96) + ($88))|0;
   $98 = (($7) + ($97)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = (($55) + ($89))|0;
   $102 = (($101) + ($88))|0;
   $103 = (($7) + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = $$011$i << 24;
   $107 = $$011$i >>> 8;
   $108 = $106 | $107;
   $109 = $94 << 8;
   $110 = $109 & 63488;
   $111 = $100 << 3;
   $112 = $111 & 2016;
   $113 = $112 | $110;
   $114 = $105 >>> 3;
   $115 = $113 | $114;
   $116 = $85&65535;
   HEAP16[$$02173$i>>1] = $116;
   $117 = $115&65535;
   $118 = ((($$02173$i)) + 2|0);
   HEAP16[$118>>1] = $117;
   $119 = ((($$02173$i)) + 4|0);
   $120 = ((($$02146$i)) + 1|0);
   $121 = HEAP8[$$02146$i>>0]|0;
   $122 = $121&255;
   $123 = $77 & 255;
   $124 = (($47) + ($123))|0;
   $125 = (($124) + ($122))|0;
   $126 = (($7) + ($125)|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = $123 >>> 1;
   $130 = (($53) + ($129))|0;
   $131 = (($130) + ($122))|0;
   $132 = (($7) + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($55) + ($123))|0;
   $136 = (($135) + ($122))|0;
   $137 = (($7) + ($136)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $77 << 24;
   $141 = $78 >>> 8;
   $142 = $141 | $140;
   $143 = $128 << 8;
   $144 = $143 & 63488;
   $145 = $134 << 3;
   $146 = $145 & 2016;
   $147 = $146 | $144;
   $148 = $139 >>> 3;
   $149 = $147 | $148;
   $150 = ((($$02146$i)) + 2|0);
   $151 = HEAP8[$120>>0]|0;
   $152 = $151&255;
   $153 = $107 & 255;
   $154 = (($47) + ($153))|0;
   $155 = (($154) + ($152))|0;
   $156 = (($7) + ($155)|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $159 = $153 >>> 1;
   $160 = (($53) + ($159))|0;
   $161 = (($160) + ($152))|0;
   $162 = (($7) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($55) + ($153))|0;
   $166 = (($165) + ($152))|0;
   $167 = (($7) + ($166)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = $107 << 24;
   $171 = $108 >>> 8;
   $172 = $171 | $170;
   $173 = $158 << 8;
   $174 = $173 & 63488;
   $175 = $164 << 3;
   $176 = $175 & 2016;
   $177 = $176 | $174;
   $178 = $169 >>> 3;
   $179 = $177 | $178;
   $180 = $149&65535;
   HEAP16[$$02164$i>>1] = $180;
   $181 = $179&65535;
   $182 = ((($$02164$i)) + 2|0);
   HEAP16[$182>>1] = $181;
   $183 = ((($$02164$i)) + 4|0);
   $184 = (($$02119$i) + -1)|0;
   $185 = ($184|0)==(0);
   if ($185) {
    break;
   } else {
    $$011$i = $172;$$021010$i = $142;$$02119$i = $184;$$02128$i = $43;$$02137$i = $40;$$02146$i = $150;$$02155$i = $86;$$02164$i = $183;$$02173$i = $119;
   }
  }
  $186 = $36 & -2;
  $scevgep29$i = (($30) + ($186)|0);
  $scevgep26$i = (($34) + ($37)|0);
  $scevgep27$i = (($27) + ($186)|0);
  $scevgep28$i = (($$val4) + ($39)|0);
  $scevgep30$i = (($$idx5$val) + ($39)|0);
  $$pre$i = HEAP32[$35>>2]|0;
  $$0$lcssa$i = $172;$$0210$lcssa$i = $142;$$0212$lcssa$i = $scevgep26$i;$$0213$lcssa$i = $scevgep$i;$$0214$lcssa$i = $scevgep29$i;$$0215$lcssa$i = $scevgep27$i;$$0216$lcssa$i = $scevgep30$i;$$0217$lcssa$i = $scevgep28$i;$188 = $$pre$i;
 }
 $187 = $188 & 1;
 $189 = ($187|0)==(0);
 if ($189) {
  return;
 }
 $190 = HEAP8[$$0213$lcssa$i>>0]|0;
 $191 = $190&255;
 $192 = HEAP8[$$0212$lcssa$i>>0]|0;
 $193 = $192&255;
 $194 = (($9) + ($193<<2)|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = (($15) + ($191<<2)|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (($13) + ($193<<2)|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($199) + ($197))|0;
 $201 = $200 >> 16;
 $202 = (($11) + ($191<<2)|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = HEAP8[$$0215$lcssa$i>>0]|0;
 $205 = $204&255;
 $206 = $$0210$lcssa$i & 255;
 $207 = (($195) + ($206))|0;
 $208 = (($207) + ($205))|0;
 $209 = (($7) + ($208)|0);
 $210 = HEAP8[$209>>0]|0;
 $211 = $210&255;
 $212 = $206 >>> 1;
 $213 = (($201) + ($212))|0;
 $214 = (($213) + ($205))|0;
 $215 = (($7) + ($214)|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = $216&255;
 $218 = (($203) + ($206))|0;
 $219 = (($218) + ($205))|0;
 $220 = (($7) + ($219)|0);
 $221 = HEAP8[$220>>0]|0;
 $222 = $221&255;
 $223 = $211 << 8;
 $224 = $223 & 63488;
 $225 = $217 << 3;
 $226 = $225 & 2016;
 $227 = $226 | $224;
 $228 = $222 >>> 3;
 $229 = $227 | $228;
 $230 = $229&65535;
 HEAP16[$$0217$lcssa$i>>1] = $230;
 $231 = HEAP8[$$0214$lcssa$i>>0]|0;
 $232 = $231&255;
 $233 = $$0$lcssa$i & 255;
 $234 = (($195) + ($233))|0;
 $235 = (($234) + ($232))|0;
 $236 = (($7) + ($235)|0);
 $237 = HEAP8[$236>>0]|0;
 $238 = $237&255;
 $239 = $233 >>> 1;
 $240 = (($201) + ($239))|0;
 $241 = (($240) + ($232))|0;
 $242 = (($7) + ($241)|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&255;
 $245 = (($203) + ($233))|0;
 $246 = (($245) + ($232))|0;
 $247 = (($7) + ($246)|0);
 $248 = HEAP8[$247>>0]|0;
 $249 = $248&255;
 $250 = $238 << 8;
 $251 = $250 & 63488;
 $252 = $244 << 3;
 $253 = $252 & 2016;
 $254 = $253 | $251;
 $255 = $249 >>> 3;
 $256 = $254 | $255;
 $257 = $256&65535;
 HEAP16[$$0216$lcssa$i>>1] = $257;
 return;
}
function _h2v2_merged_upsample_565($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0178$lcssa$i = 0, $$01788$i = 0, $$0179$lcssa$i = 0, $$01797$i = 0, $$0180$lcssa$i = 0, $$01806$i = 0, $$0181$lcssa$i = 0, $$01815$i = 0, $$0182$lcssa$i = 0, $$01824$i = 0, $$0183$lcssa$i = 0, $$01833$i = 0, $$09$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx5 = 0, $$idx5$val = 0, $$pre$i = 0;
 var $$val = 0, $$val4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep20$i = 0, $scevgep21$i = 0, $scevgep22$i = 0, $scevgep23$i = 0, $scevgep24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$val = HEAP32[$1>>2]|0;
 $$idx = ((($1)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx3 = ((($1)) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$val4 = HEAP32[$3>>2]|0;
 $$idx5 = ((($3)) + 4|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $4 = ((($0)) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($5)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2 << 1;
 $17 = (($$val) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16 | 1;
 $20 = (($$val) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($$idx$val) + ($2<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($$idx3$val) + ($2<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 112|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 1;
 $29 = ($28|0)==(0);
 if ($29) {
  $$0178$lcssa$i = $25;$$0179$lcssa$i = $23;$$0180$lcssa$i = $21;$$0181$lcssa$i = $18;$$0182$lcssa$i = $$idx5$val;$$0183$lcssa$i = $$val4;$147 = $27;
 } else {
  $scevgep$i = (($23) + ($28)|0);
  $30 = $28 << 2;
  $$01788$i = $25;$$01797$i = $23;$$01806$i = $21;$$01815$i = $18;$$01824$i = $$idx5$val;$$01833$i = $$val4;$$09$i = $28;
  while(1) {
   $31 = ((($$01797$i)) + 1|0);
   $32 = HEAP8[$$01797$i>>0]|0;
   $33 = $32&255;
   $34 = ((($$01788$i)) + 1|0);
   $35 = HEAP8[$$01788$i>>0]|0;
   $36 = $35&255;
   $37 = (($9) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($15) + ($33<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($13) + ($36<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($40))|0;
   $44 = $43 >> 16;
   $45 = (($11) + ($33<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($$01815$i)) + 1|0);
   $48 = HEAP8[$$01815$i>>0]|0;
   $49 = $48&255;
   $50 = (($38) + ($49))|0;
   $51 = (($7) + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($44) + ($49))|0;
   $55 = (($7) + ($54)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = (($46) + ($49))|0;
   $59 = (($7) + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $53 << 8;
   $63 = $62 & 63488;
   $64 = $57 << 3;
   $65 = $64 & 2016;
   $66 = $65 | $63;
   $67 = $61 >>> 3;
   $68 = $66 | $67;
   $69 = ((($$01815$i)) + 2|0);
   $70 = HEAP8[$47>>0]|0;
   $71 = $70&255;
   $72 = (($38) + ($71))|0;
   $73 = (($7) + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = (($44) + ($71))|0;
   $77 = (($7) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($46) + ($71))|0;
   $81 = (($7) + ($80)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $75 << 8;
   $85 = $84 & 63488;
   $86 = $79 << 3;
   $87 = $86 & 2016;
   $88 = $87 | $85;
   $89 = $83 >>> 3;
   $90 = $88 | $89;
   $91 = $68&65535;
   HEAP16[$$01833$i>>1] = $91;
   $92 = $90&65535;
   $93 = ((($$01833$i)) + 2|0);
   HEAP16[$93>>1] = $92;
   $94 = ((($$01833$i)) + 4|0);
   $95 = ((($$01806$i)) + 1|0);
   $96 = HEAP8[$$01806$i>>0]|0;
   $97 = $96&255;
   $98 = (($38) + ($97))|0;
   $99 = (($7) + ($98)|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = (($44) + ($97))|0;
   $103 = (($7) + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = (($46) + ($97))|0;
   $107 = (($7) + ($106)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $101 << 8;
   $111 = $110 & 63488;
   $112 = $105 << 3;
   $113 = $112 & 2016;
   $114 = $113 | $111;
   $115 = $109 >>> 3;
   $116 = $114 | $115;
   $117 = ((($$01806$i)) + 2|0);
   $118 = HEAP8[$95>>0]|0;
   $119 = $118&255;
   $120 = (($38) + ($119))|0;
   $121 = (($7) + ($120)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = (($44) + ($119))|0;
   $125 = (($7) + ($124)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = (($46) + ($119))|0;
   $129 = (($7) + ($128)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $123 << 8;
   $133 = $132 & 63488;
   $134 = $127 << 3;
   $135 = $134 & 2016;
   $136 = $135 | $133;
   $137 = $131 >>> 3;
   $138 = $136 | $137;
   $139 = $116&65535;
   HEAP16[$$01824$i>>1] = $139;
   $140 = $138&65535;
   $141 = ((($$01824$i)) + 2|0);
   HEAP16[$141>>1] = $140;
   $142 = ((($$01824$i)) + 4|0);
   $143 = (($$09$i) + -1)|0;
   $144 = ($143|0)==(0);
   if ($144) {
    break;
   } else {
    $$01788$i = $34;$$01797$i = $31;$$01806$i = $117;$$01815$i = $69;$$01824$i = $142;$$01833$i = $94;$$09$i = $143;
   }
  }
  $145 = $27 & -2;
  $scevgep23$i = (($21) + ($145)|0);
  $scevgep20$i = (($25) + ($28)|0);
  $scevgep21$i = (($18) + ($145)|0);
  $scevgep22$i = (($$val4) + ($30)|0);
  $scevgep24$i = (($$idx5$val) + ($30)|0);
  $$pre$i = HEAP32[$26>>2]|0;
  $$0178$lcssa$i = $scevgep20$i;$$0179$lcssa$i = $scevgep$i;$$0180$lcssa$i = $scevgep23$i;$$0181$lcssa$i = $scevgep21$i;$$0182$lcssa$i = $scevgep24$i;$$0183$lcssa$i = $scevgep22$i;$147 = $$pre$i;
 }
 $146 = $147 & 1;
 $148 = ($146|0)==(0);
 if ($148) {
  return;
 }
 $149 = HEAP8[$$0179$lcssa$i>>0]|0;
 $150 = $149&255;
 $151 = HEAP8[$$0178$lcssa$i>>0]|0;
 $152 = $151&255;
 $153 = (($9) + ($152<<2)|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($15) + ($150<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($13) + ($152<<2)|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + ($156))|0;
 $160 = $159 >> 16;
 $161 = (($11) + ($150<<2)|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = HEAP8[$$0181$lcssa$i>>0]|0;
 $164 = $163&255;
 $165 = (($154) + ($164))|0;
 $166 = (($7) + ($165)|0);
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = (($160) + ($164))|0;
 $170 = (($7) + ($169)|0);
 $171 = HEAP8[$170>>0]|0;
 $172 = $171&255;
 $173 = (($162) + ($164))|0;
 $174 = (($7) + ($173)|0);
 $175 = HEAP8[$174>>0]|0;
 $176 = $175&255;
 $177 = $168 << 8;
 $178 = $177 & 63488;
 $179 = $172 << 3;
 $180 = $179 & 2016;
 $181 = $180 | $178;
 $182 = $176 >>> 3;
 $183 = $181 | $182;
 $184 = $183&65535;
 HEAP16[$$0183$lcssa$i>>1] = $184;
 $185 = HEAP8[$$0180$lcssa$i>>0]|0;
 $186 = $185&255;
 $187 = (($154) + ($186))|0;
 $188 = (($7) + ($187)|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = (($160) + ($186))|0;
 $192 = (($7) + ($191)|0);
 $193 = HEAP8[$192>>0]|0;
 $194 = $193&255;
 $195 = (($162) + ($186))|0;
 $196 = (($7) + ($195)|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = $190 << 8;
 $200 = $199 & 63488;
 $201 = $194 << 3;
 $202 = $201 & 2016;
 $203 = $202 | $200;
 $204 = $198 >>> 3;
 $205 = $203 | $204;
 $206 = $205&65535;
 HEAP16[$$0182$lcssa$i>>1] = $206;
 return;
}
function _merged_1v_upsample($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 452|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($4) + ($12<<2)|0);
 FUNCTION_TABLE_viiii[$10 & 255]($0,$1,$11,$13);
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$5>>2] = $15;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$2>>2] = $17;
 return;
}
function _h2v1_merged_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0110$lcssa$i = 0, $$0110$lcssa$i135 = 0, $$0110$lcssa$i70 = 0, $$01105$i = 0, $$01105$i122 = 0, $$01105$i57 = 0, $$0111$lcssa$i = 0, $$0111$lcssa$i134 = 0, $$0111$lcssa$i69 = 0, $$01114$i = 0, $$01114$i123 = 0, $$01114$i58 = 0, $$0112$lcssa$i = 0, $$0112$lcssa$i133 = 0, $$0112$lcssa$i68 = 0, $$01123$i = 0, $$01123$i124 = 0, $$01123$i59 = 0, $$0113$lcssa$i = 0, $$0113$lcssa$i117 = 0;
 var $$0113$lcssa$i132 = 0, $$0113$lcssa$i153 = 0, $$0113$lcssa$i67 = 0, $$0113$lcssa$i81 = 0, $$0113$lcssa$i99 = 0, $$01132$i = 0, $$01132$i125 = 0, $$01132$i60 = 0, $$01135$i = 0, $$01135$i104 = 0, $$01135$i140 = 0, $$01135$i86 = 0, $$0114$lcssa$i = 0, $$0114$lcssa$i116 = 0, $$0114$lcssa$i152 = 0, $$0114$lcssa$i98 = 0, $$01144$i = 0, $$01144$i105 = 0, $$01144$i141 = 0, $$01144$i87 = 0;
 var $$0115$lcssa$i = 0, $$0115$lcssa$i115 = 0, $$0115$lcssa$i151 = 0, $$0115$lcssa$i97 = 0, $$01153$i = 0, $$01153$i106 = 0, $$01153$i142 = 0, $$01153$i88 = 0, $$0116$lcssa$i = 0, $$0116$lcssa$i114 = 0, $$0116$lcssa$i150 = 0, $$0116$lcssa$i96 = 0, $$01162$i = 0, $$01162$i107 = 0, $$01162$i143 = 0, $$01162$i89 = 0, $$06$i = 0, $$06$i103 = 0, $$06$i121 = 0, $$06$i139 = 0;
 var $$06$i56 = 0, $$06$i74 = 0, $$06$i85 = 0, $$idx = 0, $$idx$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx31 = 0, $$idx31$val = 0, $$idx32 = 0, $$idx32$val = 0, $$idx35 = 0, $$idx35$val = 0, $$idx36 = 0, $$idx36$val = 0, $$idx39 = 0, $$idx39$val = 0, $$idx40 = 0, $$idx40$val = 0, $$idx43 = 0;
 var $$idx43$val = 0, $$idx44 = 0, $$idx44$val = 0, $$idx47 = 0, $$idx47$val = 0, $$idx48 = 0, $$idx48$val = 0, $$idx51 = 0, $$idx51$val = 0, $$idx52 = 0, $$idx52$val = 0, $$pre$i = 0, $$pre$i112 = 0, $$pre$i130 = 0, $$pre$i148 = 0, $$pre$i65 = 0, $$pre$i79 = 0, $$pre$i94 = 0, $$val = 0, $$val29 = 0;
 var $$val30 = 0, $$val33 = 0, $$val34 = 0, $$val37 = 0, $$val38 = 0, $$val41 = 0, $$val42 = 0, $$val45 = 0, $$val46 = 0, $$val49 = 0, $$val50 = 0, $$val53 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $scevgep$i = 0, $scevgep$i101 = 0, $scevgep$i119 = 0, $scevgep$i137 = 0, $scevgep$i54 = 0, $scevgep$i72 = 0, $scevgep$i83 = 0, $scevgep13$i = 0, $scevgep13$i109 = 0, $scevgep13$i127 = 0, $scevgep13$i145 = 0, $scevgep13$i62 = 0, $scevgep13$i76 = 0, $scevgep13$i91 = 0, $scevgep14$i = 0, $scevgep14$i110 = 0, $scevgep14$i128 = 0, $scevgep14$i146 = 0, $scevgep14$i63 = 0, $scevgep14$i77 = 0;
 var $scevgep14$i92 = 0, $scevgep15$i = 0, $scevgep15$i111 = 0, $scevgep15$i129 = 0, $scevgep15$i147 = 0, $scevgep15$i64 = 0, $scevgep15$i78 = 0, $scevgep15$i93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 6:  {
  $$val = HEAP32[$1>>2]|0;
  $$idx = ((($1)) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx28 = ((($1)) + 8|0);
  $$idx28$val = HEAP32[$$idx28>>2]|0;
  $$val29 = HEAP32[$3>>2]|0;
  $6 = ((($0)) + 452|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 324|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($7)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($7)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($7)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($7)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($$val) + ($2<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($$idx$val) + ($2<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($$idx28$val) + ($2<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($0)) + 112|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 >>> 1;
  $27 = ($26|0)==(0);
  if ($27) {
   $$0110$lcssa$i = $23;$$0111$lcssa$i = $21;$$0112$lcssa$i = $19;$$0113$lcssa$i = $$val29;$79 = $25;
  } else {
   $28 = $25 & -2;
   $$01105$i = $23;$$01114$i = $21;$$01123$i = $19;$$01132$i = $$val29;$$06$i = $26;
   while(1) {
    $29 = ((($$01114$i)) + 1|0);
    $30 = HEAP8[$$01114$i>>0]|0;
    $31 = $30&255;
    $32 = ((($$01105$i)) + 1|0);
    $33 = HEAP8[$$01105$i>>0]|0;
    $34 = $33&255;
    $35 = (($11) + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($17) + ($31<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($15) + ($34<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($38))|0;
    $42 = $41 >> 16;
    $43 = (($13) + ($31<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($$01123$i)) + 1|0);
    $46 = HEAP8[$$01123$i>>0]|0;
    $47 = $46&255;
    $48 = (($36) + ($47))|0;
    $49 = (($9) + ($48)|0);
    $50 = HEAP8[$49>>0]|0;
    HEAP8[$$01132$i>>0] = $50;
    $51 = (($42) + ($47))|0;
    $52 = (($9) + ($51)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ((($$01132$i)) + 1|0);
    HEAP8[$54>>0] = $53;
    $55 = (($44) + ($47))|0;
    $56 = (($9) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($$01132$i)) + 2|0);
    HEAP8[$58>>0] = $57;
    $59 = ((($$01132$i)) + 3|0);
    $60 = ((($$01123$i)) + 2|0);
    $61 = HEAP8[$45>>0]|0;
    $62 = $61&255;
    $63 = (($36) + ($62))|0;
    $64 = (($9) + ($63)|0);
    $65 = HEAP8[$64>>0]|0;
    HEAP8[$59>>0] = $65;
    $66 = (($42) + ($62))|0;
    $67 = (($9) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = ((($$01132$i)) + 4|0);
    HEAP8[$69>>0] = $68;
    $70 = (($44) + ($62))|0;
    $71 = (($9) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = ((($$01132$i)) + 5|0);
    HEAP8[$73>>0] = $72;
    $74 = ((($$01132$i)) + 6|0);
    $75 = (($$06$i) + -1)|0;
    $76 = ($75|0)==(0);
    if ($76) {
     break;
    } else {
     $$01105$i = $32;$$01114$i = $29;$$01123$i = $60;$$01132$i = $74;$$06$i = $75;
    }
   }
   $scevgep$i = (($21) + ($26)|0);
   $77 = ($26*6)|0;
   $scevgep13$i = (($23) + ($26)|0);
   $scevgep14$i = (($19) + ($28)|0);
   $scevgep15$i = (($$val29) + ($77)|0);
   $$pre$i = HEAP32[$24>>2]|0;
   $$0110$lcssa$i = $scevgep13$i;$$0111$lcssa$i = $scevgep$i;$$0112$lcssa$i = $scevgep14$i;$$0113$lcssa$i = $scevgep15$i;$79 = $$pre$i;
  }
  $78 = $79 & 1;
  $80 = ($78|0)==(0);
  if ($80) {
   return;
  }
  $81 = HEAP8[$$0111$lcssa$i>>0]|0;
  $82 = $81&255;
  $83 = HEAP8[$$0110$lcssa$i>>0]|0;
  $84 = $83&255;
  $85 = (($11) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($17) + ($82<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($15) + ($84<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($88))|0;
  $92 = $91 >> 16;
  $93 = (($13) + ($82<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP8[$$0112$lcssa$i>>0]|0;
  $96 = $95&255;
  $97 = (($86) + ($96))|0;
  $98 = (($9) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  HEAP8[$$0113$lcssa$i>>0] = $99;
  $100 = (($92) + ($96))|0;
  $101 = (($9) + ($100)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ((($$0113$lcssa$i)) + 1|0);
  HEAP8[$103>>0] = $102;
  $104 = (($94) + ($96))|0;
  $105 = (($9) + ($104)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = ((($$0113$lcssa$i)) + 2|0);
  HEAP8[$107>>0] = $106;
  return;
  break;
 }
 case 12: case 7:  {
  $$val30 = HEAP32[$1>>2]|0;
  $$idx31 = ((($1)) + 4|0);
  $$idx31$val = HEAP32[$$idx31>>2]|0;
  $$idx32 = ((($1)) + 8|0);
  $$idx32$val = HEAP32[$$idx32>>2]|0;
  $$val33 = HEAP32[$3>>2]|0;
  $108 = ((($0)) + 452|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($0)) + 324|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($109)) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($109)) + 20|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($109)) + 24|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($109)) + 28|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($$val30) + ($2<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($$idx31$val) + ($2<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($$idx32$val) + ($2<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($0)) + 112|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 >>> 1;
  $129 = ($128|0)==(0);
  if ($129) {
   $$0113$lcssa$i153 = $125;$$0114$lcssa$i152 = $123;$$0115$lcssa$i151 = $121;$$0116$lcssa$i150 = $$val33;$183 = $127;
  } else {
   $130 = $127 & -2;
   $$01135$i140 = $125;$$01144$i141 = $123;$$01153$i142 = $121;$$01162$i143 = $$val33;$$06$i139 = $128;
   while(1) {
    $131 = ((($$01144$i141)) + 1|0);
    $132 = HEAP8[$$01144$i141>>0]|0;
    $133 = $132&255;
    $134 = ((($$01135$i140)) + 1|0);
    $135 = HEAP8[$$01135$i140>>0]|0;
    $136 = $135&255;
    $137 = (($113) + ($136<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($119) + ($133<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($117) + ($136<<2)|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($140))|0;
    $144 = $143 >> 16;
    $145 = (($115) + ($133<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ((($$01153$i142)) + 1|0);
    $148 = HEAP8[$$01153$i142>>0]|0;
    $149 = $148&255;
    $150 = (($138) + ($149))|0;
    $151 = (($111) + ($150)|0);
    $152 = HEAP8[$151>>0]|0;
    HEAP8[$$01162$i143>>0] = $152;
    $153 = (($144) + ($149))|0;
    $154 = (($111) + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = ((($$01162$i143)) + 1|0);
    HEAP8[$156>>0] = $155;
    $157 = (($146) + ($149))|0;
    $158 = (($111) + ($157)|0);
    $159 = HEAP8[$158>>0]|0;
    $160 = ((($$01162$i143)) + 2|0);
    HEAP8[$160>>0] = $159;
    $161 = ((($$01162$i143)) + 3|0);
    HEAP8[$161>>0] = -1;
    $162 = ((($$01162$i143)) + 4|0);
    $163 = ((($$01153$i142)) + 2|0);
    $164 = HEAP8[$147>>0]|0;
    $165 = $164&255;
    $166 = (($138) + ($165))|0;
    $167 = (($111) + ($166)|0);
    $168 = HEAP8[$167>>0]|0;
    HEAP8[$162>>0] = $168;
    $169 = (($144) + ($165))|0;
    $170 = (($111) + ($169)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = ((($$01162$i143)) + 5|0);
    HEAP8[$172>>0] = $171;
    $173 = (($146) + ($165))|0;
    $174 = (($111) + ($173)|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = ((($$01162$i143)) + 6|0);
    HEAP8[$176>>0] = $175;
    $177 = ((($$01162$i143)) + 7|0);
    HEAP8[$177>>0] = -1;
    $178 = ((($$01162$i143)) + 8|0);
    $179 = (($$06$i139) + -1)|0;
    $180 = ($179|0)==(0);
    if ($180) {
     break;
    } else {
     $$01135$i140 = $134;$$01144$i141 = $131;$$01153$i142 = $163;$$01162$i143 = $178;$$06$i139 = $179;
    }
   }
   $scevgep$i137 = (($123) + ($128)|0);
   $181 = $128 << 3;
   $scevgep13$i145 = (($125) + ($128)|0);
   $scevgep14$i146 = (($121) + ($130)|0);
   $scevgep15$i147 = (($$val33) + ($181)|0);
   $$pre$i148 = HEAP32[$126>>2]|0;
   $$0113$lcssa$i153 = $scevgep13$i145;$$0114$lcssa$i152 = $scevgep$i137;$$0115$lcssa$i151 = $scevgep14$i146;$$0116$lcssa$i150 = $scevgep15$i147;$183 = $$pre$i148;
  }
  $182 = $183 & 1;
  $184 = ($182|0)==(0);
  if ($184) {
   return;
  }
  $185 = HEAP8[$$0114$lcssa$i152>>0]|0;
  $186 = $185&255;
  $187 = HEAP8[$$0113$lcssa$i153>>0]|0;
  $188 = $187&255;
  $189 = (($113) + ($188<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($119) + ($186<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($117) + ($188<<2)|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + ($192))|0;
  $196 = $195 >> 16;
  $197 = (($115) + ($186<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = HEAP8[$$0115$lcssa$i151>>0]|0;
  $200 = $199&255;
  $201 = (($190) + ($200))|0;
  $202 = (($111) + ($201)|0);
  $203 = HEAP8[$202>>0]|0;
  HEAP8[$$0116$lcssa$i150>>0] = $203;
  $204 = (($196) + ($200))|0;
  $205 = (($111) + ($204)|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = ((($$0116$lcssa$i150)) + 1|0);
  HEAP8[$207>>0] = $206;
  $208 = (($198) + ($200))|0;
  $209 = (($111) + ($208)|0);
  $210 = HEAP8[$209>>0]|0;
  $211 = ((($$0116$lcssa$i150)) + 2|0);
  HEAP8[$211>>0] = $210;
  $212 = ((($$0116$lcssa$i150)) + 3|0);
  HEAP8[$212>>0] = -1;
  return;
  break;
 }
 case 8:  {
  $$val34 = HEAP32[$1>>2]|0;
  $$idx35 = ((($1)) + 4|0);
  $$idx35$val = HEAP32[$$idx35>>2]|0;
  $$idx36 = ((($1)) + 8|0);
  $$idx36$val = HEAP32[$$idx36>>2]|0;
  $$val37 = HEAP32[$3>>2]|0;
  $213 = ((($0)) + 452|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($0)) + 324|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($214)) + 16|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ((($214)) + 20|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ((($214)) + 24|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($214)) + 28|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($$val34) + ($2<<2)|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($$idx35$val) + ($2<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($$idx36$val) + ($2<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($0)) + 112|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $232 >>> 1;
  $234 = ($233|0)==(0);
  if ($234) {
   $$0110$lcssa$i135 = $230;$$0111$lcssa$i134 = $228;$$0112$lcssa$i133 = $226;$$0113$lcssa$i132 = $$val37;$286 = $232;
  } else {
   $235 = $232 & -2;
   $$01105$i122 = $230;$$01114$i123 = $228;$$01123$i124 = $226;$$01132$i125 = $$val37;$$06$i121 = $233;
   while(1) {
    $236 = ((($$01114$i123)) + 1|0);
    $237 = HEAP8[$$01114$i123>>0]|0;
    $238 = $237&255;
    $239 = ((($$01105$i122)) + 1|0);
    $240 = HEAP8[$$01105$i122>>0]|0;
    $241 = $240&255;
    $242 = (($218) + ($241<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($224) + ($238<<2)|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (($222) + ($241<<2)|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($245))|0;
    $249 = $248 >> 16;
    $250 = (($220) + ($238<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($$01123$i124)) + 1|0);
    $253 = HEAP8[$$01123$i124>>0]|0;
    $254 = $253&255;
    $255 = (($243) + ($254))|0;
    $256 = (($216) + ($255)|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = ((($$01132$i125)) + 2|0);
    HEAP8[$258>>0] = $257;
    $259 = (($249) + ($254))|0;
    $260 = (($216) + ($259)|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = ((($$01132$i125)) + 1|0);
    HEAP8[$262>>0] = $261;
    $263 = (($251) + ($254))|0;
    $264 = (($216) + ($263)|0);
    $265 = HEAP8[$264>>0]|0;
    HEAP8[$$01132$i125>>0] = $265;
    $266 = ((($$01132$i125)) + 3|0);
    $267 = ((($$01123$i124)) + 2|0);
    $268 = HEAP8[$252>>0]|0;
    $269 = $268&255;
    $270 = (($243) + ($269))|0;
    $271 = (($216) + ($270)|0);
    $272 = HEAP8[$271>>0]|0;
    $273 = ((($$01132$i125)) + 5|0);
    HEAP8[$273>>0] = $272;
    $274 = (($249) + ($269))|0;
    $275 = (($216) + ($274)|0);
    $276 = HEAP8[$275>>0]|0;
    $277 = ((($$01132$i125)) + 4|0);
    HEAP8[$277>>0] = $276;
    $278 = (($251) + ($269))|0;
    $279 = (($216) + ($278)|0);
    $280 = HEAP8[$279>>0]|0;
    HEAP8[$266>>0] = $280;
    $281 = ((($$01132$i125)) + 6|0);
    $282 = (($$06$i121) + -1)|0;
    $283 = ($282|0)==(0);
    if ($283) {
     break;
    } else {
     $$01105$i122 = $239;$$01114$i123 = $236;$$01123$i124 = $267;$$01132$i125 = $281;$$06$i121 = $282;
    }
   }
   $scevgep$i119 = (($228) + ($233)|0);
   $284 = ($233*6)|0;
   $scevgep13$i127 = (($230) + ($233)|0);
   $scevgep14$i128 = (($226) + ($235)|0);
   $scevgep15$i129 = (($$val37) + ($284)|0);
   $$pre$i130 = HEAP32[$231>>2]|0;
   $$0110$lcssa$i135 = $scevgep13$i127;$$0111$lcssa$i134 = $scevgep$i119;$$0112$lcssa$i133 = $scevgep14$i128;$$0113$lcssa$i132 = $scevgep15$i129;$286 = $$pre$i130;
  }
  $285 = $286 & 1;
  $287 = ($285|0)==(0);
  if ($287) {
   return;
  }
  $288 = HEAP8[$$0111$lcssa$i134>>0]|0;
  $289 = $288&255;
  $290 = HEAP8[$$0110$lcssa$i135>>0]|0;
  $291 = $290&255;
  $292 = (($218) + ($291<<2)|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (($224) + ($289<<2)|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (($222) + ($291<<2)|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = (($297) + ($295))|0;
  $299 = $298 >> 16;
  $300 = (($220) + ($289<<2)|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = HEAP8[$$0112$lcssa$i133>>0]|0;
  $303 = $302&255;
  $304 = (($293) + ($303))|0;
  $305 = (($216) + ($304)|0);
  $306 = HEAP8[$305>>0]|0;
  $307 = ((($$0113$lcssa$i132)) + 2|0);
  HEAP8[$307>>0] = $306;
  $308 = (($299) + ($303))|0;
  $309 = (($216) + ($308)|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = ((($$0113$lcssa$i132)) + 1|0);
  HEAP8[$311>>0] = $310;
  $312 = (($301) + ($303))|0;
  $313 = (($216) + ($312)|0);
  $314 = HEAP8[$313>>0]|0;
  HEAP8[$$0113$lcssa$i132>>0] = $314;
  return;
  break;
 }
 case 13: case 9:  {
  $$val38 = HEAP32[$1>>2]|0;
  $$idx39 = ((($1)) + 4|0);
  $$idx39$val = HEAP32[$$idx39>>2]|0;
  $$idx40 = ((($1)) + 8|0);
  $$idx40$val = HEAP32[$$idx40>>2]|0;
  $$val41 = HEAP32[$3>>2]|0;
  $315 = ((($0)) + 452|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = ((($0)) + 324|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = ((($316)) + 16|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ((($316)) + 20|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = ((($316)) + 24|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($316)) + 28|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($$val38) + ($2<<2)|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = (($$idx39$val) + ($2<<2)|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = (($$idx40$val) + ($2<<2)|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ((($0)) + 112|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = $334 >>> 1;
  $336 = ($335|0)==(0);
  if ($336) {
   $$0113$lcssa$i117 = $332;$$0114$lcssa$i116 = $330;$$0115$lcssa$i115 = $328;$$0116$lcssa$i114 = $$val41;$390 = $334;
  } else {
   $337 = $334 & -2;
   $$01135$i104 = $332;$$01144$i105 = $330;$$01153$i106 = $328;$$01162$i107 = $$val41;$$06$i103 = $335;
   while(1) {
    $338 = ((($$01144$i105)) + 1|0);
    $339 = HEAP8[$$01144$i105>>0]|0;
    $340 = $339&255;
    $341 = ((($$01135$i104)) + 1|0);
    $342 = HEAP8[$$01135$i104>>0]|0;
    $343 = $342&255;
    $344 = (($320) + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($326) + ($340<<2)|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = (($324) + ($343<<2)|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = (($349) + ($347))|0;
    $351 = $350 >> 16;
    $352 = (($322) + ($340<<2)|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = ((($$01153$i106)) + 1|0);
    $355 = HEAP8[$$01153$i106>>0]|0;
    $356 = $355&255;
    $357 = (($345) + ($356))|0;
    $358 = (($318) + ($357)|0);
    $359 = HEAP8[$358>>0]|0;
    $360 = ((($$01162$i107)) + 2|0);
    HEAP8[$360>>0] = $359;
    $361 = (($351) + ($356))|0;
    $362 = (($318) + ($361)|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = ((($$01162$i107)) + 1|0);
    HEAP8[$364>>0] = $363;
    $365 = (($353) + ($356))|0;
    $366 = (($318) + ($365)|0);
    $367 = HEAP8[$366>>0]|0;
    HEAP8[$$01162$i107>>0] = $367;
    $368 = ((($$01162$i107)) + 3|0);
    HEAP8[$368>>0] = -1;
    $369 = ((($$01162$i107)) + 4|0);
    $370 = ((($$01153$i106)) + 2|0);
    $371 = HEAP8[$354>>0]|0;
    $372 = $371&255;
    $373 = (($345) + ($372))|0;
    $374 = (($318) + ($373)|0);
    $375 = HEAP8[$374>>0]|0;
    $376 = ((($$01162$i107)) + 6|0);
    HEAP8[$376>>0] = $375;
    $377 = (($351) + ($372))|0;
    $378 = (($318) + ($377)|0);
    $379 = HEAP8[$378>>0]|0;
    $380 = ((($$01162$i107)) + 5|0);
    HEAP8[$380>>0] = $379;
    $381 = (($353) + ($372))|0;
    $382 = (($318) + ($381)|0);
    $383 = HEAP8[$382>>0]|0;
    HEAP8[$369>>0] = $383;
    $384 = ((($$01162$i107)) + 7|0);
    HEAP8[$384>>0] = -1;
    $385 = ((($$01162$i107)) + 8|0);
    $386 = (($$06$i103) + -1)|0;
    $387 = ($386|0)==(0);
    if ($387) {
     break;
    } else {
     $$01135$i104 = $341;$$01144$i105 = $338;$$01153$i106 = $370;$$01162$i107 = $385;$$06$i103 = $386;
    }
   }
   $scevgep$i101 = (($330) + ($335)|0);
   $388 = $335 << 3;
   $scevgep13$i109 = (($332) + ($335)|0);
   $scevgep14$i110 = (($328) + ($337)|0);
   $scevgep15$i111 = (($$val41) + ($388)|0);
   $$pre$i112 = HEAP32[$333>>2]|0;
   $$0113$lcssa$i117 = $scevgep13$i109;$$0114$lcssa$i116 = $scevgep$i101;$$0115$lcssa$i115 = $scevgep14$i110;$$0116$lcssa$i114 = $scevgep15$i111;$390 = $$pre$i112;
  }
  $389 = $390 & 1;
  $391 = ($389|0)==(0);
  if ($391) {
   return;
  }
  $392 = HEAP8[$$0114$lcssa$i116>>0]|0;
  $393 = $392&255;
  $394 = HEAP8[$$0113$lcssa$i117>>0]|0;
  $395 = $394&255;
  $396 = (($320) + ($395<<2)|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($326) + ($393<<2)|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($324) + ($395<<2)|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = (($401) + ($399))|0;
  $403 = $402 >> 16;
  $404 = (($322) + ($393<<2)|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = HEAP8[$$0115$lcssa$i115>>0]|0;
  $407 = $406&255;
  $408 = (($397) + ($407))|0;
  $409 = (($318) + ($408)|0);
  $410 = HEAP8[$409>>0]|0;
  $411 = ((($$0116$lcssa$i114)) + 2|0);
  HEAP8[$411>>0] = $410;
  $412 = (($403) + ($407))|0;
  $413 = (($318) + ($412)|0);
  $414 = HEAP8[$413>>0]|0;
  $415 = ((($$0116$lcssa$i114)) + 1|0);
  HEAP8[$415>>0] = $414;
  $416 = (($405) + ($407))|0;
  $417 = (($318) + ($416)|0);
  $418 = HEAP8[$417>>0]|0;
  HEAP8[$$0116$lcssa$i114>>0] = $418;
  $419 = ((($$0116$lcssa$i114)) + 3|0);
  HEAP8[$419>>0] = -1;
  return;
  break;
 }
 case 14: case 10:  {
  $$val42 = HEAP32[$1>>2]|0;
  $$idx43 = ((($1)) + 4|0);
  $$idx43$val = HEAP32[$$idx43>>2]|0;
  $$idx44 = ((($1)) + 8|0);
  $$idx44$val = HEAP32[$$idx44>>2]|0;
  $$val45 = HEAP32[$3>>2]|0;
  $420 = ((($0)) + 452|0);
  $421 = HEAP32[$420>>2]|0;
  $422 = ((($0)) + 324|0);
  $423 = HEAP32[$422>>2]|0;
  $424 = ((($421)) + 16|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = ((($421)) + 20|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = ((($421)) + 24|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = ((($421)) + 28|0);
  $431 = HEAP32[$430>>2]|0;
  $432 = (($$val42) + ($2<<2)|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = (($$idx43$val) + ($2<<2)|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = (($$idx44$val) + ($2<<2)|0);
  $437 = HEAP32[$436>>2]|0;
  $438 = ((($0)) + 112|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = $439 >>> 1;
  $441 = ($440|0)==(0);
  if ($441) {
   $$0113$lcssa$i99 = $437;$$0114$lcssa$i98 = $435;$$0115$lcssa$i97 = $433;$$0116$lcssa$i96 = $$val45;$495 = $439;
  } else {
   $442 = $439 & -2;
   $$01135$i86 = $437;$$01144$i87 = $435;$$01153$i88 = $433;$$01162$i89 = $$val45;$$06$i85 = $440;
   while(1) {
    $443 = ((($$01144$i87)) + 1|0);
    $444 = HEAP8[$$01144$i87>>0]|0;
    $445 = $444&255;
    $446 = ((($$01135$i86)) + 1|0);
    $447 = HEAP8[$$01135$i86>>0]|0;
    $448 = $447&255;
    $449 = (($425) + ($448<<2)|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = (($431) + ($445<<2)|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = (($429) + ($448<<2)|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = (($454) + ($452))|0;
    $456 = $455 >> 16;
    $457 = (($427) + ($445<<2)|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ((($$01153$i88)) + 1|0);
    $460 = HEAP8[$$01153$i88>>0]|0;
    $461 = $460&255;
    $462 = (($450) + ($461))|0;
    $463 = (($423) + ($462)|0);
    $464 = HEAP8[$463>>0]|0;
    $465 = ((($$01162$i89)) + 3|0);
    HEAP8[$465>>0] = $464;
    $466 = (($456) + ($461))|0;
    $467 = (($423) + ($466)|0);
    $468 = HEAP8[$467>>0]|0;
    $469 = ((($$01162$i89)) + 2|0);
    HEAP8[$469>>0] = $468;
    $470 = (($458) + ($461))|0;
    $471 = (($423) + ($470)|0);
    $472 = HEAP8[$471>>0]|0;
    $473 = ((($$01162$i89)) + 1|0);
    HEAP8[$473>>0] = $472;
    HEAP8[$$01162$i89>>0] = -1;
    $474 = ((($$01162$i89)) + 4|0);
    $475 = ((($$01153$i88)) + 2|0);
    $476 = HEAP8[$459>>0]|0;
    $477 = $476&255;
    $478 = (($450) + ($477))|0;
    $479 = (($423) + ($478)|0);
    $480 = HEAP8[$479>>0]|0;
    $481 = ((($$01162$i89)) + 7|0);
    HEAP8[$481>>0] = $480;
    $482 = (($456) + ($477))|0;
    $483 = (($423) + ($482)|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = ((($$01162$i89)) + 6|0);
    HEAP8[$485>>0] = $484;
    $486 = (($458) + ($477))|0;
    $487 = (($423) + ($486)|0);
    $488 = HEAP8[$487>>0]|0;
    $489 = ((($$01162$i89)) + 5|0);
    HEAP8[$489>>0] = $488;
    HEAP8[$474>>0] = -1;
    $490 = ((($$01162$i89)) + 8|0);
    $491 = (($$06$i85) + -1)|0;
    $492 = ($491|0)==(0);
    if ($492) {
     break;
    } else {
     $$01135$i86 = $446;$$01144$i87 = $443;$$01153$i88 = $475;$$01162$i89 = $490;$$06$i85 = $491;
    }
   }
   $scevgep$i83 = (($435) + ($440)|0);
   $493 = $440 << 3;
   $scevgep13$i91 = (($437) + ($440)|0);
   $scevgep14$i92 = (($433) + ($442)|0);
   $scevgep15$i93 = (($$val45) + ($493)|0);
   $$pre$i94 = HEAP32[$438>>2]|0;
   $$0113$lcssa$i99 = $scevgep13$i91;$$0114$lcssa$i98 = $scevgep$i83;$$0115$lcssa$i97 = $scevgep14$i92;$$0116$lcssa$i96 = $scevgep15$i93;$495 = $$pre$i94;
  }
  $494 = $495 & 1;
  $496 = ($494|0)==(0);
  if ($496) {
   return;
  }
  $497 = HEAP8[$$0114$lcssa$i98>>0]|0;
  $498 = $497&255;
  $499 = HEAP8[$$0113$lcssa$i99>>0]|0;
  $500 = $499&255;
  $501 = (($425) + ($500<<2)|0);
  $502 = HEAP32[$501>>2]|0;
  $503 = (($431) + ($498<<2)|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = (($429) + ($500<<2)|0);
  $506 = HEAP32[$505>>2]|0;
  $507 = (($506) + ($504))|0;
  $508 = $507 >> 16;
  $509 = (($427) + ($498<<2)|0);
  $510 = HEAP32[$509>>2]|0;
  $511 = HEAP8[$$0115$lcssa$i97>>0]|0;
  $512 = $511&255;
  $513 = (($502) + ($512))|0;
  $514 = (($423) + ($513)|0);
  $515 = HEAP8[$514>>0]|0;
  $516 = ((($$0116$lcssa$i96)) + 3|0);
  HEAP8[$516>>0] = $515;
  $517 = (($508) + ($512))|0;
  $518 = (($423) + ($517)|0);
  $519 = HEAP8[$518>>0]|0;
  $520 = ((($$0116$lcssa$i96)) + 2|0);
  HEAP8[$520>>0] = $519;
  $521 = (($510) + ($512))|0;
  $522 = (($423) + ($521)|0);
  $523 = HEAP8[$522>>0]|0;
  $524 = ((($$0116$lcssa$i96)) + 1|0);
  HEAP8[$524>>0] = $523;
  HEAP8[$$0116$lcssa$i96>>0] = -1;
  return;
  break;
 }
 case 15: case 11:  {
  $$val46 = HEAP32[$1>>2]|0;
  $$idx47 = ((($1)) + 4|0);
  $$idx47$val = HEAP32[$$idx47>>2]|0;
  $$idx48 = ((($1)) + 8|0);
  $$idx48$val = HEAP32[$$idx48>>2]|0;
  $$val49 = HEAP32[$3>>2]|0;
  $525 = ((($0)) + 452|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = ((($0)) + 324|0);
  $528 = HEAP32[$527>>2]|0;
  $529 = ((($526)) + 16|0);
  $530 = HEAP32[$529>>2]|0;
  $531 = ((($526)) + 20|0);
  $532 = HEAP32[$531>>2]|0;
  $533 = ((($526)) + 24|0);
  $534 = HEAP32[$533>>2]|0;
  $535 = ((($526)) + 28|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = (($$val46) + ($2<<2)|0);
  $538 = HEAP32[$537>>2]|0;
  $539 = (($$idx47$val) + ($2<<2)|0);
  $540 = HEAP32[$539>>2]|0;
  $541 = (($$idx48$val) + ($2<<2)|0);
  $542 = HEAP32[$541>>2]|0;
  $543 = ((($0)) + 112|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = $544 >>> 1;
  $546 = ($545|0)==(0);
  if ($546) {
   $$0113$lcssa$i81 = $542;$$0114$lcssa$i = $540;$$0115$lcssa$i = $538;$$0116$lcssa$i = $$val49;$600 = $544;
  } else {
   $547 = $544 & -2;
   $$01135$i = $542;$$01144$i = $540;$$01153$i = $538;$$01162$i = $$val49;$$06$i74 = $545;
   while(1) {
    $548 = ((($$01144$i)) + 1|0);
    $549 = HEAP8[$$01144$i>>0]|0;
    $550 = $549&255;
    $551 = ((($$01135$i)) + 1|0);
    $552 = HEAP8[$$01135$i>>0]|0;
    $553 = $552&255;
    $554 = (($530) + ($553<<2)|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = (($536) + ($550<<2)|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = (($534) + ($553<<2)|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = (($559) + ($557))|0;
    $561 = $560 >> 16;
    $562 = (($532) + ($550<<2)|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = ((($$01153$i)) + 1|0);
    $565 = HEAP8[$$01153$i>>0]|0;
    $566 = $565&255;
    $567 = (($555) + ($566))|0;
    $568 = (($528) + ($567)|0);
    $569 = HEAP8[$568>>0]|0;
    $570 = ((($$01162$i)) + 1|0);
    HEAP8[$570>>0] = $569;
    $571 = (($561) + ($566))|0;
    $572 = (($528) + ($571)|0);
    $573 = HEAP8[$572>>0]|0;
    $574 = ((($$01162$i)) + 2|0);
    HEAP8[$574>>0] = $573;
    $575 = (($563) + ($566))|0;
    $576 = (($528) + ($575)|0);
    $577 = HEAP8[$576>>0]|0;
    $578 = ((($$01162$i)) + 3|0);
    HEAP8[$578>>0] = $577;
    HEAP8[$$01162$i>>0] = -1;
    $579 = ((($$01162$i)) + 4|0);
    $580 = ((($$01153$i)) + 2|0);
    $581 = HEAP8[$564>>0]|0;
    $582 = $581&255;
    $583 = (($555) + ($582))|0;
    $584 = (($528) + ($583)|0);
    $585 = HEAP8[$584>>0]|0;
    $586 = ((($$01162$i)) + 5|0);
    HEAP8[$586>>0] = $585;
    $587 = (($561) + ($582))|0;
    $588 = (($528) + ($587)|0);
    $589 = HEAP8[$588>>0]|0;
    $590 = ((($$01162$i)) + 6|0);
    HEAP8[$590>>0] = $589;
    $591 = (($563) + ($582))|0;
    $592 = (($528) + ($591)|0);
    $593 = HEAP8[$592>>0]|0;
    $594 = ((($$01162$i)) + 7|0);
    HEAP8[$594>>0] = $593;
    HEAP8[$579>>0] = -1;
    $595 = ((($$01162$i)) + 8|0);
    $596 = (($$06$i74) + -1)|0;
    $597 = ($596|0)==(0);
    if ($597) {
     break;
    } else {
     $$01135$i = $551;$$01144$i = $548;$$01153$i = $580;$$01162$i = $595;$$06$i74 = $596;
    }
   }
   $scevgep$i72 = (($540) + ($545)|0);
   $598 = $545 << 3;
   $scevgep13$i76 = (($542) + ($545)|0);
   $scevgep14$i77 = (($538) + ($547)|0);
   $scevgep15$i78 = (($$val49) + ($598)|0);
   $$pre$i79 = HEAP32[$543>>2]|0;
   $$0113$lcssa$i81 = $scevgep13$i76;$$0114$lcssa$i = $scevgep$i72;$$0115$lcssa$i = $scevgep14$i77;$$0116$lcssa$i = $scevgep15$i78;$600 = $$pre$i79;
  }
  $599 = $600 & 1;
  $601 = ($599|0)==(0);
  if ($601) {
   return;
  }
  $602 = HEAP8[$$0114$lcssa$i>>0]|0;
  $603 = $602&255;
  $604 = HEAP8[$$0113$lcssa$i81>>0]|0;
  $605 = $604&255;
  $606 = (($530) + ($605<<2)|0);
  $607 = HEAP32[$606>>2]|0;
  $608 = (($536) + ($603<<2)|0);
  $609 = HEAP32[$608>>2]|0;
  $610 = (($534) + ($605<<2)|0);
  $611 = HEAP32[$610>>2]|0;
  $612 = (($611) + ($609))|0;
  $613 = $612 >> 16;
  $614 = (($532) + ($603<<2)|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = HEAP8[$$0115$lcssa$i>>0]|0;
  $617 = $616&255;
  $618 = (($607) + ($617))|0;
  $619 = (($528) + ($618)|0);
  $620 = HEAP8[$619>>0]|0;
  $621 = ((($$0116$lcssa$i)) + 1|0);
  HEAP8[$621>>0] = $620;
  $622 = (($613) + ($617))|0;
  $623 = (($528) + ($622)|0);
  $624 = HEAP8[$623>>0]|0;
  $625 = ((($$0116$lcssa$i)) + 2|0);
  HEAP8[$625>>0] = $624;
  $626 = (($615) + ($617))|0;
  $627 = (($528) + ($626)|0);
  $628 = HEAP8[$627>>0]|0;
  $629 = ((($$0116$lcssa$i)) + 3|0);
  HEAP8[$629>>0] = $628;
  HEAP8[$$0116$lcssa$i>>0] = -1;
  return;
  break;
 }
 default: {
  $$val50 = HEAP32[$1>>2]|0;
  $$idx51 = ((($1)) + 4|0);
  $$idx51$val = HEAP32[$$idx51>>2]|0;
  $$idx52 = ((($1)) + 8|0);
  $$idx52$val = HEAP32[$$idx52>>2]|0;
  $$val53 = HEAP32[$3>>2]|0;
  $630 = ((($0)) + 452|0);
  $631 = HEAP32[$630>>2]|0;
  $632 = ((($0)) + 324|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = ((($631)) + 16|0);
  $635 = HEAP32[$634>>2]|0;
  $636 = ((($631)) + 20|0);
  $637 = HEAP32[$636>>2]|0;
  $638 = ((($631)) + 24|0);
  $639 = HEAP32[$638>>2]|0;
  $640 = ((($631)) + 28|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = (($$val50) + ($2<<2)|0);
  $643 = HEAP32[$642>>2]|0;
  $644 = (($$idx51$val) + ($2<<2)|0);
  $645 = HEAP32[$644>>2]|0;
  $646 = (($$idx52$val) + ($2<<2)|0);
  $647 = HEAP32[$646>>2]|0;
  $648 = ((($0)) + 112|0);
  $649 = HEAP32[$648>>2]|0;
  $650 = $649 >>> 1;
  $651 = ($650|0)==(0);
  if ($651) {
   $$0110$lcssa$i70 = $647;$$0111$lcssa$i69 = $645;$$0112$lcssa$i68 = $643;$$0113$lcssa$i67 = $$val53;$703 = $649;
  } else {
   $652 = $649 & -2;
   $$01105$i57 = $647;$$01114$i58 = $645;$$01123$i59 = $643;$$01132$i60 = $$val53;$$06$i56 = $650;
   while(1) {
    $653 = ((($$01114$i58)) + 1|0);
    $654 = HEAP8[$$01114$i58>>0]|0;
    $655 = $654&255;
    $656 = ((($$01105$i57)) + 1|0);
    $657 = HEAP8[$$01105$i57>>0]|0;
    $658 = $657&255;
    $659 = (($635) + ($658<<2)|0);
    $660 = HEAP32[$659>>2]|0;
    $661 = (($641) + ($655<<2)|0);
    $662 = HEAP32[$661>>2]|0;
    $663 = (($639) + ($658<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = (($664) + ($662))|0;
    $666 = $665 >> 16;
    $667 = (($637) + ($655<<2)|0);
    $668 = HEAP32[$667>>2]|0;
    $669 = ((($$01123$i59)) + 1|0);
    $670 = HEAP8[$$01123$i59>>0]|0;
    $671 = $670&255;
    $672 = (($660) + ($671))|0;
    $673 = (($633) + ($672)|0);
    $674 = HEAP8[$673>>0]|0;
    HEAP8[$$01132$i60>>0] = $674;
    $675 = (($666) + ($671))|0;
    $676 = (($633) + ($675)|0);
    $677 = HEAP8[$676>>0]|0;
    $678 = ((($$01132$i60)) + 1|0);
    HEAP8[$678>>0] = $677;
    $679 = (($668) + ($671))|0;
    $680 = (($633) + ($679)|0);
    $681 = HEAP8[$680>>0]|0;
    $682 = ((($$01132$i60)) + 2|0);
    HEAP8[$682>>0] = $681;
    $683 = ((($$01132$i60)) + 3|0);
    $684 = ((($$01123$i59)) + 2|0);
    $685 = HEAP8[$669>>0]|0;
    $686 = $685&255;
    $687 = (($660) + ($686))|0;
    $688 = (($633) + ($687)|0);
    $689 = HEAP8[$688>>0]|0;
    HEAP8[$683>>0] = $689;
    $690 = (($666) + ($686))|0;
    $691 = (($633) + ($690)|0);
    $692 = HEAP8[$691>>0]|0;
    $693 = ((($$01132$i60)) + 4|0);
    HEAP8[$693>>0] = $692;
    $694 = (($668) + ($686))|0;
    $695 = (($633) + ($694)|0);
    $696 = HEAP8[$695>>0]|0;
    $697 = ((($$01132$i60)) + 5|0);
    HEAP8[$697>>0] = $696;
    $698 = ((($$01132$i60)) + 6|0);
    $699 = (($$06$i56) + -1)|0;
    $700 = ($699|0)==(0);
    if ($700) {
     break;
    } else {
     $$01105$i57 = $656;$$01114$i58 = $653;$$01123$i59 = $684;$$01132$i60 = $698;$$06$i56 = $699;
    }
   }
   $scevgep$i54 = (($645) + ($650)|0);
   $701 = ($650*6)|0;
   $scevgep13$i62 = (($647) + ($650)|0);
   $scevgep14$i63 = (($643) + ($652)|0);
   $scevgep15$i64 = (($$val53) + ($701)|0);
   $$pre$i65 = HEAP32[$648>>2]|0;
   $$0110$lcssa$i70 = $scevgep13$i62;$$0111$lcssa$i69 = $scevgep$i54;$$0112$lcssa$i68 = $scevgep14$i63;$$0113$lcssa$i67 = $scevgep15$i64;$703 = $$pre$i65;
  }
  $702 = $703 & 1;
  $704 = ($702|0)==(0);
  if ($704) {
   return;
  }
  $705 = HEAP8[$$0111$lcssa$i69>>0]|0;
  $706 = $705&255;
  $707 = HEAP8[$$0110$lcssa$i70>>0]|0;
  $708 = $707&255;
  $709 = (($635) + ($708<<2)|0);
  $710 = HEAP32[$709>>2]|0;
  $711 = (($641) + ($706<<2)|0);
  $712 = HEAP32[$711>>2]|0;
  $713 = (($639) + ($708<<2)|0);
  $714 = HEAP32[$713>>2]|0;
  $715 = (($714) + ($712))|0;
  $716 = $715 >> 16;
  $717 = (($637) + ($706<<2)|0);
  $718 = HEAP32[$717>>2]|0;
  $719 = HEAP8[$$0112$lcssa$i68>>0]|0;
  $720 = $719&255;
  $721 = (($710) + ($720))|0;
  $722 = (($633) + ($721)|0);
  $723 = HEAP8[$722>>0]|0;
  HEAP8[$$0113$lcssa$i67>>0] = $723;
  $724 = (($716) + ($720))|0;
  $725 = (($633) + ($724)|0);
  $726 = HEAP8[$725>>0]|0;
  $727 = ((($$0113$lcssa$i67)) + 1|0);
  HEAP8[$727>>0] = $726;
  $728 = (($718) + ($720))|0;
  $729 = (($633) + ($728)|0);
  $730 = HEAP8[$729>>0]|0;
  $731 = ((($$0113$lcssa$i67)) + 2|0);
  HEAP8[$731>>0] = $730;
  return;
 }
 }
}
function _h2v1_merged_upsample_565D($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa$i = 0, $$01406$i = 0, $$0141$lcssa$i = 0, $$01415$i = 0, $$0142$lcssa$i = 0, $$01424$i = 0, $$0143$lcssa$i = 0, $$01433$i = 0, $$0144$lcssa$i = 0, $$01442$i = 0, $$07$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$val = 0, $$val4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep16$i = 0, $scevgep17$i = 0, $scevgep18$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$val = HEAP32[$1>>2]|0;
 $$idx = ((($1)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx3 = ((($1)) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$val4 = HEAP32[$3>>2]|0;
 $4 = ((($0)) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($5)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 3;
 $19 = (1400 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($$val) + ($2<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($$idx$val) + ($2<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($$idx3$val) + ($2<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 112|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 1;
 $30 = ($29|0)==(0);
 if ($30) {
  $$0$lcssa$i = $20;$$0141$lcssa$i = $26;$$0142$lcssa$i = $24;$$0143$lcssa$i = $22;$$0144$lcssa$i = $$val4;
 } else {
  $31 = $28 & -2;
  $$01406$i = $29;$$01415$i = $26;$$01424$i = $24;$$01433$i = $22;$$01442$i = $$val4;$$07$i = $20;
  while(1) {
   $32 = ((($$01424$i)) + 1|0);
   $33 = HEAP8[$$01424$i>>0]|0;
   $34 = $33&255;
   $35 = ((($$01415$i)) + 1|0);
   $36 = HEAP8[$$01415$i>>0]|0;
   $37 = $36&255;
   $38 = (($9) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($15) + ($34<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($13) + ($37<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41))|0;
   $45 = $44 >> 16;
   $46 = (($11) + ($34<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($$01433$i)) + 1|0);
   $49 = HEAP8[$$01433$i>>0]|0;
   $50 = $49&255;
   $51 = $$07$i & 255;
   $52 = (($39) + ($51))|0;
   $53 = (($52) + ($50))|0;
   $54 = (($7) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $51 >>> 1;
   $58 = (($45) + ($57))|0;
   $59 = (($58) + ($50))|0;
   $60 = (($7) + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = (($47) + ($51))|0;
   $64 = (($63) + ($50))|0;
   $65 = (($7) + ($64)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $$07$i << 24;
   $69 = $$07$i >>> 8;
   $70 = $68 | $69;
   $71 = $56 << 8;
   $72 = $71 & 63488;
   $73 = $62 << 3;
   $74 = $73 & 2016;
   $75 = $74 | $72;
   $76 = $67 >>> 3;
   $77 = $75 | $76;
   $78 = ((($$01433$i)) + 2|0);
   $79 = HEAP8[$48>>0]|0;
   $80 = $79&255;
   $81 = $69 & 255;
   $82 = (($39) + ($81))|0;
   $83 = (($82) + ($80))|0;
   $84 = (($7) + ($83)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = $81 >>> 1;
   $88 = (($45) + ($87))|0;
   $89 = (($88) + ($80))|0;
   $90 = (($7) + ($89)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = (($47) + ($81))|0;
   $94 = (($93) + ($80))|0;
   $95 = (($7) + ($94)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $69 << 24;
   $99 = $70 >>> 8;
   $100 = $99 | $98;
   $101 = $86 << 8;
   $102 = $101 & 63488;
   $103 = $92 << 3;
   $104 = $103 & 2016;
   $105 = $104 | $102;
   $106 = $97 >>> 3;
   $107 = $105 | $106;
   $108 = $77&65535;
   HEAP16[$$01442$i>>1] = $108;
   $109 = $107&65535;
   $110 = ((($$01442$i)) + 2|0);
   HEAP16[$110>>1] = $109;
   $111 = ((($$01442$i)) + 4|0);
   $112 = (($$01406$i) + -1)|0;
   $113 = ($112|0)==(0);
   if ($113) {
    break;
   } else {
    $$01406$i = $112;$$01415$i = $35;$$01424$i = $32;$$01433$i = $78;$$01442$i = $111;$$07$i = $100;
   }
  }
  $scevgep$i = (($24) + ($29)|0);
  $114 = $29 << 2;
  $scevgep16$i = (($26) + ($29)|0);
  $scevgep17$i = (($22) + ($31)|0);
  $scevgep18$i = (($$val4) + ($114)|0);
  $$0$lcssa$i = $100;$$0141$lcssa$i = $scevgep16$i;$$0142$lcssa$i = $scevgep$i;$$0143$lcssa$i = $scevgep17$i;$$0144$lcssa$i = $scevgep18$i;
 }
 $115 = $28 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  return;
 }
 $117 = HEAP8[$$0142$lcssa$i>>0]|0;
 $118 = $117&255;
 $119 = HEAP8[$$0141$lcssa$i>>0]|0;
 $120 = $119&255;
 $121 = (($9) + ($120<<2)|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($15) + ($118<<2)|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($13) + ($120<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + ($124))|0;
 $128 = $127 >> 16;
 $129 = (($11) + ($118<<2)|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP8[$$0143$lcssa$i>>0]|0;
 $132 = $131&255;
 $133 = $$0$lcssa$i & 255;
 $134 = (($122) + ($133))|0;
 $135 = (($134) + ($132))|0;
 $136 = (($7) + ($135)|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = $133 >>> 1;
 $140 = (($128) + ($139))|0;
 $141 = (($140) + ($132))|0;
 $142 = (($7) + ($141)|0);
 $143 = HEAP8[$142>>0]|0;
 $144 = $143&255;
 $145 = (($130) + ($133))|0;
 $146 = (($145) + ($132))|0;
 $147 = (($7) + ($146)|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $138 << 8;
 $151 = $150 & 63488;
 $152 = $144 << 3;
 $153 = $152 & 2016;
 $154 = $153 | $151;
 $155 = $149 >>> 3;
 $156 = $154 | $155;
 $157 = $156&65535;
 HEAP16[$$0144$lcssa$i>>1] = $157;
 return;
}
function _h2v1_merged_upsample_565($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0124$lcssa$i = 0, $$01245$i = 0, $$0125$lcssa$i = 0, $$01254$i = 0, $$0126$lcssa$i = 0, $$01263$i = 0, $$0127$lcssa$i = 0, $$01272$i = 0, $$06$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$val = 0, $$val4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep13$i = 0, $scevgep14$i = 0, $scevgep15$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$val = HEAP32[$1>>2]|0;
 $$idx = ((($1)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx3 = ((($1)) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$val4 = HEAP32[$3>>2]|0;
 $4 = ((($0)) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($5)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($$val) + ($2<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($$idx$val) + ($2<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($$idx3$val) + ($2<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 1;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0124$lcssa$i = $21;$$0125$lcssa$i = $19;$$0126$lcssa$i = $17;$$0127$lcssa$i = $$val4;
 } else {
  $26 = $23 & -2;
  $$01245$i = $21;$$01254$i = $19;$$01263$i = $17;$$01272$i = $$val4;$$06$i = $24;
  while(1) {
   $27 = ((($$01254$i)) + 1|0);
   $28 = HEAP8[$$01254$i>>0]|0;
   $29 = $28&255;
   $30 = ((($$01245$i)) + 1|0);
   $31 = HEAP8[$$01245$i>>0]|0;
   $32 = $31&255;
   $33 = (($9) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($15) + ($29<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($13) + ($32<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($36))|0;
   $40 = $39 >> 16;
   $41 = (($11) + ($29<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($$01263$i)) + 1|0);
   $44 = HEAP8[$$01263$i>>0]|0;
   $45 = $44&255;
   $46 = (($34) + ($45))|0;
   $47 = (($7) + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($40) + ($45))|0;
   $51 = (($7) + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($42) + ($45))|0;
   $55 = (($7) + ($54)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = $49 << 8;
   $59 = $58 & 63488;
   $60 = $53 << 3;
   $61 = $60 & 2016;
   $62 = $61 | $59;
   $63 = $57 >>> 3;
   $64 = $62 | $63;
   $65 = ((($$01263$i)) + 2|0);
   $66 = HEAP8[$43>>0]|0;
   $67 = $66&255;
   $68 = (($34) + ($67))|0;
   $69 = (($7) + ($68)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = (($40) + ($67))|0;
   $73 = (($7) + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = (($42) + ($67))|0;
   $77 = (($7) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $71 << 8;
   $81 = $80 & 63488;
   $82 = $75 << 3;
   $83 = $82 & 2016;
   $84 = $83 | $81;
   $85 = $79 >>> 3;
   $86 = $84 | $85;
   $87 = $64&65535;
   HEAP16[$$01272$i>>1] = $87;
   $88 = $86&65535;
   $89 = ((($$01272$i)) + 2|0);
   HEAP16[$89>>1] = $88;
   $90 = ((($$01272$i)) + 4|0);
   $91 = (($$06$i) + -1)|0;
   $92 = ($91|0)==(0);
   if ($92) {
    break;
   } else {
    $$01245$i = $30;$$01254$i = $27;$$01263$i = $65;$$01272$i = $90;$$06$i = $91;
   }
  }
  $scevgep$i = (($19) + ($24)|0);
  $93 = $24 << 2;
  $scevgep13$i = (($21) + ($24)|0);
  $scevgep14$i = (($17) + ($26)|0);
  $scevgep15$i = (($$val4) + ($93)|0);
  $$0124$lcssa$i = $scevgep13$i;$$0125$lcssa$i = $scevgep$i;$$0126$lcssa$i = $scevgep14$i;$$0127$lcssa$i = $scevgep15$i;
 }
 $94 = $23 & 1;
 $95 = ($94|0)==(0);
 if ($95) {
  return;
 }
 $96 = HEAP8[$$0125$lcssa$i>>0]|0;
 $97 = $96&255;
 $98 = HEAP8[$$0124$lcssa$i>>0]|0;
 $99 = $98&255;
 $100 = (($9) + ($99<<2)|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($15) + ($97<<2)|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($13) + ($99<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + ($103))|0;
 $107 = $106 >> 16;
 $108 = (($11) + ($97<<2)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = HEAP8[$$0126$lcssa$i>>0]|0;
 $111 = $110&255;
 $112 = (($101) + ($111))|0;
 $113 = (($7) + ($112)|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = (($107) + ($111))|0;
 $117 = (($7) + ($116)|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118&255;
 $120 = (($109) + ($111))|0;
 $121 = (($7) + ($120)|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = $115 << 8;
 $125 = $124 & 63488;
 $126 = $119 << 3;
 $127 = $126 & 2016;
 $128 = $127 | $125;
 $129 = $123 >>> 3;
 $130 = $128 | $129;
 $131 = $130&65535;
 HEAP16[$$0127$lcssa$i>>1] = $131;
 return;
}
function _jinit_phuff_decoder($0) {
 $0 = $0|0;
 var $$02632 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $scevgep34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,64)|0);
 $5 = ((($0)) + 444|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 60;
 $6 = ((($4)) + 44|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 8;
 $12 = (FUNCTION_TABLE_iiii[$8 & 255]($0,1,$11)|0);
 $13 = ((($0)) + 160|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$9>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $$02632 = 0;
 } else {
  return;
 }
 while(1) {
  $16 = $$02632 << 8;
  $scevgep34 = (($12) + ($16)|0);
  _memset(($scevgep34|0),-1,256)|0;
  $17 = (($$02632) + 1)|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $$02632 = $17;
  } else {
   break;
  }
 }
 return;
}
function _start_pass_phuff_decoder($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$ = 0, $$0$sink = 0, $$0111120 = 0, $$0111120$us = 0, $$0113116 = 0, $$0113116$us = 0, $$1$ = 0, $$1112115 = 0, $$1112115$us = 0, $$114 = 0, $$114$us = 0, $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre126 = 0, $$pre127 = 0, $$pre128 = 0, $$sink = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $decode_mcu_AC_first$sink = 0, $decode_mcu_AC_refine$sink = 0, $decode_mcu_AC_refine$sink$sink = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 444|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($0)) + 404|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = ($7|0)==(0);
  $$0$sink = 0;$$sink = $8;
 } else {
  $9 = ($4|0)>($7|0);
  $10 = ($7|0)>(63);
  $or$cond = $9 | $10;
  $$0 = $or$cond&1;
  $11 = ((($0)) + 328|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(1);
  $$0$sink = $$0;$$sink = $13;
 }
 $$0$ = $$sink ? $$0$sink : 1;
 $14 = ((($0)) + 408|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$phi$trans$insert = ((($0)) + 412|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$2 = $$0$;$$pre$phiZ2D = $$phi$trans$insert;$21 = $$pre;
 } else {
  $17 = (($15) + -1)|0;
  $18 = ((($0)) + 412|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==($17|0);
  $$1$ = $20 ? $$0$ : 1;
  $$2 = $$1$;$$pre$phiZ2D = $18;$21 = $19;
 }
 $22 = ($21|0)<(14);
 $23 = ($$2|0)==(0);
 $24 = $23 & $22;
 if (!($24)) {
  $25 = HEAP32[$0>>2]|0;
  $26 = ((($25)) + 20|0);
  HEAP32[$26>>2] = 16;
  $27 = ((($25)) + 24|0);
  HEAP32[$27>>2] = $4;
  $28 = HEAP32[$6>>2]|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = ((($29)) + 28|0);
  HEAP32[$30>>2] = $28;
  $31 = HEAP32[$14>>2]|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = ((($32)) + 32|0);
  HEAP32[$33>>2] = $31;
  $34 = HEAP32[$$pre$phiZ2D>>2]|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = ((($35)) + 36|0);
  HEAP32[$36>>2] = $34;
  $37 = HEAP32[$0>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 255]($0);
 }
 $39 = ((($0)) + 328|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)>(0);
 if ($41) {
  $42 = ((($0)) + 160|0);
  if ($5) {
   $$pre126 = HEAP32[$6>>2]|0;
   $$0111120$us = 0;$141 = $40;$50 = $$pre126;
   while(1) {
    $43 = (((($0)) + 332|0) + ($$0111120$us<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$42>>2]|0;
    $48 = HEAP32[$3>>2]|0;
    $49 = ($48|0)>($50|0);
    if ($49) {
     $142 = $50;$70 = $141;
    } else {
     $$0113116$us = $48;
     while(1) {
      $51 = ((($47) + ($46<<8)|0) + ($$0113116$us<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)>(0);
      $$114$us = $53 ? $52 : 0;
      $54 = HEAP32[$14>>2]|0;
      $55 = ($54|0)==($$114$us|0);
      if (!($55)) {
       $56 = HEAP32[$0>>2]|0;
       $57 = ((($56)) + 20|0);
       HEAP32[$57>>2] = 115;
       $58 = ((($56)) + 24|0);
       HEAP32[$58>>2] = $46;
       $59 = HEAP32[$0>>2]|0;
       $60 = ((($59)) + 28|0);
       HEAP32[$60>>2] = $$0113116$us;
       $61 = HEAP32[$0>>2]|0;
       $62 = ((($61)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       FUNCTION_TABLE_vii[$63 & 255]($0,-1);
      }
      $64 = HEAP32[$$pre$phiZ2D>>2]|0;
      HEAP32[$51>>2] = $64;
      $65 = (($$0113116$us) + 1)|0;
      $66 = HEAP32[$6>>2]|0;
      $67 = ($$0113116$us|0)<($66|0);
      if ($67) {
       $$0113116$us = $65;
      } else {
       break;
      }
     }
     $$pre127 = HEAP32[$39>>2]|0;
     $142 = $66;$70 = $$pre127;
    }
    $68 = (($$0111120$us) + 1)|0;
    $69 = ($68|0)<($70|0);
    if ($69) {
     $$0111120$us = $68;$141 = $70;$50 = $142;
    } else {
     $113 = $70;
     break;
    }
   }
  } else {
   $$0111120 = 0;
   while(1) {
    $71 = (((($0)) + 332|0) + ($$0111120<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$42>>2]|0;
    $76 = (($75) + ($74<<8)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)<(0);
    if ($78) {
     $79 = HEAP32[$0>>2]|0;
     $80 = ((($79)) + 20|0);
     HEAP32[$80>>2] = 115;
     $81 = ((($79)) + 24|0);
     HEAP32[$81>>2] = $74;
     $82 = HEAP32[$0>>2]|0;
     $83 = ((($82)) + 28|0);
     HEAP32[$83>>2] = 0;
     $84 = HEAP32[$0>>2]|0;
     $85 = ((($84)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     FUNCTION_TABLE_vii[$86 & 255]($0,-1);
    }
    $87 = HEAP32[$3>>2]|0;
    $88 = HEAP32[$6>>2]|0;
    $89 = ($87|0)>($88|0);
    if (!($89)) {
     $$0113116 = $87;
     while(1) {
      $90 = ((($75) + ($74<<8)|0) + ($$0113116<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)>(0);
      $$114 = $92 ? $91 : 0;
      $93 = HEAP32[$14>>2]|0;
      $94 = ($93|0)==($$114|0);
      if (!($94)) {
       $95 = HEAP32[$0>>2]|0;
       $96 = ((($95)) + 20|0);
       HEAP32[$96>>2] = 115;
       $97 = ((($95)) + 24|0);
       HEAP32[$97>>2] = $74;
       $98 = HEAP32[$0>>2]|0;
       $99 = ((($98)) + 28|0);
       HEAP32[$99>>2] = $$0113116;
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       FUNCTION_TABLE_vii[$102 & 255]($0,-1);
      }
      $103 = HEAP32[$$pre$phiZ2D>>2]|0;
      HEAP32[$90>>2] = $103;
      $104 = (($$0113116) + 1)|0;
      $105 = HEAP32[$6>>2]|0;
      $106 = ($$0113116|0)<($105|0);
      if ($106) {
       $$0113116 = $104;
      } else {
       break;
      }
     }
    }
    $107 = (($$0111120) + 1)|0;
    $108 = HEAP32[$39>>2]|0;
    $109 = ($107|0)<($108|0);
    if ($109) {
     $$0111120 = $107;
    } else {
     $113 = $108;
     break;
    }
   }
  }
 } else {
  $113 = $40;
 }
 $110 = HEAP32[$14>>2]|0;
 $111 = ($110|0)==(0);
 $112 = ((($2)) + 4|0);
 $decode_mcu_AC_refine$sink = $5 ? 62 : 61;
 $decode_mcu_AC_first$sink = $5 ? 64 : 63;
 $decode_mcu_AC_refine$sink$sink = $111 ? $decode_mcu_AC_first$sink : $decode_mcu_AC_refine$sink;
 HEAP32[$112>>2] = $decode_mcu_AC_refine$sink$sink;
 $114 = ($113|0)>(0);
 if (!($114)) {
  $137 = ((($2)) + 8|0);
  $138 = ((($0)) + 276|0);
  ;HEAP32[$137>>2]=0|0;HEAP32[$137+4>>2]=0|0;HEAP32[$137+8>>2]=0|0;HEAP32[$137+12>>2]=0|0;
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($2)) + 40|0);
  HEAP32[$140>>2] = $139;
  return;
 }
 $115 = ((($2)) + 60|0);
 if ($5) {
  $$1112115$us = 0;$116 = $110;
 } else {
  $$1112115 = 0;
  while(1) {
   $127 = (((($0)) + 332|0) + ($$1112115<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ((($128)) + 24|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (((($2)) + 44|0) + ($130<<2)|0);
   _jpeg_make_d_derived_tbl($0,0,$130,$131);
   $132 = HEAP32[$131>>2]|0;
   HEAP32[$115>>2] = $132;
   $133 = (((($2)) + 24|0) + ($$1112115<<2)|0);
   HEAP32[$133>>2] = 0;
   $134 = (($$1112115) + 1)|0;
   $135 = HEAP32[$39>>2]|0;
   $136 = ($134|0)<($135|0);
   if ($136) {
    $$1112115 = $134;
   } else {
    break;
   }
  }
  $137 = ((($2)) + 8|0);
  $138 = ((($0)) + 276|0);
  ;HEAP32[$137>>2]=0|0;HEAP32[$137+4>>2]=0|0;HEAP32[$137+8>>2]=0|0;HEAP32[$137+12>>2]=0|0;
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($2)) + 40|0);
  HEAP32[$140>>2] = $139;
  return;
 }
 while(1) {
  $117 = ($116|0)==(0);
  if ($117) {
   $118 = (((($0)) + 332|0) + ($$1112115$us<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (((($2)) + 44|0) + ($121<<2)|0);
   _jpeg_make_d_derived_tbl($0,1,$121,$122);
  }
  $123 = (((($2)) + 24|0) + ($$1112115$us<<2)|0);
  HEAP32[$123>>2] = 0;
  $124 = (($$1112115$us) + 1)|0;
  $125 = HEAP32[$39>>2]|0;
  $126 = ($124|0)<($125|0);
  if (!($126)) {
   break;
  }
  $$pre128 = HEAP32[$14>>2]|0;
  $$1112115$us = $124;$116 = $$pre128;
 }
 $137 = ((($2)) + 8|0);
 $138 = ((($0)) + 276|0);
 ;HEAP32[$137>>2]=0|0;HEAP32[$137+4>>2]=0|0;HEAP32[$137+8>>2]=0|0;HEAP32[$137+12>>2]=0|0;
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($2)) + 40|0);
 HEAP32[$140>>2] = $139;
 return;
}
function _decode_mcu_DC_refine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$019$i = 0, $$040$lcssa = 0, $$04047 = 0, $$042 = 0, $$04346 = 0, $$048 = 0, $$1 = 0, $$141 = 0, $$in = 0, $$pre = 0, $$pre50 = 0, $$pre51 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 444|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 412|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = 1 << $6;
 $8 = ((($0)) + 276|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($4)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = ((($4)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15|0) / 8)&-1;
   $17 = ((($0)) + 440|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($16))|0;
   HEAP32[$19>>2] = $21;
   HEAP32[$14>>2] = 0;
   $22 = ((($18)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 127]($0)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $$042 = 0;
    STACKTOP = sp;return ($$042|0);
   }
   $26 = ((($0)) + 328|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    $$019$i = 0;
    while(1) {
     $29 = (((($4)) + 24|0) + ($$019$i<<2)|0);
     HEAP32[$29>>2] = 0;
     $30 = (($$019$i) + 1)|0;
     $31 = HEAP32[$26>>2]|0;
     $32 = ($30|0)<($31|0);
     if ($32) {
      $$019$i = $30;
     } else {
      break;
     }
    }
   }
   $33 = ((($4)) + 20|0);
   HEAP32[$33>>2] = 0;
   $34 = HEAP32[$8>>2]|0;
   HEAP32[$11>>2] = $34;
   $35 = ((($0)) + 416|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = ((($4)) + 8|0);
    HEAP32[$38>>2] = 0;
   }
  }
 }
 $39 = ((($2)) + 16|0);
 HEAP32[$39>>2] = $0;
 $40 = ((($0)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$2>>2] = $42;
 $43 = ((($41)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($2)) + 4|0);
 HEAP32[$45>>2] = $44;
 $46 = ((($4)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($4)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($0)) + 356|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)>(0);
 do {
  if ($52) {
   $53 = ((($2)) + 8|0);
   $54 = ((($2)) + 12|0);
   $$04047 = $47;$$04346 = 0;$$048 = $49;
   while(1) {
    $55 = (($1) + ($$04346<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($$048|0)<(1);
    if ($57) {
     $58 = (_jpeg_fill_bit_buffer($2,$$04047,$$048,1)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $$042 = 0;
      label = 18;
      break;
     }
     $60 = HEAP32[$53>>2]|0;
     $61 = HEAP32[$54>>2]|0;
     $$1 = $61;$$141 = $60;
    } else {
     $$1 = $$048;$$141 = $$04047;
    }
    $62 = (($$1) + -1)|0;
    $63 = 1 << $62;
    $64 = $63 & $$141;
    $65 = ($64|0)==(0);
    if (!($65)) {
     $66 = HEAP16[$56>>1]|0;
     $67 = $66&65535;
     $68 = $7 | $67;
     $69 = $68&65535;
     HEAP16[$56>>1] = $69;
    }
    $70 = (($$04346) + 1)|0;
    $71 = HEAP32[$50>>2]|0;
    $72 = ($70|0)<($71|0);
    if ($72) {
     $$04047 = $$141;$$04346 = $70;$$048 = $62;
    } else {
     label = 16;
     break;
    }
   }
   if ((label|0) == 16) {
    $$pre = HEAP32[$2>>2]|0;
    $$pre50 = HEAP32[$40>>2]|0;
    $$pre51 = HEAP32[$45>>2]|0;
    $$0$lcssa = $62;$$040$lcssa = $$141;$$in = $$pre50;$73 = $$pre;$75 = $$pre51;
    break;
   }
   else if ((label|0) == 18) {
    STACKTOP = sp;return ($$042|0);
   }
  } else {
   $$0$lcssa = $49;$$040$lcssa = $47;$$in = $41;$73 = $42;$75 = $44;
  }
 } while(0);
 HEAP32[$$in>>2] = $73;
 $74 = ((($$in)) + 4|0);
 HEAP32[$74>>2] = $75;
 HEAP32[$46>>2] = $$040$lcssa;
 HEAP32[$48>>2] = $$0$lcssa;
 $76 = ((($4)) + 40|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + -1)|0;
 HEAP32[$76>>2] = $78;
 $$042 = 1;
 STACKTOP = sp;return ($$042|0);
}
function _decode_mcu_AC_refine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0169 = 0, $$0171241 = 0, $$0175240 = 0, $$0179239 = 0, $$0184238 = 0, $$019$i = 0, $$0200 = 0, $$0200$ph = 0, $$0202207$ph = 0, $$10 = 0, $$10194 = 0, $$1172 = 0, $$1176 = 0, $$1180 = 0, $$1185 = 0, $$12$lcssa = 0, $$12$ph = 0, $$1201 = 0;
 var $$1203 = 0, $$12196$lcssa = 0, $$12196$ph = 0, $$12196233 = 0, $$12234 = 0, $$13 = 0, $$13197 = 0, $$14 = 0, $$14198 = 0, $$15 = 0, $$15199 = 0, $$2$ph = 0, $$2173208$ph = 0, $$2177 = 0, $$2181 = 0, $$2186 = 0, $$3$ph = 0, $$3174$ph = 0, $$3174232 = 0, $$4$ph = 0;
 var $$4183$ph = 0, $$4188$ph = 0, $$4235 = 0, $$5 = 0, $$5189 = 0, $$6 = 0, $$6190 = 0, $$7 = 0, $$7$ph = 0, $$7191 = 0, $$7191$ph = 0, $$8 = 0, $$8192 = 0, $$9 = 0, $$9193 = 0, $$sink3 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $2 = sp + 256|0;
 $3 = sp;
 $4 = ((($0)) + 444|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 404|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 412|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = 1 << $9;
 $11 = -1 << $9;
 $12 = ((($0)) + 276|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = ((($5)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = ((($5)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19|0) / 8)&-1;
   $21 = ((($0)) + 440|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($20))|0;
   HEAP32[$23>>2] = $25;
   HEAP32[$18>>2] = 0;
   $26 = ((($22)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_ii[$27 & 127]($0)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $30 = ((($0)) + 328|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)>(0);
   if ($32) {
    $$019$i = 0;
    while(1) {
     $33 = (((($5)) + 24|0) + ($$019$i<<2)|0);
     HEAP32[$33>>2] = 0;
     $34 = (($$019$i) + 1)|0;
     $35 = HEAP32[$30>>2]|0;
     $36 = ($34|0)<($35|0);
     if ($36) {
      $$019$i = $34;
     } else {
      break;
     }
    }
   }
   $37 = ((($5)) + 20|0);
   HEAP32[$37>>2] = 0;
   $38 = HEAP32[$12>>2]|0;
   HEAP32[$15>>2] = $38;
   $39 = ((($0)) + 416|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($5)) + 8|0);
    HEAP32[$42>>2] = 0;
   }
  }
 }
 $43 = ((($5)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 do {
  if ($45) {
   $46 = ((($2)) + 16|0);
   HEAP32[$46>>2] = $0;
   $47 = ((($0)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$2>>2] = $49;
   $50 = ((($48)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($2)) + 4|0);
   HEAP32[$52>>2] = $51;
   $53 = ((($5)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($5)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($5)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$1>>2]|0;
   $60 = ((($5)) + 60|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($0)) + 400|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($58|0)==(0);
   L15: do {
    if ($64) {
     $65 = ($63|0)>($7|0);
     if ($65) {
      $$1203 = 0;$$15 = $56;$$15199 = $54;
      label = 56;
     } else {
      $66 = ((($2)) + 8|0);
      $67 = ((($2)) + 12|0);
      $$0171241 = 0;$$0175240 = $63;$$0179239 = $56;$$0184238 = $54;
      L18: while(1) {
       $68 = ($$0179239|0)<(8);
       if ($68) {
        $69 = (_jpeg_fill_bit_buffer($2,$$0184238,$$0179239,0)|0);
        $70 = ($69|0)==(0);
        if ($70) {
         $$3174$ph = $$0171241;
         break L15;
        }
        $72 = HEAP32[$66>>2]|0;
        $73 = HEAP32[$67>>2]|0;
        $74 = ($73|0)<(8);
        if ($74) {
         $$0169 = 1;$$2181 = $73;$$2186 = $72;
         label = 18;
        } else {
         $$1180 = $73;$$1185 = $72;
         label = 16;
        }
       } else {
        $$1180 = $$0179239;$$1185 = $$0184238;
        label = 16;
       }
       if ((label|0) == 16) {
        label = 0;
        $75 = (($$1180) + -8)|0;
        $76 = $$1185 >>> $75;
        $77 = $76 & 255;
        $78 = (((($61)) + 148|0) + ($77<<2)|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = $79 >> 8;
        $81 = ($80|0)<(9);
        if ($81) {
         $82 = (($$1180) - ($80))|0;
         $83 = $79 & 255;
         $$2$ph = $83;$$4183$ph = $82;$$4188$ph = $$1185;
        } else {
         $$0169 = $80;$$2181 = $$1180;$$2186 = $$1185;
         label = 18;
        }
       }
       if ((label|0) == 18) {
        label = 0;
        $84 = (_jpeg_huff_decode($2,$$2186,$$2181,$61,$$0169)|0);
        $85 = ($84|0)<(0);
        if ($85) {
         $$3174$ph = $$0171241;
         break L15;
        }
        $86 = HEAP32[$66>>2]|0;
        $87 = HEAP32[$67>>2]|0;
        $$2$ph = $84;$$4183$ph = $87;$$4188$ph = $86;
       }
       $88 = $$2$ph >> 4;
       $trunc = $$2$ph&255;
       $trunc$clear = $trunc & 15;
       switch ($trunc$clear<<24>>24) {
       case 0:  {
        $102 = ($88|0)==(15);
        if ($102) {
         $$0200$ph = 15;$$3$ph = 0;$$7$ph = $$4183$ph;$$7191$ph = $$4188$ph;
        } else {
         break L18;
        }
        break;
       }
       case 1:  {
        label = 22;
        break;
       }
       default: {
        $89 = HEAP32[$0>>2]|0;
        $90 = ((($89)) + 20|0);
        HEAP32[$90>>2] = 118;
        $91 = ((($89)) + 4|0);
        $92 = HEAP32[$91>>2]|0;
        FUNCTION_TABLE_vii[$92 & 255]($0,-1);
        label = 22;
       }
       }
       if ((label|0) == 22) {
        label = 0;
        $93 = ($$4183$ph|0)<(1);
        if ($93) {
         $94 = (_jpeg_fill_bit_buffer($2,$$4188$ph,$$4183$ph,1)|0);
         $95 = ($94|0)==(0);
         if ($95) {
          $$3174$ph = $$0171241;
          break L15;
         }
         $96 = HEAP32[$66>>2]|0;
         $97 = HEAP32[$67>>2]|0;
         $$5 = $97;$$5189 = $96;
        } else {
         $$5 = $$4183$ph;$$5189 = $$4188$ph;
        }
        $98 = (($$5) + -1)|0;
        $99 = 1 << $98;
        $100 = $99 & $$5189;
        $101 = ($100|0)==(0);
        $$ = $101 ? $11 : $10;
        $$0200$ph = $88;$$3$ph = $$;$$7$ph = $98;$$7191$ph = $$5189;
       }
       $$0200 = $$0200$ph;$$1176 = $$0175240;$$7 = $$7$ph;$$7191 = $$7191$ph;
       while(1) {
        $110 = (996 + ($$1176<<2)|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = (($59) + ($111<<1)|0);
        $113 = HEAP16[$112>>1]|0;
        $114 = ($113<<16>>16)==(0);
        if ($114) {
         $131 = (($$0200) + -1)|0;
         $132 = ($$0200|0)<(1);
         if ($132) {
          $$10 = $$7;$$10194 = $$7191;$$2177 = $$1176;
          break;
         } else {
          $$1201 = $131;$$9 = $$7;$$9193 = $$7191;
         }
        } else {
         $115 = ($$7|0)<(1);
         if ($115) {
          $116 = (_jpeg_fill_bit_buffer($2,$$7191,$$7,1)|0);
          $117 = ($116|0)==(0);
          if ($117) {
           $$3174$ph = $$0171241;
           break L15;
          }
          $118 = HEAP32[$66>>2]|0;
          $119 = HEAP32[$67>>2]|0;
          $$8 = $119;$$8192 = $118;
         } else {
          $$8 = $$7;$$8192 = $$7191;
         }
         $120 = (($$8) + -1)|0;
         $121 = 1 << $120;
         $122 = $121 & $$8192;
         $123 = ($122|0)==(0);
         if ($123) {
          $$1201 = $$0200;$$9 = $120;$$9193 = $$8192;
         } else {
          $124 = HEAP16[$112>>1]|0;
          $125 = $124 << 16 >> 16;
          $126 = $10 & $125;
          $127 = ($126|0)==(0);
          if ($127) {
           $128 = ($124<<16>>16)>(-1);
           $$sink3 = $128 ? $10 : $11;
           $129 = (($$sink3) + ($125))|0;
           $130 = $129&65535;
           HEAP16[$112>>1] = $130;
           $$1201 = $$0200;$$9 = $120;$$9193 = $$8192;
          } else {
           $$1201 = $$0200;$$9 = $120;$$9193 = $$8192;
          }
         }
        }
        $133 = (($$1176) + 1)|0;
        $134 = ($$1176|0)<($7|0);
        if ($134) {
         $$0200 = $$1201;$$1176 = $133;$$7 = $$9;$$7191 = $$9193;
        } else {
         $$10 = $$9;$$10194 = $$9193;$$2177 = $133;
         break;
        }
       }
       $135 = ($$3$ph|0)==(0);
       if ($135) {
        $$1172 = $$0171241;
       } else {
        $136 = (996 + ($$2177<<2)|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = $$3$ph&65535;
        $139 = (($59) + ($137<<1)|0);
        HEAP16[$139>>1] = $138;
        $140 = (($$0171241) + 1)|0;
        $141 = (($3) + ($$0171241<<2)|0);
        HEAP32[$141>>2] = $137;
        $$1172 = $140;
       }
       $142 = (($$2177) + 1)|0;
       $143 = ($$2177|0)<($7|0);
       if ($143) {
        $$0171241 = $$1172;$$0175240 = $142;$$0179239 = $$10;$$0184238 = $$10194;
       } else {
        $$1203 = 0;$$15 = $$10;$$15199 = $$10194;
        label = 56;
        break L15;
       }
      }
      $103 = 1 << $88;
      $104 = ($88|0)==(0);
      if ($104) {
       $$0202207$ph = $103;$$12$ph = $$4183$ph;$$12196$ph = $$4188$ph;$$2173208$ph = $$0171241;$$4$ph = $$0175240;
       label = 45;
      } else {
       $105 = ($$4183$ph|0)<($88|0);
       if ($105) {
        $106 = (_jpeg_fill_bit_buffer($2,$$4188$ph,$$4183$ph,$88)|0);
        $107 = ($106|0)==(0);
        if ($107) {
         $$3174$ph = $$0171241;
         break;
        }
        $108 = HEAP32[$66>>2]|0;
        $109 = HEAP32[$67>>2]|0;
        $$6 = $109;$$6190 = $108;
       } else {
        $$6 = $$4183$ph;$$6190 = $$4188$ph;
       }
       $144 = (($$6) - ($88))|0;
       $145 = $$6190 >>> $144;
       $146 = (($103) + -1)|0;
       $147 = $145 & $146;
       $148 = (($147) + ($103))|0;
       $149 = ($148|0)==(0);
       if ($149) {
        $$1203 = 0;$$15 = $144;$$15199 = $$6190;
        label = 56;
       } else {
        $$0202207$ph = $148;$$12$ph = $144;$$12196$ph = $$6190;$$2173208$ph = $$0171241;$$4$ph = $$0175240;
        label = 45;
       }
      }
     }
    } else {
     $$0202207$ph = $58;$$12$ph = $56;$$12196$ph = $54;$$2173208$ph = 0;$$4$ph = $63;
     label = 45;
    }
   } while(0);
   L62: do {
    if ((label|0) == 45) {
     $150 = ($$4$ph|0)>($7|0);
     if ($150) {
      $$12$lcssa = $$12$ph;$$12196$lcssa = $$12196$ph;
     } else {
      $151 = ((($2)) + 8|0);
      $152 = ((($2)) + 12|0);
      $$12196233 = $$12196$ph;$$12234 = $$12$ph;$$4235 = $$4$ph;
      while(1) {
       $153 = (996 + ($$4235<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($59) + ($154<<1)|0);
       $156 = HEAP16[$155>>1]|0;
       $157 = ($156<<16>>16)==(0);
       if ($157) {
        $$14 = $$12234;$$14198 = $$12196233;
       } else {
        $158 = ($$12234|0)<(1);
        if ($158) {
         $159 = (_jpeg_fill_bit_buffer($2,$$12196233,$$12234,1)|0);
         $160 = ($159|0)==(0);
         if ($160) {
          $$3174$ph = $$2173208$ph;
          break L62;
         }
         $161 = HEAP32[$151>>2]|0;
         $162 = HEAP32[$152>>2]|0;
         $$13 = $162;$$13197 = $161;
        } else {
         $$13 = $$12234;$$13197 = $$12196233;
        }
        $163 = (($$13) + -1)|0;
        $164 = 1 << $163;
        $165 = $164 & $$13197;
        $166 = ($165|0)==(0);
        if ($166) {
         $$14 = $163;$$14198 = $$13197;
        } else {
         $167 = HEAP16[$155>>1]|0;
         $168 = $167 << 16 >> 16;
         $169 = $10 & $168;
         $170 = ($169|0)==(0);
         if ($170) {
          $171 = ($167<<16>>16)>(-1);
          $$sink9 = $171 ? $10 : $11;
          $172 = (($$sink9) + ($168))|0;
          $173 = $172&65535;
          HEAP16[$155>>1] = $173;
          $$14 = $163;$$14198 = $$13197;
         } else {
          $$14 = $163;$$14198 = $$13197;
         }
        }
       }
       $174 = (($$4235) + 1)|0;
       $175 = ($$4235|0)<($7|0);
       if ($175) {
        $$12196233 = $$14198;$$12234 = $$14;$$4235 = $174;
       } else {
        $$12$lcssa = $$14;$$12196$lcssa = $$14198;
        break;
       }
      }
     }
     $176 = (($$0202207$ph) + -1)|0;
     $$1203 = $176;$$15 = $$12$lcssa;$$15199 = $$12196$lcssa;
     label = 56;
    }
   } while(0);
   if ((label|0) == 56) {
    $177 = HEAP32[$2>>2]|0;
    $178 = HEAP32[$47>>2]|0;
    HEAP32[$178>>2] = $177;
    $179 = HEAP32[$52>>2]|0;
    $180 = ((($178)) + 4|0);
    HEAP32[$180>>2] = $179;
    HEAP32[$53>>2] = $$15199;
    HEAP32[$55>>2] = $$15;
    HEAP32[$57>>2] = $$1203;
    break;
   }
   $71 = ($$3174$ph|0)>(0);
   if ($71) {
    $$3174232 = $$3174$ph;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $184 = (($$3174232) + -1)|0;
    $185 = (($3) + ($184<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($59) + ($186<<1)|0);
    HEAP16[$187>>1] = 0;
    $188 = ($$3174232|0)>(1);
    if ($188) {
     $$3174232 = $184;
    } else {
     $$0 = 0;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $181 = ((($5)) + 40|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + -1)|0;
 HEAP32[$181>>2] = $183;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _decode_mcu_DC_first($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100$lcssa = 0, $$0100117 = 0, $$0104$lcssa = 0, $$0104116 = 0, $$019$i = 0, $$094 = 0, $$099118 = 0, $$1101 = 0, $$1105 = 0, $$2 = 0, $$2102 = 0, $$2106 = 0, $$298$ph = 0, $$3 = 0, $$4$ph = 0, $$4108$ph = 0, $$5 = 0, $$5109 = 0, $$6 = 0;
 var $$6110 = 0, $$in = 0, $$pre = 0, $$pre120 = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 444|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 412|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 276|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($5)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = ((($5)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15|0) / 8)&-1;
   $17 = ((($0)) + 440|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($16))|0;
   HEAP32[$19>>2] = $21;
   HEAP32[$14>>2] = 0;
   $22 = ((($18)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 127]($0)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
   $26 = ((($0)) + 328|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    $$019$i = 0;
    while(1) {
     $29 = (((($5)) + 24|0) + ($$019$i<<2)|0);
     HEAP32[$29>>2] = 0;
     $30 = (($$019$i) + 1)|0;
     $31 = HEAP32[$26>>2]|0;
     $32 = ($30|0)<($31|0);
     if ($32) {
      $$019$i = $30;
     } else {
      break;
     }
    }
   }
   $33 = ((($5)) + 20|0);
   HEAP32[$33>>2] = 0;
   $34 = HEAP32[$8>>2]|0;
   HEAP32[$11>>2] = $34;
   $35 = ((($0)) + 416|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = ((($5)) + 8|0);
    HEAP32[$38>>2] = 0;
   }
  }
 }
 $39 = ((($5)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = ((($2)) + 16|0);
  HEAP32[$42>>2] = $0;
  $43 = ((($0)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$2>>2] = $45;
  $46 = ((($44)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($2)) + 4|0);
  HEAP32[$48>>2] = $47;
  $49 = ((($5)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($5)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($5)) + 20|0);
  ;HEAP32[$3>>2]=HEAP32[$53>>2]|0;HEAP32[$3+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$53+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$53+16>>2]|0;
  $54 = ((($0)) + 356|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)>(0);
  do {
   if ($56) {
    $57 = ((($2)) + 8|0);
    $58 = ((($2)) + 12|0);
    $$0100117 = $52;$$0104116 = $50;$$099118 = 0;
    while(1) {
     $59 = (($1) + ($$099118<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (((($0)) + 360|0) + ($$099118<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (((($0)) + 332|0) + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 20|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (((($5)) + 44|0) + ($66<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($$0100117|0)<(8);
     if ($69) {
      $70 = (_jpeg_fill_bit_buffer($2,$$0104116,$$0100117,0)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       $$2 = 0;
       label = 27;
       break;
      }
      $72 = HEAP32[$57>>2]|0;
      $73 = HEAP32[$58>>2]|0;
      $74 = ($73|0)<(8);
      if ($74) {
       $$094 = 1;$$2102 = $73;$$2106 = $72;
       label = 16;
      } else {
       $$1101 = $73;$$1105 = $72;
       label = 14;
      }
     } else {
      $$1101 = $$0100117;$$1105 = $$0104116;
      label = 14;
     }
     if ((label|0) == 14) {
      label = 0;
      $75 = (($$1101) + -8)|0;
      $76 = $$1105 >>> $75;
      $77 = $76 & 255;
      $78 = (((($68)) + 148|0) + ($77<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $79 >> 8;
      $81 = ($80|0)<(9);
      if ($81) {
       $82 = (($$1101) - ($80))|0;
       $83 = $79 & 255;
       $$298$ph = $83;$$4$ph = $82;$$4108$ph = $$1105;
      } else {
       $$094 = $80;$$2102 = $$1101;$$2106 = $$1105;
       label = 16;
      }
     }
     if ((label|0) == 16) {
      label = 0;
      $84 = (_jpeg_huff_decode($2,$$2106,$$2102,$68,$$094)|0);
      $85 = ($84|0)<(0);
      if ($85) {
       $$2 = 0;
       label = 27;
       break;
      }
      $86 = HEAP32[$57>>2]|0;
      $87 = HEAP32[$58>>2]|0;
      $$298$ph = $84;$$4$ph = $87;$$4108$ph = $86;
     }
     $88 = ($$298$ph|0)==(0);
     if ($88) {
      $$3 = 0;$$6 = $$4$ph;$$6110 = $$4108$ph;
     } else {
      $89 = ($$4$ph|0)<($$298$ph|0);
      if ($89) {
       $90 = (_jpeg_fill_bit_buffer($2,$$4108$ph,$$4$ph,$$298$ph)|0);
       $91 = ($90|0)==(0);
       if ($91) {
        $$2 = 0;
        label = 27;
        break;
       }
       $92 = HEAP32[$57>>2]|0;
       $93 = HEAP32[$58>>2]|0;
       $$5 = $93;$$5109 = $92;
      } else {
       $$5 = $$4$ph;$$5109 = $$4108$ph;
      }
      $94 = (($$5) - ($$298$ph))|0;
      $95 = $$5109 >>> $94;
      $96 = 1 << $$298$ph;
      $97 = (($96) + -1)|0;
      $98 = $95 & $97;
      $99 = (($$298$ph) + -1)|0;
      $100 = 1 << $99;
      $101 = ($98|0)<($100|0);
      $102 = -1 << $$298$ph;
      $103 = (($102) + 1)|0;
      $104 = $101 ? $103 : 0;
      $$ = (($104) + ($98))|0;
      $$3 = $$;$$6 = $94;$$6110 = $$5109;
     }
     $105 = (((($3)) + 4|0) + ($62<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($106) + ($$3))|0;
     HEAP32[$105>>2] = $107;
     $108 = $107 << $7;
     $109 = $108&65535;
     HEAP16[$60>>1] = $109;
     $110 = (($$099118) + 1)|0;
     $111 = HEAP32[$54>>2]|0;
     $112 = ($110|0)<($111|0);
     if ($112) {
      $$0100117 = $$6;$$0104116 = $$6110;$$099118 = $110;
     } else {
      label = 24;
      break;
     }
    }
    if ((label|0) == 24) {
     $$pre = HEAP32[$2>>2]|0;
     $$pre120 = HEAP32[$43>>2]|0;
     $$pre121 = HEAP32[$48>>2]|0;
     $$0100$lcssa = $$6;$$0104$lcssa = $$6110;$$in = $$pre120;$113 = $$pre;$115 = $$pre121;
     break;
    }
    else if ((label|0) == 27) {
     STACKTOP = sp;return ($$2|0);
    }
   } else {
    $$0100$lcssa = $52;$$0104$lcssa = $50;$$in = $44;$113 = $45;$115 = $47;
   }
  } while(0);
  HEAP32[$$in>>2] = $113;
  $114 = ((($$in)) + 4|0);
  HEAP32[$114>>2] = $115;
  HEAP32[$49>>2] = $$0104$lcssa;
  HEAP32[$51>>2] = $$0100$lcssa;
  ;HEAP32[$53>>2]=HEAP32[$3>>2]|0;HEAP32[$53+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$53+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$53+16>>2]=HEAP32[$3+16>>2]|0;
 }
 $116 = ((($5)) + 40|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) + -1)|0;
 HEAP32[$116>>2] = $118;
 $$2 = 1;
 STACKTOP = sp;return ($$2|0);
}
function _decode_mcu_AC_first($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0109 = 0, $$0114142 = 0, $$0118141 = 0, $$0128140 = 0, $$0130 = 0, $$019$i = 0, $$1115 = 0, $$1119 = 0, $$1129 = 0, $$1131 = 0, $$2 = 0, $$2113$ph = 0, $$2116 = 0, $$2120 = 0, $$2132 = 0, $$4$ph = 0, $$4122$ph = 0, $$5 = 0, $$5123 = 0;
 var $$6 = 0, $$6124 = 0, $$7 = 0, $$7125 = 0, $$8 = 0, $$8126 = 0, $$9 = 0, $$9127 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 444|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 404|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 412|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 276|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ((($4)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = ((($4)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16|0) / 8)&-1;
   $18 = ((($0)) + 440|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($17))|0;
   HEAP32[$20>>2] = $22;
   HEAP32[$15>>2] = 0;
   $23 = ((($19)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_ii[$24 & 127]($0)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
   $27 = ((($0)) + 328|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)>(0);
   if ($29) {
    $$019$i = 0;
    while(1) {
     $30 = (((($4)) + 24|0) + ($$019$i<<2)|0);
     HEAP32[$30>>2] = 0;
     $31 = (($$019$i) + 1)|0;
     $32 = HEAP32[$27>>2]|0;
     $33 = ($31|0)<($32|0);
     if ($33) {
      $$019$i = $31;
     } else {
      break;
     }
    }
   }
   $34 = ((($4)) + 20|0);
   HEAP32[$34>>2] = 0;
   $35 = HEAP32[$9>>2]|0;
   HEAP32[$12>>2] = $35;
   $36 = ((($0)) + 416|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($4)) + 8|0);
    HEAP32[$39>>2] = 0;
   }
  }
 }
 $40 = ((($4)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0);
 if ($42) {
  $43 = ((($4)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  if ($45) {
   $47 = ((($2)) + 16|0);
   HEAP32[$47>>2] = $0;
   $48 = ((($0)) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   HEAP32[$2>>2] = $50;
   $51 = ((($49)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($2)) + 4|0);
   HEAP32[$53>>2] = $52;
   $54 = ((($4)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($4)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$1>>2]|0;
   $59 = ((($4)) + 60|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($0)) + 400|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)>($6|0);
   L17: do {
    if ($63) {
     $$1131 = 0;$$9 = $57;$$9127 = $55;
    } else {
     $64 = ((($2)) + 8|0);
     $65 = ((($2)) + 12|0);
     $$0114142 = $57;$$0118141 = $55;$$0128140 = $62;
     while(1) {
      $66 = ($$0114142|0)<(8);
      if ($66) {
       $67 = (_jpeg_fill_bit_buffer($2,$$0118141,$$0114142,0)|0);
       $68 = ($67|0)==(0);
       if ($68) {
        $$2 = 0;
        label = 37;
        break;
       }
       $69 = HEAP32[$64>>2]|0;
       $70 = HEAP32[$65>>2]|0;
       $71 = ($70|0)<(8);
       if ($71) {
        $$0109 = 1;$$2116 = $70;$$2120 = $69;
        label = 18;
       } else {
        $$1115 = $70;$$1119 = $69;
        label = 16;
       }
      } else {
       $$1115 = $$0114142;$$1119 = $$0118141;
       label = 16;
      }
      if ((label|0) == 16) {
       label = 0;
       $72 = (($$1115) + -8)|0;
       $73 = $$1119 >>> $72;
       $74 = $73 & 255;
       $75 = (((($60)) + 148|0) + ($74<<2)|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $76 >> 8;
       $78 = ($77|0)<(9);
       if ($78) {
        $79 = (($$1115) - ($77))|0;
        $80 = $76 & 255;
        $$2113$ph = $80;$$4$ph = $79;$$4122$ph = $$1119;
       } else {
        $$0109 = $77;$$2116 = $$1115;$$2120 = $$1119;
        label = 18;
       }
      }
      if ((label|0) == 18) {
       label = 0;
       $81 = (_jpeg_huff_decode($2,$$2120,$$2116,$60,$$0109)|0);
       $82 = ($81|0)<(0);
       if ($82) {
        $$2 = 0;
        label = 37;
        break;
       }
       $83 = HEAP32[$64>>2]|0;
       $84 = HEAP32[$65>>2]|0;
       $$2113$ph = $81;$$4$ph = $84;$$4122$ph = $83;
      }
      $85 = $$2113$ph >> 4;
      $86 = $$2113$ph & 15;
      $87 = ($86|0)==(0);
      if ($87) {
       $110 = ($85|0)==(15);
       if (!($110)) {
        label = 27;
        break;
       }
       $111 = (($$0128140) + 15)|0;
       $$1129 = $111;$$8 = $$4$ph;$$8126 = $$4122$ph;
      } else {
       $88 = (($85) + ($$0128140))|0;
       $89 = ($$4$ph|0)<($86|0);
       if ($89) {
        $90 = (_jpeg_fill_bit_buffer($2,$$4122$ph,$$4$ph,$86)|0);
        $91 = ($90|0)==(0);
        if ($91) {
         $$2 = 0;
         label = 37;
         break;
        }
        $92 = HEAP32[$64>>2]|0;
        $93 = HEAP32[$65>>2]|0;
        $$5 = $93;$$5123 = $92;
       } else {
        $$5 = $$4$ph;$$5123 = $$4122$ph;
       }
       $94 = (($$5) - ($86))|0;
       $95 = $$5123 >>> $94;
       $96 = 1 << $86;
       $97 = (($96) + -1)|0;
       $98 = $95 & $97;
       $99 = (($86) + -1)|0;
       $100 = 1 << $99;
       $101 = ($98|0)<($100|0);
       $102 = -1 << $86;
       $103 = (($102) + 1)|0;
       $104 = $101 ? $103 : 0;
       $$ = (($104) + ($98))|0;
       $105 = $$ << $8;
       $106 = $105&65535;
       $107 = (996 + ($88<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($58) + ($108<<1)|0);
       HEAP16[$109>>1] = $106;
       $$1129 = $88;$$8 = $94;$$8126 = $$5123;
      }
      $125 = (($$1129) + 1)|0;
      $126 = ($$1129|0)<($6|0);
      if ($126) {
       $$0114142 = $$8;$$0118141 = $$8126;$$0128140 = $125;
      } else {
       $$1131 = 0;$$9 = $$8;$$9127 = $$8126;
       break L17;
      }
     }
     if ((label|0) == 27) {
      $112 = 1 << $85;
      $113 = ($85|0)==(0);
      if ($113) {
       $$0130 = $112;$$7 = $$4$ph;$$7125 = $$4122$ph;
      } else {
       $114 = ($$4$ph|0)<($85|0);
       do {
        if ($114) {
         $115 = (_jpeg_fill_bit_buffer($2,$$4122$ph,$$4$ph,$85)|0);
         $116 = ($115|0)==(0);
         if ($116) {
          $$2 = 0;
          STACKTOP = sp;return ($$2|0);
         } else {
          $117 = HEAP32[$64>>2]|0;
          $118 = HEAP32[$65>>2]|0;
          $$6 = $118;$$6124 = $117;
          break;
         }
        } else {
         $$6 = $$4$ph;$$6124 = $$4122$ph;
        }
       } while(0);
       $119 = (($$6) - ($85))|0;
       $120 = $$6124 >>> $119;
       $121 = (($112) + -1)|0;
       $122 = $120 & $121;
       $123 = (($122) + ($112))|0;
       $$0130 = $123;$$7 = $119;$$7125 = $$6124;
      }
      $124 = (($$0130) + -1)|0;
      $$1131 = $124;$$9 = $$7;$$9127 = $$7125;
      break;
     }
     else if ((label|0) == 37) {
      STACKTOP = sp;return ($$2|0);
     }
    }
   } while(0);
   $127 = HEAP32[$2>>2]|0;
   $128 = HEAP32[$48>>2]|0;
   HEAP32[$128>>2] = $127;
   $129 = HEAP32[$53>>2]|0;
   $130 = ((($128)) + 4|0);
   HEAP32[$130>>2] = $129;
   HEAP32[$54>>2] = $$9127;
   HEAP32[$56>>2] = $$9;
   $$2132 = $$1131;
  } else {
   $46 = (($44) + -1)|0;
   $$2132 = $46;
  }
  HEAP32[$43>>2] = $$2132;
 }
 $131 = ((($4)) + 40|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + -1)|0;
 HEAP32[$131>>2] = $133;
 $$2 = 1;
 STACKTOP = sp;return ($$2|0);
}
function _jinit_d_post_controller($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($0,1,28)|0);
 $6 = ((($0)) + 432|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$5>>2] = 65;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ((($0)) + 312|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($5)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ($1|0)==(0);
 $16 = HEAP32[$2>>2]|0;
 if ($15) {
  $29 = ((($16)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 112|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 120|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $36 = (FUNCTION_TABLE_iiiii[$30 & 127]($0,1,$35,$13)|0);
  HEAP32[$8>>2] = $36;
  return;
 } else {
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 112|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 120|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = Math_imul($22, $20)|0;
  $24 = ((($0)) + 116|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_jround_up($25,$13)|0);
  $27 = HEAP32[$14>>2]|0;
  $28 = (FUNCTION_TABLE_iiiiiii[$18 & 127]($0,1,0,$23,$26,$27)|0);
  HEAP32[$7>>2] = $28;
  return;
 }
}
function _start_pass_dpost($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 432|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($1|0) {
  case 0:  {
   $4 = ((($0)) + 84|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $20 = ((($0)) + 452|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($3)) + 4|0);
    HEAP32[$24>>2] = $23;
    break L1;
   }
   $7 = ((($3)) + 4|0);
   HEAP32[$7>>2] = 66;
   $8 = ((($3)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ((($0)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($3)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($3)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiii[$14 & 127]($0,$16,0,$18,1)|0);
    HEAP32[$8>>2] = $19;
   }
   break;
  }
  case 3:  {
   $25 = ((($3)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 20|0);
    HEAP32[$29>>2] = 4;
    $30 = HEAP32[$28>>2]|0;
    FUNCTION_TABLE_vi[$30 & 255]($0);
   }
   $31 = ((($3)) + 4|0);
   HEAP32[$31>>2] = 67;
   break;
  }
  case 2:  {
   $32 = ((($3)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $35 = HEAP32[$0>>2]|0;
    $36 = ((($35)) + 20|0);
    HEAP32[$36>>2] = 4;
    $37 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vi[$37 & 255]($0);
   }
   $38 = ((($3)) + 4|0);
   HEAP32[$38>>2] = 68;
   break;
  }
  default: {
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + 20|0);
   HEAP32[$40>>2] = 4;
   $41 = HEAP32[$39>>2]|0;
   FUNCTION_TABLE_vi[$41 & 255]($0);
  }
  }
 } while(0);
 $42 = ((($3)) + 24|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($3)) + 20|0);
 HEAP32[$43>>2] = 0;
 return;
}
function _post_process_1pass($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = ((($0)) + 432|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($6) - ($10))|0;
 $12 = ((($9)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 $$ = $14 ? $13 : $11;
 HEAP32[$7>>2] = 0;
 $15 = ((($0)) + 452|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($9)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_viiiiiii[$18 & 127]($0,$1,$2,$3,$20,$7,$$);
 $21 = ((($0)) + 460|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$19>>2]|0;
 $26 = HEAP32[$5>>2]|0;
 $27 = (($4) + ($26<<2)|0);
 $28 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$24 & 255]($0,$25,$27,$28);
 $29 = HEAP32[$7>>2]|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($29))|0;
 HEAP32[$5>>2] = $31;
 STACKTOP = sp;return;
}
function _post_process_prepass($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phi40Z2D = 0, $$pre$phiZ2D = 0, $$pre37 = 0, $$pre38 = 0, $$pre39 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 432|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($8)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($8)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiii[$15 & 127]($0,$17,$19,$21,1)|0);
  $23 = ((($8)) + 12|0);
  HEAP32[$23>>2] = $22;
  $$pre = HEAP32[$9>>2]|0;
  $$pre$phi40Z2D = $20;$$pre$phiZ2D = $23;$29 = $22;$32 = $$pre;
 } else {
  $$phi$trans$insert = ((($8)) + 12|0);
  $$pre37 = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre39 = ((($8)) + 16|0);
  $$pre$phi40Z2D = $$pre39;$$pre$phiZ2D = $$phi$trans$insert;$29 = $$pre37;$32 = $10;
 }
 $24 = ((($0)) + 452|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$$pre$phi40Z2D>>2]|0;
 FUNCTION_TABLE_viiiiiii[$27 & 127]($0,$1,$2,$3,$29,$9,$28);
 $30 = HEAP32[$9>>2]|0;
 $31 = ($30>>>0)>($32>>>0);
 if ($31) {
  $33 = (($30) - ($32))|0;
  $34 = ((($0)) + 460|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$$pre$phiZ2D>>2]|0;
  $39 = (($38) + ($32<<2)|0);
  FUNCTION_TABLE_viiii[$37 & 255]($0,$39,0,$33);
  $40 = HEAP32[$5>>2]|0;
  $41 = (($40) + ($33))|0;
  HEAP32[$5>>2] = $41;
  $$pre38 = HEAP32[$9>>2]|0;
  $43 = $$pre38;
 } else {
  $43 = $30;
 }
 $42 = HEAP32[$$pre$phi40Z2D>>2]|0;
 $44 = ($43>>>0)<($42>>>0);
 if ($44) {
  return;
 }
 $45 = ((($8)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($42))|0;
 HEAP32[$45>>2] = $47;
 HEAP32[$9>>2] = 0;
 return;
}
function _post_process_2pass($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 432|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($8)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($8)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiii[$15 & 127]($0,$17,$19,$21,0)|0);
  $23 = ((($8)) + 12|0);
  HEAP32[$23>>2] = $22;
  $$pre = HEAP32[$9>>2]|0;
  $$pre$phi43Z2D = $18;$$pre$phiZ2D = $20;$26 = $$pre;$40 = $22;
 } else {
  $$phi$trans$insert = ((($8)) + 12|0);
  $$pre40 = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre41 = ((($8)) + 16|0);
  $$pre42 = ((($8)) + 20|0);
  $$pre$phi43Z2D = $$pre42;$$pre$phiZ2D = $$pre41;$26 = $10;$40 = $$pre40;
 }
 $24 = HEAP32[$$pre$phiZ2D>>2]|0;
 $25 = (($24) - ($26))|0;
 $27 = HEAP32[$5>>2]|0;
 $28 = (($6) - ($27))|0;
 $29 = ($25>>>0)>($28>>>0);
 $$ = $29 ? $28 : $25;
 $30 = ((($0)) + 116|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$$pre$phi43Z2D>>2]|0;
 $33 = (($31) - ($32))|0;
 $34 = ($$>>>0)>($33>>>0);
 $$1 = $34 ? $33 : $$;
 $35 = ((($0)) + 460|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($40) + ($26<<2)|0);
 $41 = (($4) + ($27<<2)|0);
 FUNCTION_TABLE_viiii[$38 & 255]($0,$39,$41,$$1);
 $42 = HEAP32[$5>>2]|0;
 $43 = (($42) + ($$1))|0;
 HEAP32[$5>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = (($44) + ($$1))|0;
 HEAP32[$9>>2] = $45;
 $46 = HEAP32[$$pre$phiZ2D>>2]|0;
 $47 = ($45>>>0)<($46>>>0);
 if ($47) {
  return;
 }
 $48 = HEAP32[$$pre$phi43Z2D>>2]|0;
 $49 = (($48) + ($46))|0;
 HEAP32[$$pre$phi43Z2D>>2] = $49;
 HEAP32[$9>>2] = 0;
 return;
}
function _jinit_upsampler($0) {
 $0 = $0|0;
 var $$0 = 0, $$0111128 = 0, $$0112125 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h2v1_fancy_upsample$sink = 0, $h2v1_upsample$sink = 0, $h2v2_fancy_upsample$sink = 0;
 var $h2v2_upsample$sink = 0, $or$cond = 0, $or$cond114 = 0, $or$cond115 = 0, $or$cond117 = 0, $or$cond132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 420|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 255]($0,1,160)|0);
  $10 = ((($0)) + 452|0);
  HEAP32[$10>>2] = $9;
  HEAP32[$9>>2] = 69;
  $11 = ((($9)) + 4|0);
  HEAP32[$11>>2] = 70;
  $12 = ((($9)) + 8|0);
  HEAP32[$12>>2] = 0;
  $$0 = $9;
 } else {
  $13 = ((($0)) + 452|0);
  $14 = HEAP32[$13>>2]|0;
  $$0 = $14;
 }
 $15 = ((($0)) + 300|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = HEAP32[$0>>2]|0;
  $19 = ((($18)) + 20|0);
  HEAP32[$19>>2] = 25;
  $20 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vi[$20 & 255]($0);
 }
 $21 = ((($0)) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $72 = 0;
 } else {
  $24 = ((($0)) + 316|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)>(1);
  $72 = $26;
 }
 $27 = ((($0)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 if (!($29)) {
  return;
 }
 $30 = ((($0)) + 216|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 316|0);
 $33 = ((($0)) + 308|0);
 $34 = ((($0)) + 312|0);
 $35 = ((($0)) + 4|0);
 $36 = ((($0)) + 112|0);
 $37 = ((($$0)) + 8|0);
 $$0111128 = 0;$$0112125 = $31;
 while(1) {
  $38 = ((($$0112125)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($$0112125)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = Math_imul($41, $39)|0;
  $43 = HEAP32[$32>>2]|0;
  $44 = (($42|0) / ($43|0))&-1;
  $45 = ((($$0112125)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = Math_imul($46, $41)|0;
  $48 = (($47|0) / ($43|0))&-1;
  $49 = HEAP32[$33>>2]|0;
  $50 = HEAP32[$34>>2]|0;
  $51 = (((($$0)) + 100|0) + ($$0111128<<2)|0);
  HEAP32[$51>>2] = $48;
  $52 = ((($$0112125)) + 48|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  do {
   if ($54) {
    $55 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
    HEAP32[$55>>2] = 71;
   } else {
    $56 = ($44|0)==($49|0);
    $57 = ($48|0)==($50|0);
    $or$cond114 = $56 & $57;
    if ($or$cond114) {
     $58 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
     HEAP32[$58>>2] = 72;
     break;
    }
    $59 = $44 << 1;
    $60 = ($59|0)==($49|0);
    $or$cond115 = $60 & $57;
    do {
     if ($or$cond115) {
      if ($72) {
       $61 = ((($$0112125)) + 40|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62>>>0)>(2);
       if ($63) {
        $64 = (_jsimd_can_h2v1_fancy_upsample()|0);
        $65 = ($64|0)!=(0);
        $66 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
        $h2v1_fancy_upsample$sink = $65 ? 74 : 73;
        HEAP32[$66>>2] = $h2v1_fancy_upsample$sink;
        break;
       }
      }
      $67 = (_jsimd_can_h2v1_upsample()|0);
      $68 = ($67|0)!=(0);
      $69 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
      $h2v1_upsample$sink = $68 ? 76 : 75;
      HEAP32[$69>>2] = $h2v1_upsample$sink;
     } else {
      $70 = $48 << 1;
      $71 = ($70|0)==($50|0);
      $or$cond = $72 & $71;
      $or$cond132 = $56 & $or$cond;
      if ($or$cond132) {
       $73 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
       HEAP32[$73>>2] = 77;
       HEAP32[$37>>2] = 1;
       break;
      }
      $74 = ($70|0)==($50|0);
      $or$cond117 = $60 & $74;
      if ($or$cond117) {
       if ($72) {
        $75 = ((($$0112125)) + 40|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = ($76>>>0)>(2);
        if ($77) {
         $78 = (_jsimd_can_h2v2_fancy_upsample()|0);
         $79 = ($78|0)!=(0);
         $80 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
         $h2v2_fancy_upsample$sink = $79 ? 79 : 78;
         HEAP32[$80>>2] = $h2v2_fancy_upsample$sink;
         HEAP32[$37>>2] = 1;
         break;
        }
       }
       $81 = (_jsimd_can_h2v2_upsample()|0);
       $82 = ($81|0)!=(0);
       $83 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
       $h2v2_upsample$sink = $82 ? 81 : 80;
       HEAP32[$83>>2] = $h2v2_upsample$sink;
       break;
      } else {
       $84 = (($49|0) % ($44|0))&-1;
       $85 = ($84|0)==(0);
       if ($85) {
        $86 = (($50|0) % ($48|0))&-1;
        $87 = ($86|0)==(0);
        if ($87) {
         $88 = (((($$0)) + 52|0) + ($$0111128<<2)|0);
         HEAP32[$88>>2] = 82;
         $89 = (($49|0) / ($44|0))&-1;
         $90 = $89&255;
         $91 = (((($$0)) + 140|0) + ($$0111128)|0);
         HEAP8[$91>>0] = $90;
         $92 = (($50|0) / ($48|0))&-1;
         $93 = $92&255;
         $94 = (((($$0)) + 150|0) + ($$0111128)|0);
         HEAP8[$94>>0] = $93;
         break;
        }
       }
       $95 = HEAP32[$0>>2]|0;
       $96 = ((($95)) + 20|0);
       HEAP32[$96>>2] = 38;
       $97 = HEAP32[$95>>2]|0;
       FUNCTION_TABLE_vi[$97 & 255]($0);
       break;
      }
     }
    } while(0);
    $98 = HEAP32[$1>>2]|0;
    $99 = ((($98)) + 100|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $102 = HEAP32[$35>>2]|0;
     $103 = ((($102)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = HEAP32[$36>>2]|0;
     $106 = HEAP32[$33>>2]|0;
     $107 = (_jround_up($105,$106)|0);
     $108 = HEAP32[$34>>2]|0;
     $109 = (FUNCTION_TABLE_iiiii[$104 & 127]($0,1,$107,$108)|0);
     $110 = (((($$0)) + 12|0) + ($$0111128<<2)|0);
     HEAP32[$110>>2] = $109;
    }
   }
  } while(0);
  $111 = (($$0111128) + 1)|0;
  $112 = ((($$0112125)) + 84|0);
  $113 = HEAP32[$27>>2]|0;
  $114 = ($111|0)<($113|0);
  if ($114) {
   $$0111128 = $111;$$0112125 = $112;
  } else {
   break;
  }
 }
 return;
}
function _start_pass_upsample($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 452|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 312|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 92|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 96|0);
 HEAP32[$8>>2] = $7;
 return;
}
function _sep_upsample($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$05154 = 0, $$05253 = 0, $$1 = 0, $$pre = 0, $$pre$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 452|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 312|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)<($12|0);
 if ($13) {
  $34 = $10;$35 = $12;
 } else {
  $14 = ((($0)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = ((($0)) + 216|0);
   $18 = HEAP32[$17>>2]|0;
   $$05154 = $18;$$05253 = 0;
   while(1) {
    $19 = (((($8)) + 52|0) + ($$05253<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($1) + ($$05253<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$2>>2]|0;
    $24 = (((($8)) + 100|0) + ($$05253<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = Math_imul($25, $23)|0;
    $27 = (($22) + ($26<<2)|0);
    $28 = (((($8)) + 12|0) + ($$05253<<2)|0);
    FUNCTION_TABLE_viiii[$20 & 255]($0,$$05154,$27,$28);
    $29 = (($$05253) + 1)|0;
    $30 = ((($$05154)) + 84|0);
    $31 = HEAP32[$14>>2]|0;
    $32 = ($29|0)<($31|0);
    if ($32) {
     $$05154 = $30;$$05253 = $29;
    } else {
     break;
    }
   }
   $$pre$pre = HEAP32[$11>>2]|0;
   $$pre = $$pre$pre;
  } else {
   $$pre = $12;
  }
  HEAP32[$9>>2] = 0;
  $34 = 0;$35 = $$pre;
 }
 $33 = (($35) - ($34))|0;
 $36 = ((($8)) + 96|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33>>>0)>($37>>>0);
 $$ = $38 ? $37 : $33;
 $39 = HEAP32[$5>>2]|0;
 $40 = (($6) - ($39))|0;
 $41 = ($$>>>0)>($40>>>0);
 $$1 = $41 ? $40 : $$;
 $42 = ((($0)) + 456|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($8)) + 12|0);
 $47 = (($4) + ($39<<2)|0);
 FUNCTION_TABLE_viiiii[$45 & 255]($0,$46,$34,$47,$$1);
 $48 = HEAP32[$5>>2]|0;
 $49 = (($48) + ($$1))|0;
 HEAP32[$5>>2] = $49;
 $50 = HEAP32[$36>>2]|0;
 $51 = (($50) - ($$1))|0;
 HEAP32[$36>>2] = $51;
 $52 = HEAP32[$9>>2]|0;
 $53 = (($52) + ($$1))|0;
 HEAP32[$9>>2] = $53;
 $54 = HEAP32[$11>>2]|0;
 $55 = ($53|0)<($54|0);
 if ($55) {
  return;
 }
 $56 = HEAP32[$2>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[$2>>2] = $57;
 return;
}
function _noop_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 0;
 return;
}
function _fullsize_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = $2;
 return;
}
function _h2v1_fancy_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03945 = 0, $$040 = 0, $$040$lcssa = 0, $$04042 = 0, $$04046 = 0, $$041$lcssa = 0, $$04143 = 0, $$049 = 0, $$pn$lcssa = 0, $$pn44 = 0, $$pn44$phi = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep54 = 0, $scevgep55 = 0, $scevgep56 = 0, $scevgep57 = 0, $scevgep58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($1)) + 40|0);
 $$049 = 0;
 while(1) {
  $9 = (($2) + ($$049<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($4) + ($$049<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($10)) + 1|0);
  $14 = HEAP8[$10>>0]|0;
  $15 = $14&255;
  $16 = ((($12)) + 1|0);
  HEAP8[$12>>0] = $14;
  $17 = ($15*3)|0;
  $18 = HEAP8[$13>>0]|0;
  $19 = $18&255;
  $20 = (($17) + 2)|0;
  $21 = (($20) + ($19))|0;
  $22 = $21 >>> 2;
  $23 = $22&255;
  HEAP8[$16>>0] = $23;
  $24 = HEAP32[$8>>2]|0;
  $25 = (($24) + -2)|0;
  $$04042 = ((($12)) + 2|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $$040$lcssa = $$04042;$$041$lcssa = $13;$$pn$lcssa = $12;
  } else {
   $27 = $24 << 1;
   $scevgep55 = ((($10)) + -1|0);
   $scevgep57 = ((($12)) + -2|0);
   $$03945 = $25;$$04046 = $$04042;$$04143 = $13;$$pn44 = $12;
   while(1) {
    $28 = ((($$04143)) + 1|0);
    $29 = HEAP8[$$04143>>0]|0;
    $30 = $29&255;
    $31 = ($30*3)|0;
    $32 = ((($$04143)) + -1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = (($34) + 1)|0;
    $36 = (($35) + ($31))|0;
    $37 = $36 >>> 2;
    $38 = $37&255;
    $39 = ((($$pn44)) + 3|0);
    HEAP8[$$04046>>0] = $38;
    $40 = HEAP8[$28>>0]|0;
    $41 = $40&255;
    $42 = (($31) + 2)|0;
    $43 = (($42) + ($41))|0;
    $44 = $43 >>> 2;
    $45 = $44&255;
    HEAP8[$39>>0] = $45;
    $46 = (($$03945) + -1)|0;
    $$040 = ((($$04046)) + 2|0);
    $47 = ($46|0)==(0);
    if ($47) {
     break;
    } else {
     $$pn44$phi = $$04046;$$03945 = $46;$$04046 = $$040;$$04143 = $28;$$pn44 = $$pn44$phi;
    }
   }
   $scevgep = ((($12)) + -4|0);
   $scevgep54 = (($scevgep) + ($27)|0);
   $scevgep56 = (($scevgep55) + ($24)|0);
   $scevgep58 = (($scevgep57) + ($27)|0);
   $$040$lcssa = $scevgep58;$$041$lcssa = $scevgep56;$$pn$lcssa = $scevgep54;
  }
  $48 = HEAP8[$$041$lcssa>>0]|0;
  $49 = $48&255;
  $50 = ($49*3)|0;
  $51 = ((($$041$lcssa)) + -1|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($53) + 1)|0;
  $55 = (($54) + ($50))|0;
  $56 = $55 >>> 2;
  $57 = $56&255;
  $58 = ((($$pn$lcssa)) + 3|0);
  HEAP8[$$040$lcssa>>0] = $57;
  HEAP8[$58>>0] = $48;
  $59 = (($$049) + 1)|0;
  $60 = HEAP32[$5>>2]|0;
  $61 = ($59|0)<($60|0);
  if ($61) {
   $$049 = $59;
  } else {
   break;
  }
 }
 return;
}
function _h2v1_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02528 = 0, $$02627 = 0, $$029 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($0)) + 112|0);
 $$029 = 0;$24 = $6;
 while(1) {
  $9 = (($4) + ($$029<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$8>>2]|0;
  $12 = (($10) + ($11)|0);
  $13 = ($11|0)>(0);
  if ($13) {
   $14 = (($2) + ($$029<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $$02528 = $15;$$02627 = $10;
   while(1) {
    $16 = ((($$02528)) + 1|0);
    $17 = HEAP8[$$02528>>0]|0;
    $18 = ((($$02627)) + 1|0);
    HEAP8[$$02627>>0] = $17;
    $19 = ((($$02627)) + 2|0);
    HEAP8[$18>>0] = $17;
    $20 = ($19>>>0)<($12>>>0);
    if ($20) {
     $$02528 = $16;$$02627 = $19;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$5>>2]|0;
   $23 = $$pre;
  } else {
   $23 = $24;
  }
  $21 = (($$029) + 1)|0;
  $22 = ($21|0)<($23|0);
  if ($22) {
   $$029 = $21;$24 = $23;
  } else {
   break;
  }
 }
 return;
}
function _h1v2_fancy_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03650 = 0, $$03749 = 0, $$03846 = 0, $$03846$1 = 0, $$03945 = 0, $$03945$1 = 0, $$04044 = 0, $$04044$1 = 0, $$041 = 0, $$041$1 = 0, $$041$in = 0, $$041$in$1 = 0, $$14243 = 0, $$14243$1 = 0, $$pre = 0, $$pre52 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($1)) + 40|0);
 $$pre = HEAP32[$8>>2]|0;
 $$03650 = 0;$$03749 = 0;$11 = $$pre;
 while(1) {
  $9 = (($2) + ($$03749<<2)|0);
  $10 = $$03650 | 1;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (($$03749) + 1)|0;
   $55 = $13;$56 = 0;
  } else {
   $14 = HEAP32[$9>>2]|0;
   $15 = (($4) + ($$03650<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($$03749) + -1)|0;
   $$041$in = (($2) + ($17<<2)|0);
   $$041 = HEAP32[$$041$in>>2]|0;
   $$03846 = 0;$$03945 = $14;$$04044 = $16;$$14243 = $$041;
   while(1) {
    $18 = ((($$03945)) + 1|0);
    $19 = HEAP8[$$03945>>0]|0;
    $20 = $19&255;
    $21 = ($20*3)|0;
    $22 = ((($$14243)) + 1|0);
    $23 = HEAP8[$$14243>>0]|0;
    $24 = $23&255;
    $25 = (($24) + 1)|0;
    $26 = (($25) + ($21))|0;
    $27 = $26 >>> 2;
    $28 = $27&255;
    $29 = ((($$04044)) + 1|0);
    HEAP8[$$04044>>0] = $28;
    $30 = (($$03846) + 1)|0;
    $31 = HEAP32[$8>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $$03846 = $30;$$03945 = $18;$$04044 = $29;$$14243 = $22;
    } else {
     break;
    }
   }
   $33 = (($$03749) + 1)|0;
   $34 = ($31|0)==(0);
   if ($34) {
    $55 = $33;$56 = 0;
   } else {
    $$pre52 = HEAP32[$9>>2]|0;
    $35 = (($4) + ($10<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $$041$in$1 = (($2) + ($33<<2)|0);
    $$041$1 = HEAP32[$$041$in$1>>2]|0;
    $$03846$1 = 0;$$03945$1 = $$pre52;$$04044$1 = $36;$$14243$1 = $$041$1;
    while(1) {
     $37 = ((($$03945$1)) + 1|0);
     $38 = HEAP8[$$03945$1>>0]|0;
     $39 = $38&255;
     $40 = ($39*3)|0;
     $41 = ((($$14243$1)) + 1|0);
     $42 = HEAP8[$$14243$1>>0]|0;
     $43 = $42&255;
     $44 = (($43) + 1)|0;
     $45 = (($44) + ($40))|0;
     $46 = $45 >>> 2;
     $47 = $46&255;
     $48 = ((($$04044$1)) + 1|0);
     HEAP8[$$04044$1>>0] = $47;
     $49 = (($$03846$1) + 1)|0;
     $50 = HEAP32[$8>>2]|0;
     $51 = ($49>>>0)<($50>>>0);
     if ($51) {
      $$03846$1 = $49;$$03945$1 = $37;$$04044$1 = $48;$$14243$1 = $41;
     } else {
      $55 = $33;$56 = $50;
      break;
     }
    }
   }
  }
  $52 = (($$03650) + 2)|0;
  $53 = HEAP32[$5>>2]|0;
  $54 = ($52|0)<($53|0);
  if ($54) {
   $$03650 = $52;$$03749 = $55;$11 = $56;
  } else {
   break;
  }
 }
 return;
}
function _h2v2_fancy_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06286 = 0, $$06385 = 0, $$06478 = 0, $$06478$1 = 0, $$065$lcssa = 0, $$065$lcssa$1 = 0, $$06577 = 0, $$06577$1 = 0, $$06577$1$phi = 0, $$06577$phi = 0, $$066$lcssa = 0, $$066$lcssa$1 = 0, $$06676 = 0, $$06676$1 = 0, $$067 = 0, $$067$1 = 0, $$067$lcssa = 0, $$067$lcssa$1 = 0, $$06772 = 0, $$06772$1 = 0;
 var $$06779 = 0, $$06779$1 = 0, $$068 = 0, $$068$1 = 0, $$068$in = 0, $$068$in$1 = 0, $$07073 = 0, $$07073$1 = 0, $$16974 = 0, $$16974$1 = 0, $$pn$lcssa = 0, $$pn$lcssa$1 = 0, $$pn75 = 0, $$pn75$1 = 0, $$pn75$1$phi = 0, $$pn75$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep90 = 0, $scevgep90$1 = 0, $scevgep91 = 0, $scevgep91$1 = 0;
 var $scevgep92 = 0, $scevgep92$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($1)) + 40|0);
 $$06286 = 0;$$06385 = 0;
 while(1) {
  $9 = (($2) + ($$06385<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($$06385) + -1)|0;
  $$068$in = (($2) + ($11<<2)|0);
  $$068 = HEAP32[$$068$in>>2]|0;
  $12 = $$06286 | 1;
  $13 = (($4) + ($$06286<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($10)) + 1|0);
  $16 = HEAP8[$10>>0]|0;
  $17 = $16&255;
  $18 = ($17*3)|0;
  $19 = ((($$068)) + 1|0);
  $20 = HEAP8[$$068>>0]|0;
  $21 = $20&255;
  $22 = (($18) + ($21))|0;
  $23 = HEAP8[$15>>0]|0;
  $24 = $23&255;
  $25 = ($24*3)|0;
  $26 = HEAP8[$19>>0]|0;
  $27 = $26&255;
  $28 = (($25) + ($27))|0;
  $29 = $22 << 2;
  $30 = (($29) + 8)|0;
  $31 = $30 >>> 4;
  $32 = $31&255;
  $33 = ((($14)) + 1|0);
  HEAP8[$14>>0] = $32;
  $34 = ($22*3)|0;
  $35 = (($34) + 7)|0;
  $36 = (($35) + ($28))|0;
  $37 = $36 >>> 4;
  $38 = $37&255;
  HEAP8[$33>>0] = $38;
  $39 = HEAP32[$8>>2]|0;
  $40 = (($39) + -2)|0;
  $$06772 = ((($14)) + 2|0);
  $41 = ($40|0)==(0);
  if ($41) {
   $$065$lcssa = $22;$$066$lcssa = $28;$$067$lcssa = $$06772;$$pn$lcssa = $14;
  } else {
   $42 = ((($$068)) + 2|0);
   $43 = ((($10)) + 2|0);
   $44 = $39 << 1;
   $scevgep91 = ((($14)) + -2|0);
   $$06478 = $40;$$06577 = $22;$$06676 = $28;$$06779 = $$06772;$$07073 = $43;$$16974 = $42;$$pn75 = $14;
   while(1) {
    $45 = ((($$07073)) + 1|0);
    $46 = HEAP8[$$07073>>0]|0;
    $47 = $46&255;
    $48 = ($47*3)|0;
    $49 = ((($$16974)) + 1|0);
    $50 = HEAP8[$$16974>>0]|0;
    $51 = $50&255;
    $52 = (($48) + ($51))|0;
    $53 = ($$06676*3)|0;
    $54 = (($$06577) + 8)|0;
    $55 = (($54) + ($53))|0;
    $56 = $55 >>> 4;
    $57 = $56&255;
    $58 = ((($$pn75)) + 3|0);
    HEAP8[$$06779>>0] = $57;
    $59 = (($53) + 7)|0;
    $60 = (($59) + ($52))|0;
    $61 = $60 >>> 4;
    $62 = $61&255;
    HEAP8[$58>>0] = $62;
    $63 = (($$06478) + -1)|0;
    $$067 = ((($$06779)) + 2|0);
    $64 = ($63|0)==(0);
    if ($64) {
     break;
    } else {
     $$pn75$phi = $$06779;$$06577$phi = $$06676;$$06478 = $63;$$06676 = $52;$$06779 = $$067;$$07073 = $45;$$16974 = $49;$$pn75 = $$pn75$phi;$$06577 = $$06577$phi;
    }
   }
   $scevgep = ((($14)) + -4|0);
   $scevgep90 = (($scevgep) + ($44)|0);
   $scevgep92 = (($scevgep91) + ($44)|0);
   $$065$lcssa = $$06676;$$066$lcssa = $52;$$067$lcssa = $scevgep92;$$pn$lcssa = $scevgep90;
  }
  $65 = ($$066$lcssa*3)|0;
  $66 = (($$065$lcssa) + 8)|0;
  $67 = (($66) + ($65))|0;
  $68 = $67 >>> 4;
  $69 = $68&255;
  $70 = ((($$pn$lcssa)) + 3|0);
  HEAP8[$$067$lcssa>>0] = $69;
  $71 = $$066$lcssa << 2;
  $72 = (($71) + 7)|0;
  $73 = $72 >>> 4;
  $74 = $73&255;
  HEAP8[$70>>0] = $74;
  $75 = HEAP32[$9>>2]|0;
  $76 = (($$06385) + 1)|0;
  $$068$in$1 = (($2) + ($76<<2)|0);
  $$068$1 = HEAP32[$$068$in$1>>2]|0;
  $77 = (($4) + ($12<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($75)) + 1|0);
  $80 = HEAP8[$75>>0]|0;
  $81 = $80&255;
  $82 = ($81*3)|0;
  $83 = ((($$068$1)) + 1|0);
  $84 = HEAP8[$$068$1>>0]|0;
  $85 = $84&255;
  $86 = (($82) + ($85))|0;
  $87 = HEAP8[$79>>0]|0;
  $88 = $87&255;
  $89 = ($88*3)|0;
  $90 = HEAP8[$83>>0]|0;
  $91 = $90&255;
  $92 = (($89) + ($91))|0;
  $93 = $86 << 2;
  $94 = (($93) + 8)|0;
  $95 = $94 >>> 4;
  $96 = $95&255;
  $97 = ((($78)) + 1|0);
  HEAP8[$78>>0] = $96;
  $98 = ($86*3)|0;
  $99 = (($98) + 7)|0;
  $100 = (($99) + ($92))|0;
  $101 = $100 >>> 4;
  $102 = $101&255;
  HEAP8[$97>>0] = $102;
  $103 = HEAP32[$8>>2]|0;
  $104 = (($103) + -2)|0;
  $$06772$1 = ((($78)) + 2|0);
  $105 = ($104|0)==(0);
  if ($105) {
   $$065$lcssa$1 = $86;$$066$lcssa$1 = $92;$$067$lcssa$1 = $$06772$1;$$pn$lcssa$1 = $78;
  } else {
   $106 = ((($$068$1)) + 2|0);
   $107 = ((($75)) + 2|0);
   $108 = $103 << 1;
   $scevgep91$1 = ((($78)) + -2|0);
   $$06478$1 = $104;$$06577$1 = $86;$$06676$1 = $92;$$06779$1 = $$06772$1;$$07073$1 = $107;$$16974$1 = $106;$$pn75$1 = $78;
   while(1) {
    $109 = ((($$07073$1)) + 1|0);
    $110 = HEAP8[$$07073$1>>0]|0;
    $111 = $110&255;
    $112 = ($111*3)|0;
    $113 = ((($$16974$1)) + 1|0);
    $114 = HEAP8[$$16974$1>>0]|0;
    $115 = $114&255;
    $116 = (($112) + ($115))|0;
    $117 = ($$06676$1*3)|0;
    $118 = (($$06577$1) + 8)|0;
    $119 = (($118) + ($117))|0;
    $120 = $119 >>> 4;
    $121 = $120&255;
    $122 = ((($$pn75$1)) + 3|0);
    HEAP8[$$06779$1>>0] = $121;
    $123 = (($117) + 7)|0;
    $124 = (($123) + ($116))|0;
    $125 = $124 >>> 4;
    $126 = $125&255;
    HEAP8[$122>>0] = $126;
    $127 = (($$06478$1) + -1)|0;
    $$067$1 = ((($$06779$1)) + 2|0);
    $128 = ($127|0)==(0);
    if ($128) {
     break;
    } else {
     $$pn75$1$phi = $$06779$1;$$06577$1$phi = $$06676$1;$$06478$1 = $127;$$06676$1 = $116;$$06779$1 = $$067$1;$$07073$1 = $109;$$16974$1 = $113;$$pn75$1 = $$pn75$1$phi;$$06577$1 = $$06577$1$phi;
    }
   }
   $scevgep$1 = ((($78)) + -4|0);
   $scevgep90$1 = (($scevgep$1) + ($108)|0);
   $scevgep92$1 = (($scevgep91$1) + ($108)|0);
   $$065$lcssa$1 = $$06676$1;$$066$lcssa$1 = $116;$$067$lcssa$1 = $scevgep92$1;$$pn$lcssa$1 = $scevgep90$1;
  }
  $129 = ($$066$lcssa$1*3)|0;
  $130 = (($$065$lcssa$1) + 8)|0;
  $131 = (($130) + ($129))|0;
  $132 = $131 >>> 4;
  $133 = $132&255;
  $134 = ((($$pn$lcssa$1)) + 3|0);
  HEAP8[$$067$lcssa$1>>0] = $133;
  $135 = $$066$lcssa$1 << 2;
  $136 = (($135) + 7)|0;
  $137 = $136 >>> 4;
  $138 = $137&255;
  HEAP8[$134>>0] = $138;
  $139 = (($$06286) + 2)|0;
  $140 = HEAP32[$5>>2]|0;
  $141 = ($139|0)<($140|0);
  if ($141) {
   $$06286 = $139;$$06385 = $76;
  } else {
   break;
  }
 }
 return;
}
function _h2v2_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03338 = 0, $$03437 = 0, $$03536 = 0, $$039 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($0)) + 112|0);
 $$03338 = 0;$$039 = 0;
 while(1) {
  $9 = (($4) + ($$039<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$8>>2]|0;
  $12 = (($10) + ($11)|0);
  $13 = ($11|0)>(0);
  if ($13) {
   $14 = (($2) + ($$03338<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $$03437 = $15;$$03536 = $10;
   while(1) {
    $16 = ((($$03437)) + 1|0);
    $17 = HEAP8[$$03437>>0]|0;
    $18 = ((($$03536)) + 1|0);
    HEAP8[$$03536>>0] = $17;
    $19 = ((($$03536)) + 2|0);
    HEAP8[$18>>0] = $17;
    $20 = ($19>>>0)<($12>>>0);
    if ($20) {
     $$03437 = $16;$$03536 = $19;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$8>>2]|0;
   $22 = $$pre;
  } else {
   $22 = $11;
  }
  $21 = $$039 | 1;
  _jcopy_sample_rows($4,$$039,$4,$21,1,$22);
  $23 = (($$03338) + 1)|0;
  $24 = (($$039) + 2)|0;
  $25 = HEAP32[$5>>2]|0;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $$03338 = $23;$$039 = $24;
  } else {
   break;
  }
 }
 return;
}
function _int_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05059$us = 0, $$05059$us76 = 0, $$05157$us$us = 0, $$05157$us$us90 = 0, $$05256$us$us = 0, $$05256$us$us91 = 0, $$05354$us$us = 0, $$05354$us$us98 = 0, $$060 = 0, $$060$us = 0, $$060$us75 = 0, $$155$us$us = 0, $$155$us$us97 = 0, $$pre = 0, $$pre108 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($5)) + 140|0) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (((($5)) + 150|0) + ($8)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ((($0)) + 312|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if (!($17)) {
  return;
 }
 $18 = ((($0)) + 112|0);
 $19 = ($10<<24>>24)!=(0);
 $20 = ($13&255)>(1);
 $21 = (($14) + -1)|0;
 if ($20) {
  $22 = $11 ^ -1;
  $23 = ($10<<24>>24)==(0);
  $smax = $23 ? $22 : -2;
  $24 = (($smax) + ($11))|0;
  $25 = (($24) + 2)|0;
  $$05059$us = 0;$$060$us = 0;
  while(1) {
   $26 = (($6) + ($$060$us<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$18>>2]|0;
   $29 = (($27) + ($28)|0);
   $30 = ($28|0)>(0);
   if ($30) {
    if (!($19)) {
     label = 7;
     break;
    }
    $37 = (($2) + ($$05059$us<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $$05157$us$us = $38;$$05256$us$us = $27;
    while(1) {
     $39 = HEAP8[$$05157$us$us>>0]|0;
     _memset(($$05256$us$us|0),($39|0),($25|0))|0;
     $$05354$us$us = $11;$$155$us$us = $$05256$us$us;
     while(1) {
      $41 = ((($$155$us$us)) + 1|0);
      $43 = (($$05354$us$us) + -1)|0;
      $44 = ($$05354$us$us|0)>(1);
      if ($44) {
       $$05354$us$us = $43;$$155$us$us = $41;
      } else {
       break;
      }
     }
     $40 = ((($$05157$us$us)) + 1|0);
     $42 = ($41>>>0)<($29>>>0);
     if ($42) {
      $$05157$us$us = $40;$$05256$us$us = $41;
     } else {
      break;
     }
    }
    $$pre108 = HEAP32[$18>>2]|0;
    $32 = $$pre108;
   } else {
    $32 = $28;
   }
   $31 = (($$060$us) + 1)|0;
   _jcopy_sample_rows($6,$$060$us,$6,$31,$21,$32);
   $33 = (($$05059$us) + 1)|0;
   $34 = (($$060$us) + ($14))|0;
   $35 = HEAP32[$15>>2]|0;
   $36 = ($34|0)<($35|0);
   if ($36) {
    $$05059$us = $33;$$060$us = $34;
   } else {
    label = 24;
    break;
   }
  }
  if ((label|0) == 7) {
   while(1) {
    label = 0;
    label = 7;
   }
  }
  else if ((label|0) == 24) {
   return;
  }
 }
 if ($19) {
  $$05059$us76 = 0;$$060$us75 = 0;
 } else {
  $$pre = HEAP32[$18>>2]|0;
  $45 = ($$pre|0)>(0);
  $$060 = 0;
  while(1) {
   if ($45) {
    label = 22;
    break;
   }
   $63 = (($$060) + ($14))|0;
   $64 = ($63|0)<($16|0);
   if ($64) {
    $$060 = $63;
   } else {
    label = 24;
    break;
   }
  }
  if ((label|0) == 22) {
   while(1) {
    label = 0;
    label = 22;
   }
  }
  else if ((label|0) == 24) {
   return;
  }
 }
 while(1) {
  $46 = (($6) + ($$060$us75<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$18>>2]|0;
  $49 = (($47) + ($48)|0);
  $50 = ($48|0)>(0);
  if ($50) {
   $51 = (($2) + ($$05059$us76<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $$05157$us$us90 = $52;$$05256$us$us91 = $47;
   while(1) {
    $57 = HEAP8[$$05157$us$us90>>0]|0;
    _memset(($$05256$us$us91|0),($57|0),($11|0))|0;
    $$05354$us$us98 = $11;$$155$us$us97 = $$05256$us$us91;
    while(1) {
     $59 = ((($$155$us$us97)) + 1|0);
     $61 = (($$05354$us$us98) + -1)|0;
     $62 = ($$05354$us$us98|0)>(1);
     if ($62) {
      $$05354$us$us98 = $61;$$155$us$us97 = $59;
     } else {
      break;
     }
    }
    $58 = ((($$05157$us$us90)) + 1|0);
    $60 = ($59>>>0)<($49>>>0);
    if ($60) {
     $$05157$us$us90 = $58;$$05256$us$us91 = $59;
    } else {
     break;
    }
   }
  }
  $53 = (($$05059$us76) + 1)|0;
  $54 = (($$060$us75) + ($14))|0;
  $55 = HEAP32[$15>>2]|0;
  $56 = ($54|0)<($55|0);
  if ($56) {
   $$05059$us76 = $53;$$060$us75 = $54;
  } else {
   break;
  }
 }
 return;
}
function _jpeg_std_error($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 83;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 84;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 85;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 86;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 87;
 $5 = ((($0)) + 104|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 108|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 112|0);
 HEAP32[$8>>2] = 256;
 $9 = ((($0)) + 116|0);
 HEAP32[$9>>2] = 129;
 $10 = ((($0)) + 120|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 124|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 128|0);
 HEAP32[$12>>2] = 0;
 return ($0|0);
}
function _error_exit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($0);
 _jpeg_destroy($0);
 _exit(1);
 // unreachable;
}
function _emit_message($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1|0)<(0);
 if (!($3)) {
  $14 = ((($2)) + 104|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)<($1|0);
  if ($16) {
   return;
  }
  $17 = ((($2)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 255]($0);
  return;
 }
 $4 = ((($2)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  label = 4;
 } else {
  $7 = ((($2)) + 104|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>(2);
  if ($9) {
   label = 4;
  } else {
   $13 = $5;
  }
 }
 if ((label|0) == 4) {
  $10 = ((($2)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
  $$pre = HEAP32[$4>>2]|0;
  $13 = $$pre;
 }
 $12 = (($13) + 1)|0;
 HEAP32[$4>>2] = $12;
 return;
}
function _output_message($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 255]($0,$1);
 $5 = HEAP32[584]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($5,11987,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _format_message($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$043 = 0, $$1 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = ((($2)) + 116|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)>($7|0);
  if ($8) {
   label = 4;
  } else {
   $9 = ((($2)) + 112|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($4<<2)|0);
   $$sink = $11;
   label = 7;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $12 = ((($2)) + 120|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   label = 8;
  } else {
   $15 = ((($2)) + 124|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($4|0)<($16|0);
   if ($17) {
    label = 8;
   } else {
    $18 = ((($2)) + 128|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($4|0)>($19|0);
    $21 = (($4) - ($16))|0;
    $22 = (($13) + ($21<<2)|0);
    if ($20) {
     label = 8;
    } else {
     $$sink = $22;
     label = 7;
    }
   }
  }
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$$sink>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 8;
  } else {
   $$1 = $23;
  }
 }
 if ((label|0) == 8) {
  $25 = ((($2)) + 24|0);
  HEAP32[$25>>2] = $4;
  $26 = ((($2)) + 112|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $$1 = $28;
 }
 $$043 = $$1;
 L13: while(1) {
  $29 = ((($$043)) + 1|0);
  $30 = HEAP8[$$043>>0]|0;
  switch ($30<<24>>24) {
  case 0:  {
   break L13;
   break;
  }
  case 37:  {
   label = 11;
   break L13;
   break;
  }
  default: {
   $$043 = $29;
  }
  }
 }
 if ((label|0) == 11) {
  $31 = HEAP8[$29>>0]|0;
  $32 = ($31<<24>>24)==(115);
  if ($32) {
   $33 = ((($2)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $33;
   (_sprintf($1,$$1,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 $34 = ((($2)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($2)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($2)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($2)) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($2)) + 40|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($2)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($2)) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($2)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $35;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $37;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $39;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $41;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $43;
 $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
 HEAP32[$vararg_ptr8>>2] = $45;
 $vararg_ptr9 = ((($vararg_buffer1)) + 24|0);
 HEAP32[$vararg_ptr9>>2] = $47;
 $vararg_ptr10 = ((($vararg_buffer1)) + 28|0);
 HEAP32[$vararg_ptr10>>2] = $49;
 (_sprintf($1,$$1,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _reset_error_mgr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 108|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 20|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _jinit_1pass_quantizer($0) {
 $0 = $0|0;
 var $$0$lcssa$lcssa$i$i = 0, $$0111$i = 0, $$014$i = 0, $$06170$us$us$i$us$i = 0, $$06170$us75$i$i = 0, $$06285$i$i = 0, $$06388$us$i$i = 0, $$066$lcssa$i$i = 0, $$066$us$i$i = 0, $$08198$us$i = 0, $$08295$us$us$i = 0, $$083110$i = 0, $$08494$us$us$i = 0, $$089$us$i$i = 0, $$1$us$i$i = 0, $$1$us$i$us$i = 0, $$16484$i$i = 0, $$2$lcssa$lcssa$i$i = 0, $$26568$us$us$i$us$i = 0, $$26568$us77$i$i = 0;
 var $$269$us$us$i$us$i = 0, $$269$us76$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond103$i$i = 0, $exitcond124$i = 0, $smax$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($0,1,88)|0);
 $6 = ((($0)) + 460|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$5>>2] = 88;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = 89;
 $8 = ((($5)) + 12|0);
 HEAP32[$8>>2] = 90;
 $9 = ((($5)) + 68|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($5)) + 52|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 120|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(4);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 20|0);
  HEAP32[$15>>2] = 55;
  $16 = ((($14)) + 24|0);
  HEAP32[$16>>2] = 4;
  $17 = HEAP32[$0>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 255]($0);
 }
 $19 = ((($0)) + 96|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(256);
 if ($21) {
  $22 = HEAP32[$0>>2]|0;
  $23 = ((($22)) + 20|0);
  HEAP32[$23>>2] = 57;
  $24 = ((($22)) + 24|0);
  HEAP32[$24>>2] = 256;
  $25 = HEAP32[$0>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$26 & 255]($0);
  $$pre = HEAP32[$19>>2]|0;
  $41 = $$pre;
 } else {
  $41 = $20;
 }
 $27 = HEAP32[$6>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$11>>2]|0;
 $30 = ((($0)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (860 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$1>>2] = $33;
 $34 = (780 + ($31<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 4|0);
 HEAP32[$36>>2] = $35;
 $37 = (928 + ($31<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 8|0);
 HEAP32[$39>>2] = $38;
 $40 = ($29|0)>(1);
 if ($40) {
  $$066$us$i$i = 1;
  while(1) {
   $44 = (($$066$us$i$i) + 1)|0;
   $$06388$us$i$i = 1;$$089$us$i$i = $44;
   while(1) {
    $45 = Math_imul($$089$us$i$i, $44)|0;
    $46 = (($$06388$us$i$i) + 1)|0;
    $exitcond103$i$i = ($46|0)==($29|0);
    if ($exitcond103$i$i) {
     break;
    } else {
     $$06388$us$i$i = $46;$$089$us$i$i = $45;
    }
   }
   $47 = ($45|0)>($41|0);
   if ($47) {
    $$0$lcssa$lcssa$i$i = $45;$$066$lcssa$i$i = $$066$us$i$i;
    break;
   } else {
    $$066$us$i$i = $44;
   }
  }
 } else {
  $42 = ($41|0)>(1);
  $smax$i$i = $42 ? $41 : 1;
  $43 = (($smax$i$i) + 1)|0;
  $$0$lcssa$lcssa$i$i = $43;$$066$lcssa$i$i = $smax$i$i;
 }
 $48 = ($$066$lcssa$i$i|0)<(2);
 if ($48) {
  $49 = HEAP32[$0>>2]|0;
  $50 = ((($49)) + 20|0);
  HEAP32[$50>>2] = 56;
  $51 = ((($49)) + 24|0);
  HEAP32[$51>>2] = $$0$lcssa$lcssa$i$i;
  $52 = HEAP32[$0>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vi[$53 & 255]($0);
 }
 $54 = ($29|0)>(0);
 if ($54) {
  $$06285$i$i = 1;$$16484$i$i = 0;
  while(1) {
   $76 = (((($27)) + 32|0) + ($$16484$i$i<<2)|0);
   HEAP32[$76>>2] = $$066$lcssa$i$i;
   $77 = Math_imul($$06285$i$i, $$066$lcssa$i$i)|0;
   $78 = (($$16484$i$i) + 1)|0;
   $exitcond$i$i = ($78|0)==($29|0);
   if ($exitcond$i$i) {
    break;
   } else {
    $$06285$i$i = $77;$$16484$i$i = $78;
   }
  }
  $$pre$i$i = HEAP32[$30>>2]|0;
  $55 = ($$pre$i$i|0)==(2);
  if ($55) {
   $$1$us$i$us$i = $77;
   L23: while(1) {
    $$06170$us$us$i$us$i = 0;$$26568$us$us$i$us$i = 0;$$269$us$us$i$us$i = $$1$us$i$us$i;
    while(1) {
     $56 = (($1) + ($$26568$us$us$i$us$i<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (((($27)) + 32|0) + ($57<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($$269$us$us$i$us$i|0) / ($59|0))&-1;
     $61 = (($59) + 1)|0;
     $62 = Math_imul($60, $61)|0;
     $63 = ($62|0)>($41|0);
     if ($63) {
      break;
     }
     HEAP32[$58>>2] = $61;
     $64 = (($$26568$us$us$i$us$i) + 1)|0;
     $65 = ($64|0)<($29|0);
     if ($65) {
      $$06170$us$us$i$us$i = 1;$$26568$us$us$i$us$i = $64;$$269$us$us$i$us$i = $62;
     } else {
      $$1$us$i$us$i = $62;
      continue L23;
     }
    }
    $66 = ($$06170$us$us$i$us$i|0)==(0);
    if ($66) {
     $$2$lcssa$lcssa$i$i = $$269$us$us$i$us$i;
     break;
    } else {
     $$1$us$i$us$i = $$269$us$us$i$us$i;
    }
   }
  } else {
   $$1$us$i$i = $77;
   L29: while(1) {
    $$06170$us75$i$i = 0;$$26568$us77$i$i = 0;$$269$us76$i$i = $$1$us$i$i;
    while(1) {
     $67 = (((($27)) + 32|0) + ($$26568$us77$i$i<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($$269$us76$i$i|0) / ($68|0))&-1;
     $70 = (($68) + 1)|0;
     $71 = Math_imul($69, $70)|0;
     $72 = ($71|0)>($41|0);
     if ($72) {
      break;
     }
     HEAP32[$67>>2] = $70;
     $73 = (($$26568$us77$i$i) + 1)|0;
     $74 = ($73|0)<($29|0);
     if ($74) {
      $$06170$us75$i$i = 1;$$26568$us77$i$i = $73;$$269$us76$i$i = $71;
     } else {
      $$1$us$i$i = $71;
      continue L29;
     }
    }
    $75 = ($$06170$us75$i$i|0)==(0);
    if ($75) {
     $$2$lcssa$lcssa$i$i = $$269$us76$i$i;
     break;
    } else {
     $$1$us$i$i = $$269$us76$i$i;
    }
   }
  }
 } else {
  $$2$lcssa$lcssa$i$i = 1;
 }
 $79 = HEAP32[$11>>2]|0;
 $80 = ($79|0)==(3);
 $81 = HEAP32[$0>>2]|0;
 if ($80) {
  $82 = ((($81)) + 24|0);
  HEAP32[$82>>2] = $$2$lcssa$lcssa$i$i;
  $83 = HEAP32[$28>>2]|0;
  $84 = ((($81)) + 28|0);
  HEAP32[$84>>2] = $83;
  $85 = ((($27)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($81)) + 32|0);
  HEAP32[$87>>2] = $86;
  $88 = ((($27)) + 40|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($81)) + 36|0);
  HEAP32[$90>>2] = $89;
  $91 = ((($81)) + 20|0);
  HEAP32[$91>>2] = 94;
  $92 = ((($81)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  FUNCTION_TABLE_vii[$93 & 255]($0,1);
 } else {
  $94 = ((($81)) + 20|0);
  HEAP32[$94>>2] = 95;
  $95 = ((($81)) + 24|0);
  HEAP32[$95>>2] = $$2$lcssa$lcssa$i$i;
  $96 = HEAP32[$0>>2]|0;
  $97 = ((($96)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vii[$98 & 255]($0,1);
 }
 $99 = HEAP32[$2>>2]|0;
 $100 = ((($99)) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$11>>2]|0;
 $103 = (FUNCTION_TABLE_iiiii[$101 & 127]($0,1,$$2$lcssa$lcssa$i$i,$102)|0);
 $104 = HEAP32[$11>>2]|0;
 $105 = ($104|0)>(0);
 if ($105) {
  $$0111$i = 0;$$083110$i = $$2$lcssa$lcssa$i$i;$150 = $104;
  while(1) {
   $106 = (((($27)) + 32|0) + ($$0111$i<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($$083110$i|0) / ($107|0))&-1;
   $109 = ($107|0)>(0);
   if ($109) {
    $110 = (($107) + -1)|0;
    $111 = (($110|0) / 2)&-1;
    $112 = ($108|0)>(0);
    $113 = (($103) + ($$0111$i<<2)|0);
    if ($112) {
     $$08198$us$i = 0;
     while(1) {
      $114 = Math_imul($$08198$us$i, $108)|0;
      $115 = ($114|0)<($$2$lcssa$lcssa$i$i|0);
      if ($115) {
       $117 = ($$08198$us$i*255)|0;
       $118 = (($117) + ($111))|0;
       $119 = (($118|0) / ($110|0))&-1;
       $120 = $119&255;
       $$08295$us$us$i = $114;
       while(1) {
        $$08494$us$us$i = 0;
        while(1) {
         $123 = HEAP32[$113>>2]|0;
         $124 = (($$08494$us$us$i) + ($$08295$us$us$i))|0;
         $125 = (($123) + ($124)|0);
         HEAP8[$125>>0] = $120;
         $126 = (($$08494$us$us$i) + 1)|0;
         $exitcond$i = ($126|0)==($108|0);
         if ($exitcond$i) {
          break;
         } else {
          $$08494$us$us$i = $126;
         }
        }
        $121 = (($$08295$us$us$i) + ($$083110$i))|0;
        $122 = ($121|0)<($$2$lcssa$lcssa$i$i|0);
        if ($122) {
         $$08295$us$us$i = $121;
        } else {
         break;
        }
       }
      }
      $116 = (($$08198$us$i) + 1)|0;
      $exitcond124$i = ($116|0)==($107|0);
      if ($exitcond124$i) {
       break;
      } else {
       $$08198$us$i = $116;
      }
     }
     $$pre$i = HEAP32[$11>>2]|0;
     $129 = $$pre$i;
    } else {
     $129 = $150;
    }
   } else {
    $129 = $150;
   }
   $127 = (($$0111$i) + 1)|0;
   $128 = ($127|0)<($129|0);
   if ($128) {
    $$0111$i = $127;$$083110$i = $108;$150 = $129;
   } else {
    break;
   }
  }
 }
 $130 = ((($27)) + 16|0);
 HEAP32[$130>>2] = $103;
 $131 = ((($27)) + 20|0);
 HEAP32[$131>>2] = $$2$lcssa$lcssa$i$i;
 _create_colorindex($0);
 $132 = ((($0)) + 88|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)==(2);
 if (!($134)) {
  STACKTOP = sp;return;
 }
 $135 = HEAP32[$6>>2]|0;
 $136 = ((($0)) + 112|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 << 1;
 $139 = (($138) + 4)|0;
 $140 = HEAP32[$11>>2]|0;
 $141 = ($140|0)>(0);
 if ($141) {
  $$014$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $142 = HEAP32[$2>>2]|0;
  $143 = ((($142)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (FUNCTION_TABLE_iiii[$144 & 255]($0,1,$139)|0);
  $146 = (((($135)) + 68|0) + ($$014$i<<2)|0);
  HEAP32[$146>>2] = $145;
  $147 = (($$014$i) + 1)|0;
  $148 = HEAP32[$11>>2]|0;
  $149 = ($147|0)<($148|0);
  if ($149) {
   $$014$i = $147;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _start_pass_1_quant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014$i = 0, $$02425$i$i = 0, $$026$i$i = 0, $$02831$i = 0, $$02932$i = 0, $$036 = 0, $$1$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$phi40Z2D = 0, $$pre$phiZ2D = 0, $$pre39 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color_quantize$sink = 0, $exitcond$i$i = 0, $exitcond27$i$i = 0, $quantize_ord_dither$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 460|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 136|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($3)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 132|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($0)) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 0:  {
  $12 = ((($0)) + 120|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(3);
  $15 = ((($3)) + 4|0);
  $color_quantize$sink = $14 ? 92 : 91;
  HEAP32[$15>>2] = $color_quantize$sink;
  return;
  break;
 }
 case 1:  {
  $16 = ((($0)) + 120|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(3);
  $19 = ((($3)) + 4|0);
  $quantize_ord_dither$sink = $18 ? 94 : 93;
  HEAP32[$19>>2] = $quantize_ord_dither$sink;
  $20 = ((($3)) + 48|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   _create_colorindex($0);
  }
  $24 = ((($3)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   return;
  }
  $27 = HEAP32[$2>>2]|0;
  $28 = HEAP32[$16>>2]|0;
  $29 = ($28|0)>(0);
  if (!($29)) {
   return;
  }
  $30 = ((($0)) + 4|0);
  $$02932$i = 0;$100 = $28;
  while(1) {
   $31 = (((($27)) + 32|0) + ($$02932$i<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($$02932$i|0)>(0);
   L18: do {
    if ($33) {
     $$02831$i = 0;
     while(1) {
      $34 = (((($27)) + 32|0) + ($$02831$i<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($32|0)==($35|0);
      if ($36) {
       break;
      }
      $37 = (($$02831$i) + 1)|0;
      $38 = ($37|0)<($$02932$i|0);
      if ($38) {
       $$02831$i = $37;
      } else {
       label = 12;
       break L18;
      }
     }
     $39 = (((($27)) + 52|0) + ($$02831$i<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      label = 12;
     } else {
      $$1$i = $40;$65 = $100;
     }
    } else {
     label = 12;
    }
   } while(0);
   if ((label|0) == 12) {
    label = 0;
    $42 = HEAP32[$30>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 255]($0,1,1024)|0);
    $45 = $32 << 9;
    $46 = (($45) + -512)|0;
    $$026$i$i = 0;
    while(1) {
     $$02425$i$i = 0;
     while(1) {
      $47 = ((11991 + ($$026$i$i<<4)|0) + ($$02425$i$i)|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = $49 << 1;
      $51 = (255 - ($50))|0;
      $52 = ($51*255)|0;
      $53 = ($51|0)<(0);
      if ($53) {
       $54 = (0 - ($52))|0;
       $55 = (($54|0) / ($46|0))&-1;
       $56 = (0 - ($55))|0;
       $59 = $56;
      } else {
       $57 = (($52|0) / ($46|0))&-1;
       $59 = $57;
      }
      $58 = ((($44) + ($$026$i$i<<6)|0) + ($$02425$i$i<<2)|0);
      HEAP32[$58>>2] = $59;
      $60 = (($$02425$i$i) + 1)|0;
      $exitcond$i$i = ($60|0)==(16);
      if ($exitcond$i$i) {
       break;
      } else {
       $$02425$i$i = $60;
      }
     }
     $61 = (($$026$i$i) + 1)|0;
     $exitcond27$i$i = ($61|0)==(16);
     if ($exitcond27$i$i) {
      break;
     } else {
      $$026$i$i = $61;
     }
    }
    $$pre$i = HEAP32[$16>>2]|0;
    $$1$i = $44;$65 = $$pre$i;
   }
   $62 = (((($27)) + 52|0) + ($$02932$i<<2)|0);
   HEAP32[$62>>2] = $$1$i;
   $63 = (($$02932$i) + 1)|0;
   $64 = ($63|0)<($65|0);
   if ($64) {
    $$02932$i = $63;$100 = $65;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 2:  {
  $66 = ((($3)) + 4|0);
  HEAP32[$66>>2] = 95;
  $67 = ((($3)) + 84|0);
  HEAP32[$67>>2] = 0;
  $68 = ((($3)) + 68|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)==(0|0);
  if ($70) {
   $71 = ((($0)) + 112|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 << 1;
   $74 = (($73) + 4)|0;
   $75 = ((($0)) + 120|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)>(0);
   if (!($77)) {
    return;
   }
   $78 = ((($0)) + 4|0);
   $$014$i = 0;
   while(1) {
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_iiii[$81 & 255]($0,1,$74)|0);
    $83 = (((($3)) + 68|0) + ($$014$i<<2)|0);
    HEAP32[$83>>2] = $82;
    $84 = (($$014$i) + 1)|0;
    $85 = HEAP32[$75>>2]|0;
    $86 = ($84|0)<($85|0);
    if ($86) {
     $$014$i = $84;
    } else {
     $$pre$phi40Z2D = $75;$$pre$phiZ2D = $71;$90 = $85;
     break;
    }
   }
  } else {
   $$phi$trans$insert = ((($0)) + 120|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre39 = ((($0)) + 112|0);
   $$pre$phi40Z2D = $$phi$trans$insert;$$pre$phiZ2D = $$pre39;$90 = $$pre;
  }
  $87 = HEAP32[$$pre$phiZ2D>>2]|0;
  $88 = $87 << 1;
  $89 = (($88) + 4)|0;
  $91 = ($90|0)>(0);
  if ($91) {
   $$036 = 0;
  } else {
   return;
  }
  while(1) {
   $92 = (((($3)) + 68|0) + ($$036<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   _jzero_far($93,$89);
   $94 = (($$036) + 1)|0;
   $95 = HEAP32[$$pre$phi40Z2D>>2]|0;
   $96 = ($94|0)<($95|0);
   if ($96) {
    $$036 = $94;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  $97 = HEAP32[$0>>2]|0;
  $98 = ((($97)) + 20|0);
  HEAP32[$98>>2] = 48;
  $99 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vi[$99 & 255]($0);
  return;
 }
 }
}
function _finish_pass_1_quant($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _new_color_map_1_quant($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 HEAP32[$2>>2] = 46;
 $3 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($0);
 return;
}
function _create_colorindex($0) {
 $0 = $0|0;
 var $$06477 = 0, $$06477$us = 0, $$06580 = 0, $$06580$us = 0, $$06679 = 0, $$06679$us = 0, $$06776 = 0, $$06776$us = 0, $$06975 = 0, $$06975$us = 0, $$1$lcssa = 0, $$1$lcssa$us = 0, $$168$lcssa = 0, $$168$lcssa$us = 0, $$17078$us = 0, $$173 = 0, $$173$us = 0, $$71 = 0, $$pre = 0, $$pre90 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, $exitcond = 0, $exitcond88 = 0, $exitcond89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 460|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 $$71 = $5&1;
 $6 = ((($2)) + 28|0);
 HEAP32[$6>>2] = $$71;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5 ? 766 : 256;
 $12 = ((($0)) + 120|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiii[$10 & 127]($0,1,$11,$13)|0);
 $15 = ((($2)) + 24|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($2)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$12>>2]|0;
 $19 = ($18|0)>(0);
 if (!($19)) {
  return;
 }
 if ($5) {
  $$06580$us = $17;$$06679$us = 0;$24 = $14;
 } else {
  $$06580 = $17;$$06679 = 0;$61 = $14;
  while(1) {
   $57 = (((($2)) + 32|0) + ($$06679<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($$06580|0) / ($58|0))&-1;
   $60 = (($61) + ($$06679<<2)|0);
   $62 = HEAP32[$60>>2]|0;
   $63 = (($58) + -1)|0;
   $64 = (($58) + 254)|0;
   $65 = $63 << 1;
   $66 = (($64|0) / ($65|0))&-1;
   $$06477 = 0;$$06776 = $66;$$06975 = 0;
   while(1) {
    $67 = ($$06975|0)>($$06776|0);
    if ($67) {
     $$173 = $$06477;
     while(1) {
      $68 = (($$173) + 1)|0;
      $69 = $68 << 1;
      $70 = $69 | 1;
      $71 = ($70*255)|0;
      $72 = (($71) + ($63))|0;
      $73 = (($72|0) / ($65|0))&-1;
      $74 = ($$06975|0)>($73|0);
      if ($74) {
       $$173 = $68;
      } else {
       $$1$lcssa = $68;$$168$lcssa = $73;
       break;
      }
     }
    } else {
     $$1$lcssa = $$06477;$$168$lcssa = $$06776;
    }
    $75 = Math_imul($$1$lcssa, $59)|0;
    $76 = $75&255;
    $77 = (($62) + ($$06975)|0);
    HEAP8[$77>>0] = $76;
    $78 = (($$06975) + 1)|0;
    $exitcond89 = ($78|0)==(256);
    if ($exitcond89) {
     break;
    } else {
     $$06477 = $$1$lcssa;$$06776 = $$168$lcssa;$$06975 = $78;
    }
   }
   $79 = (($$06679) + 1)|0;
   $80 = HEAP32[$12>>2]|0;
   $81 = ($79|0)<($80|0);
   if (!($81)) {
    break;
   }
   $$pre = HEAP32[$15>>2]|0;
   $$06580 = $59;$$06679 = $79;$61 = $$pre;
  }
  return;
 }
 while(1) {
  $20 = (((($2)) + 32|0) + ($$06679$us<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($$06580$us|0) / ($21|0))&-1;
  $23 = (($24) + ($$06679$us<<2)|0);
  $25 = HEAP32[$23>>2]|0;
  $26 = ((($25)) + 255|0);
  HEAP32[$23>>2] = $26;
  $27 = HEAP32[$15>>2]|0;
  $28 = (($27) + ($$06679$us<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($21) + -1)|0;
  $31 = (($21) + 254)|0;
  $32 = $30 << 1;
  $33 = (($31|0) / ($32|0))&-1;
  $$06477$us = 0;$$06776$us = $33;$$06975$us = 0;
  while(1) {
   $53 = ($$06975$us|0)>($$06776$us|0);
   if ($53) {
    $$173$us = $$06477$us;
    while(1) {
     $46 = (($$173$us) + 1)|0;
     $47 = $46 << 1;
     $48 = $47 | 1;
     $49 = ($48*255)|0;
     $50 = (($49) + ($30))|0;
     $51 = (($50|0) / ($32|0))&-1;
     $52 = ($$06975$us|0)>($51|0);
     if ($52) {
      $$173$us = $46;
     } else {
      $$1$lcssa$us = $46;$$168$lcssa$us = $51;
      break;
     }
    }
   } else {
    $$1$lcssa$us = $$06477$us;$$168$lcssa$us = $$06776$us;
   }
   $42 = Math_imul($$1$lcssa$us, $22)|0;
   $43 = $42&255;
   $44 = (($29) + ($$06975$us)|0);
   HEAP8[$44>>0] = $43;
   $45 = (($$06975$us) + 1)|0;
   $exitcond = ($45|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $$06477$us = $$1$lcssa$us;$$06776$us = $$168$lcssa$us;$$06975$us = $45;
   }
  }
  $38 = ((($29)) + 255|0);
  $$17078$us = 1;
  while(1) {
   $34 = HEAP8[$29>>0]|0;
   $35 = (0 - ($$17078$us))|0;
   $36 = (($29) + ($35)|0);
   HEAP8[$36>>0] = $34;
   $37 = HEAP8[$38>>0]|0;
   $39 = (($$17078$us) + 255)|0;
   $40 = (($29) + ($39)|0);
   HEAP8[$40>>0] = $37;
   $41 = (($$17078$us) + 1)|0;
   $exitcond88 = ($41|0)==(256);
   if ($exitcond88) {
    break;
   } else {
    $$17078$us = $41;
   }
  }
  $54 = (($$06679$us) + 1)|0;
  $55 = HEAP32[$12>>2]|0;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $$pre90 = HEAP32[$15>>2]|0;
  $$06580$us = $22;$$06679$us = $54;$24 = $$pre90;
 }
 return;
}
function _color_quantize3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04347 = 0, $$04449 = 0, $$04546 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($7)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($7)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($3|0)<(1);
 $16 = ($14|0)==(0);
 $or$cond = $15 | $16;
 if ($or$cond) {
  return;
 } else {
  $$04449 = 0;
 }
 while(1) {
  $17 = (($1) + ($$04449<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($2) + ($$04449<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $$04347 = $14;$$04546 = $20;$$048 = $18;
  while(1) {
   $21 = ((($$048)) + 1|0);
   $22 = HEAP8[$$048>>0]|0;
   $23 = $22&255;
   $24 = (($8) + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ((($$048)) + 2|0);
   $28 = HEAP8[$21>>0]|0;
   $29 = $28&255;
   $30 = (($10) + ($29)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (($32) + ($26))|0;
   $34 = ((($$048)) + 3|0);
   $35 = HEAP8[$27>>0]|0;
   $36 = $35&255;
   $37 = (($12) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = (($33) + ($39))|0;
   $41 = $40&255;
   $42 = ((($$04546)) + 1|0);
   HEAP8[$$04546>>0] = $41;
   $43 = (($$04347) + -1)|0;
   $44 = ($43|0)==(0);
   if ($44) {
    break;
   } else {
    $$04347 = $43;$$04546 = $42;$$048 = $34;
   }
  }
  $45 = (($$04449) + 1)|0;
  $exitcond = ($45|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$04449 = $45;
  }
 }
 return;
}
function _color_quantize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04147$us = 0, $$04252$us = 0, $$04354 = 0, $$04451$us = 0, $$04550$us = 0, $$048$us = 0, $$146$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond76 = 0, $scevgep = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 120|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($3|0)>(0);
 if (!($12)) {
  return;
 }
 $13 = ($9|0)==(0);
 $14 = ($11|0)>(0);
 if ($13) {
  return;
 } else {
  $$04354 = 0;
 }
 while(1) {
  $15 = (($2) + ($$04354<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  if ($14) {
   $17 = (($1) + ($$04354<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $$04252$us = $9;$$04451$us = $16;$$04550$us = $18;
   while(1) {
    $$04147$us = 0;$$048$us = 0;$$146$us = $$04550$us;
    while(1) {
     $19 = (($7) + ($$04147$us<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($$146$us)) + 1|0);
     $22 = HEAP8[$$146$us>>0]|0;
     $23 = $22&255;
     $24 = (($20) + ($23)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = (($$048$us) + ($26))|0;
     $28 = (($$04147$us) + 1)|0;
     $exitcond = ($28|0)==($11|0);
     if ($exitcond) {
      break;
     } else {
      $$04147$us = $28;$$048$us = $27;$$146$us = $21;
     }
    }
    $scevgep = (($$04550$us) + ($11)|0);
    $29 = $27&255;
    $30 = ((($$04451$us)) + 1|0);
    HEAP8[$$04451$us>>0] = $29;
    $31 = (($$04252$us) + -1)|0;
    $32 = ($31|0)==(0);
    if ($32) {
     break;
    } else {
     $$04252$us = $31;$$04451$us = $30;$$04550$us = $scevgep;
    }
   }
  } else {
   _memset(($16|0),0,($9|0))|0;
  }
  $33 = (($$04354) + 1)|0;
  $exitcond76 = ($33|0)==($3|0);
  if ($exitcond76) {
   break;
  } else {
   $$04354 = $33;
  }
 }
 return;
}
function _quantize3_ord_dither($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07076 = 0, $$07178 = 0, $$07178$us = 0, $$07275 = 0, $$07374 = 0, $$077 = 0, $$pre84 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($7)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($7)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($3|0)>(0);
 if (!($15)) {
  return;
 }
 $16 = ((($5)) + 48|0);
 $17 = ((($5)) + 52|0);
 $18 = ((($5)) + 56|0);
 $19 = ((($5)) + 60|0);
 $20 = ($14|0)==(0);
 $$pre84 = HEAP32[$16>>2]|0;
 if ($20) {
  $$07178$us = 0;$22 = $$pre84;
  while(1) {
   $21 = (($22) + 1)|0;
   $23 = $21 & 15;
   $24 = (($$07178$us) + 1)|0;
   $exitcond = ($24|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$07178$us = $24;$22 = $23;
   }
  }
  HEAP32[$16>>2] = $23;
  return;
 } else {
  $$07178 = 0;$36 = $$pre84;
 }
 while(1) {
  $25 = (($1) + ($$07178<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($2) + ($$07178<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$17>>2]|0;
  $30 = HEAP32[$18>>2]|0;
  $31 = HEAP32[$19>>2]|0;
  $$07076 = $14;$$07275 = 0;$$07374 = $28;$$077 = $26;
  while(1) {
   $32 = ((($$077)) + 1|0);
   $33 = HEAP8[$$077>>0]|0;
   $34 = $33&255;
   $35 = ((($29) + ($36<<6)|0) + ($$07275<<2)|0);
   $37 = HEAP32[$35>>2]|0;
   $38 = (($37) + ($34))|0;
   $39 = (($8) + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ((($$077)) + 2|0);
   $43 = HEAP8[$32>>0]|0;
   $44 = $43&255;
   $45 = ((($30) + ($36<<6)|0) + ($$07275<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($44))|0;
   $48 = (($10) + ($47)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = (($50) + ($41))|0;
   $52 = ((($$077)) + 3|0);
   $53 = HEAP8[$42>>0]|0;
   $54 = $53&255;
   $55 = ((($31) + ($36<<6)|0) + ($$07275<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($54))|0;
   $58 = (($12) + ($57)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = (($51) + ($60))|0;
   $62 = $61&255;
   $63 = ((($$07374)) + 1|0);
   HEAP8[$$07374>>0] = $62;
   $64 = (($$07275) + 1)|0;
   $65 = $64 & 15;
   $66 = (($$07076) + -1)|0;
   $67 = ($66|0)==(0);
   if ($67) {
    break;
   } else {
    $$07076 = $66;$$07275 = $65;$$07374 = $63;$$077 = $52;
   }
  }
  $68 = (($36) + 1)|0;
  $69 = $68 & 15;
  HEAP32[$16>>2] = $69;
  $70 = (($$07178) + 1)|0;
  $exitcond83 = ($70|0)==($3|0);
  if ($exitcond83) {
   break;
  } else {
   $$07178 = $70;$36 = $69;
  }
 }
 return;
}
function _quantize_ord_dither($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06067$us79 = 0, $$06173 = 0, $$06173$us = 0, $$06269$us77 = 0, $$06366$us80 = 0, $$06465$us81 = 0, $$068$us78 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond89 = 0;
 var $exitcond90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3|0)>(0);
 if (!($10)) {
  return;
 }
 $11 = ((($5)) + 48|0);
 $12 = ($7|0)>(0);
 $13 = ((($5)) + 24|0);
 $14 = ($9|0)==(0);
 if ($12) {
  $$06173$us = 0;
 } else {
  $$06173 = 0;
  while(1) {
   $49 = (($2) + ($$06173<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   _jzero_far($50,$9);
   $51 = HEAP32[$11>>2]|0;
   $52 = (($51) + 1)|0;
   $53 = $52 & 15;
   HEAP32[$11>>2] = $53;
   $54 = (($$06173) + 1)|0;
   $exitcond90 = ($54|0)==($3|0);
   if ($exitcond90) {
    break;
   } else {
    $$06173 = $54;
   }
  }
  return;
 }
 while(1) {
  $15 = (($2) + ($$06173$us<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  _jzero_far($16,$9);
  $17 = HEAP32[$11>>2]|0;
  $18 = (($1) + ($$06173$us<<2)|0);
  if (!($14)) {
   $$06269$us77 = 0;
   while(1) {
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + ($$06269$us77)|0);
    $21 = HEAP32[$15>>2]|0;
    $22 = HEAP32[$13>>2]|0;
    $23 = (($22) + ($$06269$us77<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (((($5)) + 52|0) + ($$06269$us77<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $$06067$us79 = $9;$$06366$us80 = $21;$$06465$us81 = 0;$$068$us78 = $20;
    while(1) {
     $27 = HEAP8[$$068$us78>>0]|0;
     $28 = $27&255;
     $29 = ((($26) + ($17<<6)|0) + ($$06465$us81<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($28))|0;
     $32 = (($24) + ($31)|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = HEAP8[$$06366$us80>>0]|0;
     $36 = $35&255;
     $37 = (($36) + ($34))|0;
     $38 = $37&255;
     HEAP8[$$06366$us80>>0] = $38;
     $39 = (($$068$us78) + ($7)|0);
     $40 = ((($$06366$us80)) + 1|0);
     $41 = (($$06465$us81) + 1)|0;
     $42 = $41 & 15;
     $43 = (($$06067$us79) + -1)|0;
     $44 = ($43|0)==(0);
     if ($44) {
      break;
     } else {
      $$06067$us79 = $43;$$06366$us80 = $40;$$06465$us81 = $42;$$068$us78 = $39;
     }
    }
    $45 = (($$06269$us77) + 1)|0;
    $exitcond = ($45|0)==($7|0);
    if ($exitcond) {
     break;
    } else {
     $$06269$us77 = $45;
    }
   }
  }
  $46 = (($17) + 1)|0;
  $47 = $46 & 15;
  HEAP32[$11>>2] = $47;
  $48 = (($$06173$us) + 1)|0;
  $exitcond89 = ($48|0)==($3|0);
  if ($exitcond89) {
   break;
  } else {
   $$06173$us = $48;
  }
 }
 return;
}
function _quantize_fs_dither($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0114131 = 0, $$0115130 = 0, $$0116138 = 0, $$0117134 = 0, $$0117134$us = 0, $$0118 = 0, $$0119 = 0, $$0120129 = 0, $$0121 = 0, $$0121$us = 0, $$0122 = 0, $$0124 = 0, $$0132 = 0, $$1123127 = 0, $$1125126 = 0, $$1128 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $9 = 0, $exitcond = 0, $exitcond144 = 0, $exitcond145 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 324|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($3|0)>(0);
 if (!($12)) {
  return;
 }
 $13 = ($7|0)>(0);
 $14 = ((($5)) + 84|0);
 $15 = ((($5)) + 24|0);
 $16 = ((($5)) + 16|0);
 $17 = ($9|0)==(0);
 $18 = (($9) + -1)|0;
 $19 = Math_imul($18, $7)|0;
 $20 = (0 - ($7))|0;
 $21 = (($9) + 1)|0;
 $$0116138 = 0;
 while(1) {
  $22 = (($2) + ($$0116138<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  _jzero_far($23,$9);
  L6: do {
   if ($13) {
    $24 = (($1) + ($$0116138<<2)|0);
    if ($17) {
     $$pre = HEAP32[$14>>2]|0;
     $25 = ($$pre|0)==(0);
     $$0117134$us = 0;
     while(1) {
      $26 = (((($5)) + 68|0) + ($$0117134$us<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + ($21<<1)|0);
      $$0121$us = $25 ? $27 : $28;
      HEAP16[$$0121$us>>1] = 0;
      $29 = (($$0117134$us) + 1)|0;
      $exitcond144 = ($29|0)==($7|0);
      if ($exitcond144) {
       break L6;
      } else {
       $$0117134$us = $29;
      }
     }
    } else {
     $$0117134 = 0;
    }
    while(1) {
     $30 = HEAP32[$24>>2]|0;
     $31 = (($30) + ($$0117134)|0);
     $32 = HEAP32[$22>>2]|0;
     $33 = HEAP32[$14>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $40 = (((($5)) + 68|0) + ($$0117134<<2)|0);
      $41 = HEAP32[$40>>2]|0;
      $$0118 = $7;$$0119 = 1;$$0121 = $41;$$0122 = $31;$$0124 = $32;
     } else {
      $35 = (($31) + ($19)|0);
      $36 = (($32) + ($18)|0);
      $37 = (((($5)) + 68|0) + ($$0117134<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + ($21<<1)|0);
      $$0118 = $20;$$0119 = -1;$$0121 = $39;$$0122 = $35;$$0124 = $36;
     }
     $42 = HEAP32[$15>>2]|0;
     $43 = (($42) + ($$0117134<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$16>>2]|0;
     $46 = (($45) + ($$0117134<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = Math_imul($9, $$0119)|0;
     $$0114131 = 0;$$0115130 = $9;$$0120129 = 0;$$0132 = 0;$$1123127 = $$0122;$$1125126 = $$0124;$$1128 = $$0121;
     while(1) {
      $49 = (($$1128) + ($$0119<<1)|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = $50 << 16 >> 16;
      $52 = (($$0132) + 8)|0;
      $53 = (($52) + ($51))|0;
      $54 = $53 >> 4;
      $55 = HEAP8[$$1123127>>0]|0;
      $56 = $55&255;
      $57 = (($54) + ($56))|0;
      $58 = (($11) + ($57)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = (($44) + ($60)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = HEAP8[$$1125126>>0]|0;
      $65 = $64&255;
      $66 = (($65) + ($63))|0;
      $67 = $66&255;
      HEAP8[$$1125126>>0] = $67;
      $68 = (($47) + ($63)|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = $69&255;
      $71 = (($60) - ($70))|0;
      $72 = ($71*3)|0;
      $73 = (($72) + ($$0120129))|0;
      $74 = $73&65535;
      HEAP16[$$1128>>1] = $74;
      $75 = ($71*5)|0;
      $76 = (($75) + ($$0114131))|0;
      $77 = ($71*7)|0;
      $78 = (($$1123127) + ($$0118)|0);
      $79 = (($$1125126) + ($$0119)|0);
      $80 = (($$0115130) + -1)|0;
      $81 = ($80|0)==(0);
      if ($81) {
       break;
      } else {
       $$0114131 = $71;$$0115130 = $80;$$0120129 = $76;$$0132 = $77;$$1123127 = $78;$$1125126 = $79;$$1128 = $49;
      }
     }
     $scevgep = (($$0121) + ($48<<1)|0);
     $82 = $76&65535;
     HEAP16[$scevgep>>1] = $82;
     $83 = (($$0117134) + 1)|0;
     $exitcond = ($83|0)==($7|0);
     if ($exitcond) {
      break;
     } else {
      $$0117134 = $83;
     }
    }
   }
  } while(0);
  $84 = HEAP32[$14>>2]|0;
  $85 = ($84|0)==(0);
  $86 = $85&1;
  HEAP32[$14>>2] = $86;
  $87 = (($$0116138) + 1)|0;
  $exitcond145 = ($87|0)==($3|0);
  if ($exitcond145) {
   break;
  } else {
   $$0116138 = $87;
  }
 }
 return;
}
function _jinit_2pass_quantizer($0) {
 $0 = $0|0;
 var $$054 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,44)|0);
 $5 = ((($0)) + 460|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 96;
 $6 = ((($4)) + 12|0);
 HEAP32[$6>>2] = 97;
 $7 = ((($4)) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 40|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(3);
 if (!($11)) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 20|0);
  HEAP32[$13>>2] = 47;
  $14 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$14 & 255]($0);
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiii[$16 & 255]($0,1,128)|0);
 $18 = ((($4)) + 24|0);
 HEAP32[$18>>2] = $17;
 $$054 = 0;
 while(1) {
  $19 = HEAP32[$1>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 255]($0,1,4096)|0);
  $23 = HEAP32[$18>>2]|0;
  $24 = (($23) + ($$054<<2)|0);
  HEAP32[$24>>2] = $22;
  $25 = (($$054) + 1)|0;
  $exitcond = ($25|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $$054 = $25;
  }
 }
 $26 = ((($4)) + 28|0);
 HEAP32[$26>>2] = 1;
 $27 = ((($0)) + 108|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $50 = ((($4)) + 16|0);
  HEAP32[$50>>2] = 0;
 } else {
  $30 = ((($0)) + 96|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)<(8);
  if ($32) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 20|0);
   HEAP32[$34>>2] = 56;
   $35 = ((($33)) + 24|0);
   HEAP32[$35>>2] = 8;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 255]($0);
  } else {
   $38 = ($31|0)>(256);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 20|0);
    HEAP32[$40>>2] = 57;
    $41 = ((($39)) + 24|0);
    HEAP32[$41>>2] = 256;
    $42 = HEAP32[$0>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_vi[$43 & 255]($0);
   }
  }
  $44 = HEAP32[$1>>2]|0;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_iiiii[$46 & 127]($0,1,$31,3)|0);
  $48 = ((($4)) + 16|0);
  HEAP32[$48>>2] = $47;
  $49 = ((($4)) + 20|0);
  HEAP32[$49>>2] = $31;
 }
 $51 = ((($0)) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if ($53) {
  return;
 }
 HEAP32[$51>>2] = 2;
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($0)) + 112|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58*6)|0;
 $60 = (($59) + 12)|0;
 $61 = (FUNCTION_TABLE_iiii[$56 & 255]($0,1,$60)|0);
 HEAP32[$7>>2] = $61;
 _init_error_limit($0);
 return;
}
function _start_pass_2_quant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pass2_no_dither$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 460|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $13 = 0;
 } else {
  HEAP32[$6>>2] = 2;
  $13 = 2;
 }
 $9 = ($1|0)==(0);
 if ($9) {
  $14 = ($13|0)==(2);
  $15 = ((($3)) + 4|0);
  $pass2_no_dither$sink = $14 ? 101 : 100;
  HEAP32[$15>>2] = $pass2_no_dither$sink;
  $16 = ((($3)) + 8|0);
  HEAP32[$16>>2] = 102;
  $17 = ((($0)) + 132|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(1);
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $21 = ((($20)) + 20|0);
   HEAP32[$21>>2] = 56;
   $22 = ((($20)) + 24|0);
   HEAP32[$22>>2] = 1;
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vi[$24 & 255]($0);
  } else {
   $25 = ($18|0)>(256);
   if ($25) {
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 20|0);
    HEAP32[$27>>2] = 57;
    $28 = ((($26)) + 24|0);
    HEAP32[$28>>2] = 256;
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    FUNCTION_TABLE_vi[$30 & 255]($0);
   }
  }
  $31 = HEAP32[$6>>2]|0;
  $32 = ($31|0)==(2);
  if ($32) {
   $33 = ((($0)) + 112|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34*6)|0;
   $36 = (($35) + 12)|0;
   $37 = ((($3)) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $40 = ((($0)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 255]($0,1,$36)|0);
    HEAP32[$37>>2] = $44;
    $45 = $44;
   } else {
    $45 = $38;
   }
   _jzero_far($45,$36);
   $46 = ((($3)) + 40|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    _init_error_limit($0);
   }
   $49 = ((($3)) + 36|0);
   HEAP32[$49>>2] = 0;
  }
 } else {
  $10 = ((($3)) + 4|0);
  HEAP32[$10>>2] = 98;
  $11 = ((($3)) + 8|0);
  HEAP32[$11>>2] = 99;
  $12 = ((($3)) + 28|0);
  HEAP32[$12>>2] = 1;
 }
 $50 = ((($3)) + 28|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0);
 if ($52) {
  return;
 }
 $53 = HEAP32[$5>>2]|0;
 _jzero_far($53,4096);
 $54 = ((($5)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 _jzero_far($55,4096);
 $56 = ((($5)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 _jzero_far($57,4096);
 $58 = ((($5)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 _jzero_far($59,4096);
 $60 = ((($5)) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 _jzero_far($61,4096);
 $62 = ((($5)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 _jzero_far($63,4096);
 $64 = ((($5)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 _jzero_far($65,4096);
 $66 = ((($5)) + 28|0);
 $67 = HEAP32[$66>>2]|0;
 _jzero_far($67,4096);
 $68 = ((($5)) + 32|0);
 $69 = HEAP32[$68>>2]|0;
 _jzero_far($69,4096);
 $70 = ((($5)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 _jzero_far($71,4096);
 $72 = ((($5)) + 40|0);
 $73 = HEAP32[$72>>2]|0;
 _jzero_far($73,4096);
 $74 = ((($5)) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 _jzero_far($75,4096);
 $76 = ((($5)) + 48|0);
 $77 = HEAP32[$76>>2]|0;
 _jzero_far($77,4096);
 $78 = ((($5)) + 52|0);
 $79 = HEAP32[$78>>2]|0;
 _jzero_far($79,4096);
 $80 = ((($5)) + 56|0);
 $81 = HEAP32[$80>>2]|0;
 _jzero_far($81,4096);
 $82 = ((($5)) + 60|0);
 $83 = HEAP32[$82>>2]|0;
 _jzero_far($83,4096);
 $84 = ((($5)) + 64|0);
 $85 = HEAP32[$84>>2]|0;
 _jzero_far($85,4096);
 $86 = ((($5)) + 68|0);
 $87 = HEAP32[$86>>2]|0;
 _jzero_far($87,4096);
 $88 = ((($5)) + 72|0);
 $89 = HEAP32[$88>>2]|0;
 _jzero_far($89,4096);
 $90 = ((($5)) + 76|0);
 $91 = HEAP32[$90>>2]|0;
 _jzero_far($91,4096);
 $92 = ((($5)) + 80|0);
 $93 = HEAP32[$92>>2]|0;
 _jzero_far($93,4096);
 $94 = ((($5)) + 84|0);
 $95 = HEAP32[$94>>2]|0;
 _jzero_far($95,4096);
 $96 = ((($5)) + 88|0);
 $97 = HEAP32[$96>>2]|0;
 _jzero_far($97,4096);
 $98 = ((($5)) + 92|0);
 $99 = HEAP32[$98>>2]|0;
 _jzero_far($99,4096);
 $100 = ((($5)) + 96|0);
 $101 = HEAP32[$100>>2]|0;
 _jzero_far($101,4096);
 $102 = ((($5)) + 100|0);
 $103 = HEAP32[$102>>2]|0;
 _jzero_far($103,4096);
 $104 = ((($5)) + 104|0);
 $105 = HEAP32[$104>>2]|0;
 _jzero_far($105,4096);
 $106 = ((($5)) + 108|0);
 $107 = HEAP32[$106>>2]|0;
 _jzero_far($107,4096);
 $108 = ((($5)) + 112|0);
 $109 = HEAP32[$108>>2]|0;
 _jzero_far($109,4096);
 $110 = ((($5)) + 116|0);
 $111 = HEAP32[$110>>2]|0;
 _jzero_far($111,4096);
 $112 = ((($5)) + 120|0);
 $113 = HEAP32[$112>>2]|0;
 _jzero_far($113,4096);
 $114 = ((($5)) + 124|0);
 $115 = HEAP32[$114>>2]|0;
 _jzero_far($115,4096);
 HEAP32[$50>>2] = 0;
 return;
}
function _new_color_map_2_quant($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 460|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 HEAP32[$3>>2] = 1;
 return;
}
function _init_error_limit($0) {
 $0 = $0|0;
 var $$14043 = 0, $$144 = 0, $$242 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 460|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($0,1,2044)|0);
 $7 = ((($6)) + 1020|0);
 $8 = ((($2)) + 40|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$7>>2] = 0;
 $9 = ((($6)) + 1024|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($6)) + 1016|0);
 HEAP32[$10>>2] = -1;
 $11 = ((($6)) + 1028|0);
 HEAP32[$11>>2] = 2;
 $12 = ((($6)) + 1012|0);
 HEAP32[$12>>2] = -2;
 $13 = ((($6)) + 1032|0);
 HEAP32[$13>>2] = 3;
 $14 = ((($6)) + 1008|0);
 HEAP32[$14>>2] = -3;
 $15 = ((($6)) + 1036|0);
 HEAP32[$15>>2] = 4;
 $16 = ((($6)) + 1004|0);
 HEAP32[$16>>2] = -4;
 $17 = ((($6)) + 1040|0);
 HEAP32[$17>>2] = 5;
 $18 = ((($6)) + 1000|0);
 HEAP32[$18>>2] = -5;
 $19 = ((($6)) + 1044|0);
 HEAP32[$19>>2] = 6;
 $20 = ((($6)) + 996|0);
 HEAP32[$20>>2] = -6;
 $21 = ((($6)) + 1048|0);
 HEAP32[$21>>2] = 7;
 $22 = ((($6)) + 992|0);
 HEAP32[$22>>2] = -7;
 $23 = ((($6)) + 1052|0);
 HEAP32[$23>>2] = 8;
 $24 = ((($6)) + 988|0);
 HEAP32[$24>>2] = -8;
 $25 = ((($6)) + 1056|0);
 HEAP32[$25>>2] = 9;
 $26 = ((($6)) + 984|0);
 HEAP32[$26>>2] = -9;
 $27 = ((($6)) + 1060|0);
 HEAP32[$27>>2] = 10;
 $28 = ((($6)) + 980|0);
 HEAP32[$28>>2] = -10;
 $29 = ((($6)) + 1064|0);
 HEAP32[$29>>2] = 11;
 $30 = ((($6)) + 976|0);
 HEAP32[$30>>2] = -11;
 $31 = ((($6)) + 1068|0);
 HEAP32[$31>>2] = 12;
 $32 = ((($6)) + 972|0);
 HEAP32[$32>>2] = -12;
 $33 = ((($6)) + 1072|0);
 HEAP32[$33>>2] = 13;
 $34 = ((($6)) + 968|0);
 HEAP32[$34>>2] = -13;
 $35 = ((($6)) + 1076|0);
 HEAP32[$35>>2] = 14;
 $36 = ((($6)) + 964|0);
 HEAP32[$36>>2] = -14;
 $37 = ((($6)) + 1080|0);
 HEAP32[$37>>2] = 15;
 $38 = ((($6)) + 960|0);
 HEAP32[$38>>2] = -15;
 $$14043 = 16;$$144 = 16;
 while(1) {
  $42 = (($7) + ($$14043<<2)|0);
  HEAP32[$42>>2] = $$144;
  $43 = (0 - ($$144))|0;
  $44 = (0 - ($$14043))|0;
  $45 = (($7) + ($44<<2)|0);
  HEAP32[$45>>2] = $43;
  $46 = (($$14043) + 1)|0;
  $47 = $46 & 1;
  $48 = $47 ^ 1;
  $41 = (($48) + ($$144))|0;
  $49 = ($$14043|0)<(47);
  if ($49) {
   $$14043 = $46;$$144 = $41;
  } else {
   break;
  }
 }
 $39 = ($$14043|0)<(255);
 if (!($39)) {
  return;
 }
 $40 = (0 - ($41))|0;
 $$242 = $46;
 while(1) {
  $50 = (($7) + ($$242<<2)|0);
  HEAP32[$50>>2] = $41;
  $51 = (0 - ($$242))|0;
  $52 = (($7) + ($51<<2)|0);
  HEAP32[$52>>2] = $40;
  $53 = (($$242) + 1)|0;
  $54 = ($$242|0)<(255);
  if ($54) {
   $$242 = $53;
  } else {
   break;
  }
 }
 return;
}
function _prescan_quantize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$03032 = 0, $$03134 = 0, $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3|0)<(1);
 $11 = ($9|0)==(0);
 $or$cond = $10 | $11;
 if ($or$cond) {
  return;
 } else {
  $$03134 = 0;
 }
 while(1) {
  $12 = (($1) + ($$03134<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $$03032 = $9;$$033 = $13;
  while(1) {
   $14 = HEAP8[$$033>>0]|0;
   $15 = $14&255;
   $16 = $15 >>> 3;
   $17 = (($7) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($$033)) + 1|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $21 >>> 2;
   $23 = ((($$033)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $25 >>> 3;
   $27 = ((($18) + ($22<<6)|0) + ($26<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = (($28) + 1)<<16>>16;
   $30 = ($29<<16>>16)==(0);
   $$ = $30 ? $28 : $29;
   HEAP16[$27>>1] = $$;
   $31 = ((($$033)) + 3|0);
   $32 = (($$03032) + -1)|0;
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   } else {
    $$03032 = $32;$$033 = $31;
   }
  }
  $34 = (($$03134) + 1)|0;
  $exitcond = ($34|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$03134 = $34;
  }
 }
 return;
}
function _finish_pass1($0) {
 $0 = $0|0;
 var $$$016$i$i$i = 0, $$$017$i$i$i = 0, $$$4$i$i = 0, $$$i$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i34$i = 0, $$0$lcssa$i40$i = 0, $$0$lcssa$i41$i = 0, $$0123$i$i = 0, $$014$i$i = 0, $$01622$i$i$i = 0, $$01723$i$i$i = 0, $$01821$i$i$i = 0, $$019$$0$i$i$i = 0, $$01920$i$i$i = 0, $$01922$i$i$i = 0, $$020$$0$i$i$i = 0, $$02021$i$i$i = 0, $$023$i$i$i = 0, $$024$i$i$i = 0;
 var $$036$i = 0, $$081$i$i = 0, $$083$lcssa$i$i = 0, $$083122$i$i = 0, $$087$lcssa$i$i = 0, $$087121$i$i = 0, $$091$lcssa$i$i = 0, $$091120$i$i = 0, $$095100$i$i = 0, $$096119$i$i = 0, $$097108$i$i = 0, $$09899$i$i = 0, $$1$i$i$i = 0, $$1112$i$i = 0, $$118$i$i$i = 0, $$184111$i$i = 0, $$188110$i$i = 0, $$192109$i$i = 0, $$2104$i$i = 0, $$285103$i$i = 0;
 var $$289102$i$i = 0, $$293101$i$i = 0, $$3$i$i = 0, $$3$i33$i = 0, $$386$i$i = 0, $$390$i$i = 0, $$394$i$i = 0, $$4$i$i = 0, $$4$sink$i$i = 0, $$5$i$i = 0, $$5$sink$i$i = 0, $$sink6$i$i = 0, $$sink7$i$i = 0, $$sink8$i$i = 0, $$sink9$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i$i$i = 0, $exitcond$i10$i$i = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond44$i = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 460|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 136|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($2)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $7 << 5;
 $12 = (FUNCTION_TABLE_iiii[$10 & 255]($0,1,$11)|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 31;
 $14 = ((($12)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($12)) + 12|0);
 HEAP32[$15>>2] = 63;
 $16 = ((($12)) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 20|0);
 HEAP32[$17>>2] = 31;
 _update_box($0,$12);
 $18 = ($7|0)>(1);
 if ($18) {
  $19 = ((($0)) + 44|0);
  $$014$i$i = 1;
  while(1) {
   $20 = $$014$i$i << 1;
   $21 = ($20|0)>($7|0);
   if ($21) {
    $$01622$i$i$i = 0;$$01821$i$i$i = 0;$$01920$i$i$i = $12;$$023$i$i$i = 0;
    while(1) {
     $30 = ((($$01920$i$i$i)) + 24|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)>($$01622$i$i$i|0);
     $$$016$i$i$i = $32 ? $31 : $$01622$i$i$i;
     $$019$$0$i$i$i = $32 ? $$01920$i$i$i : $$023$i$i$i;
     $33 = (($$01821$i$i$i) + 1)|0;
     $34 = ((($$01920$i$i$i)) + 32|0);
     $exitcond$i10$i$i = ($33|0)==($$014$i$i|0);
     if ($exitcond$i10$i$i) {
      $$081$i$i = $$019$$0$i$i$i;
      break;
     } else {
      $$01622$i$i$i = $$$016$i$i$i;$$01821$i$i$i = $33;$$01920$i$i$i = $34;$$023$i$i$i = $$019$$0$i$i$i;
     }
    }
   } else {
    $$01723$i$i$i = 0;$$01922$i$i$i = 0;$$02021$i$i$i = $12;$$024$i$i$i = 0;
    while(1) {
     $22 = ((($$02021$i$i$i)) + 28|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)>($$01723$i$i$i|0);
     if ($24) {
      $25 = ((($$02021$i$i$i)) + 24|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)>(0);
      $$$017$i$i$i = $27 ? $23 : $$01723$i$i$i;
      $$020$$0$i$i$i = $27 ? $$02021$i$i$i : $$024$i$i$i;
      $$1$i$i$i = $$020$$0$i$i$i;$$118$i$i$i = $$$017$i$i$i;
     } else {
      $$1$i$i$i = $$024$i$i$i;$$118$i$i$i = $$01723$i$i$i;
     }
     $28 = (($$01922$i$i$i) + 1)|0;
     $29 = ((($$02021$i$i$i)) + 32|0);
     $exitcond$i$i$i = ($28|0)==($$014$i$i|0);
     if ($exitcond$i$i$i) {
      $$081$i$i = $$1$i$i$i;
      break;
     } else {
      $$01723$i$i$i = $$118$i$i$i;$$01922$i$i$i = $28;$$02021$i$i$i = $29;$$024$i$i$i = $$1$i$i$i;
     }
    }
   }
   $35 = ($$081$i$i|0)==(0|0);
   if ($35) {
    $$0$lcssa$i$i = $$014$i$i;
    break;
   }
   $36 = (($12) + ($$014$i$i<<5)|0);
   $37 = ((($$081$i$i)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (((($12) + ($$014$i$i<<5)|0)) + 4|0);
   HEAP32[$39>>2] = $38;
   $40 = ((($$081$i$i)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (((($12) + ($$014$i$i<<5)|0)) + 12|0);
   HEAP32[$42>>2] = $41;
   $43 = ((($$081$i$i)) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (((($12) + ($$014$i$i<<5)|0)) + 20|0);
   HEAP32[$45>>2] = $44;
   $46 = HEAP32[$$081$i$i>>2]|0;
   HEAP32[$36>>2] = $46;
   $47 = ((($$081$i$i)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (((($12) + ($$014$i$i<<5)|0)) + 8|0);
   HEAP32[$49>>2] = $48;
   $50 = ((($$081$i$i)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (((($12) + ($$014$i$i<<5)|0)) + 16|0);
   HEAP32[$52>>2] = $51;
   $53 = HEAP32[$37>>2]|0;
   $54 = HEAP32[$$081$i$i>>2]|0;
   $55 = (($53) - ($54))|0;
   $56 = $55 << 3;
   $57 = HEAP32[$19>>2]|0;
   $58 = (780 + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (848 + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = Math_imul($61, $56)|0;
   $63 = HEAP32[$40>>2]|0;
   $64 = HEAP32[$47>>2]|0;
   $65 = (($63) - ($64))|0;
   $66 = $65 << 2;
   $67 = (860 + ($57<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (848 + ($68<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = Math_imul($66, $70)|0;
   $72 = HEAP32[$43>>2]|0;
   $73 = HEAP32[$50>>2]|0;
   $74 = (($72) - ($73))|0;
   $75 = $74 << 3;
   $76 = (928 + ($57<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (848 + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = Math_imul($75, $79)|0;
   $81 = 4292 >>> $57;
   $82 = $81 & 1;
   $83 = ($82|0)==(0);
   if ($83) {
    $85 = ($80|0)>($71|0);
    $$4$i$i = $85 ? 2 : 1;
    $$5$i$i = $85 ? $80 : $71;
    $$4$sink$i$i = $$4$i$i;$$5$sink$i$i = $$5$i$i;$$sink8$i$i = 0;$$sink9$i$i = $62;
   } else {
    $84 = ($62|0)>($71|0);
    $not$$i$i = $84 ^ 1;
    $$$i$i = $not$$i$i&1;
    $$3$i$i = $84 ? $62 : $71;
    $$4$sink$i$i = $$$i$i;$$5$sink$i$i = $$3$i$i;$$sink8$i$i = 2;$$sink9$i$i = $80;
   }
   $86 = ($$sink9$i$i|0)>($$5$sink$i$i|0);
   $$$4$i$i = $86 ? $$sink8$i$i : $$4$sink$i$i;
   $trunc$i$i = $$$4$i$i&255;
   $trunc$i$i$clear = $trunc$i$i & 3;
   switch ($trunc$i$i$clear<<24>>24) {
   case 0:  {
    $87 = (($54) + ($53))|0;
    $88 = (($87|0) / 2)&-1;
    HEAP32[$37>>2] = $88;
    $$sink6$i$i = $36;$$sink7$i$i = $88;
    label = 16;
    break;
   }
   case 1:  {
    $89 = (($64) + ($63))|0;
    $90 = (($89|0) / 2)&-1;
    HEAP32[$40>>2] = $90;
    $$sink6$i$i = $49;$$sink7$i$i = $90;
    label = 16;
    break;
   }
   case 2:  {
    $91 = (($73) + ($72))|0;
    $92 = (($91|0) / 2)&-1;
    HEAP32[$43>>2] = $92;
    $$sink6$i$i = $52;$$sink7$i$i = $92;
    label = 16;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 16) {
    label = 0;
    $93 = (($$sink7$i$i) + 1)|0;
    HEAP32[$$sink6$i$i>>2] = $93;
   }
   _update_box($0,$$081$i$i);
   _update_box($0,$36);
   $94 = (($$014$i$i) + 1)|0;
   $95 = ($94|0)<($7|0);
   if ($95) {
    $$014$i$i = $94;
   } else {
    $$0$lcssa$i$i = $94;
    break;
   }
  }
  $96 = ($$0$lcssa$i$i|0)>(0);
  if ($96) {
   $$0$lcssa$i41$i = $$0$lcssa$i$i;
  } else {
   $$0$lcssa$i40$i = $$0$lcssa$i$i;
   $163 = ((($0)) + 132|0);
   HEAP32[$163>>2] = $$0$lcssa$i40$i;
   $164 = HEAP32[$0>>2]|0;
   $165 = ((($164)) + 20|0);
   HEAP32[$165>>2] = 96;
   $166 = ((($164)) + 24|0);
   HEAP32[$166>>2] = $$0$lcssa$i40$i;
   $167 = HEAP32[$0>>2]|0;
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   FUNCTION_TABLE_vii[$169 & 255]($0,1);
   $170 = ((($2)) + 28|0);
   HEAP32[$170>>2] = 1;
   return;
  }
 } else {
  $$0$lcssa$i41$i = 1;
 }
 $$036$i = 0;
 while(1) {
  $97 = HEAP32[$1>>2]|0;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($12) + ($$036$i<<5)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (((($12) + ($$036$i<<5)|0)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (((($12) + ($$036$i<<5)|0)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (((($12) + ($$036$i<<5)|0)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (((($12) + ($$036$i<<5)|0)) + 16|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (((($12) + ($$036$i<<5)|0)) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($101|0)>($103|0);
  $113 = ($105|0)>($107|0);
  $or$cond$i = $112 | $113;
  $114 = ($109|0)>($111|0);
  $or$cond44$i = $or$cond$i | $114;
  if ($or$cond44$i) {
   $$0$lcssa$i34$i = 0;$$083$lcssa$i$i = 0;$$087$lcssa$i$i = 0;$$091$lcssa$i$i = 0;
  } else {
   $$0123$i$i = 0;$$083122$i$i = 0;$$087121$i$i = 0;$$091120$i$i = 0;$$096119$i$i = $101;
   while(1) {
    $115 = (($99) + ($$096119$i$i<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $$096119$i$i << 3;
    $118 = $117 | 4;
    $$097108$i$i = $105;$$1112$i$i = $$0123$i$i;$$184111$i$i = $$083122$i$i;$$188110$i$i = $$087121$i$i;$$192109$i$i = $$091120$i$i;
    while(1) {
     $119 = ((($116) + ($$097108$i$i<<6)|0) + ($109<<1)|0);
     $120 = $$097108$i$i << 2;
     $121 = $120 | 2;
     $$095100$i$i = $119;$$09899$i$i = $109;$$2104$i$i = $$1112$i$i;$$285103$i$i = $$184111$i$i;$$289102$i$i = $$188110$i$i;$$293101$i$i = $$192109$i$i;
     while(1) {
      $122 = ((($$095100$i$i)) + 2|0);
      $123 = HEAP16[$$095100$i$i>>1]|0;
      $124 = $123&65535;
      $125 = ($123<<16>>16)==(0);
      if ($125) {
       $$3$i33$i = $$2104$i$i;$$386$i$i = $$285103$i$i;$$390$i$i = $$289102$i$i;$$394$i$i = $$293101$i$i;
      } else {
       $126 = (($$293101$i$i) + ($124))|0;
       $127 = Math_imul($118, $124)|0;
       $128 = (($127) + ($$289102$i$i))|0;
       $129 = Math_imul($121, $124)|0;
       $130 = (($129) + ($$285103$i$i))|0;
       $131 = $$09899$i$i << 3;
       $132 = $131 | 4;
       $133 = Math_imul($132, $124)|0;
       $134 = (($133) + ($$2104$i$i))|0;
       $$3$i33$i = $134;$$386$i$i = $130;$$390$i$i = $128;$$394$i$i = $126;
      }
      $135 = (($$09899$i$i) + 1)|0;
      $136 = ($$09899$i$i|0)<($111|0);
      if ($136) {
       $$095100$i$i = $122;$$09899$i$i = $135;$$2104$i$i = $$3$i33$i;$$285103$i$i = $$386$i$i;$$289102$i$i = $$390$i$i;$$293101$i$i = $$394$i$i;
      } else {
       break;
      }
     }
     $137 = (($$097108$i$i) + 1)|0;
     $138 = ($$097108$i$i|0)<($107|0);
     if ($138) {
      $$097108$i$i = $137;$$1112$i$i = $$3$i33$i;$$184111$i$i = $$386$i$i;$$188110$i$i = $$390$i$i;$$192109$i$i = $$394$i$i;
     } else {
      break;
     }
    }
    $139 = (($$096119$i$i) + 1)|0;
    $140 = ($$096119$i$i|0)<($103|0);
    if ($140) {
     $$0123$i$i = $$3$i33$i;$$083122$i$i = $$386$i$i;$$087121$i$i = $$390$i$i;$$091120$i$i = $$394$i$i;$$096119$i$i = $139;
    } else {
     $$0$lcssa$i34$i = $$3$i33$i;$$083$lcssa$i$i = $$386$i$i;$$087$lcssa$i$i = $$390$i$i;$$091$lcssa$i$i = $$394$i$i;
     break;
    }
   }
  }
  $141 = $$091$lcssa$i$i >> 1;
  $142 = (($$087$lcssa$i$i) + ($141))|0;
  $143 = (($142|0) / ($$091$lcssa$i$i|0))&-1;
  $144 = $143&255;
  $145 = HEAP32[$5>>2]|0;
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + ($$036$i)|0);
  HEAP8[$147>>0] = $144;
  $148 = (($$083$lcssa$i$i) + ($141))|0;
  $149 = (($148|0) / ($$091$lcssa$i$i|0))&-1;
  $150 = $149&255;
  $151 = HEAP32[$5>>2]|0;
  $152 = ((($151)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($$036$i)|0);
  HEAP8[$154>>0] = $150;
  $155 = (($$0$lcssa$i34$i) + ($141))|0;
  $156 = (($155|0) / ($$091$lcssa$i$i|0))&-1;
  $157 = $156&255;
  $158 = HEAP32[$5>>2]|0;
  $159 = ((($158)) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + ($$036$i)|0);
  HEAP8[$161>>0] = $157;
  $162 = (($$036$i) + 1)|0;
  $exitcond$i = ($162|0)==($$0$lcssa$i41$i|0);
  if ($exitcond$i) {
   $$0$lcssa$i40$i = $$0$lcssa$i41$i;
   break;
  } else {
   $$036$i = $162;
  }
 }
 $163 = ((($0)) + 132|0);
 HEAP32[$163>>2] = $$0$lcssa$i40$i;
 $164 = HEAP32[$0>>2]|0;
 $165 = ((($164)) + 20|0);
 HEAP32[$165>>2] = 96;
 $166 = ((($164)) + 24|0);
 HEAP32[$166>>2] = $$0$lcssa$i40$i;
 $167 = HEAP32[$0>>2]|0;
 $168 = ((($167)) + 4|0);
 $169 = HEAP32[$168>>2]|0;
 FUNCTION_TABLE_vii[$169 & 255]($0,1);
 $170 = ((($2)) + 28|0);
 HEAP32[$170>>2] = 1;
 return;
}
function _pass2_fs_dither($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0166194 = 0, $$0167193 = 0, $$0168192 = 0, $$0169191 = 0, $$0170190 = 0, $$0171$lcssa = 0, $$0171189 = 0, $$0172$lcssa = 0, $$0172188 = 0, $$0173187 = 0, $$0174199 = 0, $$0175 = 0, $$0176 = 0, $$0177$lcssa = 0, $$0177186 = 0, $$0178 = 0, $$0179 = 0, $$0181 = 0, $$0195 = 0, $$1180184 = 0;
 var $$1182$lcssa = 0, $$1182183 = 0, $$1185 = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 324|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($15)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($15)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($3|0)>(0);
 if (!($21)) {
  return;
 }
 $22 = ((($5)) + 36|0);
 $23 = ((($5)) + 32|0);
 $24 = ($9|0)==(0);
 $25 = (($9) + -1)|0;
 $26 = ($25*3)|0;
 $27 = ($9*3)|0;
 $28 = (($27) + 3)|0;
 $$0174199 = 0;
 while(1) {
  $29 = (($1) + ($$0174199<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($2) + ($$0174199<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$22>>2]|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $39 = HEAP32[$23>>2]|0;
   $$0175 = 3;$$0176 = 1;$$0178 = $32;$$0179 = $30;$$0181 = $39;$$sink = 1;
  } else {
   $35 = (($30) + ($26)|0);
   $36 = (($32) + ($25)|0);
   $37 = HEAP32[$23>>2]|0;
   $38 = (($37) + ($28<<1)|0);
   $$0175 = -3;$$0176 = -1;$$0178 = $36;$$0179 = $35;$$0181 = $38;$$sink = 0;
  }
  HEAP32[$22>>2] = $$sink;
  if ($24) {
   $$0171$lcssa = 0;$$0172$lcssa = 0;$$0177$lcssa = 0;$$1182$lcssa = $$0181;
  } else {
   $40 = (($$0175) + 1)|0;
   $41 = (($$0175) + 2)|0;
   $42 = Math_imul($9, $$0175)|0;
   $$0166194 = 0;$$0167193 = 0;$$0168192 = 0;$$0169191 = 0;$$0170190 = 0;$$0171189 = 0;$$0172188 = 0;$$0173187 = $9;$$0177186 = 0;$$0195 = 0;$$1180184 = $$0179;$$1182183 = $$0181;$$1185 = $$0178;
   while(1) {
    $43 = (($$1182183) + ($$0175<<1)|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44 << 16 >> 16;
    $46 = (($$0195) + 8)|0;
    $47 = (($46) + ($45))|0;
    $48 = $47 >> 4;
    $49 = (($$1182183) + ($40<<1)|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50 << 16 >> 16;
    $52 = (($$0166194) + 8)|0;
    $53 = (($52) + ($51))|0;
    $54 = $53 >> 4;
    $55 = (($$1182183) + ($41<<1)|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $56 << 16 >> 16;
    $58 = (($$0167193) + 8)|0;
    $59 = (($58) + ($57))|0;
    $60 = $59 >> 4;
    $61 = (($13) + ($48<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($13) + ($54<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($13) + ($60<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP8[$$1180184>>0]|0;
    $68 = $67&255;
    $69 = (($62) + ($68))|0;
    $70 = ((($$1180184)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = (($64) + ($72))|0;
    $74 = ((($$1180184)) + 2|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = (($66) + ($76))|0;
    $78 = (($11) + ($69)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($11) + ($73)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = (($11) + ($77)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $80 >>> 3;
    $88 = (($7) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $83 >>> 2;
    $91 = $86 >>> 3;
    $92 = ((($89) + ($90<<6)|0) + ($91<<1)|0);
    $93 = HEAP16[$92>>1]|0;
    $94 = ($93<<16>>16)==(0);
    if ($94) {
     _fill_inverse_cmap($0,$87,$90,$91);
     $$pre = HEAP16[$92>>1]|0;
     $96 = $$pre;
    } else {
     $96 = $93;
    }
    $95 = $96&65535;
    $97 = (($95) + -1)|0;
    $98 = $97&255;
    HEAP8[$$1185>>0] = $98;
    $99 = (($16) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = (($80) - ($101))|0;
    $103 = (($18) + ($97)|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($83) - ($105))|0;
    $107 = (($20) + ($97)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (($86) - ($109))|0;
    $111 = ($102*3)|0;
    $112 = (($111) + ($$0171189))|0;
    $113 = $112&65535;
    HEAP16[$$1182183>>1] = $113;
    $114 = ($102*5)|0;
    $115 = (($114) + ($$0168192))|0;
    $116 = ($102*7)|0;
    $117 = ($106*3)|0;
    $118 = (($117) + ($$0172188))|0;
    $119 = $118&65535;
    $120 = ((($$1182183)) + 2|0);
    HEAP16[$120>>1] = $119;
    $121 = ($106*5)|0;
    $122 = (($121) + ($$0169191))|0;
    $123 = ($106*7)|0;
    $124 = ($110*3)|0;
    $125 = (($124) + ($$0177186))|0;
    $126 = $125&65535;
    $127 = ((($$1182183)) + 4|0);
    HEAP16[$127>>1] = $126;
    $128 = ($110*5)|0;
    $129 = (($128) + ($$0170190))|0;
    $130 = ($110*7)|0;
    $131 = (($$1180184) + ($$0175)|0);
    $132 = (($$1185) + ($$0176)|0);
    $133 = (($$0173187) + -1)|0;
    $134 = ($133|0)==(0);
    if ($134) {
     break;
    } else {
     $$0166194 = $123;$$0167193 = $130;$$0168192 = $102;$$0169191 = $106;$$0170190 = $110;$$0171189 = $115;$$0172188 = $122;$$0173187 = $133;$$0177186 = $129;$$0195 = $116;$$1180184 = $131;$$1182183 = $43;$$1185 = $132;
    }
   }
   $scevgep = (($$0181) + ($42<<1)|0);
   $$0171$lcssa = $115;$$0172$lcssa = $122;$$0177$lcssa = $129;$$1182$lcssa = $scevgep;
  }
  $135 = $$0171$lcssa&65535;
  HEAP16[$$1182$lcssa>>1] = $135;
  $136 = $$0172$lcssa&65535;
  $137 = ((($$1182$lcssa)) + 2|0);
  HEAP16[$137>>1] = $136;
  $138 = $$0177$lcssa&65535;
  $139 = ((($$1182$lcssa)) + 4|0);
  HEAP16[$139>>1] = $138;
  $140 = (($$0174199) + 1)|0;
  $exitcond = ($140|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$0174199 = $140;
  }
 }
 return;
}
function _pass2_no_dither($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04751 = 0, $$04853 = 0, $$04950 = 0, $$052 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 460|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3|0)<(1);
 $11 = ($9|0)==(0);
 $or$cond = $10 | $11;
 if ($or$cond) {
  return;
 } else {
  $$04853 = 0;
 }
 while(1) {
  $12 = (($1) + ($$04853<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($2) + ($$04853<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $$04751 = $9;$$04950 = $15;$$052 = $13;
  while(1) {
   $16 = ((($$052)) + 1|0);
   $17 = HEAP8[$$052>>0]|0;
   $18 = $17&255;
   $19 = $18 >>> 3;
   $20 = ((($$052)) + 2|0);
   $21 = HEAP8[$16>>0]|0;
   $22 = $21&255;
   $23 = $22 >>> 2;
   $24 = ((($$052)) + 3|0);
   $25 = HEAP8[$20>>0]|0;
   $26 = $25&255;
   $27 = $26 >>> 3;
   $28 = (($7) + ($19<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29) + ($23<<6)|0) + ($27<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ($31<<16>>16)==(0);
   if ($32) {
    _fill_inverse_cmap($0,$19,$23,$27);
    $$pre = HEAP16[$30>>1]|0;
    $34 = $$pre;
   } else {
    $34 = $31;
   }
   $33 = $34&65535;
   $35 = (($33) + 255)|0;
   $36 = $35&255;
   $37 = ((($$04950)) + 1|0);
   HEAP8[$$04950>>0] = $36;
   $38 = (($$04751) + -1)|0;
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$04751 = $38;$$04950 = $37;$$052 = $24;
   }
  }
  $40 = (($$04853) + 1)|0;
  $exitcond = ($40|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$04853 = $40;
  }
 }
 return;
}
function _finish_pass2($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _fill_inverse_cmap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$0107134$i = 0, $$0110133$i = 0, $$0111132$i = 0, $$0135$i = 0, $$0171$i = 0, $$0174184$i = 0, $$0176$lcssa$i = 0, $$0176182$i = 0, $$0178183$i = 0, $$05468 = 0, $$05767 = 0, $$1$i = 0, $$1113131$i = 0, $$1117136$i = 0, $$1172$i = 0, $$1177$i = 0, $$1179181$i = 0, $$2$$0174$i = 0, $$2$i = 0;
 var $$2173$i = 0, $$in$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert152$i = 0, $$phi$trans$insert156$i = 0, $$phi$trans$insert158$i = 0, $$phi$trans$insert161$i = 0, $$phi$trans$insert163$i = 0, $$phi$trans$insert166$i = 0, $$phi$trans$insert168$i = 0, $$phi$trans$insert171$i = 0, $$phi$trans$insert173$i = 0, $$phi$trans$insert176$i = 0, $$phi$trans$insert178$i = 0, $$phi$trans$insert181$i = 0, $$phi$trans$insert183$i = 0, $$phi$trans$insert186$i = 0, $$phi$trans$insert188$i = 0, $$phi$trans$insert191$i = 0, $$phi$trans$insert193$i = 0;
 var $$phi$trans$insert196$i = 0, $$phi$trans$insert198$i = 0, $$phi$trans$insert201$i = 0, $$phi$trans$insert203$i = 0, $$phi$trans$insert206$i = 0, $$phi$trans$insert208$i = 0, $$phi$trans$insert211$i = 0, $$phi$trans$insert213$i = 0, $$phi$trans$insert216$i = 0, $$phi$trans$insert218$i = 0, $$phi$trans$insert221$i = 0, $$phi$trans$insert223$i = 0, $$phi$trans$insert226$i = 0, $$phi$trans$insert228$i = 0, $$phi$trans$insert231$i = 0, $$phi$trans$insert233$i = 0, $$phi$trans$insert236$i = 0, $$phi$trans$insert238$i = 0, $$phi$trans$insert241$i = 0, $$phi$trans$insert243$i = 0;
 var $$phi$trans$insert246$i = 0, $$phi$trans$insert248$i = 0, $$phi$trans$insert251$i = 0, $$phi$trans$insert253$i = 0, $$phi$trans$insert256$i = 0, $$phi$trans$insert258$i = 0, $$phi$trans$insert261$i = 0, $$phi$trans$insert263$i = 0, $$phi$trans$insert266$i = 0, $$phi$trans$insert268$i = 0, $$phi$trans$insert271$i = 0, $$phi$trans$insert273$i = 0, $$phi$trans$insert276$i = 0, $$phi$trans$insert278$i = 0, $$phi$trans$insert281$i = 0, $$phi$trans$insert283$i = 0, $$phi$trans$insert286$i = 0, $$phi$trans$insert288$i = 0, $$phi$trans$insert291$i = 0, $$phi$trans$insert293$i = 0;
 var $$phi$trans$insert296$i = 0, $$phi$trans$insert298$i = 0, $$phi$trans$insert301$i = 0, $$phi$trans$insert303$i = 0, $$phi$trans$insert306$i = 0, $$phi$trans$insert308$i = 0, $$phi$trans$insert314$i = 0, $$phi$trans$insert316$i = 0, $$pn$i = 0, $$pn180$i = 0, $$pre$i = 0, $$pre$pn$i = 0, $$pre151$i = 0, $$pre153$i = 0, $$pre154$i = 0, $$pre155$i = 0, $$pre157$i = 0, $$pre159$i = 0, $$pre160$i = 0, $$pre162$i = 0;
 var $$pre164$i = 0, $$pre165$i = 0, $$pre167$i = 0, $$pre169$i = 0, $$pre170$i = 0, $$pre172$i = 0, $$pre174$i = 0, $$pre175$i = 0, $$pre177$i = 0, $$pre179$i = 0, $$pre180$i = 0, $$pre182$i = 0, $$pre184$i = 0, $$pre185$i = 0, $$pre187$i = 0, $$pre189$i = 0, $$pre190$i = 0, $$pre192$i = 0, $$pre194$i = 0, $$pre195$i = 0;
 var $$pre197$i = 0, $$pre199$i = 0, $$pre200$i = 0, $$pre202$i = 0, $$pre204$i = 0, $$pre205$i = 0, $$pre207$i = 0, $$pre209$i = 0, $$pre210$i = 0, $$pre212$i = 0, $$pre214$i = 0, $$pre215$i = 0, $$pre217$i = 0, $$pre219$i = 0, $$pre220$i = 0, $$pre222$i = 0, $$pre224$i = 0, $$pre225$i = 0, $$pre227$i = 0, $$pre229$i = 0;
 var $$pre230$i = 0, $$pre232$i = 0, $$pre234$i = 0, $$pre235$i = 0, $$pre237$i = 0, $$pre239$i = 0, $$pre240$i = 0, $$pre242$i = 0, $$pre244$i = 0, $$pre245$i = 0, $$pre247$i = 0, $$pre249$i = 0, $$pre250$i = 0, $$pre252$i = 0, $$pre254$i = 0, $$pre255$i = 0, $$pre257$i = 0, $$pre259$i = 0, $$pre260$i = 0, $$pre262$i = 0;
 var $$pre264$i = 0, $$pre265$i = 0, $$pre267$i = 0, $$pre269$i = 0, $$pre270$i = 0, $$pre272$i = 0, $$pre274$i = 0, $$pre275$i = 0, $$pre277$i = 0, $$pre279$i = 0, $$pre280$i = 0, $$pre282$i = 0, $$pre284$i = 0, $$pre285$i = 0, $$pre287$i = 0, $$pre289$i = 0, $$pre290$i = 0, $$pre292$i = 0, $$pre294$i = 0, $$pre295$i = 0;
 var $$pre297$i = 0, $$pre299$i = 0, $$pre300$i = 0, $$pre302$i = 0, $$pre304$i = 0, $$pre305$i = 0, $$pre307$i = 0, $$pre309$i = 0, $$pre311$pn$i = 0, $$pre311$pn$in$i = 0, $$pre315$i = 0, $$pre317$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i59 = 0, $exitcond188$i = 0;
 var $scevgep = 0, $scevgep$1 = 0, $scevgep$1$i = 0, $scevgep$2 = 0, $scevgep$2$i = 0, $scevgep$3 = 0, $scevgep$3$i = 0, $scevgep$4 = 0, $scevgep$4$i = 0, $scevgep$5 = 0, $scevgep$5$i = 0, $scevgep$6 = 0, $scevgep$6$i = 0, $scevgep$i = 0, $scevgep140$1$i = 0, $scevgep140$2$i = 0, $scevgep140$3$i = 0, $scevgep140$4$i = 0, $scevgep140$5$i = 0, $scevgep140$6$i = 0;
 var $scevgep140$i = 0, $scevgep141$i = 0, $scevgep142$i = 0, $scevgep72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1920|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1920|0);
 $4 = sp + 1024|0;
 $5 = sp;
 $6 = sp + 1664|0;
 $7 = sp + 1536|0;
 $8 = ((($0)) + 460|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1 >> 2;
 $13 = $2 >> 3;
 $14 = $3 >> 2;
 $15 = $12 << 5;
 $16 = $15 | 4;
 $17 = $13 << 5;
 $18 = $17 | 2;
 $19 = $14 << 5;
 $20 = $19 | 4;
 $21 = ((($0)) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $15 | 28;
 $24 = (($23) + ($16))|0;
 $25 = $24 >> 1;
 $26 = $17 | 30;
 $27 = (($26) + ($18))|0;
 $28 = $27 >> 1;
 $29 = $19 | 28;
 $30 = (($29) + ($20))|0;
 $31 = $30 >> 1;
 $32 = ($22|0)>(0);
 if ($32) {
  $33 = ((($0)) + 136|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 44|0);
  $37 = ((($34)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($34)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $$0174184$i = 2147483647;$$0178183$i = 0;
  while(1) {
   $41 = (($35) + ($$0178183$i)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = ($16|0)>($43|0);
   do {
    if ($44) {
     $45 = (($43) - ($16))|0;
     $46 = HEAP32[$36>>2]|0;
     $47 = (780 + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (848 + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = Math_imul($50, $45)|0;
     $52 = Math_imul($51, $51)|0;
     $53 = (($43) - ($23))|0;
     $54 = Math_imul($50, $53)|0;
     $55 = Math_imul($54, $54)|0;
     $$0$i = $55;$$0171$i = $52;$91 = $46;
    } else {
     $56 = ($23|0)<($43|0);
     if ($56) {
      $57 = (($43) - ($23))|0;
      $58 = HEAP32[$36>>2]|0;
      $59 = (780 + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (848 + ($60<<2)|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = Math_imul($62, $57)|0;
      $64 = Math_imul($63, $63)|0;
      $65 = (($43) - ($16))|0;
      $66 = Math_imul($62, $65)|0;
      $67 = Math_imul($66, $66)|0;
      $$0$i = $67;$$0171$i = $64;$91 = $58;
      break;
     }
     $68 = ($25|0)<($43|0);
     if ($68) {
      $77 = (($43) - ($16))|0;
      $78 = HEAP32[$36>>2]|0;
      $79 = (780 + ($78<<2)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (848 + ($80<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = Math_imul($82, $77)|0;
      $84 = Math_imul($83, $83)|0;
      $$0$i = $84;$$0171$i = 0;$91 = $78;
      break;
     } else {
      $69 = (($43) - ($23))|0;
      $70 = HEAP32[$36>>2]|0;
      $71 = (780 + ($70<<2)|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (848 + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = Math_imul($74, $69)|0;
      $76 = Math_imul($75, $75)|0;
      $$0$i = $76;$$0171$i = 0;$91 = $70;
      break;
     }
    }
   } while(0);
   $85 = (($38) + ($$0178183$i)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = ($18|0)>($87|0);
   do {
    if ($88) {
     $89 = (($87) - ($18))|0;
     $90 = (860 + ($91<<2)|0);
     $92 = HEAP32[$90>>2]|0;
     $93 = (848 + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = Math_imul($94, $89)|0;
     $96 = Math_imul($95, $95)|0;
     $97 = (($96) + ($$0171$i))|0;
     $98 = (($87) - ($26))|0;
     $99 = Math_imul($94, $98)|0;
     $100 = Math_imul($99, $99)|0;
     $$1172$i = $97;$$pn$i = $100;
    } else {
     $101 = ($26|0)<($87|0);
     if ($101) {
      $102 = (($87) - ($26))|0;
      $103 = (860 + ($91<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (848 + ($104<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = Math_imul($106, $102)|0;
      $108 = Math_imul($107, $107)|0;
      $109 = (($108) + ($$0171$i))|0;
      $110 = (($87) - ($18))|0;
      $111 = Math_imul($106, $110)|0;
      $112 = Math_imul($111, $111)|0;
      $$1172$i = $109;$$pn$i = $112;
      break;
     }
     $113 = ($28|0)<($87|0);
     if ($113) {
      $121 = (($87) - ($18))|0;
      $122 = (860 + ($91<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (848 + ($123<<2)|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = Math_imul($125, $121)|0;
      $127 = Math_imul($126, $126)|0;
      $$1172$i = $$0171$i;$$pn$i = $127;
      break;
     } else {
      $114 = (($87) - ($26))|0;
      $115 = (860 + ($91<<2)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (848 + ($116<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = Math_imul($118, $114)|0;
      $120 = Math_imul($119, $119)|0;
      $$1172$i = $$0171$i;$$pn$i = $120;
      break;
     }
    }
   } while(0);
   $$1$i = (($$pn$i) + ($$0$i))|0;
   $128 = (($40) + ($$0178183$i)|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = ($20|0)>($130|0);
   do {
    if ($131) {
     $132 = (($130) - ($20))|0;
     $133 = (928 + ($91<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (848 + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = Math_imul($136, $132)|0;
     $138 = Math_imul($137, $137)|0;
     $139 = (($138) + ($$1172$i))|0;
     $140 = (($130) - ($29))|0;
     $141 = Math_imul($136, $140)|0;
     $142 = Math_imul($141, $141)|0;
     $$2173$i = $139;$$pn180$i = $142;
    } else {
     $143 = ($29|0)<($130|0);
     if ($143) {
      $144 = (($130) - ($29))|0;
      $145 = (928 + ($91<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (848 + ($146<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = Math_imul($148, $144)|0;
      $150 = Math_imul($149, $149)|0;
      $151 = (($150) + ($$1172$i))|0;
      $152 = (($130) - ($20))|0;
      $153 = Math_imul($148, $152)|0;
      $154 = Math_imul($153, $153)|0;
      $$2173$i = $151;$$pn180$i = $154;
      break;
     }
     $155 = ($31|0)<($130|0);
     if ($155) {
      $163 = (($130) - ($20))|0;
      $164 = (928 + ($91<<2)|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (848 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = Math_imul($167, $163)|0;
      $169 = Math_imul($168, $168)|0;
      $$2173$i = $$1172$i;$$pn180$i = $169;
      break;
     } else {
      $156 = (($130) - ($29))|0;
      $157 = (928 + ($91<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (848 + ($158<<2)|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = Math_imul($160, $156)|0;
      $162 = Math_imul($161, $161)|0;
      $$2173$i = $$1172$i;$$pn180$i = $162;
      break;
     }
    }
   } while(0);
   $$2$i = (($$1$i) + ($$pn180$i))|0;
   $170 = (($5) + ($$0178183$i<<2)|0);
   HEAP32[$170>>2] = $$2173$i;
   $171 = ($$2$i|0)<($$0174184$i|0);
   $$2$$0174$i = $171 ? $$2$i : $$0174184$i;
   $172 = (($$0178183$i) + 1)|0;
   $exitcond188$i = ($172|0)==($22|0);
   if ($exitcond188$i) {
    $$0176182$i = 0;$$1179181$i = 0;
    break;
   } else {
    $$0174184$i = $$2$$0174$i;$$0178183$i = $172;
   }
  }
  while(1) {
   $173 = (($5) + ($$1179181$i<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($174|0)>($$2$$0174$i|0);
   if ($175) {
    $$1177$i = $$0176182$i;
   } else {
    $176 = (($$0176182$i) + 1)|0;
    $177 = (($6) + ($$0176182$i)|0);
    $178 = $$1179181$i&255;
    HEAP8[$177>>0] = $178;
    $$1177$i = $176;
   }
   $179 = (($$1179181$i) + 1)|0;
   $exitcond$i = ($179|0)==($22|0);
   if ($exitcond$i) {
    $$0176$lcssa$i = $$1177$i;
    break;
   } else {
    $$0176182$i = $$1177$i;$$1179181$i = $179;
   }
  }
 } else {
  $$0176$lcssa$i = 0;
 }
 $180 = ((($4)) + 4|0);
 HEAP32[$4>>2] = 2147483647;
 $181 = ((($4)) + 8|0);
 HEAP32[$180>>2] = 2147483647;
 $182 = ((($4)) + 12|0);
 HEAP32[$181>>2] = 2147483647;
 $183 = ((($4)) + 16|0);
 HEAP32[$182>>2] = 2147483647;
 $184 = ((($4)) + 20|0);
 HEAP32[$183>>2] = 2147483647;
 $185 = ((($4)) + 24|0);
 HEAP32[$184>>2] = 2147483647;
 $186 = ((($4)) + 28|0);
 HEAP32[$185>>2] = 2147483647;
 $187 = ((($4)) + 32|0);
 HEAP32[$186>>2] = 2147483647;
 $188 = ((($4)) + 36|0);
 HEAP32[$187>>2] = 2147483647;
 $189 = ((($4)) + 40|0);
 HEAP32[$188>>2] = 2147483647;
 $190 = ((($4)) + 44|0);
 HEAP32[$189>>2] = 2147483647;
 $191 = ((($4)) + 48|0);
 HEAP32[$190>>2] = 2147483647;
 $192 = ((($4)) + 52|0);
 HEAP32[$191>>2] = 2147483647;
 $193 = ((($4)) + 56|0);
 HEAP32[$192>>2] = 2147483647;
 $194 = ((($4)) + 60|0);
 HEAP32[$193>>2] = 2147483647;
 $195 = ((($4)) + 64|0);
 HEAP32[$194>>2] = 2147483647;
 $196 = ((($4)) + 68|0);
 HEAP32[$195>>2] = 2147483647;
 $197 = ((($4)) + 72|0);
 HEAP32[$196>>2] = 2147483647;
 $198 = ((($4)) + 76|0);
 HEAP32[$197>>2] = 2147483647;
 $199 = ((($4)) + 80|0);
 HEAP32[$198>>2] = 2147483647;
 $200 = ((($4)) + 84|0);
 HEAP32[$199>>2] = 2147483647;
 $201 = ((($4)) + 88|0);
 HEAP32[$200>>2] = 2147483647;
 $202 = ((($4)) + 92|0);
 HEAP32[$201>>2] = 2147483647;
 $203 = ((($4)) + 96|0);
 HEAP32[$202>>2] = 2147483647;
 $204 = ((($4)) + 100|0);
 HEAP32[$203>>2] = 2147483647;
 $205 = ((($4)) + 104|0);
 HEAP32[$204>>2] = 2147483647;
 $206 = ((($4)) + 108|0);
 HEAP32[$205>>2] = 2147483647;
 $207 = ((($4)) + 112|0);
 HEAP32[$206>>2] = 2147483647;
 $208 = ((($4)) + 116|0);
 HEAP32[$207>>2] = 2147483647;
 $209 = ((($4)) + 120|0);
 HEAP32[$208>>2] = 2147483647;
 $210 = ((($4)) + 124|0);
 HEAP32[$209>>2] = 2147483647;
 $211 = ((($4)) + 128|0);
 HEAP32[$210>>2] = 2147483647;
 $212 = ((($4)) + 132|0);
 HEAP32[$211>>2] = 2147483647;
 $213 = ((($4)) + 136|0);
 HEAP32[$212>>2] = 2147483647;
 $214 = ((($4)) + 140|0);
 HEAP32[$213>>2] = 2147483647;
 $215 = ((($4)) + 144|0);
 HEAP32[$214>>2] = 2147483647;
 $216 = ((($4)) + 148|0);
 HEAP32[$215>>2] = 2147483647;
 $217 = ((($4)) + 152|0);
 HEAP32[$216>>2] = 2147483647;
 $218 = ((($4)) + 156|0);
 HEAP32[$217>>2] = 2147483647;
 $219 = ((($4)) + 160|0);
 HEAP32[$218>>2] = 2147483647;
 $220 = ((($4)) + 164|0);
 HEAP32[$219>>2] = 2147483647;
 $221 = ((($4)) + 168|0);
 HEAP32[$220>>2] = 2147483647;
 $222 = ((($4)) + 172|0);
 HEAP32[$221>>2] = 2147483647;
 $223 = ((($4)) + 176|0);
 HEAP32[$222>>2] = 2147483647;
 $224 = ((($4)) + 180|0);
 HEAP32[$223>>2] = 2147483647;
 $225 = ((($4)) + 184|0);
 HEAP32[$224>>2] = 2147483647;
 $226 = ((($4)) + 188|0);
 HEAP32[$225>>2] = 2147483647;
 $227 = ((($4)) + 192|0);
 HEAP32[$226>>2] = 2147483647;
 $228 = ((($4)) + 196|0);
 HEAP32[$227>>2] = 2147483647;
 $229 = ((($4)) + 200|0);
 HEAP32[$228>>2] = 2147483647;
 $230 = ((($4)) + 204|0);
 HEAP32[$229>>2] = 2147483647;
 $231 = ((($4)) + 208|0);
 HEAP32[$230>>2] = 2147483647;
 $232 = ((($4)) + 212|0);
 HEAP32[$231>>2] = 2147483647;
 $233 = ((($4)) + 216|0);
 HEAP32[$232>>2] = 2147483647;
 $234 = ((($4)) + 220|0);
 HEAP32[$233>>2] = 2147483647;
 $235 = ((($4)) + 224|0);
 HEAP32[$234>>2] = 2147483647;
 $236 = ((($4)) + 228|0);
 HEAP32[$235>>2] = 2147483647;
 $237 = ((($4)) + 232|0);
 HEAP32[$236>>2] = 2147483647;
 $238 = ((($4)) + 236|0);
 HEAP32[$237>>2] = 2147483647;
 $239 = ((($4)) + 240|0);
 HEAP32[$238>>2] = 2147483647;
 $240 = ((($4)) + 244|0);
 HEAP32[$239>>2] = 2147483647;
 $241 = ((($4)) + 248|0);
 HEAP32[$240>>2] = 2147483647;
 $242 = ((($4)) + 252|0);
 HEAP32[$241>>2] = 2147483647;
 $243 = ((($4)) + 256|0);
 HEAP32[$242>>2] = 2147483647;
 $244 = ((($4)) + 260|0);
 HEAP32[$243>>2] = 2147483647;
 $245 = ((($4)) + 264|0);
 HEAP32[$244>>2] = 2147483647;
 $246 = ((($4)) + 268|0);
 HEAP32[$245>>2] = 2147483647;
 $247 = ((($4)) + 272|0);
 HEAP32[$246>>2] = 2147483647;
 $248 = ((($4)) + 276|0);
 HEAP32[$247>>2] = 2147483647;
 $249 = ((($4)) + 280|0);
 HEAP32[$248>>2] = 2147483647;
 $250 = ((($4)) + 284|0);
 HEAP32[$249>>2] = 2147483647;
 $251 = ((($4)) + 288|0);
 HEAP32[$250>>2] = 2147483647;
 $252 = ((($4)) + 292|0);
 HEAP32[$251>>2] = 2147483647;
 $253 = ((($4)) + 296|0);
 HEAP32[$252>>2] = 2147483647;
 $254 = ((($4)) + 300|0);
 HEAP32[$253>>2] = 2147483647;
 $255 = ((($4)) + 304|0);
 HEAP32[$254>>2] = 2147483647;
 $256 = ((($4)) + 308|0);
 HEAP32[$255>>2] = 2147483647;
 $257 = ((($4)) + 312|0);
 HEAP32[$256>>2] = 2147483647;
 $258 = ((($4)) + 316|0);
 HEAP32[$257>>2] = 2147483647;
 $259 = ((($4)) + 320|0);
 HEAP32[$258>>2] = 2147483647;
 $260 = ((($4)) + 324|0);
 HEAP32[$259>>2] = 2147483647;
 $261 = ((($4)) + 328|0);
 HEAP32[$260>>2] = 2147483647;
 $262 = ((($4)) + 332|0);
 HEAP32[$261>>2] = 2147483647;
 $263 = ((($4)) + 336|0);
 HEAP32[$262>>2] = 2147483647;
 $264 = ((($4)) + 340|0);
 HEAP32[$263>>2] = 2147483647;
 $265 = ((($4)) + 344|0);
 HEAP32[$264>>2] = 2147483647;
 $266 = ((($4)) + 348|0);
 HEAP32[$265>>2] = 2147483647;
 $267 = ((($4)) + 352|0);
 HEAP32[$266>>2] = 2147483647;
 $268 = ((($4)) + 356|0);
 HEAP32[$267>>2] = 2147483647;
 $269 = ((($4)) + 360|0);
 HEAP32[$268>>2] = 2147483647;
 $270 = ((($4)) + 364|0);
 HEAP32[$269>>2] = 2147483647;
 $271 = ((($4)) + 368|0);
 HEAP32[$270>>2] = 2147483647;
 $272 = ((($4)) + 372|0);
 HEAP32[$271>>2] = 2147483647;
 $273 = ((($4)) + 376|0);
 HEAP32[$272>>2] = 2147483647;
 $274 = ((($4)) + 380|0);
 HEAP32[$273>>2] = 2147483647;
 $275 = ((($4)) + 384|0);
 HEAP32[$274>>2] = 2147483647;
 $276 = ((($4)) + 388|0);
 HEAP32[$275>>2] = 2147483647;
 $277 = ((($4)) + 392|0);
 HEAP32[$276>>2] = 2147483647;
 $278 = ((($4)) + 396|0);
 HEAP32[$277>>2] = 2147483647;
 $279 = ((($4)) + 400|0);
 HEAP32[$278>>2] = 2147483647;
 $280 = ((($4)) + 404|0);
 HEAP32[$279>>2] = 2147483647;
 $281 = ((($4)) + 408|0);
 HEAP32[$280>>2] = 2147483647;
 $282 = ((($4)) + 412|0);
 HEAP32[$281>>2] = 2147483647;
 $283 = ((($4)) + 416|0);
 HEAP32[$282>>2] = 2147483647;
 $284 = ((($4)) + 420|0);
 HEAP32[$283>>2] = 2147483647;
 $285 = ((($4)) + 424|0);
 HEAP32[$284>>2] = 2147483647;
 $286 = ((($4)) + 428|0);
 HEAP32[$285>>2] = 2147483647;
 $287 = ((($4)) + 432|0);
 HEAP32[$286>>2] = 2147483647;
 $288 = ((($4)) + 436|0);
 HEAP32[$287>>2] = 2147483647;
 $289 = ((($4)) + 440|0);
 HEAP32[$288>>2] = 2147483647;
 $290 = ((($4)) + 444|0);
 HEAP32[$289>>2] = 2147483647;
 $291 = ((($4)) + 448|0);
 HEAP32[$290>>2] = 2147483647;
 $292 = ((($4)) + 452|0);
 HEAP32[$291>>2] = 2147483647;
 $293 = ((($4)) + 456|0);
 HEAP32[$292>>2] = 2147483647;
 $294 = ((($4)) + 460|0);
 HEAP32[$293>>2] = 2147483647;
 $295 = ((($4)) + 464|0);
 HEAP32[$294>>2] = 2147483647;
 $296 = ((($4)) + 468|0);
 HEAP32[$295>>2] = 2147483647;
 $297 = ((($4)) + 472|0);
 HEAP32[$296>>2] = 2147483647;
 $298 = ((($4)) + 476|0);
 HEAP32[$297>>2] = 2147483647;
 $299 = ((($4)) + 480|0);
 HEAP32[$298>>2] = 2147483647;
 $300 = ((($4)) + 484|0);
 HEAP32[$299>>2] = 2147483647;
 $301 = ((($4)) + 488|0);
 HEAP32[$300>>2] = 2147483647;
 $302 = ((($4)) + 492|0);
 HEAP32[$301>>2] = 2147483647;
 $303 = ((($4)) + 496|0);
 HEAP32[$302>>2] = 2147483647;
 $304 = ((($4)) + 500|0);
 HEAP32[$303>>2] = 2147483647;
 $305 = ((($4)) + 504|0);
 HEAP32[$304>>2] = 2147483647;
 $306 = ((($4)) + 508|0);
 HEAP32[$305>>2] = 2147483647;
 HEAP32[$306>>2] = 2147483647;
 $307 = ($$0176$lcssa$i|0)>(0);
 if ($307) {
  $308 = ((($0)) + 136|0);
  $309 = ((($0)) + 44|0);
  $$pre$i = HEAP32[$309>>2]|0;
  $$phi$trans$insert$i = (780 + ($$pre$i<<2)|0);
  $$pre151$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $$phi$trans$insert152$i = (848 + ($$pre151$i<<2)|0);
  $$pre153$i = HEAP32[$$phi$trans$insert152$i>>2]|0;
  $$phi$trans$insert314$i = (928 + ($$pre$i<<2)|0);
  $$pre315$i = HEAP32[$$phi$trans$insert314$i>>2]|0;
  $$phi$trans$insert316$i = (848 + ($$pre315$i<<2)|0);
  $$pre317$i = HEAP32[$$phi$trans$insert316$i>>2]|0;
  $$1117136$i = 0;$$pre$pn$i = $$pre$i;$321 = $$pre153$i;$339 = $$pre317$i;
  while(1) {
   $$pre311$pn$in$i = (860 + ($$pre$pn$i<<2)|0);
   $$pre311$pn$i = HEAP32[$$pre311$pn$in$i>>2]|0;
   $$in$i = (848 + ($$pre311$pn$i<<2)|0);
   $310 = HEAP32[$$in$i>>2]|0;
   $311 = (($6) + ($$1117136$i)|0);
   $312 = HEAP8[$311>>0]|0;
   $313 = $312&255;
   $314 = HEAP32[$308>>2]|0;
   $315 = HEAP32[$314>>2]|0;
   $316 = (($315) + ($313)|0);
   $317 = HEAP8[$316>>0]|0;
   $318 = $317&255;
   $319 = (($16) - ($318))|0;
   $320 = Math_imul($319, $321)|0;
   $322 = Math_imul($320, $320)|0;
   $323 = ((($314)) + 4|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + ($313)|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = (($18) - ($327))|0;
   $329 = Math_imul($328, $310)|0;
   $330 = Math_imul($329, $329)|0;
   $331 = (($330) + ($322))|0;
   $332 = ((($314)) + 8|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + ($313)|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $335&255;
   $337 = (($20) - ($336))|0;
   $338 = Math_imul($337, $339)|0;
   $340 = Math_imul($338, $338)|0;
   $341 = (($331) + ($340))|0;
   $342 = $321 << 3;
   $343 = $321 << 4;
   $344 = Math_imul($343, $320)|0;
   $345 = Math_imul($342, $342)|0;
   $346 = (($344) + ($345))|0;
   $347 = $310 << 2;
   $348 = $310 << 3;
   $349 = Math_imul($348, $329)|0;
   $350 = Math_imul($347, $347)|0;
   $351 = (($349) + ($350))|0;
   $352 = $339 << 3;
   $353 = $339 << 4;
   $354 = Math_imul($353, $338)|0;
   $355 = Math_imul($352, $352)|0;
   $356 = (($354) + ($355))|0;
   $$0107134$i = $346;$$0110133$i = $341;$$0111132$i = $7;$$0135$i = 3;$$1113131$i = $4;$827 = $$pre$pn$i;
   while(1) {
    $scevgep141$i = ((($$1113131$i)) + 128|0);
    $scevgep$i = ((($$1113131$i)) + 16|0);
    $357 = HEAP32[$$1113131$i>>2]|0;
    $358 = ($$0110133$i|0)<($357|0);
    if ($358) {
     HEAP32[$$1113131$i>>2] = $$0110133$i;
     HEAP8[$$0111132$i>>0] = $312;
     $$pre154$i = HEAP32[$309>>2]|0;
     $361 = $$pre154$i;
    } else {
     $361 = $827;
    }
    $359 = (($$0110133$i) + ($356))|0;
    $360 = (928 + ($361<<2)|0);
    $362 = HEAP32[$360>>2]|0;
    $363 = (848 + ($362<<2)|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = $364 << 7;
    $366 = Math_imul($365, $364)|0;
    $367 = (($366) + ($356))|0;
    $368 = ((($$1113131$i)) + 4|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = ($359|0)<($369|0);
    if ($370) {
     $372 = ((($$0111132$i)) + 1|0);
     HEAP32[$368>>2] = $359;
     HEAP8[$372>>0] = $312;
     $$pre155$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert156$i = (928 + ($$pre155$i<<2)|0);
     $$pre157$i = HEAP32[$$phi$trans$insert156$i>>2]|0;
     $$phi$trans$insert158$i = (848 + ($$pre157$i<<2)|0);
     $$pre159$i = HEAP32[$$phi$trans$insert158$i>>2]|0;
     $375 = $$pre159$i;$828 = $$pre155$i;
    } else {
     $375 = $364;$828 = $361;
    }
    $373 = (($367) + ($359))|0;
    $374 = $375 << 7;
    $376 = Math_imul($374, $375)|0;
    $377 = ((($$1113131$i)) + 8|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = ($373|0)<($378|0);
    if ($379) {
     $380 = ((($$0111132$i)) + 2|0);
     HEAP32[$377>>2] = $373;
     HEAP8[$380>>0] = $312;
     $$pre160$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert161$i = (928 + ($$pre160$i<<2)|0);
     $$pre162$i = HEAP32[$$phi$trans$insert161$i>>2]|0;
     $$phi$trans$insert163$i = (848 + ($$pre162$i<<2)|0);
     $$pre164$i = HEAP32[$$phi$trans$insert163$i>>2]|0;
     $830 = $$pre164$i;$831 = $$pre160$i;
    } else {
     $830 = $375;$831 = $828;
    }
    $381 = (($373) + ($367))|0;
    $382 = (($381) + ($376))|0;
    $383 = ((($$1113131$i)) + 12|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = ($382|0)<($384|0);
    if ($385) {
     $386 = ((($$0111132$i)) + 3|0);
     HEAP32[$383>>2] = $382;
     HEAP8[$386>>0] = $312;
     $$pre165$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert166$i = (928 + ($$pre165$i<<2)|0);
     $$pre167$i = HEAP32[$$phi$trans$insert166$i>>2]|0;
     $$phi$trans$insert168$i = (848 + ($$pre167$i<<2)|0);
     $$pre169$i = HEAP32[$$phi$trans$insert168$i>>2]|0;
     $389 = $$pre165$i;$832 = $$pre169$i;
    } else {
     $389 = $831;$832 = $830;
    }
    $387 = (($$0110133$i) + ($351))|0;
    $388 = (860 + ($389<<2)|0);
    $390 = HEAP32[$388>>2]|0;
    $391 = (848 + ($390<<2)|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = $392 << 5;
    $394 = Math_imul($393, $392)|0;
    $395 = (($394) + ($351))|0;
    $scevgep$1$i = ((($$1113131$i)) + 32|0);
    $396 = HEAP32[$scevgep$i>>2]|0;
    $397 = ($387|0)<($396|0);
    if ($397) {
     $scevgep140$i = ((($$0111132$i)) + 4|0);
     HEAP32[$scevgep$i>>2] = $387;
     HEAP8[$scevgep140$i>>0] = $312;
     $$pre170$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert171$i = (928 + ($$pre170$i<<2)|0);
     $$pre172$i = HEAP32[$$phi$trans$insert171$i>>2]|0;
     $$phi$trans$insert173$i = (848 + ($$pre172$i<<2)|0);
     $$pre174$i = HEAP32[$$phi$trans$insert173$i>>2]|0;
     $400 = $$pre174$i;$833 = $$pre170$i;
    } else {
     $400 = $832;$833 = $389;
    }
    $398 = (($387) + ($356))|0;
    $399 = $400 << 7;
    $401 = Math_imul($399, $400)|0;
    $402 = (($401) + ($356))|0;
    $403 = ((($$1113131$i)) + 20|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = ($398|0)<($404|0);
    if ($405) {
     $406 = ((($$0111132$i)) + 5|0);
     HEAP32[$403>>2] = $398;
     HEAP8[$406>>0] = $312;
     $$pre175$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert176$i = (928 + ($$pre175$i<<2)|0);
     $$pre177$i = HEAP32[$$phi$trans$insert176$i>>2]|0;
     $$phi$trans$insert178$i = (848 + ($$pre177$i<<2)|0);
     $$pre179$i = HEAP32[$$phi$trans$insert178$i>>2]|0;
     $409 = $$pre179$i;$834 = $$pre175$i;
    } else {
     $409 = $400;$834 = $833;
    }
    $407 = (($402) + ($398))|0;
    $408 = $409 << 7;
    $410 = Math_imul($408, $409)|0;
    $411 = ((($$1113131$i)) + 24|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ($407|0)<($412|0);
    if ($413) {
     $414 = ((($$0111132$i)) + 6|0);
     HEAP32[$411>>2] = $407;
     HEAP8[$414>>0] = $312;
     $$pre180$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert181$i = (928 + ($$pre180$i<<2)|0);
     $$pre182$i = HEAP32[$$phi$trans$insert181$i>>2]|0;
     $$phi$trans$insert183$i = (848 + ($$pre182$i<<2)|0);
     $$pre184$i = HEAP32[$$phi$trans$insert183$i>>2]|0;
     $835 = $$pre184$i;$836 = $$pre180$i;
    } else {
     $835 = $409;$836 = $834;
    }
    $415 = (($407) + ($402))|0;
    $416 = (($415) + ($410))|0;
    $417 = ((($$1113131$i)) + 28|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = ($416|0)<($418|0);
    if ($419) {
     $420 = ((($$0111132$i)) + 7|0);
     HEAP32[$417>>2] = $416;
     HEAP8[$420>>0] = $312;
     $$pre185$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert186$i = (928 + ($$pre185$i<<2)|0);
     $$pre187$i = HEAP32[$$phi$trans$insert186$i>>2]|0;
     $$phi$trans$insert188$i = (848 + ($$pre187$i<<2)|0);
     $$pre189$i = HEAP32[$$phi$trans$insert188$i>>2]|0;
     $423 = $$pre185$i;$837 = $$pre189$i;
    } else {
     $423 = $836;$837 = $835;
    }
    $421 = (($395) + ($387))|0;
    $422 = (860 + ($423<<2)|0);
    $424 = HEAP32[$422>>2]|0;
    $425 = (848 + ($424<<2)|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = $426 << 5;
    $428 = Math_imul($427, $426)|0;
    $429 = (($428) + ($395))|0;
    $scevgep$2$i = ((($$1113131$i)) + 48|0);
    $430 = HEAP32[$scevgep$1$i>>2]|0;
    $431 = ($421|0)<($430|0);
    if ($431) {
     $scevgep140$1$i = ((($$0111132$i)) + 8|0);
     HEAP32[$scevgep$1$i>>2] = $421;
     HEAP8[$scevgep140$1$i>>0] = $312;
     $$pre190$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert191$i = (928 + ($$pre190$i<<2)|0);
     $$pre192$i = HEAP32[$$phi$trans$insert191$i>>2]|0;
     $$phi$trans$insert193$i = (848 + ($$pre192$i<<2)|0);
     $$pre194$i = HEAP32[$$phi$trans$insert193$i>>2]|0;
     $434 = $$pre194$i;$838 = $$pre190$i;
    } else {
     $434 = $837;$838 = $423;
    }
    $432 = (($421) + ($356))|0;
    $433 = $434 << 7;
    $435 = Math_imul($433, $434)|0;
    $436 = (($435) + ($356))|0;
    $437 = ((($$1113131$i)) + 36|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = ($432|0)<($438|0);
    if ($439) {
     $440 = ((($$0111132$i)) + 9|0);
     HEAP32[$437>>2] = $432;
     HEAP8[$440>>0] = $312;
     $$pre195$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert196$i = (928 + ($$pre195$i<<2)|0);
     $$pre197$i = HEAP32[$$phi$trans$insert196$i>>2]|0;
     $$phi$trans$insert198$i = (848 + ($$pre197$i<<2)|0);
     $$pre199$i = HEAP32[$$phi$trans$insert198$i>>2]|0;
     $443 = $$pre199$i;$839 = $$pre195$i;
    } else {
     $443 = $434;$839 = $838;
    }
    $441 = (($436) + ($432))|0;
    $442 = $443 << 7;
    $444 = Math_imul($442, $443)|0;
    $445 = ((($$1113131$i)) + 40|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = ($441|0)<($446|0);
    if ($447) {
     $448 = ((($$0111132$i)) + 10|0);
     HEAP32[$445>>2] = $441;
     HEAP8[$448>>0] = $312;
     $$pre200$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert201$i = (928 + ($$pre200$i<<2)|0);
     $$pre202$i = HEAP32[$$phi$trans$insert201$i>>2]|0;
     $$phi$trans$insert203$i = (848 + ($$pre202$i<<2)|0);
     $$pre204$i = HEAP32[$$phi$trans$insert203$i>>2]|0;
     $840 = $$pre204$i;$841 = $$pre200$i;
    } else {
     $840 = $443;$841 = $839;
    }
    $449 = (($441) + ($436))|0;
    $450 = (($449) + ($444))|0;
    $451 = ((($$1113131$i)) + 44|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = ($450|0)<($452|0);
    if ($453) {
     $454 = ((($$0111132$i)) + 11|0);
     HEAP32[$451>>2] = $450;
     HEAP8[$454>>0] = $312;
     $$pre205$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert206$i = (928 + ($$pre205$i<<2)|0);
     $$pre207$i = HEAP32[$$phi$trans$insert206$i>>2]|0;
     $$phi$trans$insert208$i = (848 + ($$pre207$i<<2)|0);
     $$pre209$i = HEAP32[$$phi$trans$insert208$i>>2]|0;
     $457 = $$pre205$i;$842 = $$pre209$i;
    } else {
     $457 = $841;$842 = $840;
    }
    $455 = (($429) + ($421))|0;
    $456 = (860 + ($457<<2)|0);
    $458 = HEAP32[$456>>2]|0;
    $459 = (848 + ($458<<2)|0);
    $460 = HEAP32[$459>>2]|0;
    $461 = $460 << 5;
    $462 = Math_imul($461, $460)|0;
    $463 = (($462) + ($429))|0;
    $scevgep$3$i = ((($$1113131$i)) + 64|0);
    $464 = HEAP32[$scevgep$2$i>>2]|0;
    $465 = ($455|0)<($464|0);
    if ($465) {
     $scevgep140$2$i = ((($$0111132$i)) + 12|0);
     HEAP32[$scevgep$2$i>>2] = $455;
     HEAP8[$scevgep140$2$i>>0] = $312;
     $$pre210$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert211$i = (928 + ($$pre210$i<<2)|0);
     $$pre212$i = HEAP32[$$phi$trans$insert211$i>>2]|0;
     $$phi$trans$insert213$i = (848 + ($$pre212$i<<2)|0);
     $$pre214$i = HEAP32[$$phi$trans$insert213$i>>2]|0;
     $468 = $$pre214$i;$843 = $$pre210$i;
    } else {
     $468 = $842;$843 = $457;
    }
    $466 = (($455) + ($356))|0;
    $467 = $468 << 7;
    $469 = Math_imul($467, $468)|0;
    $470 = (($469) + ($356))|0;
    $471 = ((($$1113131$i)) + 52|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = ($466|0)<($472|0);
    if ($473) {
     $474 = ((($$0111132$i)) + 13|0);
     HEAP32[$471>>2] = $466;
     HEAP8[$474>>0] = $312;
     $$pre215$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert216$i = (928 + ($$pre215$i<<2)|0);
     $$pre217$i = HEAP32[$$phi$trans$insert216$i>>2]|0;
     $$phi$trans$insert218$i = (848 + ($$pre217$i<<2)|0);
     $$pre219$i = HEAP32[$$phi$trans$insert218$i>>2]|0;
     $477 = $$pre219$i;$844 = $$pre215$i;
    } else {
     $477 = $468;$844 = $843;
    }
    $475 = (($470) + ($466))|0;
    $476 = $477 << 7;
    $478 = Math_imul($476, $477)|0;
    $479 = ((($$1113131$i)) + 56|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = ($475|0)<($480|0);
    if ($481) {
     $482 = ((($$0111132$i)) + 14|0);
     HEAP32[$479>>2] = $475;
     HEAP8[$482>>0] = $312;
     $$pre220$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert221$i = (928 + ($$pre220$i<<2)|0);
     $$pre222$i = HEAP32[$$phi$trans$insert221$i>>2]|0;
     $$phi$trans$insert223$i = (848 + ($$pre222$i<<2)|0);
     $$pre224$i = HEAP32[$$phi$trans$insert223$i>>2]|0;
     $845 = $$pre224$i;$846 = $$pre220$i;
    } else {
     $845 = $477;$846 = $844;
    }
    $483 = (($475) + ($470))|0;
    $484 = (($483) + ($478))|0;
    $485 = ((($$1113131$i)) + 60|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = ($484|0)<($486|0);
    if ($487) {
     $488 = ((($$0111132$i)) + 15|0);
     HEAP32[$485>>2] = $484;
     HEAP8[$488>>0] = $312;
     $$pre225$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert226$i = (928 + ($$pre225$i<<2)|0);
     $$pre227$i = HEAP32[$$phi$trans$insert226$i>>2]|0;
     $$phi$trans$insert228$i = (848 + ($$pre227$i<<2)|0);
     $$pre229$i = HEAP32[$$phi$trans$insert228$i>>2]|0;
     $491 = $$pre225$i;$847 = $$pre229$i;
    } else {
     $491 = $846;$847 = $845;
    }
    $489 = (($463) + ($455))|0;
    $490 = (860 + ($491<<2)|0);
    $492 = HEAP32[$490>>2]|0;
    $493 = (848 + ($492<<2)|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = $494 << 5;
    $496 = Math_imul($495, $494)|0;
    $497 = (($496) + ($463))|0;
    $scevgep$4$i = ((($$1113131$i)) + 80|0);
    $498 = HEAP32[$scevgep$3$i>>2]|0;
    $499 = ($489|0)<($498|0);
    if ($499) {
     $scevgep140$3$i = ((($$0111132$i)) + 16|0);
     HEAP32[$scevgep$3$i>>2] = $489;
     HEAP8[$scevgep140$3$i>>0] = $312;
     $$pre230$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert231$i = (928 + ($$pre230$i<<2)|0);
     $$pre232$i = HEAP32[$$phi$trans$insert231$i>>2]|0;
     $$phi$trans$insert233$i = (848 + ($$pre232$i<<2)|0);
     $$pre234$i = HEAP32[$$phi$trans$insert233$i>>2]|0;
     $502 = $$pre234$i;$848 = $$pre230$i;
    } else {
     $502 = $847;$848 = $491;
    }
    $500 = (($489) + ($356))|0;
    $501 = $502 << 7;
    $503 = Math_imul($501, $502)|0;
    $504 = (($503) + ($356))|0;
    $505 = ((($$1113131$i)) + 68|0);
    $506 = HEAP32[$505>>2]|0;
    $507 = ($500|0)<($506|0);
    if ($507) {
     $508 = ((($$0111132$i)) + 17|0);
     HEAP32[$505>>2] = $500;
     HEAP8[$508>>0] = $312;
     $$pre235$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert236$i = (928 + ($$pre235$i<<2)|0);
     $$pre237$i = HEAP32[$$phi$trans$insert236$i>>2]|0;
     $$phi$trans$insert238$i = (848 + ($$pre237$i<<2)|0);
     $$pre239$i = HEAP32[$$phi$trans$insert238$i>>2]|0;
     $511 = $$pre239$i;$849 = $$pre235$i;
    } else {
     $511 = $502;$849 = $848;
    }
    $509 = (($504) + ($500))|0;
    $510 = $511 << 7;
    $512 = Math_imul($510, $511)|0;
    $513 = ((($$1113131$i)) + 72|0);
    $514 = HEAP32[$513>>2]|0;
    $515 = ($509|0)<($514|0);
    if ($515) {
     $516 = ((($$0111132$i)) + 18|0);
     HEAP32[$513>>2] = $509;
     HEAP8[$516>>0] = $312;
     $$pre240$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert241$i = (928 + ($$pre240$i<<2)|0);
     $$pre242$i = HEAP32[$$phi$trans$insert241$i>>2]|0;
     $$phi$trans$insert243$i = (848 + ($$pre242$i<<2)|0);
     $$pre244$i = HEAP32[$$phi$trans$insert243$i>>2]|0;
     $850 = $$pre244$i;$851 = $$pre240$i;
    } else {
     $850 = $511;$851 = $849;
    }
    $517 = (($509) + ($504))|0;
    $518 = (($517) + ($512))|0;
    $519 = ((($$1113131$i)) + 76|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = ($518|0)<($520|0);
    if ($521) {
     $522 = ((($$0111132$i)) + 19|0);
     HEAP32[$519>>2] = $518;
     HEAP8[$522>>0] = $312;
     $$pre245$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert246$i = (928 + ($$pre245$i<<2)|0);
     $$pre247$i = HEAP32[$$phi$trans$insert246$i>>2]|0;
     $$phi$trans$insert248$i = (848 + ($$pre247$i<<2)|0);
     $$pre249$i = HEAP32[$$phi$trans$insert248$i>>2]|0;
     $525 = $$pre245$i;$852 = $$pre249$i;
    } else {
     $525 = $851;$852 = $850;
    }
    $523 = (($497) + ($489))|0;
    $524 = (860 + ($525<<2)|0);
    $526 = HEAP32[$524>>2]|0;
    $527 = (848 + ($526<<2)|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = $528 << 5;
    $530 = Math_imul($529, $528)|0;
    $531 = (($530) + ($497))|0;
    $scevgep$5$i = ((($$1113131$i)) + 96|0);
    $532 = HEAP32[$scevgep$4$i>>2]|0;
    $533 = ($523|0)<($532|0);
    if ($533) {
     $scevgep140$4$i = ((($$0111132$i)) + 20|0);
     HEAP32[$scevgep$4$i>>2] = $523;
     HEAP8[$scevgep140$4$i>>0] = $312;
     $$pre250$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert251$i = (928 + ($$pre250$i<<2)|0);
     $$pre252$i = HEAP32[$$phi$trans$insert251$i>>2]|0;
     $$phi$trans$insert253$i = (848 + ($$pre252$i<<2)|0);
     $$pre254$i = HEAP32[$$phi$trans$insert253$i>>2]|0;
     $536 = $$pre254$i;$853 = $$pre250$i;
    } else {
     $536 = $852;$853 = $525;
    }
    $534 = (($523) + ($356))|0;
    $535 = $536 << 7;
    $537 = Math_imul($535, $536)|0;
    $538 = (($537) + ($356))|0;
    $539 = ((($$1113131$i)) + 84|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = ($534|0)<($540|0);
    if ($541) {
     $542 = ((($$0111132$i)) + 21|0);
     HEAP32[$539>>2] = $534;
     HEAP8[$542>>0] = $312;
     $$pre255$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert256$i = (928 + ($$pre255$i<<2)|0);
     $$pre257$i = HEAP32[$$phi$trans$insert256$i>>2]|0;
     $$phi$trans$insert258$i = (848 + ($$pre257$i<<2)|0);
     $$pre259$i = HEAP32[$$phi$trans$insert258$i>>2]|0;
     $545 = $$pre259$i;$854 = $$pre255$i;
    } else {
     $545 = $536;$854 = $853;
    }
    $543 = (($538) + ($534))|0;
    $544 = $545 << 7;
    $546 = Math_imul($544, $545)|0;
    $547 = ((($$1113131$i)) + 88|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = ($543|0)<($548|0);
    if ($549) {
     $550 = ((($$0111132$i)) + 22|0);
     HEAP32[$547>>2] = $543;
     HEAP8[$550>>0] = $312;
     $$pre260$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert261$i = (928 + ($$pre260$i<<2)|0);
     $$pre262$i = HEAP32[$$phi$trans$insert261$i>>2]|0;
     $$phi$trans$insert263$i = (848 + ($$pre262$i<<2)|0);
     $$pre264$i = HEAP32[$$phi$trans$insert263$i>>2]|0;
     $855 = $$pre264$i;$856 = $$pre260$i;
    } else {
     $855 = $545;$856 = $854;
    }
    $551 = (($543) + ($538))|0;
    $552 = (($551) + ($546))|0;
    $553 = ((($$1113131$i)) + 92|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ($552|0)<($554|0);
    if ($555) {
     $556 = ((($$0111132$i)) + 23|0);
     HEAP32[$553>>2] = $552;
     HEAP8[$556>>0] = $312;
     $$pre265$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert266$i = (928 + ($$pre265$i<<2)|0);
     $$pre267$i = HEAP32[$$phi$trans$insert266$i>>2]|0;
     $$phi$trans$insert268$i = (848 + ($$pre267$i<<2)|0);
     $$pre269$i = HEAP32[$$phi$trans$insert268$i>>2]|0;
     $559 = $$pre265$i;$857 = $$pre269$i;
    } else {
     $559 = $856;$857 = $855;
    }
    $557 = (($531) + ($523))|0;
    $558 = (860 + ($559<<2)|0);
    $560 = HEAP32[$558>>2]|0;
    $561 = (848 + ($560<<2)|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = $562 << 5;
    $564 = Math_imul($563, $562)|0;
    $scevgep$6$i = ((($$1113131$i)) + 112|0);
    $565 = HEAP32[$scevgep$5$i>>2]|0;
    $566 = ($557|0)<($565|0);
    if ($566) {
     $scevgep140$5$i = ((($$0111132$i)) + 24|0);
     HEAP32[$scevgep$5$i>>2] = $557;
     HEAP8[$scevgep140$5$i>>0] = $312;
     $$pre270$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert271$i = (928 + ($$pre270$i<<2)|0);
     $$pre272$i = HEAP32[$$phi$trans$insert271$i>>2]|0;
     $$phi$trans$insert273$i = (848 + ($$pre272$i<<2)|0);
     $$pre274$i = HEAP32[$$phi$trans$insert273$i>>2]|0;
     $569 = $$pre274$i;$858 = $$pre270$i;
    } else {
     $569 = $857;$858 = $559;
    }
    $567 = (($557) + ($356))|0;
    $568 = $569 << 7;
    $570 = Math_imul($568, $569)|0;
    $571 = (($570) + ($356))|0;
    $572 = ((($$1113131$i)) + 100|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = ($567|0)<($573|0);
    if ($574) {
     $575 = ((($$0111132$i)) + 25|0);
     HEAP32[$572>>2] = $567;
     HEAP8[$575>>0] = $312;
     $$pre275$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert276$i = (928 + ($$pre275$i<<2)|0);
     $$pre277$i = HEAP32[$$phi$trans$insert276$i>>2]|0;
     $$phi$trans$insert278$i = (848 + ($$pre277$i<<2)|0);
     $$pre279$i = HEAP32[$$phi$trans$insert278$i>>2]|0;
     $578 = $$pre279$i;$859 = $$pre275$i;
    } else {
     $578 = $569;$859 = $858;
    }
    $576 = (($571) + ($567))|0;
    $577 = $578 << 7;
    $579 = Math_imul($577, $578)|0;
    $580 = ((($$1113131$i)) + 104|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = ($576|0)<($581|0);
    if ($582) {
     $583 = ((($$0111132$i)) + 26|0);
     HEAP32[$580>>2] = $576;
     HEAP8[$583>>0] = $312;
     $$pre280$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert281$i = (928 + ($$pre280$i<<2)|0);
     $$pre282$i = HEAP32[$$phi$trans$insert281$i>>2]|0;
     $$phi$trans$insert283$i = (848 + ($$pre282$i<<2)|0);
     $$pre284$i = HEAP32[$$phi$trans$insert283$i>>2]|0;
     $860 = $$pre284$i;$861 = $$pre280$i;
    } else {
     $860 = $578;$861 = $859;
    }
    $584 = (($576) + ($571))|0;
    $585 = (($584) + ($579))|0;
    $586 = ((($$1113131$i)) + 108|0);
    $587 = HEAP32[$586>>2]|0;
    $588 = ($585|0)<($587|0);
    if ($588) {
     $589 = ((($$0111132$i)) + 27|0);
     HEAP32[$586>>2] = $585;
     HEAP8[$589>>0] = $312;
     $$pre285$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert286$i = (928 + ($$pre285$i<<2)|0);
     $$pre287$i = HEAP32[$$phi$trans$insert286$i>>2]|0;
     $$phi$trans$insert288$i = (848 + ($$pre287$i<<2)|0);
     $$pre289$i = HEAP32[$$phi$trans$insert288$i>>2]|0;
     $862 = $$pre289$i;$863 = $$pre285$i;
    } else {
     $862 = $860;$863 = $861;
    }
    $590 = (($557) + ($531))|0;
    $591 = (($590) + ($564))|0;
    $592 = HEAP32[$scevgep$6$i>>2]|0;
    $593 = ($591|0)<($592|0);
    if ($593) {
     $scevgep140$6$i = ((($$0111132$i)) + 28|0);
     HEAP32[$scevgep$6$i>>2] = $591;
     HEAP8[$scevgep140$6$i>>0] = $312;
     $$pre290$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert291$i = (928 + ($$pre290$i<<2)|0);
     $$pre292$i = HEAP32[$$phi$trans$insert291$i>>2]|0;
     $$phi$trans$insert293$i = (848 + ($$pre292$i<<2)|0);
     $$pre294$i = HEAP32[$$phi$trans$insert293$i>>2]|0;
     $596 = $$pre294$i;$864 = $$pre290$i;
    } else {
     $596 = $862;$864 = $863;
    }
    $594 = (($591) + ($356))|0;
    $595 = $596 << 7;
    $597 = Math_imul($595, $596)|0;
    $598 = (($597) + ($356))|0;
    $599 = ((($$1113131$i)) + 116|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = ($594|0)<($600|0);
    if ($601) {
     $602 = ((($$0111132$i)) + 29|0);
     HEAP32[$599>>2] = $594;
     HEAP8[$602>>0] = $312;
     $$pre295$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert296$i = (928 + ($$pre295$i<<2)|0);
     $$pre297$i = HEAP32[$$phi$trans$insert296$i>>2]|0;
     $$phi$trans$insert298$i = (848 + ($$pre297$i<<2)|0);
     $$pre299$i = HEAP32[$$phi$trans$insert298$i>>2]|0;
     $605 = $$pre299$i;$865 = $$pre295$i;
    } else {
     $605 = $596;$865 = $864;
    }
    $603 = (($598) + ($594))|0;
    $604 = $605 << 7;
    $606 = Math_imul($604, $605)|0;
    $607 = ((($$1113131$i)) + 120|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = ($603|0)<($608|0);
    if ($609) {
     $610 = ((($$0111132$i)) + 30|0);
     HEAP32[$607>>2] = $603;
     HEAP8[$610>>0] = $312;
     $$pre300$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert301$i = (928 + ($$pre300$i<<2)|0);
     $$pre302$i = HEAP32[$$phi$trans$insert301$i>>2]|0;
     $$phi$trans$insert303$i = (848 + ($$pre302$i<<2)|0);
     $$pre304$i = HEAP32[$$phi$trans$insert303$i>>2]|0;
     $866 = $$pre304$i;$867 = $$pre300$i;
    } else {
     $866 = $605;$867 = $865;
    }
    $611 = (($603) + ($598))|0;
    $612 = (($611) + ($606))|0;
    $613 = ((($$1113131$i)) + 124|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = ($612|0)<($614|0);
    if ($615) {
     $616 = ((($$0111132$i)) + 31|0);
     HEAP32[$613>>2] = $612;
     HEAP8[$616>>0] = $312;
     $$pre305$i = HEAP32[$309>>2]|0;
     $$phi$trans$insert306$i = (928 + ($$pre305$i<<2)|0);
     $$pre307$i = HEAP32[$$phi$trans$insert306$i>>2]|0;
     $$phi$trans$insert308$i = (848 + ($$pre307$i<<2)|0);
     $$pre309$i = HEAP32[$$phi$trans$insert308$i>>2]|0;
     $619 = $$pre305$i;$829 = $$pre309$i;
    } else {
     $619 = $867;$829 = $866;
    }
    $scevgep142$i = ((($$0111132$i)) + 32|0);
    $617 = (($$0110133$i) + ($$0107134$i))|0;
    $618 = (780 + ($619<<2)|0);
    $620 = HEAP32[$618>>2]|0;
    $621 = (848 + ($620<<2)|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = $622 << 7;
    $624 = Math_imul($623, $622)|0;
    $625 = (($624) + ($$0107134$i))|0;
    $626 = (($$0135$i) + -1)|0;
    $627 = ($$0135$i|0)>(0);
    if ($627) {
     $$0107134$i = $625;$$0110133$i = $617;$$0111132$i = $scevgep142$i;$$0135$i = $626;$$1113131$i = $scevgep141$i;$827 = $619;
    } else {
     break;
    }
   }
   $371 = (($$1117136$i) + 1)|0;
   $exitcond$i59 = ($371|0)==($$0176$lcssa$i|0);
   if ($exitcond$i59) {
    break;
   } else {
    $$1117136$i = $371;$$pre$pn$i = $619;$321 = $622;$339 = $829;
   }
  }
 }
 $628 = $12 << 2;
 $629 = $13 << 3;
 $630 = $14 << 2;
 $631 = $629 | 1;
 $632 = $629 | 2;
 $633 = $629 | 3;
 $634 = $629 | 4;
 $635 = $629 | 5;
 $636 = $629 | 6;
 $637 = $629 | 7;
 $$05468 = $7;$$05767 = 0;
 while(1) {
  $638 = (($$05767) + ($628))|0;
  $639 = (($11) + ($638<<2)|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = ((($640) + ($629<<6)|0) + ($630<<1)|0);
  $642 = ((($$05468)) + 1|0);
  $643 = HEAP8[$$05468>>0]|0;
  $644 = $643&255;
  $645 = (($644) + 1)|0;
  $646 = $645&65535;
  $647 = ((($641)) + 2|0);
  HEAP16[$641>>1] = $646;
  $648 = ((($$05468)) + 2|0);
  $649 = HEAP8[$642>>0]|0;
  $650 = $649&255;
  $651 = (($650) + 1)|0;
  $652 = $651&65535;
  $653 = ((($641)) + 4|0);
  HEAP16[$647>>1] = $652;
  $654 = ((($$05468)) + 3|0);
  $655 = HEAP8[$648>>0]|0;
  $656 = $655&255;
  $657 = (($656) + 1)|0;
  $658 = $657&65535;
  $659 = ((($641)) + 6|0);
  HEAP16[$653>>1] = $658;
  $660 = HEAP8[$654>>0]|0;
  $661 = $660&255;
  $662 = (($661) + 1)|0;
  $663 = $662&65535;
  HEAP16[$659>>1] = $663;
  $scevgep = ((($$05468)) + 4|0);
  $664 = ((($640) + ($631<<6)|0) + ($630<<1)|0);
  $665 = ((($$05468)) + 5|0);
  $666 = HEAP8[$scevgep>>0]|0;
  $667 = $666&255;
  $668 = (($667) + 1)|0;
  $669 = $668&65535;
  $670 = ((($664)) + 2|0);
  HEAP16[$664>>1] = $669;
  $671 = ((($$05468)) + 6|0);
  $672 = HEAP8[$665>>0]|0;
  $673 = $672&255;
  $674 = (($673) + 1)|0;
  $675 = $674&65535;
  $676 = ((($664)) + 4|0);
  HEAP16[$670>>1] = $675;
  $677 = ((($$05468)) + 7|0);
  $678 = HEAP8[$671>>0]|0;
  $679 = $678&255;
  $680 = (($679) + 1)|0;
  $681 = $680&65535;
  $682 = ((($664)) + 6|0);
  HEAP16[$676>>1] = $681;
  $683 = HEAP8[$677>>0]|0;
  $684 = $683&255;
  $685 = (($684) + 1)|0;
  $686 = $685&65535;
  HEAP16[$682>>1] = $686;
  $scevgep$1 = ((($$05468)) + 8|0);
  $687 = ((($640) + ($632<<6)|0) + ($630<<1)|0);
  $688 = ((($$05468)) + 9|0);
  $689 = HEAP8[$scevgep$1>>0]|0;
  $690 = $689&255;
  $691 = (($690) + 1)|0;
  $692 = $691&65535;
  $693 = ((($687)) + 2|0);
  HEAP16[$687>>1] = $692;
  $694 = ((($$05468)) + 10|0);
  $695 = HEAP8[$688>>0]|0;
  $696 = $695&255;
  $697 = (($696) + 1)|0;
  $698 = $697&65535;
  $699 = ((($687)) + 4|0);
  HEAP16[$693>>1] = $698;
  $700 = ((($$05468)) + 11|0);
  $701 = HEAP8[$694>>0]|0;
  $702 = $701&255;
  $703 = (($702) + 1)|0;
  $704 = $703&65535;
  $705 = ((($687)) + 6|0);
  HEAP16[$699>>1] = $704;
  $706 = HEAP8[$700>>0]|0;
  $707 = $706&255;
  $708 = (($707) + 1)|0;
  $709 = $708&65535;
  HEAP16[$705>>1] = $709;
  $scevgep$2 = ((($$05468)) + 12|0);
  $710 = ((($640) + ($633<<6)|0) + ($630<<1)|0);
  $711 = ((($$05468)) + 13|0);
  $712 = HEAP8[$scevgep$2>>0]|0;
  $713 = $712&255;
  $714 = (($713) + 1)|0;
  $715 = $714&65535;
  $716 = ((($710)) + 2|0);
  HEAP16[$710>>1] = $715;
  $717 = ((($$05468)) + 14|0);
  $718 = HEAP8[$711>>0]|0;
  $719 = $718&255;
  $720 = (($719) + 1)|0;
  $721 = $720&65535;
  $722 = ((($710)) + 4|0);
  HEAP16[$716>>1] = $721;
  $723 = ((($$05468)) + 15|0);
  $724 = HEAP8[$717>>0]|0;
  $725 = $724&255;
  $726 = (($725) + 1)|0;
  $727 = $726&65535;
  $728 = ((($710)) + 6|0);
  HEAP16[$722>>1] = $727;
  $729 = HEAP8[$723>>0]|0;
  $730 = $729&255;
  $731 = (($730) + 1)|0;
  $732 = $731&65535;
  HEAP16[$728>>1] = $732;
  $scevgep$3 = ((($$05468)) + 16|0);
  $733 = HEAP32[$639>>2]|0;
  $734 = ((($733) + ($634<<6)|0) + ($630<<1)|0);
  $735 = ((($$05468)) + 17|0);
  $736 = HEAP8[$scevgep$3>>0]|0;
  $737 = $736&255;
  $738 = (($737) + 1)|0;
  $739 = $738&65535;
  $740 = ((($734)) + 2|0);
  HEAP16[$734>>1] = $739;
  $741 = ((($$05468)) + 18|0);
  $742 = HEAP8[$735>>0]|0;
  $743 = $742&255;
  $744 = (($743) + 1)|0;
  $745 = $744&65535;
  $746 = ((($734)) + 4|0);
  HEAP16[$740>>1] = $745;
  $747 = ((($$05468)) + 19|0);
  $748 = HEAP8[$741>>0]|0;
  $749 = $748&255;
  $750 = (($749) + 1)|0;
  $751 = $750&65535;
  $752 = ((($734)) + 6|0);
  HEAP16[$746>>1] = $751;
  $753 = HEAP8[$747>>0]|0;
  $754 = $753&255;
  $755 = (($754) + 1)|0;
  $756 = $755&65535;
  HEAP16[$752>>1] = $756;
  $scevgep$4 = ((($$05468)) + 20|0);
  $757 = ((($733) + ($635<<6)|0) + ($630<<1)|0);
  $758 = ((($$05468)) + 21|0);
  $759 = HEAP8[$scevgep$4>>0]|0;
  $760 = $759&255;
  $761 = (($760) + 1)|0;
  $762 = $761&65535;
  $763 = ((($757)) + 2|0);
  HEAP16[$757>>1] = $762;
  $764 = ((($$05468)) + 22|0);
  $765 = HEAP8[$758>>0]|0;
  $766 = $765&255;
  $767 = (($766) + 1)|0;
  $768 = $767&65535;
  $769 = ((($757)) + 4|0);
  HEAP16[$763>>1] = $768;
  $770 = ((($$05468)) + 23|0);
  $771 = HEAP8[$764>>0]|0;
  $772 = $771&255;
  $773 = (($772) + 1)|0;
  $774 = $773&65535;
  $775 = ((($757)) + 6|0);
  HEAP16[$769>>1] = $774;
  $776 = HEAP8[$770>>0]|0;
  $777 = $776&255;
  $778 = (($777) + 1)|0;
  $779 = $778&65535;
  HEAP16[$775>>1] = $779;
  $scevgep$5 = ((($$05468)) + 24|0);
  $780 = ((($733) + ($636<<6)|0) + ($630<<1)|0);
  $781 = ((($$05468)) + 25|0);
  $782 = HEAP8[$scevgep$5>>0]|0;
  $783 = $782&255;
  $784 = (($783) + 1)|0;
  $785 = $784&65535;
  $786 = ((($780)) + 2|0);
  HEAP16[$780>>1] = $785;
  $787 = ((($$05468)) + 26|0);
  $788 = HEAP8[$781>>0]|0;
  $789 = $788&255;
  $790 = (($789) + 1)|0;
  $791 = $790&65535;
  $792 = ((($780)) + 4|0);
  HEAP16[$786>>1] = $791;
  $793 = ((($$05468)) + 27|0);
  $794 = HEAP8[$787>>0]|0;
  $795 = $794&255;
  $796 = (($795) + 1)|0;
  $797 = $796&65535;
  $798 = ((($780)) + 6|0);
  HEAP16[$792>>1] = $797;
  $799 = HEAP8[$793>>0]|0;
  $800 = $799&255;
  $801 = (($800) + 1)|0;
  $802 = $801&65535;
  HEAP16[$798>>1] = $802;
  $scevgep$6 = ((($$05468)) + 28|0);
  $803 = ((($733) + ($637<<6)|0) + ($630<<1)|0);
  $804 = ((($$05468)) + 29|0);
  $805 = HEAP8[$scevgep$6>>0]|0;
  $806 = $805&255;
  $807 = (($806) + 1)|0;
  $808 = $807&65535;
  $809 = ((($803)) + 2|0);
  HEAP16[$803>>1] = $808;
  $810 = ((($$05468)) + 30|0);
  $811 = HEAP8[$804>>0]|0;
  $812 = $811&255;
  $813 = (($812) + 1)|0;
  $814 = $813&65535;
  $815 = ((($803)) + 4|0);
  HEAP16[$809>>1] = $814;
  $816 = ((($$05468)) + 31|0);
  $817 = HEAP8[$810>>0]|0;
  $818 = $817&255;
  $819 = (($818) + 1)|0;
  $820 = $819&65535;
  $821 = ((($803)) + 6|0);
  HEAP16[$815>>1] = $820;
  $822 = HEAP8[$816>>0]|0;
  $823 = $822&255;
  $824 = (($823) + 1)|0;
  $825 = $824&65535;
  HEAP16[$821>>1] = $825;
  $scevgep72 = ((($$05468)) + 32|0);
  $826 = (($$05767) + 1)|0;
  $exitcond = ($826|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$05468 = $scevgep72;$$05767 = $826;
  }
 }
 STACKTOP = sp;return;
}
function _update_box($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$0203516 = 0, $$0207524 = 0, $$0214520 = 0, $$0221 = 0, $$0222 = 0, $$0223 = 0, $$0224 = 0, $$0225 = 0, $$0226 = 0, $$0227515 = 0, $$0266 = 0, $$1204476 = 0, $$1208484 = 0, $$1215480 = 0, $$1228475 = 0, $$1261 = 0, $$2$ = 0, $$2205436 = 0, $$2209440 = 0;
 var $$2216444 = 0, $$2229435 = 0, $$2259 = 0, $$3206396 = 0, $$3210400 = 0, $$3217404 = 0, $$3230395 = 0, $$4211360 = 0, $$4218355 = 0, $$4231364 = 0, $$4356 = 0, $$5212321 = 0, $$5219316 = 0, $$5232324 = 0, $$5317 = 0, $$6213265 = 0, $$6220260 = 0, $$6233257 = 0, $$6258 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond581 = 0, $or$cond582 = 0, $or$cond583 = 0, $or$cond584 = 0, $or$cond585 = 0, $or$cond586 = 0, $or$cond587 = 0, $or$cond588 = 0, $or$cond589 = 0;
 var $or$cond590 = 0, $or$cond591 = 0, $or$cond592 = 0, $or$cond593 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 460|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($8|0)<=($6|0);
 $18 = ($10|0)>($12|0);
 $or$cond = $17 | $18;
 $19 = ($14|0)>($16|0);
 $or$cond581 = $or$cond | $19;
 L1: do {
  if ($or$cond581) {
   $$0226 = $6;
  } else {
   $$0207524 = $6;
   L2: while(1) {
    $20 = (($5) + ($$0207524<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $$0214520 = $10;
    while(1) {
     $22 = ((($21) + ($$0214520<<6)|0) + ($14<<1)|0);
     $$0203516 = $22;$$0227515 = $14;
     while(1) {
      $23 = HEAP16[$$0203516>>1]|0;
      $24 = ($23<<16>>16)==(0);
      if (!($24)) {
       break L2;
      }
      $25 = ((($$0203516)) + 2|0);
      $26 = (($$0227515) + 1)|0;
      $27 = ($$0227515|0)<($16|0);
      if ($27) {
       $$0203516 = $25;$$0227515 = $26;
      } else {
       break;
      }
     }
     $28 = (($$0214520) + 1)|0;
     $29 = ($$0214520|0)<($12|0);
     if ($29) {
      $$0214520 = $28;
     } else {
      break;
     }
    }
    $30 = (($$0207524) + 1)|0;
    $31 = ($$0207524|0)<($8|0);
    if ($31) {
     $$0207524 = $30;
    } else {
     $$0226 = $6;
     break L1;
    }
   }
   HEAP32[$1>>2] = $$0207524;
   $$0226 = $$0207524;
  }
 } while(0);
 $32 = ($8|0)<=($$0226|0);
 $33 = ($10|0)>($12|0);
 $or$cond582 = $32 | $33;
 $34 = ($14|0)>($16|0);
 $or$cond583 = $or$cond582 | $34;
 L13: do {
  if ($or$cond583) {
   $$0225 = $8;
  } else {
   $$1208484 = $8;
   L14: while(1) {
    $35 = (($5) + ($$1208484<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $$1215480 = $10;
    while(1) {
     $37 = ((($36) + ($$1215480<<6)|0) + ($14<<1)|0);
     $$1204476 = $37;$$1228475 = $14;
     while(1) {
      $38 = HEAP16[$$1204476>>1]|0;
      $39 = ($38<<16>>16)==(0);
      if (!($39)) {
       break L14;
      }
      $40 = ((($$1204476)) + 2|0);
      $41 = (($$1228475) + 1)|0;
      $42 = ($$1228475|0)<($16|0);
      if ($42) {
       $$1204476 = $40;$$1228475 = $41;
      } else {
       break;
      }
     }
     $43 = (($$1215480) + 1)|0;
     $44 = ($$1215480|0)<($12|0);
     if ($44) {
      $$1215480 = $43;
     } else {
      break;
     }
    }
    $45 = (($$1208484) + -1)|0;
    $46 = ($$1208484|0)>($$0226|0);
    if ($46) {
     $$1208484 = $45;
    } else {
     $$0225 = $8;
     break L13;
    }
   }
   HEAP32[$7>>2] = $$1208484;
   $$0225 = $$1208484;
  }
 } while(0);
 $47 = ($12|0)<=($10|0);
 $48 = ($$0225|0)<($$0226|0);
 $or$cond584 = $47 | $48;
 $49 = ($14|0)>($16|0);
 $or$cond585 = $or$cond584 | $49;
 L25: do {
  if ($or$cond585) {
   $$0224 = $10;
  } else {
   $$2216444 = $10;
   L26: while(1) {
    $$2209440 = $$0226;
    while(1) {
     $50 = (($5) + ($$2209440<<2)|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($51) + ($$2216444<<6)|0) + ($14<<1)|0);
     $$2205436 = $52;$$2229435 = $14;
     while(1) {
      $53 = HEAP16[$$2205436>>1]|0;
      $54 = ($53<<16>>16)==(0);
      if (!($54)) {
       break L26;
      }
      $55 = ((($$2205436)) + 2|0);
      $56 = (($$2229435) + 1)|0;
      $57 = ($$2229435|0)<($16|0);
      if ($57) {
       $$2205436 = $55;$$2229435 = $56;
      } else {
       break;
      }
     }
     $58 = (($$2209440) + 1)|0;
     $59 = ($$2209440|0)<($$0225|0);
     if ($59) {
      $$2209440 = $58;
     } else {
      break;
     }
    }
    $60 = (($$2216444) + 1)|0;
    $61 = ($$2216444|0)<($12|0);
    if ($61) {
     $$2216444 = $60;
    } else {
     $$0224 = $10;
     break L25;
    }
   }
   HEAP32[$9>>2] = $$2216444;
   $$0224 = $$2216444;
  }
 } while(0);
 $62 = ($12|0)<=($$0224|0);
 $63 = ($$0225|0)<($$0226|0);
 $or$cond586 = $62 | $63;
 $64 = ($14|0)>($16|0);
 $or$cond587 = $or$cond586 | $64;
 L37: do {
  if ($or$cond587) {
   $$0223 = $12;
  } else {
   $$3217404 = $12;
   L38: while(1) {
    $$3210400 = $$0226;
    while(1) {
     $65 = (($5) + ($$3210400<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66) + ($$3217404<<6)|0) + ($14<<1)|0);
     $$3206396 = $67;$$3230395 = $14;
     while(1) {
      $68 = HEAP16[$$3206396>>1]|0;
      $69 = ($68<<16>>16)==(0);
      if (!($69)) {
       break L38;
      }
      $70 = ((($$3206396)) + 2|0);
      $71 = (($$3230395) + 1)|0;
      $72 = ($$3230395|0)<($16|0);
      if ($72) {
       $$3206396 = $70;$$3230395 = $71;
      } else {
       break;
      }
     }
     $73 = (($$3210400) + 1)|0;
     $74 = ($$3210400|0)<($$0225|0);
     if ($74) {
      $$3210400 = $73;
     } else {
      break;
     }
    }
    $75 = (($$3217404) + -1)|0;
    $76 = ($$3217404|0)>($$0224|0);
    if ($76) {
     $$3217404 = $75;
    } else {
     $$0223 = $12;
     break L37;
    }
   }
   HEAP32[$11>>2] = $$3217404;
   $$0223 = $$3217404;
  }
 } while(0);
 $77 = ($16|0)<=($14|0);
 $78 = ($$0225|0)<($$0226|0);
 $or$cond588 = $77 | $78;
 $79 = ($$0223|0)<($$0224|0);
 $or$cond589 = $or$cond588 | $79;
 L49: do {
  if ($or$cond589) {
   $$0222 = $14;
  } else {
   $$4231364 = $14;
   L50: while(1) {
    $$4211360 = $$0226;
    while(1) {
     $80 = (($5) + ($$4211360<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($81) + ($$0224<<6)|0) + ($$4231364<<1)|0);
     $$4218355 = $$0224;$$4356 = $82;
     while(1) {
      $83 = HEAP16[$$4356>>1]|0;
      $84 = ($83<<16>>16)==(0);
      if (!($84)) {
       break L50;
      }
      $85 = (($$4218355) + 1)|0;
      $86 = ((($$4356)) + 64|0);
      $87 = ($$4218355|0)<($$0223|0);
      if ($87) {
       $$4218355 = $85;$$4356 = $86;
      } else {
       break;
      }
     }
     $88 = (($$4211360) + 1)|0;
     $89 = ($$4211360|0)<($$0225|0);
     if ($89) {
      $$4211360 = $88;
     } else {
      break;
     }
    }
    $90 = (($$4231364) + 1)|0;
    $91 = ($$4231364|0)<($16|0);
    if ($91) {
     $$4231364 = $90;
    } else {
     $$0222 = $14;
     break L49;
    }
   }
   HEAP32[$13>>2] = $$4231364;
   $$0222 = $$4231364;
  }
 } while(0);
 $92 = ($16|0)<=($$0222|0);
 $93 = ($$0225|0)<($$0226|0);
 $or$cond590 = $92 | $93;
 $94 = ($$0223|0)<($$0224|0);
 $or$cond591 = $or$cond590 | $94;
 L61: do {
  if ($or$cond591) {
   $$0221 = $16;
  } else {
   $$5232324 = $16;
   L62: while(1) {
    $$5212321 = $$0226;
    while(1) {
     $95 = (($5) + ($$5212321<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($96) + ($$0224<<6)|0) + ($$5232324<<1)|0);
     $$5219316 = $$0224;$$5317 = $97;
     while(1) {
      $98 = HEAP16[$$5317>>1]|0;
      $99 = ($98<<16>>16)==(0);
      if (!($99)) {
       break L62;
      }
      $100 = (($$5219316) + 1)|0;
      $101 = ((($$5317)) + 64|0);
      $102 = ($$5219316|0)<($$0223|0);
      if ($102) {
       $$5219316 = $100;$$5317 = $101;
      } else {
       break;
      }
     }
     $103 = (($$5212321) + 1)|0;
     $104 = ($$5212321|0)<($$0225|0);
     if ($104) {
      $$5212321 = $103;
     } else {
      break;
     }
    }
    $105 = (($$5232324) + -1)|0;
    $106 = ($$5232324|0)>($$0222|0);
    if ($106) {
     $$5232324 = $105;
    } else {
     $$0221 = $16;
     break L61;
    }
   }
   HEAP32[$15>>2] = $$5232324;
   $$0221 = $$5232324;
  }
 } while(0);
 $107 = (($$0225) - ($$0226))|0;
 $108 = $107 << 3;
 $109 = ((($0)) + 44|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (780 + ($110<<2)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (848 + ($112<<2)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = Math_imul($114, $108)|0;
 $116 = (($$0223) - ($$0224))|0;
 $117 = $116 << 2;
 $118 = (860 + ($110<<2)|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (848 + ($119<<2)|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = Math_imul($121, $117)|0;
 $123 = (($$0221) - ($$0222))|0;
 $124 = $123 << 3;
 $125 = (928 + ($110<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (848 + ($126<<2)|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = Math_imul($128, $124)|0;
 $130 = Math_imul($115, $115)|0;
 $131 = Math_imul($122, $122)|0;
 $132 = (($131) + ($130))|0;
 $133 = Math_imul($129, $129)|0;
 $134 = (($132) + ($133))|0;
 $135 = ((($1)) + 24|0);
 HEAP32[$135>>2] = $134;
 $136 = ($$0225|0)<($$0226|0);
 $137 = ($$0223|0)<($$0224|0);
 $or$cond592 = $136 | $137;
 $138 = ($$0221|0)<($$0222|0);
 $or$cond593 = $or$cond592 | $138;
 if ($or$cond593) {
  $$0$lcssa = 0;
  $152 = ((($1)) + 28|0);
  HEAP32[$152>>2] = $$0$lcssa;
  return;
 } else {
  $$0266 = 0;$$6213265 = $$0226;
 }
 while(1) {
  $139 = (($5) + ($$6213265<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $$1261 = $$0266;$$6220260 = $$0224;
  while(1) {
   $141 = ((($140) + ($$6220260<<6)|0) + ($$0222<<1)|0);
   $$2259 = $$1261;$$6233257 = $$0222;$$6258 = $141;
   while(1) {
    $142 = HEAP16[$$6258>>1]|0;
    $143 = ($142<<16>>16)!=(0);
    $144 = $143&1;
    $$2$ = (($$2259) + ($144))|0;
    $145 = (($$6233257) + 1)|0;
    $146 = ((($$6258)) + 2|0);
    $147 = ($$6233257|0)<($$0221|0);
    if ($147) {
     $$2259 = $$2$;$$6233257 = $145;$$6258 = $146;
    } else {
     break;
    }
   }
   $148 = (($$6220260) + 1)|0;
   $149 = ($$6220260|0)<($$0223|0);
   if ($149) {
    $$1261 = $$2$;$$6220260 = $148;
   } else {
    break;
   }
  }
  $150 = (($$6213265) + 1)|0;
  $151 = ($$6213265|0)<($$0225|0);
  if ($151) {
   $$0266 = $$2$;$$6213265 = $150;
  } else {
   $$0$lcssa = $$2$;
   break;
  }
 }
 $152 = ((($1)) + 28|0);
 HEAP32[$152>>2] = $$0$lcssa;
 return;
}
function _jdiv_round_up($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + -1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (($3|0) / ($1|0))&-1;
 return ($4|0);
}
function _jround_up($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + -1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (($3|0) % ($1|0))&-1;
 $5 = (($3) - ($4))|0;
 return ($5|0);
}
function _jcopy_sample_rows($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$01922 = 0, $$02021 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($4|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = (($2) + ($3<<2)|0);
 $8 = (($0) + ($1<<2)|0);
 $$01922 = $8;$$02021 = $7;$$023 = $4;
 while(1) {
  $9 = ((($$01922)) + 4|0);
  $10 = HEAP32[$$01922>>2]|0;
  $11 = ((($$02021)) + 4|0);
  $12 = HEAP32[$$02021>>2]|0;
  _memcpy(($12|0),($10|0),($5|0))|0;
  $13 = (($$023) + -1)|0;
  $14 = ($$023|0)>(1);
  if ($14) {
   $$01922 = $9;$$02021 = $11;$$023 = $13;
  } else {
   break;
  }
 }
 return;
}
function _jcopy_block_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 << 7;
 _memcpy(($1|0),($0|0),($3|0))|0;
 return;
}
function _jzero_far($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($0|0),0,($1|0))|0;
 return;
}
function _jinit_memory_mgr($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = sp + 12|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = (_jpeg_mem_init($0)|0);
 HEAP32[$1>>2] = $4;
 $5 = (_jpeg_get_small($0,84)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _jpeg_mem_term($0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 20|0);
  HEAP32[$8>>2] = 54;
  $9 = ((($7)) + 24|0);
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 HEAP32[$5>>2] = 103;
 $12 = ((($5)) + 4|0);
 HEAP32[$12>>2] = 104;
 $13 = ((($5)) + 8|0);
 HEAP32[$13>>2] = 105;
 $14 = ((($5)) + 12|0);
 HEAP32[$14>>2] = 106;
 $15 = ((($5)) + 16|0);
 HEAP32[$15>>2] = 107;
 $16 = ((($5)) + 20|0);
 HEAP32[$16>>2] = 108;
 $17 = ((($5)) + 24|0);
 HEAP32[$17>>2] = 109;
 $18 = ((($5)) + 28|0);
 HEAP32[$18>>2] = 110;
 $19 = ((($5)) + 32|0);
 HEAP32[$19>>2] = 111;
 $20 = ((($5)) + 36|0);
 HEAP32[$20>>2] = 112;
 $21 = ((($5)) + 40|0);
 HEAP32[$21>>2] = 113;
 $22 = ((($5)) + 48|0);
 HEAP32[$22>>2] = 1000000000;
 $23 = ((($5)) + 44|0);
 HEAP32[$23>>2] = $4;
 $24 = ((($5)) + 52|0);
 $25 = ((($5)) + 60|0);
 $26 = ((($5)) + 56|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($5)) + 64|0);
 HEAP32[$27>>2] = 0;
 HEAP32[$24>>2] = 0;
 HEAP32[$25>>2] = 0;
 $28 = ((($5)) + 68|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($5)) + 72|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($5)) + 76|0);
 HEAP32[$30>>2] = 84;
 HEAP32[$3>>2] = $5;
 $31 = (_getenv((12247|0))|0);
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 HEAP8[$2>>0] = 120;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $33 = (_sscanf($31,12255,$vararg_buffer)|0);
 $34 = ($33|0)>(0);
 if ($34) {
  $35 = HEAP8[$2>>0]|0;
  switch ($35<<24>>24) {
  case 77: case 109:  {
   $36 = HEAP32[$1>>2]|0;
   $37 = ($36*1000)|0;
   HEAP32[$1>>2] = $37;
   $39 = $37;
   break;
  }
  default: {
   $$pre = HEAP32[$1>>2]|0;
   $39 = $$pre;
  }
  }
  $38 = ($39*1000)|0;
  HEAP32[$23>>2] = $38;
 }
 STACKTOP = sp;return;
}
function _alloc_small($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0 = 0, $$0 = 0, $$0$in = 0, $$070 = 0, $$071$lcssa = 0, $$072 = 0, $$07280 = 0, $$07282 = 0, $$1$lcssa = 0, $$173 = 0, $$177 = 0, $$lcssa = 0, $$lcssa74 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond81 = 0, $first_pool_slop$extra_pool_slop = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>(1000000000);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 20|0);
  HEAP32[$7>>2] = 54;
  $8 = ((($6)) + 24|0);
  HEAP32[$8>>2] = 7;
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 255]($0);
 }
 $11 = (($2) + 7)|0;
 $12 = $11 & -8;
 $13 = (($12) + 19)|0;
 $14 = ($13>>>0)>(1000000000);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 20|0);
  HEAP32[$16>>2] = 54;
  $17 = ((($15)) + 24|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$0>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vi[$19 & 255]($0);
 }
 $20 = ($1>>>0)>(1);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 20|0);
  HEAP32[$22>>2] = 14;
  $23 = ((($21)) + 24|0);
  HEAP32[$23>>2] = $1;
  $24 = HEAP32[$0>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 255]($0);
 }
 $26 = (((($4)) + 52|0) + ($1<<2)|0);
 $$07280 = HEAP32[$26>>2]|0;
 $cond81 = ($$07280|0)==(0|0);
 L10: do {
  if ($cond81) {
   $$071$lcssa = 0;
  } else {
   $$07282 = $$07280;
   while(1) {
    $27 = ((($$07282)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28>>>0)<($12>>>0);
    if (!($29)) {
     $$173 = $$07282;$64 = $28;
     break;
    }
    $$072 = HEAP32[$$07282>>2]|0;
    $cond = ($$072|0)==(0|0);
    if ($cond) {
     $$071$lcssa = $$07282;
     break L10;
    } else {
     $$07282 = $$072;
    }
   }
   $52 = ((($$173)) + 12|0);
   $53 = $52;
   $54 = $53 & 7;
   $55 = ($54|0)==(0);
   $56 = (8 - ($54))|0;
   $57 = (($52) + ($56)|0);
   $$070 = $55 ? $52 : $57;
   $58 = ((($$173)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($$070) + ($59)|0);
   $61 = (($59) + ($12))|0;
   HEAP32[$58>>2] = $61;
   $62 = ((($$173)) + 8|0);
   $63 = (($64) - ($12))|0;
   HEAP32[$62>>2] = $63;
   return ($60|0);
  }
 } while(0);
 $30 = ($$071$lcssa|0)==(0|0);
 $first_pool_slop$extra_pool_slop = $30 ? 1316 : 1324;
 $$0$in = (($first_pool_slop$extra_pool_slop) + ($1<<2)|0);
 $$0 = HEAP32[$$0$in>>2]|0;
 $31 = (999999981 - ($12))|0;
 $32 = ($$0>>>0)>($31>>>0);
 $$$0 = $32 ? $31 : $$0;
 $33 = (($$$0) + ($13))|0;
 $34 = (_jpeg_get_small($0,$33)|0);
 $35 = ($34|0)==(0|0);
 if ($35) {
  $$177 = $$$0;
  while(1) {
   $36 = $$177 >>> 1;
   $37 = ($$177>>>0)<(100);
   if ($37) {
    $38 = HEAP32[$0>>2]|0;
    $39 = ((($38)) + 20|0);
    HEAP32[$39>>2] = 54;
    $40 = ((($38)) + 24|0);
    HEAP32[$40>>2] = 2;
    $41 = HEAP32[$0>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    FUNCTION_TABLE_vi[$42 & 255]($0);
   }
   $43 = (($36) + ($13))|0;
   $44 = (_jpeg_get_small($0,$43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    $$177 = $36;
   } else {
    $$1$lcssa = $36;$$lcssa = $44;$$lcssa74 = $43;
    break;
   }
  }
 } else {
  $$1$lcssa = $$$0;$$lcssa = $34;$$lcssa74 = $33;
 }
 $46 = ((($4)) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($$lcssa74))|0;
 HEAP32[$46>>2] = $48;
 HEAP32[$$lcssa>>2] = 0;
 $49 = ((($$lcssa)) + 4|0);
 HEAP32[$49>>2] = 0;
 $50 = (($$1$lcssa) + ($12))|0;
 $51 = ((($$lcssa)) + 8|0);
 HEAP32[$51>>2] = $50;
 $$sink = $30 ? $26 : $$071$lcssa;
 HEAP32[$$sink>>2] = $$lcssa;
 $$173 = $$lcssa;$64 = $50;
 $52 = ((($$173)) + 12|0);
 $53 = $52;
 $54 = $53 & 7;
 $55 = ($54|0)==(0);
 $56 = (8 - ($54))|0;
 $57 = (($52) + ($56)|0);
 $$070 = $55 ? $52 : $57;
 $58 = ((($$173)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($$070) + ($59)|0);
 $61 = (($59) + ($12))|0;
 HEAP32[$58>>2] = $61;
 $62 = ((($$173)) + 8|0);
 $63 = (($64) - ($12))|0;
 HEAP32[$62>>2] = $63;
 return ($60|0);
}
function _alloc_large($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>(1000000000);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 20|0);
  HEAP32[$7>>2] = 54;
  $8 = ((($6)) + 24|0);
  HEAP32[$8>>2] = 8;
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 255]($0);
 }
 $11 = (($2) + 7)|0;
 $12 = $11 & -8;
 $13 = (($12) + 19)|0;
 $14 = ($13>>>0)>(1000000000);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 20|0);
  HEAP32[$16>>2] = 54;
  $17 = ((($15)) + 24|0);
  HEAP32[$17>>2] = 3;
  $18 = HEAP32[$0>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vi[$19 & 255]($0);
 }
 $20 = ($1>>>0)>(1);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 20|0);
  HEAP32[$22>>2] = 14;
  $23 = ((($21)) + 24|0);
  HEAP32[$23>>2] = $1;
  $24 = HEAP32[$0>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 255]($0);
 }
 $26 = (_jpeg_get_large($0,$13)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $29 = ((($28)) + 20|0);
  HEAP32[$29>>2] = 54;
  $30 = ((($28)) + 24|0);
  HEAP32[$30>>2] = 4;
  $31 = HEAP32[$0>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vi[$32 & 255]($0);
 }
 $33 = ((($4)) + 76|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($13))|0;
 HEAP32[$33>>2] = $35;
 $36 = (((($4)) + 60|0) + ($1<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$26>>2] = $37;
 $38 = ((($26)) + 4|0);
 HEAP32[$38>>2] = $12;
 $39 = ((($26)) + 8|0);
 HEAP32[$39>>2] = 0;
 HEAP32[$36>>2] = $26;
 $40 = ((($26)) + 12|0);
 $41 = $40;
 $42 = $41 & 7;
 $43 = ($42|0)==(0);
 $44 = (8 - ($42))|0;
 $45 = (($40) + ($44)|0);
 $$0 = $43 ? $40 : $45;
 return ($$0|0);
}
function _alloc_sarray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$05159 = 0, $$05455 = 0, $$057 = 0, $$1$lcssa = 0, $$153$ = 0, $$15358 = 0, $$156 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>(1000000000);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 20|0);
  HEAP32[$8>>2] = 54;
  $9 = ((($7)) + 24|0);
  HEAP32[$9>>2] = 9;
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 $12 = (($2) + 15)|0;
 $13 = $12 & -16;
 $14 = (999999988 / ($13>>>0))&-1;
 $15 = ($13>>>0)>(999999988);
 if ($15) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 20|0);
  HEAP32[$17>>2] = 70;
  $18 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$18 & 255]($0);
 }
 $19 = ($14|0)<($3|0);
 $$ = $19 ? $14 : $3;
 $20 = ((($5)) + 80|0);
 HEAP32[$20>>2] = $$;
 $21 = $3 << 2;
 $22 = (_alloc_small($0,$1,$21)|0);
 $23 = ($3|0)==(0);
 if ($23) {
  return ($22|0);
 } else {
  $$05159 = 0;$$15358 = $$;
 }
 while(1) {
  $25 = (($3) - ($$05159))|0;
  $26 = ($$15358>>>0)<($25>>>0);
  $$153$ = $26 ? $$15358 : $25;
  $27 = Math_imul($$153$, $13)|0;
  $28 = (_alloc_large($0,$1,$27)|0);
  $29 = ($$153$|0)==(0);
  if ($29) {
   $$1$lcssa = $$05159;
  } else {
   $$05455 = $28;$$057 = $$153$;$$156 = $$05159;
   while(1) {
    $30 = (($$156) + 1)|0;
    $31 = (($22) + ($$156<<2)|0);
    HEAP32[$31>>2] = $$05455;
    $32 = (($$05455) + ($13)|0);
    $33 = (($$057) + -1)|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $$1$lcssa = $30;
     break;
    } else {
     $$05455 = $32;$$057 = $33;$$156 = $30;
    }
   }
  }
  $24 = ($$1$lcssa>>>0)<($3>>>0);
  if ($24) {
   $$05159 = $$1$lcssa;$$15358 = $$153$;
  } else {
   break;
  }
 }
 return ($22|0);
}
function _alloc_barray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$04853 = 0, $$04956 = 0, $$054 = 0, $$1$lcssa = 0, $$151$ = 0, $$15155 = 0, $$152 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 << 7;
 $7 = (999999988 / ($6>>>0))&-1;
 $8 = ($6>>>0)>(999999988);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 70;
  $11 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 $12 = ($7|0)<($3|0);
 $$ = $12 ? $7 : $3;
 $13 = ((($5)) + 80|0);
 HEAP32[$13>>2] = $$;
 $14 = $3 << 2;
 $15 = (_alloc_small($0,$1,$14)|0);
 $16 = ($3|0)==(0);
 if ($16) {
  return ($15|0);
 } else {
  $$04956 = 0;$$15155 = $$;
 }
 while(1) {
  $18 = (($3) - ($$04956))|0;
  $19 = ($$15155>>>0)<($18>>>0);
  $$151$ = $19 ? $$15155 : $18;
  $20 = Math_imul($6, $$151$)|0;
  $21 = (_alloc_large($0,$1,$20)|0);
  $22 = ($$151$|0)==(0);
  if ($22) {
   $$1$lcssa = $$04956;
  } else {
   $$04853 = $$151$;$$054 = $21;$$152 = $$04956;
   while(1) {
    $23 = (($$152) + 1)|0;
    $24 = (($15) + ($$152<<2)|0);
    HEAP32[$24>>2] = $$054;
    $25 = (($$054) + ($2<<7)|0);
    $26 = (($$04853) + -1)|0;
    $27 = ($26|0)==(0);
    if ($27) {
     $$1$lcssa = $23;
     break;
    } else {
     $$04853 = $26;$$054 = $25;$$152 = $23;
    }
   }
  }
  $17 = ($$1$lcssa>>>0)<($3>>>0);
  if ($17) {
   $$04956 = $$1$lcssa;$$15155 = $$151$;
  } else {
   break;
  }
 }
 return ($15|0);
}
function _request_virt_sarray($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)==(1);
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 14;
  $11 = ((($9)) + 24|0);
  HEAP32[$11>>2] = $1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 255]($0);
 }
 $14 = (_alloc_small($0,$1,128)|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $4;
 $16 = ((($14)) + 8|0);
 HEAP32[$16>>2] = $3;
 $17 = ((($14)) + 12|0);
 HEAP32[$17>>2] = $5;
 $18 = ((($14)) + 32|0);
 HEAP32[$18>>2] = $2;
 $19 = ((($14)) + 40|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($7)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($14)) + 44|0);
 HEAP32[$22>>2] = $21;
 HEAP32[$20>>2] = $14;
 return ($14|0);
}
function _request_virt_barray($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)==(1);
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = 14;
  $11 = ((($9)) + 24|0);
  HEAP32[$11>>2] = $1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 255]($0);
 }
 $14 = (_alloc_small($0,$1,128)|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $4;
 $16 = ((($14)) + 8|0);
 HEAP32[$16>>2] = $3;
 $17 = ((($14)) + 12|0);
 HEAP32[$17>>2] = $5;
 $18 = ((($14)) + 32|0);
 HEAP32[$18>>2] = $2;
 $19 = ((($14)) + 40|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($7)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($14)) + 44|0);
 HEAP32[$22>>2] = $21;
 HEAP32[$20>>2] = $14;
 return ($14|0);
}
function _realize_virt_arrays($0) {
 $0 = $0|0;
 var $$ = 0, $$$i = 0, $$$i120 = 0, $$0$i = 0, $$0$i124 = 0, $$0$lcssa = 0, $$0111$lcssa = 0, $$0111141 = 0, $$0115 = 0, $$0115134 = 0, $$0115137 = 0, $$0117 = 0, $$0117140 = 0, $$0117143 = 0, $$0119 = 0, $$0142 = 0, $$04853$i = 0, $$04956$i = 0, $$05159$i = 0, $$054$i = 0;
 var $$05455$i = 0, $$057$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$1$lcssa$i121 = 0, $$1112 = 0, $$1116 = 0, $$1116127 = 0, $$1116128 = 0, $$1118 = 0, $$1118130 = 0, $$1118131 = 0, $$151$$i = 0, $$15155$i = 0, $$152$i = 0, $$153$$i = 0, $$15358$i = 0, $$156$i = 0, $$2$lcssa = 0, $$2113$lcssa = 0;
 var $$2113135 = 0, $$2136 = 0, $$3 = 0, $$3114 = 0, $$pre = 0, $$pre$phi155Z2D = 0, $$pre$phiZ2D = 0, $$pre151 = 0, $$pre152 = 0, $$pre154 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 68|0);
 $$0117140 = HEAP32[$3>>2]|0;
 $4 = ($$0117140|0)==(0|0);
 if ($4) {
  $$0$lcssa = 0;$$0111$lcssa = 0;
 } else {
  $$0111141 = 0;$$0117143 = $$0117140;$$0142 = 0;
  while(1) {
   $5 = HEAP32[$$0117143>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $7 = ((($$0117143)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($$0117143)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = Math_imul($10, $8)|0;
    $12 = ((($$0117143)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = Math_imul($13, $10)|0;
    $15 = (($14) + ($$0142))|0;
    $16 = $$0111141 ^ -1;
    $17 = ($11>>>0)>($16>>>0);
    if ($17) {
     $18 = HEAP32[$0>>2]|0;
     $19 = ((($18)) + 20|0);
     HEAP32[$19>>2] = 54;
     $20 = ((($18)) + 24|0);
     HEAP32[$20>>2] = 10;
     $21 = HEAP32[$0>>2]|0;
     $22 = HEAP32[$21>>2]|0;
     FUNCTION_TABLE_vi[$22 & 255]($0);
    }
    $23 = (($11) + ($$0111141))|0;
    $$1 = $15;$$1112 = $23;
   } else {
    $$1 = $$0142;$$1112 = $$0111141;
   }
   $24 = ((($$0117143)) + 44|0);
   $$0117 = HEAP32[$24>>2]|0;
   $25 = ($$0117|0)==(0|0);
   if ($25) {
    $$0$lcssa = $$1;$$0111$lcssa = $$1112;
    break;
   } else {
    $$0111141 = $$1112;$$0117143 = $$0117;$$0142 = $$1;
   }
  }
 }
 $26 = ((($2)) + 72|0);
 $$0115134 = HEAP32[$26>>2]|0;
 $27 = ($$0115134|0)==(0|0);
 if ($27) {
  $$2$lcssa = $$0$lcssa;$$2113$lcssa = $$0111$lcssa;
 } else {
  $$0115137 = $$0115134;$$2113135 = $$0111$lcssa;$$2136 = $$0$lcssa;
  while(1) {
   $28 = HEAP32[$$0115137>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $30 = ((($$0115137)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($$0115137)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $31 << 7;
    $35 = Math_imul($34, $33)|0;
    $36 = ((($$0115137)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $33 << 7;
    $39 = Math_imul($38, $37)|0;
    $40 = (($39) + ($$2136))|0;
    $41 = $$2113135 ^ -1;
    $42 = ($35>>>0)>($41>>>0);
    if ($42) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + 20|0);
     HEAP32[$44>>2] = 54;
     $45 = ((($43)) + 24|0);
     HEAP32[$45>>2] = 11;
     $46 = HEAP32[$0>>2]|0;
     $47 = HEAP32[$46>>2]|0;
     FUNCTION_TABLE_vi[$47 & 255]($0);
    }
    $48 = (($35) + ($$2113135))|0;
    $$3 = $40;$$3114 = $48;
   } else {
    $$3 = $$2136;$$3114 = $$2113135;
   }
   $49 = ((($$0115137)) + 44|0);
   $$0115 = HEAP32[$49>>2]|0;
   $50 = ($$0115|0)==(0|0);
   if ($50) {
    $$2$lcssa = $$3;$$2113$lcssa = $$3114;
    break;
   } else {
    $$0115137 = $$0115;$$2113135 = $$3114;$$2136 = $$3;
   }
  }
 }
 $51 = ($$2$lcssa|0)==(0);
 if ($51) {
  return;
 }
 $52 = ((($2)) + 76|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_jpeg_mem_available($0,$$2$lcssa,$$2113$lcssa,$53)|0);
 $55 = ($54>>>0)<($$2113$lcssa>>>0);
 if ($55) {
  $56 = ($$2$lcssa>>>0)>($54>>>0);
  $57 = (($54>>>0) / ($$2$lcssa>>>0))&-1;
  $$ = $56 ? 1 : $57;
  $$0119 = $$;
 } else {
  $$0119 = 1000000000;
 }
 $$1118130 = HEAP32[$3>>2]|0;
 $58 = ($$1118130|0)==(0|0);
 if (!($58)) {
  $59 = ((($2)) + 80|0);
  $$1118131 = $$1118130;
  while(1) {
   $62 = HEAP32[$$1118131>>2]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    $64 = ((($$1118131)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + -1)|0;
    $67 = ((($$1118131)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66>>>0) / ($68>>>0))&-1;
    $70 = (($69) + 1)|0;
    $71 = ($70>>>0)>($$0119>>>0);
    if ($71) {
     $73 = Math_imul($68, $$0119)|0;
     $74 = ((($$1118131)) + 16|0);
     HEAP32[$74>>2] = $73;
     $75 = ((($$1118131)) + 48|0);
     $76 = ((($$1118131)) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = Math_imul($77, $65)|0;
     _jpeg_open_backing_store($0,$75,$78);
     $79 = ((($$1118131)) + 40|0);
     HEAP32[$79>>2] = 1;
     $$pre = HEAP32[$74>>2]|0;
     $$pre$phi155Z2D = $76;$96 = $$pre;
    } else {
     $72 = ((($$1118131)) + 16|0);
     HEAP32[$72>>2] = $65;
     $$pre154 = ((($$1118131)) + 8|0);
     $$pre$phi155Z2D = $$pre154;$96 = $65;
    }
    $80 = HEAP32[$$pre$phi155Z2D>>2]|0;
    $81 = HEAP32[$1>>2]|0;
    $82 = ($80>>>0)>(1000000000);
    if ($82) {
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 20|0);
     HEAP32[$84>>2] = 54;
     $85 = ((($83)) + 24|0);
     HEAP32[$85>>2] = 9;
     $86 = HEAP32[$0>>2]|0;
     $87 = HEAP32[$86>>2]|0;
     FUNCTION_TABLE_vi[$87 & 255]($0);
    }
    $88 = (($80) + 15)|0;
    $89 = $88 & -16;
    $90 = (999999988 / ($89>>>0))&-1;
    $91 = ($89>>>0)>(999999988);
    if ($91) {
     $92 = HEAP32[$0>>2]|0;
     $93 = ((($92)) + 20|0);
     HEAP32[$93>>2] = 70;
     $94 = HEAP32[$92>>2]|0;
     FUNCTION_TABLE_vi[$94 & 255]($0);
    }
    $95 = ($90|0)<($96|0);
    $$$i = $95 ? $90 : $96;
    $97 = ((($81)) + 80|0);
    HEAP32[$97>>2] = $$$i;
    $98 = $96 << 2;
    $99 = (_alloc_small($0,1,$98)|0);
    $100 = ($96|0)==(0);
    if (!($100)) {
     $$05159$i = 0;$$15358$i = $$$i;
     while(1) {
      $102 = (($96) - ($$05159$i))|0;
      $103 = ($$15358$i>>>0)<($102>>>0);
      $$153$$i = $103 ? $$15358$i : $102;
      $104 = Math_imul($$153$$i, $89)|0;
      $105 = HEAP32[$1>>2]|0;
      $106 = ($104>>>0)>(1000000000);
      if ($106) {
       $107 = HEAP32[$0>>2]|0;
       $108 = ((($107)) + 20|0);
       HEAP32[$108>>2] = 54;
       $109 = ((($107)) + 24|0);
       HEAP32[$109>>2] = 8;
       $110 = HEAP32[$0>>2]|0;
       $111 = HEAP32[$110>>2]|0;
       FUNCTION_TABLE_vi[$111 & 255]($0);
      }
      $112 = (($104) + 19)|0;
      $113 = ($112>>>0)>(1000000000);
      if ($113) {
       $114 = HEAP32[$0>>2]|0;
       $115 = ((($114)) + 20|0);
       HEAP32[$115>>2] = 54;
       $116 = ((($114)) + 24|0);
       HEAP32[$116>>2] = 3;
       $117 = HEAP32[$0>>2]|0;
       $118 = HEAP32[$117>>2]|0;
       FUNCTION_TABLE_vi[$118 & 255]($0);
      }
      $119 = (_jpeg_get_large($0,$112)|0);
      $120 = ($119|0)==(0|0);
      if ($120) {
       $121 = HEAP32[$0>>2]|0;
       $122 = ((($121)) + 20|0);
       HEAP32[$122>>2] = 54;
       $123 = ((($121)) + 24|0);
       HEAP32[$123>>2] = 4;
       $124 = HEAP32[$0>>2]|0;
       $125 = HEAP32[$124>>2]|0;
       FUNCTION_TABLE_vi[$125 & 255]($0);
      }
      $126 = ((($105)) + 76|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (($127) + ($112))|0;
      HEAP32[$126>>2] = $128;
      $129 = ((($105)) + 64|0);
      $130 = HEAP32[$129>>2]|0;
      HEAP32[$119>>2] = $130;
      $131 = ((($119)) + 4|0);
      HEAP32[$131>>2] = $104;
      $132 = ((($119)) + 8|0);
      HEAP32[$132>>2] = 0;
      HEAP32[$129>>2] = $119;
      $133 = ((($119)) + 12|0);
      $134 = $133;
      $135 = $134 & 7;
      $136 = ($$153$$i|0)==(0);
      if ($136) {
       $$1$lcssa$i = $$05159$i;
      } else {
       $137 = ($135|0)==(0);
       $138 = (8 - ($135))|0;
       $139 = (($133) + ($138)|0);
       $$0$i124 = $137 ? $133 : $139;
       $$05455$i = $$0$i124;$$057$i = $$153$$i;$$156$i = $$05159$i;
       while(1) {
        $140 = (($$156$i) + 1)|0;
        $141 = (($99) + ($$156$i<<2)|0);
        HEAP32[$141>>2] = $$05455$i;
        $142 = (($$05455$i) + ($89)|0);
        $143 = (($$057$i) + -1)|0;
        $144 = ($143|0)==(0);
        if ($144) {
         $$1$lcssa$i = $140;
         break;
        } else {
         $$05455$i = $142;$$057$i = $143;$$156$i = $140;
        }
       }
      }
      $101 = ($$1$lcssa$i>>>0)<($96>>>0);
      if ($101) {
       $$05159$i = $$1$lcssa$i;$$15358$i = $$153$$i;
      } else {
       break;
      }
     }
    }
    HEAP32[$$1118131>>2] = $99;
    $145 = HEAP32[$59>>2]|0;
    $146 = ((($$1118131)) + 20|0);
    HEAP32[$146>>2] = $145;
    $147 = ((($$1118131)) + 24|0);
    HEAP32[$147>>2] = 0;
    $148 = ((($$1118131)) + 28|0);
    HEAP32[$148>>2] = 0;
    $149 = ((($$1118131)) + 36|0);
    HEAP32[$149>>2] = 0;
   }
   $150 = ((($$1118131)) + 44|0);
   $$1118 = HEAP32[$150>>2]|0;
   $151 = ($$1118|0)==(0|0);
   if ($151) {
    break;
   } else {
    $$1118131 = $$1118;
   }
  }
 }
 $$1116127 = HEAP32[$26>>2]|0;
 $60 = ($$1116127|0)==(0|0);
 if ($60) {
  return;
 }
 $61 = ((($2)) + 80|0);
 $$1116128 = $$1116127;
 while(1) {
  $152 = HEAP32[$$1116128>>2]|0;
  $153 = ($152|0)==(0|0);
  if ($153) {
   $154 = ((($$1116128)) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + -1)|0;
   $157 = ((($$1116128)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($156>>>0) / ($158>>>0))&-1;
   $160 = (($159) + 1)|0;
   $161 = ($160>>>0)>($$0119>>>0);
   if ($161) {
    $163 = Math_imul($158, $$0119)|0;
    $164 = ((($$1116128)) + 16|0);
    HEAP32[$164>>2] = $163;
    $165 = ((($$1116128)) + 48|0);
    $166 = ((($$1116128)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $155 << 7;
    $169 = Math_imul($168, $167)|0;
    _jpeg_open_backing_store($0,$165,$169);
    $170 = ((($$1116128)) + 40|0);
    HEAP32[$170>>2] = 1;
    $$pre151 = HEAP32[$164>>2]|0;
    $$pre$phiZ2D = $166;$180 = $$pre151;
   } else {
    $162 = ((($$1116128)) + 16|0);
    HEAP32[$162>>2] = $155;
    $$pre152 = ((($$1116128)) + 8|0);
    $$pre$phiZ2D = $$pre152;$180 = $155;
   }
   $171 = HEAP32[$$pre$phiZ2D>>2]|0;
   $172 = HEAP32[$1>>2]|0;
   $173 = $171 << 7;
   $174 = (999999988 / ($173>>>0))&-1;
   $175 = ($173>>>0)>(999999988);
   if ($175) {
    $176 = HEAP32[$0>>2]|0;
    $177 = ((($176)) + 20|0);
    HEAP32[$177>>2] = 70;
    $178 = HEAP32[$176>>2]|0;
    FUNCTION_TABLE_vi[$178 & 255]($0);
   }
   $179 = ($174|0)<($180|0);
   $$$i120 = $179 ? $174 : $180;
   $181 = ((($172)) + 80|0);
   HEAP32[$181>>2] = $$$i120;
   $182 = $180 << 2;
   $183 = (_alloc_small($0,1,$182)|0);
   $184 = ($180|0)==(0);
   if (!($184)) {
    $$04956$i = 0;$$15155$i = $$$i120;
    while(1) {
     $186 = (($180) - ($$04956$i))|0;
     $187 = ($$15155$i>>>0)<($186>>>0);
     $$151$$i = $187 ? $$15155$i : $186;
     $188 = Math_imul($$151$$i, $173)|0;
     $189 = HEAP32[$1>>2]|0;
     $190 = ($188>>>0)>(1000000000);
     if ($190) {
      $191 = HEAP32[$0>>2]|0;
      $192 = ((($191)) + 20|0);
      HEAP32[$192>>2] = 54;
      $193 = ((($191)) + 24|0);
      HEAP32[$193>>2] = 8;
      $194 = HEAP32[$0>>2]|0;
      $195 = HEAP32[$194>>2]|0;
      FUNCTION_TABLE_vi[$195 & 255]($0);
     }
     $196 = $188 | 19;
     $197 = ($196>>>0)>(1000000000);
     if ($197) {
      $198 = HEAP32[$0>>2]|0;
      $199 = ((($198)) + 20|0);
      HEAP32[$199>>2] = 54;
      $200 = ((($198)) + 24|0);
      HEAP32[$200>>2] = 3;
      $201 = HEAP32[$0>>2]|0;
      $202 = HEAP32[$201>>2]|0;
      FUNCTION_TABLE_vi[$202 & 255]($0);
     }
     $203 = (_jpeg_get_large($0,$196)|0);
     $204 = ($203|0)==(0|0);
     if ($204) {
      $205 = HEAP32[$0>>2]|0;
      $206 = ((($205)) + 20|0);
      HEAP32[$206>>2] = 54;
      $207 = ((($205)) + 24|0);
      HEAP32[$207>>2] = 4;
      $208 = HEAP32[$0>>2]|0;
      $209 = HEAP32[$208>>2]|0;
      FUNCTION_TABLE_vi[$209 & 255]($0);
     }
     $210 = ((($189)) + 76|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($196))|0;
     HEAP32[$210>>2] = $212;
     $213 = ((($189)) + 64|0);
     $214 = HEAP32[$213>>2]|0;
     HEAP32[$203>>2] = $214;
     $215 = ((($203)) + 4|0);
     HEAP32[$215>>2] = $188;
     $216 = ((($203)) + 8|0);
     HEAP32[$216>>2] = 0;
     HEAP32[$213>>2] = $203;
     $217 = ((($203)) + 12|0);
     $218 = $217;
     $219 = $218 & 7;
     $220 = ($$151$$i|0)==(0);
     if ($220) {
      $$1$lcssa$i121 = $$04956$i;
     } else {
      $221 = ($219|0)==(0);
      $222 = (8 - ($219))|0;
      $223 = (($217) + ($222)|0);
      $$0$i = $221 ? $217 : $223;
      $$04853$i = $$151$$i;$$054$i = $$0$i;$$152$i = $$04956$i;
      while(1) {
       $224 = (($$152$i) + 1)|0;
       $225 = (($183) + ($$152$i<<2)|0);
       HEAP32[$225>>2] = $$054$i;
       $226 = (($$054$i) + ($171<<7)|0);
       $227 = (($$04853$i) + -1)|0;
       $228 = ($227|0)==(0);
       if ($228) {
        $$1$lcssa$i121 = $224;
        break;
       } else {
        $$04853$i = $227;$$054$i = $226;$$152$i = $224;
       }
      }
     }
     $185 = ($$1$lcssa$i121>>>0)<($180>>>0);
     if ($185) {
      $$04956$i = $$1$lcssa$i121;$$15155$i = $$151$$i;
     } else {
      break;
     }
    }
   }
   HEAP32[$$1116128>>2] = $183;
   $229 = HEAP32[$61>>2]|0;
   $230 = ((($$1116128)) + 20|0);
   HEAP32[$230>>2] = $229;
   $231 = ((($$1116128)) + 24|0);
   HEAP32[$231>>2] = 0;
   $232 = ((($$1116128)) + 28|0);
   HEAP32[$232>>2] = 0;
   $233 = ((($$1116128)) + 36|0);
   HEAP32[$233>>2] = 0;
  }
  $234 = ((($$1116128)) + 44|0);
  $$1116 = HEAP32[$234>>2]|0;
  $235 = ($$1116|0)==(0|0);
  if ($235) {
   break;
  } else {
   $$1116128 = $$1116;
  }
 }
 return;
}
function _access_virt_sarray($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$i = 0, $$$i87 = 0, $$$us$i = 0, $$$us$i81 = 0, $$05557$i90 = 0, $$05557$us$i84 = 0, $$058$i89 = 0, $$058$us$i83 = 0, $$077 = 0, $$078 = 0, $$180 = 0, $$56$i = 0, $$56$i88 = 0, $$56$i91 = 0, $$56$us$i = 0, $$56$us$i82 = 0, $$56$us$i85 = 0, $$phi$trans$insert = 0, $$pre = 0;
 var $$pre61$i = 0, $$pre62$i = 0, $$pre62$i74 = 0, $$pre63$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($3) + ($2))|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  label = 4;
 } else {
  $9 = ((($1)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<($3>>>0);
  if ($11) {
   label = 4;
  } else {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 20|0);
  HEAP32[$15>>2] = 22;
  $16 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$16 & 255]($0);
 }
 $17 = ((($1)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>($2>>>0);
 if ($19) {
  label = 7;
 } else {
  $20 = ((($1)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  $23 = ($5>>>0)>($22>>>0);
  if ($23) {
   label = 7;
  }
 }
 L9: do {
  if ((label|0) == 7) {
   $24 = ((($1)) + 40|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$0>>2]|0;
    $28 = ((($27)) + 20|0);
    HEAP32[$28>>2] = 69;
    $29 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$29 & 255]($0);
   }
   $30 = ((($1)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = ((($1)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$17>>2]|0;
    $36 = ((($1)) + 20|0);
    $37 = ((($1)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)>(0);
    L16: do {
     if ($39) {
      $40 = ((($1)) + 28|0);
      $41 = ((($1)) + 48|0);
      $42 = ((($1)) + 52|0);
      $$pre62$i = HEAP32[$36>>2]|0;
      $43 = ($$pre62$i|0)<($38|0);
      $$$i87 = $43 ? $$pre62$i : $38;
      $44 = HEAP32[$40>>2]|0;
      $45 = (($44) - ($35))|0;
      $46 = ($$$i87|0)<($45|0);
      $47 = $46 ? $$$i87 : $45;
      $48 = HEAP32[$6>>2]|0;
      $49 = (($48) - ($35))|0;
      $50 = ($47|0)<($49|0);
      $$56$i88 = $50 ? $47 : $49;
      $51 = ($$56$i88|0)<(1);
      if (!($51)) {
       $52 = Math_imul($35, $34)|0;
       $$05557$i90 = $52;$$058$i89 = 0;$$56$i91 = $$56$i88;
       while(1) {
        $53 = Math_imul($$56$i91, $34)|0;
        $54 = HEAP32[$42>>2]|0;
        $55 = HEAP32[$1>>2]|0;
        $56 = (($55) + ($$058$i89<<2)|0);
        $57 = HEAP32[$56>>2]|0;
        FUNCTION_TABLE_viiiii[$54 & 255]($0,$41,$57,$$05557$i90,$53);
        $58 = HEAP32[$36>>2]|0;
        $59 = (($58) + ($$058$i89))|0;
        $60 = HEAP32[$37>>2]|0;
        $61 = ($60|0)>($59|0);
        if (!($61)) {
         break L16;
        }
        $62 = (($53) + ($$05557$i90))|0;
        $$pre61$i = HEAP32[$17>>2]|0;
        $63 = (($60) - ($59))|0;
        $64 = ($58|0)<($63|0);
        $$$i = $64 ? $58 : $63;
        $65 = (($59) + ($$pre61$i))|0;
        $66 = HEAP32[$40>>2]|0;
        $67 = (($66) - ($65))|0;
        $68 = ($$$i|0)<($67|0);
        $69 = $68 ? $$$i : $67;
        $70 = HEAP32[$6>>2]|0;
        $71 = (($70) - ($65))|0;
        $72 = ($69|0)<($71|0);
        $$56$i = $72 ? $69 : $71;
        $73 = ($$56$i|0)<(1);
        if ($73) {
         break;
        } else {
         $$05557$i90 = $62;$$058$i89 = $59;$$56$i91 = $$56$i;
        }
       }
      }
     }
    } while(0);
    HEAP32[$30>>2] = 0;
   }
   $74 = HEAP32[$17>>2]|0;
   $75 = ($74>>>0)<($2>>>0);
   $$phi$trans$insert = ((($1)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($75) {
    $storemerge = $2;
   } else {
    $76 = (($5) - ($$pre))|0;
    $77 = ($76|0)>(0);
    $$ = $77 ? $76 : 0;
    $storemerge = $$;
   }
   HEAP32[$17>>2] = $storemerge;
   $78 = ((($1)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($1)) + 20|0);
   $81 = ($$pre|0)>(0);
   if ($81) {
    $82 = ((($1)) + 28|0);
    $83 = ((($1)) + 48|0);
    $$pre62$i74 = HEAP32[$80>>2]|0;
    $84 = ($$pre62$i74|0)<($$pre|0);
    $$$us$i81 = $84 ? $$pre62$i74 : $$pre;
    $85 = HEAP32[$82>>2]|0;
    $86 = (($85) - ($storemerge))|0;
    $87 = ($$$us$i81|0)<($86|0);
    $88 = $87 ? $$$us$i81 : $86;
    $89 = HEAP32[$6>>2]|0;
    $90 = (($89) - ($storemerge))|0;
    $91 = ($88|0)<($90|0);
    $$56$us$i82 = $91 ? $88 : $90;
    $92 = ($$56$us$i82|0)<(1);
    if (!($92)) {
     $93 = Math_imul($79, $storemerge)|0;
     $$05557$us$i84 = $93;$$058$us$i83 = 0;$$56$us$i85 = $$56$us$i82;
     while(1) {
      $94 = Math_imul($$56$us$i85, $79)|0;
      $95 = HEAP32[$83>>2]|0;
      $96 = HEAP32[$1>>2]|0;
      $97 = (($96) + ($$058$us$i83<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      FUNCTION_TABLE_viiiii[$95 & 255]($0,$83,$98,$$05557$us$i84,$94);
      $99 = HEAP32[$80>>2]|0;
      $100 = (($99) + ($$058$us$i83))|0;
      $101 = HEAP32[$$phi$trans$insert>>2]|0;
      $102 = ($101|0)>($100|0);
      if (!($102)) {
       break L9;
      }
      $103 = (($94) + ($$05557$us$i84))|0;
      $$pre63$i = HEAP32[$17>>2]|0;
      $104 = (($101) - ($100))|0;
      $105 = ($99|0)<($104|0);
      $$$us$i = $105 ? $99 : $104;
      $106 = (($100) + ($$pre63$i))|0;
      $107 = HEAP32[$82>>2]|0;
      $108 = (($107) - ($106))|0;
      $109 = ($$$us$i|0)<($108|0);
      $110 = $109 ? $$$us$i : $108;
      $111 = HEAP32[$6>>2]|0;
      $112 = (($111) - ($106))|0;
      $113 = ($110|0)<($112|0);
      $$56$us$i = $113 ? $110 : $112;
      $114 = ($$56$us$i|0)<(1);
      if ($114) {
       break;
      } else {
       $$05557$us$i84 = $103;$$058$us$i83 = $100;$$56$us$i85 = $$56$us$i;
      }
     }
    }
   }
  }
 } while(0);
 $115 = ((($1)) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116>>>0)<($5>>>0);
 do {
  if ($117) {
   $118 = ($116>>>0)<($2>>>0);
   $119 = ($4|0)==(0);
   if ($118) {
    if ($119) {
     $$077 = $2;$145 = 0;
    } else {
     $120 = HEAP32[$0>>2]|0;
     $121 = ((($120)) + 20|0);
     HEAP32[$121>>2] = 22;
     $122 = HEAP32[$120>>2]|0;
     FUNCTION_TABLE_vi[$122 & 255]($0);
     $$078 = $2;
     label = 28;
    }
   } else {
    if ($119) {
     $$077 = $116;$145 = 0;
    } else {
     $$078 = $116;
     label = 28;
    }
   }
   if ((label|0) == 28) {
    HEAP32[$115>>2] = $5;
    $$077 = $$078;$145 = 1;
   }
   $123 = ((($1)) + 32|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($124|0)==(0);
   if ($125) {
    if ($145) {
     break;
    }
    $136 = HEAP32[$0>>2]|0;
    $137 = ((($136)) + 20|0);
    HEAP32[$137>>2] = 22;
    $138 = HEAP32[$136>>2]|0;
    FUNCTION_TABLE_vi[$138 & 255]($0);
    break;
   }
   $126 = ((($1)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = HEAP32[$17>>2]|0;
   $129 = (($$077) - ($128))|0;
   $130 = (($5) - ($128))|0;
   $131 = ($129>>>0)<($130>>>0);
   if ($131) {
    $$180 = $129;
    while(1) {
     $132 = HEAP32[$1>>2]|0;
     $133 = (($132) + ($$180<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     _jzero_far($134,$127);
     $135 = (($$180) + 1)|0;
     $exitcond = ($135|0)==($130|0);
     if ($exitcond) {
      break;
     } else {
      $$180 = $135;
     }
    }
   }
  }
 } while(0);
 $139 = ($4|0)==(0);
 if ($139) {
  $141 = HEAP32[$1>>2]|0;
  $142 = HEAP32[$17>>2]|0;
  $143 = (($2) - ($142))|0;
  $144 = (($141) + ($143<<2)|0);
  return ($144|0);
 }
 $140 = ((($1)) + 36|0);
 HEAP32[$140>>2] = 1;
 $141 = HEAP32[$1>>2]|0;
 $142 = HEAP32[$17>>2]|0;
 $143 = (($2) - ($142))|0;
 $144 = (($141) + ($143<<2)|0);
 return ($144|0);
}
function _access_virt_barray($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$i = 0, $$$i87 = 0, $$$us$i = 0, $$$us$i81 = 0, $$05557$i90 = 0, $$05557$us$i84 = 0, $$058$i89 = 0, $$058$us$i83 = 0, $$077 = 0, $$078 = 0, $$180 = 0, $$56$i = 0, $$56$i88 = 0, $$56$i91 = 0, $$56$us$i = 0, $$56$us$i82 = 0, $$56$us$i85 = 0, $$phi$trans$insert = 0, $$pre = 0;
 var $$pre61$i = 0, $$pre62$i = 0, $$pre62$i74 = 0, $$pre63$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($3) + ($2))|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  label = 4;
 } else {
  $9 = ((($1)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<($3>>>0);
  if ($11) {
   label = 4;
  } else {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 20|0);
  HEAP32[$15>>2] = 22;
  $16 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$16 & 255]($0);
 }
 $17 = ((($1)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>($2>>>0);
 if ($19) {
  label = 7;
 } else {
  $20 = ((($1)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  $23 = ($5>>>0)>($22>>>0);
  if ($23) {
   label = 7;
  }
 }
 L9: do {
  if ((label|0) == 7) {
   $24 = ((($1)) + 40|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$0>>2]|0;
    $28 = ((($27)) + 20|0);
    HEAP32[$28>>2] = 69;
    $29 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$29 & 255]($0);
   }
   $30 = ((($1)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = ((($1)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 << 7;
    $36 = HEAP32[$17>>2]|0;
    $37 = ((($1)) + 20|0);
    $38 = ((($1)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)>(0);
    L16: do {
     if ($40) {
      $41 = ((($1)) + 28|0);
      $42 = ((($1)) + 48|0);
      $43 = ((($1)) + 52|0);
      $$pre62$i = HEAP32[$37>>2]|0;
      $44 = ($$pre62$i|0)<($39|0);
      $$$i87 = $44 ? $$pre62$i : $39;
      $45 = HEAP32[$41>>2]|0;
      $46 = (($45) - ($36))|0;
      $47 = ($$$i87|0)<($46|0);
      $48 = $47 ? $$$i87 : $46;
      $49 = HEAP32[$6>>2]|0;
      $50 = (($49) - ($36))|0;
      $51 = ($48|0)<($50|0);
      $$56$i88 = $51 ? $48 : $50;
      $52 = ($$56$i88|0)<(1);
      if (!($52)) {
       $53 = Math_imul($36, $35)|0;
       $$05557$i90 = $53;$$058$i89 = 0;$$56$i91 = $$56$i88;
       while(1) {
        $54 = Math_imul($$56$i91, $35)|0;
        $55 = HEAP32[$43>>2]|0;
        $56 = HEAP32[$1>>2]|0;
        $57 = (($56) + ($$058$i89<<2)|0);
        $58 = HEAP32[$57>>2]|0;
        FUNCTION_TABLE_viiiii[$55 & 255]($0,$42,$58,$$05557$i90,$54);
        $59 = HEAP32[$37>>2]|0;
        $60 = (($59) + ($$058$i89))|0;
        $61 = HEAP32[$38>>2]|0;
        $62 = ($61|0)>($60|0);
        if (!($62)) {
         break L16;
        }
        $63 = (($54) + ($$05557$i90))|0;
        $$pre61$i = HEAP32[$17>>2]|0;
        $64 = (($61) - ($60))|0;
        $65 = ($59|0)<($64|0);
        $$$i = $65 ? $59 : $64;
        $66 = (($60) + ($$pre61$i))|0;
        $67 = HEAP32[$41>>2]|0;
        $68 = (($67) - ($66))|0;
        $69 = ($$$i|0)<($68|0);
        $70 = $69 ? $$$i : $68;
        $71 = HEAP32[$6>>2]|0;
        $72 = (($71) - ($66))|0;
        $73 = ($70|0)<($72|0);
        $$56$i = $73 ? $70 : $72;
        $74 = ($$56$i|0)<(1);
        if ($74) {
         break;
        } else {
         $$05557$i90 = $63;$$058$i89 = $60;$$56$i91 = $$56$i;
        }
       }
      }
     }
    } while(0);
    HEAP32[$30>>2] = 0;
   }
   $75 = HEAP32[$17>>2]|0;
   $76 = ($75>>>0)<($2>>>0);
   $$phi$trans$insert = ((($1)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($76) {
    $storemerge = $2;
   } else {
    $77 = (($5) - ($$pre))|0;
    $78 = ($77|0)>(0);
    $$ = $78 ? $77 : 0;
    $storemerge = $$;
   }
   HEAP32[$17>>2] = $storemerge;
   $79 = ((($1)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 << 7;
   $82 = ((($1)) + 20|0);
   $83 = ($$pre|0)>(0);
   if ($83) {
    $84 = ((($1)) + 28|0);
    $85 = ((($1)) + 48|0);
    $$pre62$i74 = HEAP32[$82>>2]|0;
    $86 = ($$pre62$i74|0)<($$pre|0);
    $$$us$i81 = $86 ? $$pre62$i74 : $$pre;
    $87 = HEAP32[$84>>2]|0;
    $88 = (($87) - ($storemerge))|0;
    $89 = ($$$us$i81|0)<($88|0);
    $90 = $89 ? $$$us$i81 : $88;
    $91 = HEAP32[$6>>2]|0;
    $92 = (($91) - ($storemerge))|0;
    $93 = ($90|0)<($92|0);
    $$56$us$i82 = $93 ? $90 : $92;
    $94 = ($$56$us$i82|0)<(1);
    if (!($94)) {
     $95 = Math_imul($81, $storemerge)|0;
     $$05557$us$i84 = $95;$$058$us$i83 = 0;$$56$us$i85 = $$56$us$i82;
     while(1) {
      $96 = Math_imul($$56$us$i85, $81)|0;
      $97 = HEAP32[$85>>2]|0;
      $98 = HEAP32[$1>>2]|0;
      $99 = (($98) + ($$058$us$i83<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      FUNCTION_TABLE_viiiii[$97 & 255]($0,$85,$100,$$05557$us$i84,$96);
      $101 = HEAP32[$82>>2]|0;
      $102 = (($101) + ($$058$us$i83))|0;
      $103 = HEAP32[$$phi$trans$insert>>2]|0;
      $104 = ($103|0)>($102|0);
      if (!($104)) {
       break L9;
      }
      $105 = (($96) + ($$05557$us$i84))|0;
      $$pre63$i = HEAP32[$17>>2]|0;
      $106 = (($103) - ($102))|0;
      $107 = ($101|0)<($106|0);
      $$$us$i = $107 ? $101 : $106;
      $108 = (($102) + ($$pre63$i))|0;
      $109 = HEAP32[$84>>2]|0;
      $110 = (($109) - ($108))|0;
      $111 = ($$$us$i|0)<($110|0);
      $112 = $111 ? $$$us$i : $110;
      $113 = HEAP32[$6>>2]|0;
      $114 = (($113) - ($108))|0;
      $115 = ($112|0)<($114|0);
      $$56$us$i = $115 ? $112 : $114;
      $116 = ($$56$us$i|0)<(1);
      if ($116) {
       break;
      } else {
       $$05557$us$i84 = $105;$$058$us$i83 = $102;$$56$us$i85 = $$56$us$i;
      }
     }
    }
   }
  }
 } while(0);
 $117 = ((($1)) + 28|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118>>>0)<($5>>>0);
 do {
  if ($119) {
   $120 = ($118>>>0)<($2>>>0);
   $121 = ($4|0)==(0);
   if ($120) {
    if ($121) {
     $$077 = $2;$148 = 0;
    } else {
     $122 = HEAP32[$0>>2]|0;
     $123 = ((($122)) + 20|0);
     HEAP32[$123>>2] = 22;
     $124 = HEAP32[$122>>2]|0;
     FUNCTION_TABLE_vi[$124 & 255]($0);
     $$078 = $2;
     label = 28;
    }
   } else {
    if ($121) {
     $$077 = $118;$148 = 0;
    } else {
     $$078 = $118;
     label = 28;
    }
   }
   if ((label|0) == 28) {
    HEAP32[$117>>2] = $5;
    $$077 = $$078;$148 = 1;
   }
   $125 = ((($1)) + 32|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)==(0);
   if ($127) {
    if ($148) {
     break;
    }
    $139 = HEAP32[$0>>2]|0;
    $140 = ((($139)) + 20|0);
    HEAP32[$140>>2] = 22;
    $141 = HEAP32[$139>>2]|0;
    FUNCTION_TABLE_vi[$141 & 255]($0);
    break;
   }
   $128 = ((($1)) + 8|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $129 << 7;
   $131 = HEAP32[$17>>2]|0;
   $132 = (($$077) - ($131))|0;
   $133 = (($5) - ($131))|0;
   $134 = ($132>>>0)<($133>>>0);
   if ($134) {
    $$180 = $132;
    while(1) {
     $135 = HEAP32[$1>>2]|0;
     $136 = (($135) + ($$180<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     _jzero_far($137,$130);
     $138 = (($$180) + 1)|0;
     $exitcond = ($138|0)==($133|0);
     if ($exitcond) {
      break;
     } else {
      $$180 = $138;
     }
    }
   }
  }
 } while(0);
 $142 = ($4|0)==(0);
 if ($142) {
  $144 = HEAP32[$1>>2]|0;
  $145 = HEAP32[$17>>2]|0;
  $146 = (($2) - ($145))|0;
  $147 = (($144) + ($146<<2)|0);
  return ($147|0);
 }
 $143 = ((($1)) + 36|0);
 HEAP32[$143>>2] = 1;
 $144 = HEAP32[$1>>2]|0;
 $145 = HEAP32[$17>>2]|0;
 $146 = (($2) - ($145))|0;
 $147 = (($144) + ($146<<2)|0);
 return ($147|0);
}
function _free_pool($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$071 = 0, $$07181 = 0, $$07182 = 0, $$072 = 0, $$07286 = 0, $$07287 = 0, $$in7477 = 0, $$in7576 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>(1);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 20|0);
  HEAP32[$6>>2] = 14;
  $7 = ((($5)) + 24|0);
  HEAP32[$7>>2] = $1;
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 255]($0);
 } else {
  $10 = ($1|0)==(1);
  if ($10) {
   $11 = ((($3)) + 68|0);
   $$07286 = HEAP32[$11>>2]|0;
   $12 = ($$07286|0)==(0|0);
   if (!($12)) {
    $$07287 = $$07286;
    while(1) {
     $13 = ((($$07287)) + 40|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0);
     if (!($15)) {
      HEAP32[$13>>2] = 0;
      $16 = ((($$07287)) + 48|0);
      $17 = ((($$07287)) + 56|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 255]($0,$16);
     }
     $19 = ((($$07287)) + 44|0);
     $$072 = HEAP32[$19>>2]|0;
     $20 = ($$072|0)==(0|0);
     if ($20) {
      break;
     } else {
      $$07287 = $$072;
     }
    }
   }
   HEAP32[$11>>2] = 0;
   $21 = ((($3)) + 72|0);
   $$07181 = HEAP32[$21>>2]|0;
   $22 = ($$07181|0)==(0|0);
   if (!($22)) {
    $$07182 = $$07181;
    while(1) {
     $23 = ((($$07182)) + 40|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if (!($25)) {
      HEAP32[$23>>2] = 0;
      $26 = ((($$07182)) + 48|0);
      $27 = ((($$07182)) + 56|0);
      $28 = HEAP32[$27>>2]|0;
      FUNCTION_TABLE_vii[$28 & 255]($0,$26);
     }
     $29 = ((($$07182)) + 44|0);
     $$071 = HEAP32[$29>>2]|0;
     $30 = ($$071|0)==(0|0);
     if ($30) {
      break;
     } else {
      $$07182 = $$071;
     }
    }
   }
   HEAP32[$21>>2] = 0;
  }
 }
 $31 = (((($3)) + 60|0) + ($1<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$31>>2] = 0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  $34 = ((($3)) + 76|0);
  $$in7477 = $32;
  while(1) {
   $35 = HEAP32[$$in7477>>2]|0;
   $36 = ((($$in7477)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($$in7477)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 12)|0;
   $41 = (($40) + ($39))|0;
   _jpeg_free_large($0,$$in7477,$41);
   $42 = HEAP32[$34>>2]|0;
   $43 = (($42) - ($41))|0;
   HEAP32[$34>>2] = $43;
   $44 = ($35|0)==(0|0);
   if ($44) {
    break;
   } else {
    $$in7477 = $35;
   }
  }
 }
 $45 = (((($3)) + 52|0) + ($1<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$45>>2] = 0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  return;
 }
 $48 = ((($3)) + 76|0);
 $$in7576 = $46;
 while(1) {
  $49 = HEAP32[$$in7576>>2]|0;
  $50 = ((($$in7576)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($$in7576)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 12)|0;
  $55 = (($54) + ($53))|0;
  _jpeg_free_small($0,$$in7576,$55);
  $56 = HEAP32[$48>>2]|0;
  $57 = (($56) - ($55))|0;
  HEAP32[$48>>2] = $57;
  $58 = ($49|0)==(0|0);
  if ($58) {
   break;
  } else {
   $$in7576 = $49;
  }
 }
 return;
}
function _self_destruct($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free_pool($0,1);
 _free_pool($0,0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _jpeg_free_small($0,$2,84);
 HEAP32[$1>>2] = 0;
 _jpeg_mem_term($0);
 return;
}
function _jpeg_get_small($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc($1)|0);
 return ($2|0);
}
function _jpeg_free_small($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _jpeg_get_large($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc($1)|0);
 return ($2|0);
}
function _jpeg_free_large($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _jpeg_mem_available($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  return ($2|0);
 } else {
  $9 = ($7>>>0)>($3>>>0);
  $10 = (($7) - ($3))|0;
  $$ = $9 ? $10 : 0;
  return ($$|0);
 }
 return (0)|0;
}
function _jpeg_open_backing_store($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = 49;
 $5 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($0);
 return;
}
function _jpeg_mem_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jpeg_mem_term($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jinit_arith_decoder($0) {
 $0 = $0|0;
 var $$035 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,192)|0);
 $5 = ((($0)) + 444|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 114;
 $6 = ((($4)) + 60|0);
 $7 = ((($4)) + 124|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 64|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 128|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($4)) + 68|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($4)) + 132|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($4)) + 72|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($4)) + 136|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($4)) + 76|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($4)) + 140|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($4)) + 80|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($4)) + 144|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($4)) + 84|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($4)) + 148|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 88|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($4)) + 152|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($4)) + 92|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($4)) + 156|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($4)) + 96|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($4)) + 160|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($4)) + 100|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($4)) + 164|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($4)) + 104|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($4)) + 168|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($4)) + 108|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($4)) + 172|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($4)) + 112|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($4)) + 176|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($4)) + 116|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($4)) + 180|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($4)) + 120|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($4)) + 184|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($4)) + 188|0);
 HEAP8[$38>>0] = 113;
 $39 = ((($0)) + 220|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  return;
 }
 $42 = HEAP32[$1>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($0)) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 << 8;
 $47 = (FUNCTION_TABLE_iiii[$43 & 255]($0,1,$46)|0);
 $48 = ((($0)) + 160|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$44>>2]|0;
 $50 = ($49|0)>(0);
 if ($50) {
  $$035 = 0;
 } else {
  return;
 }
 while(1) {
  $51 = $$035 << 8;
  $scevgep37 = (($47) + ($51)|0);
  _memset(($scevgep37|0),-1,256)|0;
  $52 = (($$035) + 1)|0;
  $53 = HEAP32[$44>>2]|0;
  $54 = ($52|0)<($53|0);
  if ($54) {
   $$035 = $52;
  } else {
   break;
  }
 }
 return;
}
function _start_pass($0) {
 $0 = $0|0;
 var $$ = 0, $$0136145 = 0, $$0149 = 0, $$1141 = 0, $$phi$trans$insert = 0, $$phi$trans$insert154 = 0, $$pr$pre = 0, $$pr138$pr = 0, $$pre = 0, $$pre$phi159Z2D = 0, $$pre$phiZ2D = 0, $$pre153 = 0, $$pre155 = 0, $$pre158 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $decode_mcu_AC_first$sink = 0, $decode_mcu_AC_refine$sink = 0, $or$cond = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 444|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 220|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($0)) + 400|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if ($5) {
   if ($8) {
    $94 = ((($0)) + 408|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0);
    if ($96) {
     $97 = ((($0)) + 412|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(0);
     if ($99) {
      $100 = ((($0)) + 404|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)>(62);
      if (!($102)) {
       label = 29;
      }
     } else {
      label = 29;
     }
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    $103 = HEAP32[$0>>2]|0;
    $104 = ((($103)) + 20|0);
    HEAP32[$104>>2] = 122;
    $105 = ((($103)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    FUNCTION_TABLE_vii[$106 & 255]($0,-1);
   }
   $107 = ((($2)) + 4|0);
   HEAP32[$107>>2] = 119;
   $$phi$trans$insert154 = ((($0)) + 328|0);
   $$pre155 = HEAP32[$$phi$trans$insert154>>2]|0;
   $$pre$phiZ2D = $$phi$trans$insert154;$108 = $$pre155;
  } else {
   $9 = ((($0)) + 404|0);
   $10 = HEAP32[$9>>2]|0;
   if ($8) {
    $11 = ($10|0)==(0);
    if ($11) {
     label = 6;
    } else {
     label = 10;
    }
   } else {
    $12 = ($10|0)<($7|0);
    $13 = ($10|0)>(63);
    $or$cond = $12 | $13;
    if ($or$cond) {
     label = 10;
    } else {
     $14 = ((($0)) + 328|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(1);
     if ($16) {
      label = 6;
     } else {
      label = 10;
     }
    }
   }
   do {
    if ((label|0) == 6) {
     $17 = ((($0)) + 408|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     if ($19) {
      $$phi$trans$insert = ((($0)) + 412|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $24 = $$pre;
     } else {
      $20 = (($18) + -1)|0;
      $21 = ((($0)) + 412|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $24 = $20;
      } else {
       label = 10;
       break;
      }
     }
     $25 = ($24|0)>(13);
     if ($25) {
      label = 10;
     }
    }
   } while(0);
   if ((label|0) == 10) {
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 20|0);
    HEAP32[$27>>2] = 16;
    $28 = ((($26)) + 24|0);
    HEAP32[$28>>2] = $7;
    $29 = HEAP32[$9>>2]|0;
    $30 = HEAP32[$0>>2]|0;
    $31 = ((($30)) + 28|0);
    HEAP32[$31>>2] = $29;
    $32 = ((($0)) + 408|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$0>>2]|0;
    $35 = ((($34)) + 32|0);
    HEAP32[$35>>2] = $33;
    $36 = ((($0)) + 412|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$0>>2]|0;
    $39 = ((($38)) + 36|0);
    HEAP32[$39>>2] = $37;
    $40 = HEAP32[$0>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vi[$41 & 255]($0);
   }
   $42 = ((($0)) + 328|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)>(0);
   if ($44) {
    $45 = ((($0)) + 160|0);
    $46 = ((($0)) + 408|0);
    $47 = ((($0)) + 412|0);
    $$0149 = 0;
    while(1) {
     $48 = (((($0)) + 332|0) + ($$0149<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($49)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$45>>2]|0;
     $53 = HEAP32[$6>>2]|0;
     $54 = ($53|0)==(0);
     if ($54) {
      $67 = 0;
     } else {
      $55 = (($52) + ($51<<8)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)<(0);
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = ((($58)) + 20|0);
       HEAP32[$59>>2] = 115;
       $60 = ((($58)) + 24|0);
       HEAP32[$60>>2] = $51;
       $61 = HEAP32[$0>>2]|0;
       $62 = ((($61)) + 28|0);
       HEAP32[$62>>2] = 0;
       $63 = HEAP32[$0>>2]|0;
       $64 = ((($63)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       FUNCTION_TABLE_vii[$65 & 255]($0,-1);
       $$pre153 = HEAP32[$6>>2]|0;
       $67 = $$pre153;
      } else {
       $67 = $53;
      }
     }
     $66 = HEAP32[$9>>2]|0;
     $68 = ($67|0)>($66|0);
     if (!($68)) {
      $$0136145 = $67;
      while(1) {
       $69 = ((($52) + ($51<<8)|0) + ($$0136145<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)>(0);
       $$ = $71 ? $70 : 0;
       $72 = HEAP32[$46>>2]|0;
       $73 = ($72|0)==($$|0);
       if (!($73)) {
        $74 = HEAP32[$0>>2]|0;
        $75 = ((($74)) + 20|0);
        HEAP32[$75>>2] = 115;
        $76 = ((($74)) + 24|0);
        HEAP32[$76>>2] = $51;
        $77 = HEAP32[$0>>2]|0;
        $78 = ((($77)) + 28|0);
        HEAP32[$78>>2] = $$0136145;
        $79 = HEAP32[$0>>2]|0;
        $80 = ((($79)) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        FUNCTION_TABLE_vii[$81 & 255]($0,-1);
       }
       $82 = HEAP32[$47>>2]|0;
       HEAP32[$69>>2] = $82;
       $83 = (($$0136145) + 1)|0;
       $84 = HEAP32[$9>>2]|0;
       $85 = ($$0136145|0)<($84|0);
       if ($85) {
        $$0136145 = $83;
       } else {
        break;
       }
      }
     }
     $86 = (($$0149) + 1)|0;
     $87 = HEAP32[$42>>2]|0;
     $88 = ($86|0)<($87|0);
     if ($88) {
      $$0149 = $86;
     } else {
      $$pre$phi159Z2D = $46;$163 = $87;
      break;
     }
    }
   } else {
    $$pre158 = ((($0)) + 408|0);
    $$pre$phi159Z2D = $$pre158;$163 = $43;
   }
   $89 = HEAP32[$$pre$phi159Z2D>>2]|0;
   $90 = ($89|0)==(0);
   $91 = HEAP32[$6>>2]|0;
   $92 = ($91|0)==(0);
   $93 = ((($2)) + 4|0);
   if ($90) {
    $decode_mcu_AC_first$sink = $92 ? 116 : 115;
    HEAP32[$93>>2] = $decode_mcu_AC_first$sink;
    $$pre$phiZ2D = $42;$108 = $163;
    break;
   } else {
    $decode_mcu_AC_refine$sink = $92 ? 118 : 117;
    HEAP32[$93>>2] = $decode_mcu_AC_refine$sink;
    $$pre$phiZ2D = $42;$108 = $163;
    break;
   }
  }
 } while(0);
 $109 = ($108|0)>(0);
 if (!($109)) {
  $157 = ((($2)) + 12|0);
  HEAP32[$157>>2] = 0;
  $158 = ((($2)) + 16|0);
  HEAP32[$158>>2] = 0;
  $159 = ((($2)) + 20|0);
  HEAP32[$159>>2] = -16;
  $160 = ((($0)) + 276|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($2)) + 56|0);
  HEAP32[$162>>2] = $161;
  return;
 }
 $110 = ((($0)) + 4|0);
 $111 = ((($0)) + 408|0);
 $$1141 = 0;
 while(1) {
  $112 = (((($0)) + 332|0) + ($$1141<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$3>>2]|0;
  $115 = ($114|0)==(0);
  if ($115) {
   label = 36;
  } else {
   $116 = HEAP32[$6>>2]|0;
   $117 = ($116|0)==(0);
   if ($117) {
    $118 = HEAP32[$111>>2]|0;
    $119 = ($118|0)==(0);
    if ($119) {
     label = 36;
    }
   } else {
    label = 42;
   }
  }
  if ((label|0) == 36) {
   label = 0;
   $120 = ((($113)) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121>>>0)>(15);
   if ($122) {
    $123 = HEAP32[$0>>2]|0;
    $124 = ((($123)) + 20|0);
    HEAP32[$124>>2] = 125;
    $125 = ((($123)) + 24|0);
    HEAP32[$125>>2] = $121;
    $126 = HEAP32[$0>>2]|0;
    $127 = HEAP32[$126>>2]|0;
    FUNCTION_TABLE_vi[$127 & 255]($0);
   }
   $128 = (((($2)) + 60|0) + ($121<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(0|0);
   if ($130) {
    $131 = HEAP32[$110>>2]|0;
    $132 = HEAP32[$131>>2]|0;
    $133 = (FUNCTION_TABLE_iiii[$132 & 255]($0,1,64)|0);
    HEAP32[$128>>2] = $133;
    $134 = $133;
   } else {
    $134 = $129;
   }
   dest=$134; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $135 = (((($2)) + 24|0) + ($$1141<<2)|0);
   HEAP32[$135>>2] = 0;
   $136 = (((($2)) + 40|0) + ($$1141<<2)|0);
   HEAP32[$136>>2] = 0;
   $$pr$pre = HEAP32[$3>>2]|0;
   $137 = ($$pr$pre|0)==(0);
   if ($137) {
    label = 42;
   } else {
    $$pr138$pr = HEAP32[$6>>2]|0;
    $138 = ($$pr138$pr|0)==(0);
    if (!($138)) {
     label = 42;
    }
   }
  }
  if ((label|0) == 42) {
   label = 0;
   $139 = ((($113)) + 24|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140>>>0)>(15);
   if ($141) {
    $142 = HEAP32[$0>>2]|0;
    $143 = ((($142)) + 20|0);
    HEAP32[$143>>2] = 125;
    $144 = ((($142)) + 24|0);
    HEAP32[$144>>2] = $140;
    $145 = HEAP32[$0>>2]|0;
    $146 = HEAP32[$145>>2]|0;
    FUNCTION_TABLE_vi[$146 & 255]($0);
   }
   $147 = (((($2)) + 124|0) + ($140<<2)|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)==(0|0);
   if ($149) {
    $150 = HEAP32[$110>>2]|0;
    $151 = HEAP32[$150>>2]|0;
    $152 = (FUNCTION_TABLE_iiii[$151 & 255]($0,1,256)|0);
    HEAP32[$147>>2] = $152;
    $153 = $152;
   } else {
    $153 = $148;
   }
   _memset(($153|0),0,256)|0;
  }
  $154 = (($$1141) + 1)|0;
  $155 = HEAP32[$$pre$phiZ2D>>2]|0;
  $156 = ($154|0)<($155|0);
  if ($156) {
   $$1141 = $154;
  } else {
   break;
  }
 }
 $157 = ((($2)) + 12|0);
 HEAP32[$157>>2] = 0;
 $158 = ((($2)) + 16|0);
 HEAP32[$158>>2] = 0;
 $159 = ((($2)) + 20|0);
 HEAP32[$159>>2] = -16;
 $160 = ((($0)) + 276|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($2)) + 56|0);
 HEAP32[$162>>2] = $161;
 return;
}
function _decode_mcu_DC_first_315($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$033$i = 0, $$088$ = 0, $$088$lcssa = 0, $$088101 = 0, $$09198 = 0, $$093104 = 0, $$099 = 0, $$1 = 0, $$192 = 0, $$phi$trans$insert = 0, $$pr$i = 0, $$pre = 0, $$pre$i = 0, $$sink94 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($3)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($0)) + 440|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 20|0);
    HEAP32[$17>>2] = 24;
    $18 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$18 & 255]($0);
   }
   $19 = ((($0)) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($0)) + 220|0);
    $23 = ((($0)) + 400|0);
    $24 = ((($0)) + 408|0);
    $$033$i = 0;
    while(1) {
     $25 = (((($0)) + 332|0) + ($$033$i<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$22>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      label = 10;
     } else {
      $29 = HEAP32[$23>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = HEAP32[$24>>2]|0;
       $32 = ($31|0)==(0);
       if ($32) {
        label = 10;
       }
      } else {
       label = 12;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ((($26)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (((($3)) + 60|0) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      dest=$36; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $37 = (((($3)) + 24|0) + ($$033$i<<2)|0);
      HEAP32[$37>>2] = 0;
      $38 = (((($3)) + 40|0) + ($$033$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $$pre$i = HEAP32[$22>>2]|0;
      $39 = ($$pre$i|0)==(0);
      if ($39) {
       label = 12;
      } else {
       $$pr$i = HEAP32[$23>>2]|0;
       $40 = ($$pr$i|0)==(0);
       if (!($40)) {
        label = 12;
       }
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $41 = ((($26)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (((($3)) + 124|0) + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      _memset(($44|0),0,256)|0;
     }
     $45 = (($$033$i) + 1)|0;
     $46 = HEAP32[$19>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$033$i = $45;
     } else {
      break;
     }
    }
   }
   $48 = ((($3)) + 12|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($3)) + 16|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($3)) + 20|0);
   HEAP32[$50>>2] = -16;
   $51 = HEAP32[$4>>2]|0;
   HEAP32[$7>>2] = $51;
   $53 = $51;
  } else {
   $53 = $8;
  }
  $52 = (($53) + -1)|0;
  HEAP32[$7>>2] = $52;
 }
 $54 = ((($3)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(-1);
 if ($56) {
  return 1;
 }
 $57 = ((($0)) + 356|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)>(0);
 if (!($59)) {
  return 1;
 }
 $60 = ((($0)) + 412|0);
 $$093104 = 0;
 L30: while(1) {
  $61 = (($1) + ($$093104<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (((($0)) + 360|0) + ($$093104<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (((($0)) + 332|0) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (((($3)) + 60|0) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (((($3)) + 40|0) + ($64<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + ($72)|0);
  $74 = (_arith_decode($0,$73)|0);
  $75 = ($74|0)==(0);
  if ($75) {
   HEAP32[$71>>2] = 0;
   $$phi$trans$insert = (((($3)) + 24|0) + ($64<<2)|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $126 = $$pre;
  } else {
   $76 = ((($73)) + 1|0);
   $77 = (_arith_decode($0,$76)|0);
   $78 = ((($73)) + 2|0);
   $79 = (($78) + ($77)|0);
   $80 = (_arith_decode($0,$79)|0);
   $81 = ($80|0)==(0);
   if ($81) {
    $$1 = 0;$$192 = $79;
   } else {
    $82 = HEAP32[$69>>2]|0;
    $83 = ((($82)) + 20|0);
    $84 = (_arith_decode($0,$83)|0);
    $85 = ($84|0)==(0);
    if ($85) {
     $$1 = $80;$$192 = $83;
    } else {
     $$09198 = $83;$$099 = $80;
     while(1) {
      $86 = $$099 << 1;
      $87 = ($86|0)==(32768);
      if ($87) {
       break L30;
      }
      $92 = ((($$09198)) + 1|0);
      $93 = (_arith_decode($0,$92)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $$1 = $86;$$192 = $92;
       break;
      } else {
       $$09198 = $92;$$099 = $86;
      }
     }
    }
   }
   $95 = (((($0)) + 228|0) + ($68)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = 1 << $97;
   $99 = $98 >> 1;
   $100 = ($$1|0)<($99|0);
   if ($100) {
    $storemerge = 0;
   } else {
    $101 = (((($0)) + 244|0) + ($68)|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = 1 << $103;
    $105 = $104 >> 1;
    $106 = ($$1|0)>($105|0);
    $107 = $77 << 2;
    $$sink94 = $106 ? 12 : 4;
    $108 = (($$sink94) + ($107))|0;
    $storemerge = $108;
   }
   HEAP32[$71>>2] = $storemerge;
   $109 = ((($$192)) + 14|0);
   $110 = $$1 >> 1;
   $111 = ($110|0)==(0);
   if ($111) {
    $$088$lcssa = $$1;
   } else {
    $$088101 = $$1;$114 = $110;
    while(1) {
     $112 = (_arith_decode($0,$109)|0);
     $113 = ($112|0)==(0);
     $115 = $113 ? 0 : $114;
     $$088$ = $115 | $$088101;
     $116 = $114 >> 1;
     $117 = ($116|0)==(0);
     if ($117) {
      $$088$lcssa = $$088$;
      break;
     } else {
      $$088101 = $$088$;$114 = $116;
     }
    }
   }
   $118 = (($$088$lcssa) + 1)|0;
   $119 = ($77|0)==(0);
   $120 = $$088$lcssa ^ -1;
   $$ = $119 ? $118 : $120;
   $121 = (((($3)) + 24|0) + ($64<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + ($$))|0;
   HEAP32[$121>>2] = $123;
   $126 = $123;
  }
  $124 = HEAP32[$60>>2]|0;
  $125 = $126 << $124;
  $127 = $125&65535;
  HEAP16[$62>>1] = $127;
  $128 = (($$093104) + 1)|0;
  $129 = HEAP32[$57>>2]|0;
  $130 = ($128|0)<($129|0);
  if ($130) {
   $$093104 = $128;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  return 1;
 }
 $88 = HEAP32[$0>>2]|0;
 $89 = ((($88)) + 20|0);
 HEAP32[$89>>2] = 126;
 $90 = ((($88)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 FUNCTION_TABLE_vii[$91 & 255]($0,-1);
 HEAP32[$54>>2] = -1;
 return 1;
}
function _decode_mcu_AC_first_316($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$033$i = 0, $$077$ = 0, $$077$lcssa = 0, $$07793 = 0, $$07996 = 0, $$082 = 0, $$091 = 0, $$1 = 0, $$180 = 0, $$18390 = 0, $$284 = 0, $$pr$i = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($3)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($0)) + 440|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 20|0);
    HEAP32[$17>>2] = 24;
    $18 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$18 & 255]($0);
   }
   $19 = ((($0)) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($0)) + 220|0);
    $23 = ((($0)) + 400|0);
    $24 = ((($0)) + 408|0);
    $$033$i = 0;
    while(1) {
     $25 = (((($0)) + 332|0) + ($$033$i<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$22>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      label = 10;
     } else {
      $29 = HEAP32[$23>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = HEAP32[$24>>2]|0;
       $32 = ($31|0)==(0);
       if ($32) {
        label = 10;
       }
      } else {
       label = 12;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ((($26)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (((($3)) + 60|0) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      dest=$36; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $37 = (((($3)) + 24|0) + ($$033$i<<2)|0);
      HEAP32[$37>>2] = 0;
      $38 = (((($3)) + 40|0) + ($$033$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $$pre$i = HEAP32[$22>>2]|0;
      $39 = ($$pre$i|0)==(0);
      if ($39) {
       label = 12;
      } else {
       $$pr$i = HEAP32[$23>>2]|0;
       $40 = ($$pr$i|0)==(0);
       if (!($40)) {
        label = 12;
       }
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $41 = ((($26)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (((($3)) + 124|0) + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      _memset(($44|0),0,256)|0;
     }
     $45 = (($$033$i) + 1)|0;
     $46 = HEAP32[$19>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$033$i = $45;
     } else {
      break;
     }
    }
   }
   $48 = ((($3)) + 12|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($3)) + 16|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($3)) + 20|0);
   HEAP32[$50>>2] = -16;
   $51 = HEAP32[$4>>2]|0;
   HEAP32[$7>>2] = $51;
   $53 = $51;
  } else {
   $53 = $8;
  }
  $52 = (($53) + -1)|0;
  HEAP32[$7>>2] = $52;
 }
 $54 = ((($3)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(-1);
 if ($56) {
  return 1;
 }
 $57 = HEAP32[$1>>2]|0;
 $58 = ((($0)) + 332|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($0)) + 400|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($0)) + 404|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($63|0)>($65|0);
 if ($66) {
  return 1;
 }
 $67 = (((($3)) + 124|0) + ($61<<2)|0);
 $68 = ((($3)) + 188|0);
 $69 = ((($0)) + 412|0);
 $70 = (((($0)) + 260|0) + ($61)|0);
 $$07996 = $63;
 L30: while(1) {
  $71 = HEAP32[$67>>2]|0;
  $72 = ($$07996*3)|0;
  $73 = (($72) + -3)|0;
  $74 = (($71) + ($73)|0);
  $75 = (_arith_decode($0,$74)|0);
  $76 = ($75|0)==(0);
  if ($76) {
   $$082 = $74;$$180 = $$07996;
  } else {
   label = 32;
   break;
  }
  while(1) {
   $77 = ((($$082)) + 1|0);
   $78 = (_arith_decode($0,$77)|0);
   $79 = ($78|0)==(0);
   if (!($79)) {
    break;
   }
   $80 = ((($$082)) + 3|0);
   $81 = (($$180) + 1)|0;
   $82 = HEAP32[$64>>2]|0;
   $83 = ($$180|0)<($82|0);
   if ($83) {
    $$082 = $80;$$180 = $81;
   } else {
    label = 22;
    break L30;
   }
  }
  $88 = (_arith_decode($0,$68)|0);
  $89 = ((($$082)) + 2|0);
  $90 = (_arith_decode($0,$89)|0);
  $91 = ($90|0)==(0);
  if ($91) {
   $$077$lcssa = 0;
  } else {
   $92 = (_arith_decode($0,$89)|0);
   $93 = ($92|0)==(0);
   if ($93) {
    $$1 = $90;$$284 = $89;
   } else {
    $94 = $90 << 1;
    $95 = HEAP32[$67>>2]|0;
    $96 = HEAP8[$70>>0]|0;
    $97 = $96&255;
    $98 = ($$180|0)<=($97|0);
    $99 = $98 ? 189 : 217;
    $100 = (($95) + ($99)|0);
    $101 = (_arith_decode($0,$100)|0);
    $102 = ($101|0)==(0);
    if ($102) {
     $$1 = $94;$$284 = $100;
    } else {
     $$091 = $94;$$18390 = $100;
     while(1) {
      $103 = $$091 << 1;
      $104 = ($103|0)==(32768);
      if ($104) {
       label = 27;
       break L30;
      }
      $109 = ((($$18390)) + 1|0);
      $110 = (_arith_decode($0,$109)|0);
      $111 = ($110|0)==(0);
      if ($111) {
       $$1 = $103;$$284 = $109;
       break;
      } else {
       $$091 = $103;$$18390 = $109;
      }
     }
    }
   }
   $112 = ((($$284)) + 14|0);
   $113 = $$1 >> 1;
   $114 = ($113|0)==(0);
   if ($114) {
    $$077$lcssa = $$1;
   } else {
    $$07793 = $$1;$117 = $113;
    while(1) {
     $115 = (_arith_decode($0,$112)|0);
     $116 = ($115|0)==(0);
     $118 = $116 ? 0 : $117;
     $$077$ = $118 | $$07793;
     $119 = $117 >> 1;
     $120 = ($119|0)==(0);
     if ($120) {
      $$077$lcssa = $$077$;
      break;
     } else {
      $$07793 = $$077$;$117 = $119;
     }
    }
   }
  }
  $121 = (($$077$lcssa) + 1)|0;
  $122 = ($88|0)==(0);
  $123 = $$077$lcssa ^ -1;
  $$ = $122 ? $121 : $123;
  $124 = HEAP32[$69>>2]|0;
  $125 = $$ << $124;
  $126 = $125&65535;
  $127 = (996 + ($$180<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($57) + ($128<<1)|0);
  HEAP16[$129>>1] = $126;
  $130 = (($$180) + 1)|0;
  $131 = HEAP32[$64>>2]|0;
  $132 = ($$180|0)<($131|0);
  if ($132) {
   $$07996 = $130;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 22) {
  $84 = HEAP32[$0>>2]|0;
  $85 = ((($84)) + 20|0);
  HEAP32[$85>>2] = 126;
  $86 = ((($84)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  FUNCTION_TABLE_vii[$87 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 27) {
  $105 = HEAP32[$0>>2]|0;
  $106 = ((($105)) + 20|0);
  HEAP32[$106>>2] = 126;
  $107 = ((($105)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  FUNCTION_TABLE_vii[$108 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 32) {
  return 1;
 }
 return (0)|0;
}
function _decode_mcu_DC_refine_317($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$033$i = 0, $$pr$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($3)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($0)) + 440|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 20|0);
    HEAP32[$17>>2] = 24;
    $18 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$18 & 255]($0);
   }
   $19 = ((($0)) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($0)) + 220|0);
    $23 = ((($0)) + 400|0);
    $24 = ((($0)) + 408|0);
    $$033$i = 0;
    while(1) {
     $25 = (((($0)) + 332|0) + ($$033$i<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$22>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      label = 10;
     } else {
      $29 = HEAP32[$23>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = HEAP32[$24>>2]|0;
       $32 = ($31|0)==(0);
       if ($32) {
        label = 10;
       }
      } else {
       label = 12;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ((($26)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (((($3)) + 60|0) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      dest=$36; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $37 = (((($3)) + 24|0) + ($$033$i<<2)|0);
      HEAP32[$37>>2] = 0;
      $38 = (((($3)) + 40|0) + ($$033$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $$pre$i = HEAP32[$22>>2]|0;
      $39 = ($$pre$i|0)==(0);
      if ($39) {
       label = 12;
      } else {
       $$pr$i = HEAP32[$23>>2]|0;
       $40 = ($$pr$i|0)==(0);
       if (!($40)) {
        label = 12;
       }
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $41 = ((($26)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (((($3)) + 124|0) + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      _memset(($44|0),0,256)|0;
     }
     $45 = (($$033$i) + 1)|0;
     $46 = HEAP32[$19>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$033$i = $45;
     } else {
      break;
     }
    }
   }
   $48 = ((($3)) + 12|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($3)) + 16|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($3)) + 20|0);
   HEAP32[$50>>2] = -16;
   $51 = HEAP32[$4>>2]|0;
   HEAP32[$7>>2] = $51;
   $53 = $51;
  } else {
   $53 = $8;
  }
  $52 = (($53) + -1)|0;
  HEAP32[$7>>2] = $52;
 }
 $54 = ((($3)) + 188|0);
 $55 = ((($0)) + 412|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = 1 << $56;
 $58 = ((($0)) + 356|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)>(0);
 if ($60) {
  $$021 = 0;
 } else {
  return 1;
 }
 while(1) {
  $61 = (_arith_decode($0,$54)|0);
  $62 = ($61|0)==(0);
  if (!($62)) {
   $63 = (($1) + ($$021<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $57 | $66;
   $68 = $67&65535;
   HEAP16[$64>>1] = $68;
  }
  $69 = (($$021) + 1)|0;
  $70 = HEAP32[$58>>2]|0;
  $71 = ($69|0)<($70|0);
  if ($71) {
   $$021 = $69;
  } else {
   break;
  }
 }
 return 1;
}
function _decode_mcu_AC_refine_318($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$033$i = 0, $$071 = 0, $$072$lcssa = 0, $$07285 = 0, $$07383 = 0, $$1 = 0, $$pr$i = 0, $$pre$i = 0, $$sink3 = 0, $$sink74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($3)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($0)) + 440|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 20|0);
    HEAP32[$17>>2] = 24;
    $18 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$18 & 255]($0);
   }
   $19 = ((($0)) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($0)) + 220|0);
    $23 = ((($0)) + 400|0);
    $24 = ((($0)) + 408|0);
    $$033$i = 0;
    while(1) {
     $25 = (((($0)) + 332|0) + ($$033$i<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$22>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      label = 10;
     } else {
      $29 = HEAP32[$23>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = HEAP32[$24>>2]|0;
       $32 = ($31|0)==(0);
       if ($32) {
        label = 10;
       }
      } else {
       label = 12;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ((($26)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (((($3)) + 60|0) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      dest=$36; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $37 = (((($3)) + 24|0) + ($$033$i<<2)|0);
      HEAP32[$37>>2] = 0;
      $38 = (((($3)) + 40|0) + ($$033$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $$pre$i = HEAP32[$22>>2]|0;
      $39 = ($$pre$i|0)==(0);
      if ($39) {
       label = 12;
      } else {
       $$pr$i = HEAP32[$23>>2]|0;
       $40 = ($$pr$i|0)==(0);
       if (!($40)) {
        label = 12;
       }
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $41 = ((($26)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (((($3)) + 124|0) + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      _memset(($44|0),0,256)|0;
     }
     $45 = (($$033$i) + 1)|0;
     $46 = HEAP32[$19>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$033$i = $45;
     } else {
      break;
     }
    }
   }
   $48 = ((($3)) + 12|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($3)) + 16|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($3)) + 20|0);
   HEAP32[$50>>2] = -16;
   $51 = HEAP32[$4>>2]|0;
   HEAP32[$7>>2] = $51;
   $53 = $51;
  } else {
   $53 = $8;
  }
  $52 = (($53) + -1)|0;
  HEAP32[$7>>2] = $52;
 }
 $54 = ((($3)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(-1);
 if ($56) {
  return 1;
 }
 $57 = HEAP32[$1>>2]|0;
 $58 = ((($0)) + 332|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($0)) + 412|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = 1 << $63;
 $65 = -1 << $63;
 $66 = ((($0)) + 404|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)>(0);
 L27: do {
  if ($68) {
   $$07285 = $67;
   while(1) {
    $69 = (996 + ($$07285<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($57) + ($70<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = ($72<<16>>16)==(0);
    if (!($73)) {
     $$072$lcssa = $$07285;
     break L27;
    }
    $74 = (($$07285) + -1)|0;
    $75 = ($$07285|0)>(1);
    if ($75) {
     $$07285 = $74;
    } else {
     $$072$lcssa = $74;
     break;
    }
   }
  } else {
   $$072$lcssa = $67;
  }
 } while(0);
 $76 = ((($0)) + 400|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)>($67|0);
 if ($78) {
  return 1;
 }
 $79 = (((($3)) + 124|0) + ($61<<2)|0);
 $80 = ((($3)) + 188|0);
 $$07383 = $77;
 L35: while(1) {
  $81 = HEAP32[$79>>2]|0;
  $82 = ($$07383*3)|0;
  $83 = (($82) + -3)|0;
  $84 = (($81) + ($83)|0);
  $85 = ($$07383|0)>($$072$lcssa|0);
  if ($85) {
   $86 = (_arith_decode($0,$84)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $$071 = $84;$$1 = $$07383;
   } else {
    label = 33;
    break;
   }
  } else {
   $$071 = $84;$$1 = $$07383;
  }
  while(1) {
   $88 = (996 + ($$1<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($57) + ($89<<1)|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = ($91<<16>>16)==(0);
   if (!($92)) {
    label = 25;
    break;
   }
   $100 = ((($$071)) + 1|0);
   $101 = (_arith_decode($0,$100)|0);
   $102 = ($101|0)==(0);
   if (!($102)) {
    label = 28;
    break;
   }
   $105 = ((($$071)) + 3|0);
   $106 = (($$1) + 1)|0;
   $107 = HEAP32[$66>>2]|0;
   $108 = ($$1|0)<($107|0);
   if ($108) {
    $$071 = $105;$$1 = $106;
   } else {
    label = 30;
    break L35;
   }
  }
  if ((label|0) == 25) {
   label = 0;
   $93 = ((($$071)) + 2|0);
   $94 = (_arith_decode($0,$93)|0);
   $95 = ($94|0)==(0);
   if (!($95)) {
    $96 = HEAP16[$90>>1]|0;
    $97 = $96&65535;
    $98 = ($96<<16>>16)<(0);
    $$sink3 = $98 ? $65 : $64;
    $99 = (($$sink3) + ($97))|0;
    $$sink74 = $99;
    label = 31;
   }
  }
  else if ((label|0) == 28) {
   label = 0;
   $103 = (_arith_decode($0,$80)|0);
   $104 = ($103|0)==(0);
   $$ = $104 ? $64 : $65;
   $$sink74 = $$;
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   $113 = $$sink74&65535;
   HEAP16[$90>>1] = $113;
  }
  $114 = (($$1) + 1)|0;
  $115 = HEAP32[$66>>2]|0;
  $116 = ($$1|0)<($115|0);
  if ($116) {
   $$07383 = $114;
  } else {
   label = 33;
   break;
  }
 }
 if ((label|0) == 30) {
  $109 = HEAP32[$0>>2]|0;
  $110 = ((($109)) + 20|0);
  HEAP32[$110>>2] = 126;
  $111 = ((($109)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 33) {
  return 1;
 }
 return (0)|0;
}
function _decode_mcu($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0146$ = 0, $$0146$lcssa = 0, $$0146173 = 0, $$0150187 = 0, $$0150187$us = 0, $$0153190 = 0, $$0154170 = 0, $$0171 = 0, $$033$i = 0, $$1 = 0, $$1151 = 0, $$1151$us = 0, $$1155 = 0, $$160$us = 0, $$2148$$us = 0, $$2148$lcssa$us = 0, $$2148182$us = 0, $$2156 = 0, $$2156$us = 0;
 var $$3157176 = 0, $$3157176$us = 0, $$3177 = 0, $$3177$us = 0, $$4 = 0, $$4$us = 0, $$4158 = 0, $$4158$us = 0, $$pr$i = 0, $$pre$i = 0, $$sink159 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($3)) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($0)) + 440|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 20|0);
    HEAP32[$17>>2] = 24;
    $18 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$18 & 255]($0);
   }
   $19 = ((($0)) + 328|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($0)) + 220|0);
    $23 = ((($0)) + 400|0);
    $24 = ((($0)) + 408|0);
    $$033$i = 0;
    while(1) {
     $25 = (((($0)) + 332|0) + ($$033$i<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$22>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      label = 10;
     } else {
      $29 = HEAP32[$23>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = HEAP32[$24>>2]|0;
       $32 = ($31|0)==(0);
       if ($32) {
        label = 10;
       }
      } else {
       label = 12;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ((($26)) + 20|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (((($3)) + 60|0) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      dest=$36; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $37 = (((($3)) + 24|0) + ($$033$i<<2)|0);
      HEAP32[$37>>2] = 0;
      $38 = (((($3)) + 40|0) + ($$033$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $$pre$i = HEAP32[$22>>2]|0;
      $39 = ($$pre$i|0)==(0);
      if ($39) {
       label = 12;
      } else {
       $$pr$i = HEAP32[$23>>2]|0;
       $40 = ($$pr$i|0)==(0);
       if (!($40)) {
        label = 12;
       }
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $41 = ((($26)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (((($3)) + 124|0) + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      _memset(($44|0),0,256)|0;
     }
     $45 = (($$033$i) + 1)|0;
     $46 = HEAP32[$19>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$033$i = $45;
     } else {
      break;
     }
    }
   }
   $48 = ((($3)) + 12|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($3)) + 16|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($3)) + 20|0);
   HEAP32[$50>>2] = -16;
   $51 = HEAP32[$4>>2]|0;
   HEAP32[$7>>2] = $51;
   $53 = $51;
  } else {
   $53 = $8;
  }
  $52 = (($53) + -1)|0;
  HEAP32[$7>>2] = $52;
 }
 $54 = ((($3)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(-1);
 if ($56) {
  return 1;
 }
 $57 = ((($0)) + 356|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)>(0);
 if (!($59)) {
  return 1;
 }
 $60 = ($1|0)==(0|0);
 $61 = ((($3)) + 188|0);
 $$0153190 = 0;
 L30: while(1) {
  if ($60) {
   $125 = 0;
  } else {
   $62 = (($1) + ($$0153190<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $125 = $63;
  }
  $64 = (((($0)) + 360|0) + ($$0153190<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (((($0)) + 332|0) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (((($3)) + 60|0) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (((($3)) + 40|0) + ($65<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + ($73)|0);
  $75 = (_arith_decode($0,$74)|0);
  $76 = ($75|0)==(0);
  if ($76) {
   HEAP32[$72>>2] = 0;
  } else {
   $77 = ((($74)) + 1|0);
   $78 = (_arith_decode($0,$77)|0);
   $79 = ((($74)) + 2|0);
   $80 = (($79) + ($78)|0);
   $81 = (_arith_decode($0,$80)|0);
   $82 = ($81|0)==(0);
   if ($82) {
    $$1 = 0;$$1155 = $80;
   } else {
    $83 = HEAP32[$70>>2]|0;
    $84 = ((($83)) + 20|0);
    $85 = (_arith_decode($0,$84)|0);
    $86 = ($85|0)==(0);
    if ($86) {
     $$1 = $81;$$1155 = $84;
    } else {
     $$0154170 = $84;$$0171 = $81;
     while(1) {
      $87 = $$0171 << 1;
      $88 = ($87|0)==(32768);
      if ($88) {
       label = 26;
       break L30;
      }
      $93 = ((($$0154170)) + 1|0);
      $94 = (_arith_decode($0,$93)|0);
      $95 = ($94|0)==(0);
      if ($95) {
       $$1 = $87;$$1155 = $93;
       break;
      } else {
       $$0154170 = $93;$$0171 = $87;
      }
     }
    }
   }
   $96 = (((($0)) + 228|0) + ($69)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = 1 << $98;
   $100 = $99 >> 1;
   $101 = ($$1|0)<($100|0);
   if ($101) {
    $storemerge = 0;
   } else {
    $102 = (((($0)) + 244|0) + ($69)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = 1 << $104;
    $106 = $105 >> 1;
    $107 = ($$1|0)>($106|0);
    $108 = $78 << 2;
    $$sink159 = $107 ? 12 : 4;
    $109 = (($$sink159) + ($108))|0;
    $storemerge = $109;
   }
   HEAP32[$72>>2] = $storemerge;
   $110 = ((($$1155)) + 14|0);
   $111 = $$1 >> 1;
   $112 = ($111|0)==(0);
   if ($112) {
    $$0146$lcssa = $$1;
   } else {
    $$0146173 = $$1;$115 = $111;
    while(1) {
     $113 = (_arith_decode($0,$110)|0);
     $114 = ($113|0)==(0);
     $116 = $114 ? 0 : $115;
     $$0146$ = $116 | $$0146173;
     $117 = $115 >> 1;
     $118 = ($117|0)==(0);
     if ($118) {
      $$0146$lcssa = $$0146$;
      break;
     } else {
      $$0146173 = $$0146$;$115 = $117;
     }
    }
   }
   $119 = (($$0146$lcssa) + 1)|0;
   $120 = ($78|0)==(0);
   $121 = $$0146$lcssa ^ -1;
   $$ = $120 ? $119 : $121;
   $122 = (((($3)) + 24|0) + ($65<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + ($$))|0;
   HEAP32[$122>>2] = $124;
  }
  $126 = ($125|0)==(0|0);
  L52: do {
   if ($126) {
    $127 = ((($67)) + 24|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (((($3)) + 124|0) + ($128<<2)|0);
    $130 = (((($0)) + 260|0) + ($128)|0);
    $$0150187 = 1;
    while(1) {
     $188 = HEAP32[$129>>2]|0;
     $189 = ($$0150187*3)|0;
     $190 = (($189) + -3)|0;
     $191 = (($188) + ($190)|0);
     $192 = (_arith_decode($0,$191)|0);
     $193 = ($192|0)==(0);
     if ($193) {
      $$1151 = $$0150187;$$2156 = $191;
     } else {
      break L52;
     }
     while(1) {
      $194 = ((($$2156)) + 1|0);
      $195 = (_arith_decode($0,$194)|0);
      $196 = ($195|0)==(0);
      if (!($196)) {
       break;
      }
      $197 = ((($$2156)) + 3|0);
      $198 = (($$1151) + 1)|0;
      $199 = ($$1151|0)>(62);
      if ($199) {
       label = 50;
       break L30;
      } else {
       $$1151 = $198;$$2156 = $197;
      }
     }
     (_arith_decode($0,$61)|0);
     $204 = ((($$2156)) + 2|0);
     $205 = (_arith_decode($0,$204)|0);
     $206 = ($205|0)==(0);
     if (!($206)) {
      $207 = (_arith_decode($0,$204)|0);
      $208 = ($207|0)==(0);
      if ($208) {
       $$4 = $205;$$4158 = $204;
      } else {
       $209 = $205 << 1;
       $210 = HEAP32[$129>>2]|0;
       $211 = HEAP8[$130>>0]|0;
       $212 = $211&255;
       $213 = ($$1151|0)<=($212|0);
       $214 = $213 ? 189 : 217;
       $215 = (($210) + ($214)|0);
       $216 = (_arith_decode($0,$215)|0);
       $217 = ($216|0)==(0);
       if ($217) {
        $$4 = $209;$$4158 = $215;
       } else {
        $$3157176 = $215;$$3177 = $209;
        while(1) {
         $218 = $$3177 << 1;
         $219 = ($218|0)==(32768);
         if ($219) {
          label = 55;
          break L30;
         }
         $224 = ((($$3157176)) + 1|0);
         $225 = (_arith_decode($0,$224)|0);
         $226 = ($225|0)==(0);
         if ($226) {
          $$4 = $218;$$4158 = $224;
          break;
         } else {
          $$3157176 = $224;$$3177 = $218;
         }
        }
       }
      }
      $227 = ((($$4158)) + 14|0);
      $228 = $$4 >> 1;
      $229 = ($228|0)==(0);
      if (!($229)) {
       $231 = $228;
       while(1) {
        (_arith_decode($0,$227)|0);
        $230 = $231 >> 1;
        $232 = ($230|0)==(0);
        if ($232) {
         break;
        } else {
         $231 = $230;
        }
       }
      }
     }
     $233 = (($$1151) + 1)|0;
     $234 = ($$1151|0)<(63);
     if ($234) {
      $$0150187 = $233;
     } else {
      break;
     }
    }
   } else {
    $131 = (((($3)) + 24|0) + ($65<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $132&65535;
    HEAP16[$125>>1] = $133;
    $134 = ((($67)) + 24|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (((($3)) + 124|0) + ($135<<2)|0);
    $137 = (((($0)) + 260|0) + ($135)|0);
    $$0150187$us = 1;
    while(1) {
     $138 = HEAP32[$136>>2]|0;
     $139 = ($$0150187$us*3)|0;
     $140 = (($139) + -3)|0;
     $141 = (($138) + ($140)|0);
     $142 = (_arith_decode($0,$141)|0);
     $143 = ($142|0)==(0);
     if ($143) {
      $$1151$us = $$0150187$us;$$2156$us = $141;
     } else {
      break L52;
     }
     while(1) {
      $144 = ((($$2156$us)) + 1|0);
      $145 = (_arith_decode($0,$144)|0);
      $146 = ($145|0)==(0);
      if (!($146)) {
       break;
      }
      $185 = ((($$2156$us)) + 3|0);
      $186 = (($$1151$us) + 1)|0;
      $187 = ($$1151$us|0)>(62);
      if ($187) {
       label = 50;
       break L30;
      } else {
       $$1151$us = $186;$$2156$us = $185;
      }
     }
     $147 = (_arith_decode($0,$61)|0);
     $148 = ((($$2156$us)) + 2|0);
     $149 = (_arith_decode($0,$148)|0);
     $150 = ($149|0)==(0);
     if ($150) {
      $$2148$lcssa$us = 0;
     } else {
      $151 = (_arith_decode($0,$148)|0);
      $152 = ($151|0)==(0);
      if ($152) {
       $$4$us = $149;$$4158$us = $148;
      } else {
       $153 = $149 << 1;
       $154 = HEAP32[$136>>2]|0;
       $155 = HEAP8[$137>>0]|0;
       $156 = $155&255;
       $157 = ($$1151$us|0)<=($156|0);
       $158 = $157 ? 189 : 217;
       $159 = (($154) + ($158)|0);
       $160 = (_arith_decode($0,$159)|0);
       $161 = ($160|0)==(0);
       if ($161) {
        $$4$us = $153;$$4158$us = $159;
       } else {
        $$3157176$us = $159;$$3177$us = $153;
        while(1) {
         $162 = $$3177$us << 1;
         $163 = ($162|0)==(32768);
         if ($163) {
          label = 55;
          break L30;
         }
         $164 = ((($$3157176$us)) + 1|0);
         $165 = (_arith_decode($0,$164)|0);
         $166 = ($165|0)==(0);
         if ($166) {
          $$4$us = $162;$$4158$us = $164;
          break;
         } else {
          $$3157176$us = $164;$$3177$us = $162;
         }
        }
       }
      }
      $167 = ((($$4158$us)) + 14|0);
      $168 = $$4$us >> 1;
      $169 = ($168|0)==(0);
      if ($169) {
       $$2148$lcssa$us = $$4$us;
      } else {
       $$2148182$us = $$4$us;$172 = $168;
       while(1) {
        $170 = (_arith_decode($0,$167)|0);
        $171 = ($170|0)==(0);
        $173 = $171 ? 0 : $172;
        $$2148$$us = $173 | $$2148182$us;
        $174 = $172 >> 1;
        $175 = ($174|0)==(0);
        if ($175) {
         $$2148$lcssa$us = $$2148$$us;
         break;
        } else {
         $$2148182$us = $$2148$$us;$172 = $174;
        }
       }
      }
     }
     $176 = (996 + ($$1151$us<<2)|0);
     $177 = ($147|0)==(0);
     $178 = (($$2148$lcssa$us) + 1)|0;
     $179 = $$2148$lcssa$us ^ 65535;
     $$160$us = $177 ? $178 : $179;
     $180 = $$160$us&65535;
     $181 = HEAP32[$176>>2]|0;
     $182 = (($125) + ($181<<1)|0);
     HEAP16[$182>>1] = $180;
     $183 = (($$1151$us) + 1)|0;
     $184 = ($$1151$us|0)<(63);
     if ($184) {
      $$0150187$us = $183;
     } else {
      break;
     }
    }
   }
  } while(0);
  $235 = (($$0153190) + 1)|0;
  $236 = HEAP32[$57>>2]|0;
  $237 = ($235|0)<($236|0);
  if ($237) {
   $$0153190 = $235;
  } else {
   label = 61;
   break;
  }
 }
 if ((label|0) == 26) {
  $89 = HEAP32[$0>>2]|0;
  $90 = ((($89)) + 20|0);
  HEAP32[$90>>2] = 126;
  $91 = ((($89)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vii[$92 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 50) {
  $200 = HEAP32[$0>>2]|0;
  $201 = ((($200)) + 20|0);
  HEAP32[$201>>2] = 126;
  $202 = ((($200)) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  FUNCTION_TABLE_vii[$203 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 55) {
  $220 = HEAP32[$0>>2]|0;
  $221 = ((($220)) + 20|0);
  HEAP32[$221>>2] = 126;
  $222 = ((($220)) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  FUNCTION_TABLE_vii[$223 & 255]($0,-1);
  HEAP32[$54>>2] = -1;
  return 1;
 }
 else if ((label|0) == 61) {
  return 1;
 }
 return (0)|0;
}
function _arith_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$ph = 0, $$062 = 0, $$lcssa65 = 0, $$pr = 0, $$pre = 0, $$pre$phi72Z2D = 0, $$pre70 = 0, $$pre71 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(32768);
 $7 = ((($3)) + 20|0);
 if ($6) {
  $8 = ((($0)) + 416|0);
  $9 = ((($0)) + 24|0);
  $10 = ((($3)) + 12|0);
  $$pre = HEAP32[$7>>2]|0;
  $12 = $$pre;
  while(1) {
   $11 = (($12) + -1)|0;
   HEAP32[$7>>2] = $11;
   $13 = ($12|0)<(1);
   if ($13) {
    $14 = HEAP32[$8>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = HEAP32[$9>>2]|0;
     $17 = ((($16)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = ((($16)) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       $24 = HEAP32[$0>>2]|0;
       $25 = ((($24)) + 20|0);
       HEAP32[$25>>2] = 24;
       $26 = HEAP32[$24>>2]|0;
       FUNCTION_TABLE_vi[$26 & 255]($0);
      }
     }
     $27 = HEAP32[$17>>2]|0;
     $28 = (($27) + -1)|0;
     HEAP32[$17>>2] = $28;
     $29 = HEAP32[$16>>2]|0;
     $30 = ((($29)) + 1|0);
     HEAP32[$16>>2] = $30;
     $31 = HEAP8[$29>>0]|0;
     $32 = $31&255;
     $33 = ($31<<24>>24)==(-1);
     L13: do {
      if ($33) {
       L14: while(1) {
        $34 = HEAP32[$9>>2]|0;
        $35 = ((($34)) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ($36|0)==(0);
        if ($37) {
         $38 = ((($34)) + 12|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = (FUNCTION_TABLE_ii[$39 & 127]($0)|0);
         $41 = ($40|0)==(0);
         if ($41) {
          $42 = HEAP32[$0>>2]|0;
          $43 = ((($42)) + 20|0);
          HEAP32[$43>>2] = 24;
          $44 = HEAP32[$42>>2]|0;
          FUNCTION_TABLE_vi[$44 & 255]($0);
         }
        }
        $45 = HEAP32[$35>>2]|0;
        $46 = (($45) + -1)|0;
        HEAP32[$35>>2] = $46;
        $47 = HEAP32[$34>>2]|0;
        $48 = ((($47)) + 1|0);
        HEAP32[$34>>2] = $48;
        $49 = HEAP8[$47>>0]|0;
        switch ($49<<24>>24) {
        case 0:  {
         $$0$ph = 255;
         break L13;
         break;
        }
        case -1:  {
         break;
        }
        default: {
         break L14;
        }
        }
       }
       $50 = $49&255;
       HEAP32[$8>>2] = $50;
       $$0$ph = 0;
      } else {
       $$0$ph = $32;
      }
     } while(0);
     $$pr = HEAP32[$7>>2]|0;
     $$0 = $$0$ph;$55 = $$pr;
    } else {
     $$0 = 0;$55 = $11;
    }
    $51 = HEAP32[$10>>2]|0;
    $52 = $51 << 8;
    $53 = $52 | $$0;
    HEAP32[$10>>2] = $53;
    $54 = (($55) + 8)|0;
    HEAP32[$7>>2] = $54;
    $56 = ($55|0)<(-8);
    if ($56) {
     $57 = (($55) + 9)|0;
     HEAP32[$7>>2] = $57;
     $58 = ($57|0)==(0);
     if ($58) {
      HEAP32[$4>>2] = 32768;
      $91 = 0;
     } else {
      $91 = $57;
     }
    } else {
     $91 = $54;
    }
   } else {
    $91 = $11;
   }
   $59 = HEAP32[$4>>2]|0;
   $60 = $59 << 1;
   HEAP32[$4>>2] = $60;
   $61 = ($60|0)<(32768);
   if ($61) {
    $12 = $91;
   } else {
    $$lcssa65 = $60;$$pre$phi72Z2D = $10;$71 = $91;
    break;
   }
  }
 } else {
  $$pre70 = HEAP32[$7>>2]|0;
  $$pre71 = ((($3)) + 12|0);
  $$lcssa65 = $5;$$pre$phi72Z2D = $$pre71;$71 = $$pre70;
 }
 $62 = HEAP8[$1>>0]|0;
 $63 = $62&255;
 $64 = $63 & 127;
 $65 = (1416 + ($64<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >> 8;
 $68 = $66 >> 16;
 $69 = (($$lcssa65) - ($68))|0;
 HEAP32[$4>>2] = $69;
 $70 = $69 << $71;
 $72 = HEAP32[$$pre$phi72Z2D>>2]|0;
 $73 = ($72|0)<($70|0);
 if (!($73)) {
  $74 = (($72) - ($70))|0;
  HEAP32[$$pre$phi72Z2D>>2] = $74;
  $75 = ($69|0)<($68|0);
  HEAP32[$4>>2] = $68;
  $76 = $63 & 128;
  if ($75) {
   $77 = $76 ^ $67;
   $78 = $77&255;
   HEAP8[$1>>0] = $78;
   $$062 = $63;
   $90 = $$062 >> 7;
   return ($90|0);
  } else {
   $79 = $76 ^ $66;
   $80 = $79&255;
   HEAP8[$1>>0] = $80;
   $81 = $63 ^ 128;
   $$062 = $81;
   $90 = $$062 >> 7;
   return ($90|0);
  }
 }
 $82 = ($69|0)<(32768);
 if (!($82)) {
  $$062 = $63;
  $90 = $$062 >> 7;
  return ($90|0);
 }
 $83 = ($69|0)<($68|0);
 $84 = $63 & 128;
 if ($83) {
  $85 = $84 ^ $66;
  $86 = $85&255;
  HEAP8[$1>>0] = $86;
  $87 = $63 ^ 128;
  $$062 = $87;
  $90 = $$062 >> 7;
  return ($90|0);
 } else {
  $88 = $84 ^ $67;
  $89 = $88&255;
  HEAP8[$1>>0] = $89;
  $$062 = $63;
  $90 = $$062 >> 7;
  return ($90|0);
 }
 return (0)|0;
}
function _jsimd_can_ycc_rgb() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_ycc_rgb565() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_ycc_rgb_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_ycc_rgb565_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_can_h2v2_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_h2v1_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_h2v2_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_h2v1_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_can_h2v2_fancy_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_h2v1_fancy_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_h2v2_fancy_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_h2v1_fancy_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_can_h2v2_merged_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_h2v1_merged_upsample() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_h2v2_merged_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_h2v1_merged_upsample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_can_idct_2x2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_idct_4x4() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_idct_2x2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_idct_4x4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_can_idct_islow() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_idct_ifast() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_can_idct_float() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _jsimd_idct_islow($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_idct_ifast($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jsimd_idct_float($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _jpeg_abort($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$5 & 255]($0,1);
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 20|0);
 if ($8) {
  HEAP32[$9>>2] = 100;
  return;
 } else {
  HEAP32[$9>>2] = 200;
  $10 = ((($0)) + 304|0);
  HEAP32[$10>>2] = 0;
  return;
 }
}
function _jpeg_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 255]($0);
 }
 HEAP32[$1>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 return;
}
function _jpeg_alloc_quant_table($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,0,132)|0);
 $5 = ((($4)) + 128|0);
 HEAP32[$5>>2] = 0;
 return ($4|0);
}
function _jpeg_alloc_huff_table($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,0,280)|0);
 $5 = ((($4)) + 276|0);
 HEAP32[$5>>2] = 0;
 return ($4|0);
}
function _jinit_d_coef_controller($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$05358 = 0, $$05457 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($0,1,120)|0);
 $6 = ((($0)) + 428|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$5>>2] = 120;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = 121;
 $8 = ((($5)) + 116|0);
 HEAP32[$8>>2] = 0;
 $9 = ($1|0)==(0);
 if ($9) {
  $43 = HEAP32[$2>>2]|0;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_iiii[$45 & 255]($0,1,1280)|0);
  $47 = ((($5)) + 32|0);
  HEAP32[$47>>2] = $46;
  $48 = ((($46)) + 128|0);
  $49 = ((($5)) + 36|0);
  HEAP32[$49>>2] = $48;
  $50 = ((($46)) + 256|0);
  $51 = ((($5)) + 40|0);
  HEAP32[$51>>2] = $50;
  $52 = ((($46)) + 384|0);
  $53 = ((($5)) + 44|0);
  HEAP32[$53>>2] = $52;
  $54 = ((($46)) + 512|0);
  $55 = ((($5)) + 48|0);
  HEAP32[$55>>2] = $54;
  $56 = ((($46)) + 640|0);
  $57 = ((($5)) + 52|0);
  HEAP32[$57>>2] = $56;
  $58 = ((($46)) + 768|0);
  $59 = ((($5)) + 56|0);
  HEAP32[$59>>2] = $58;
  $60 = ((($46)) + 896|0);
  $61 = ((($5)) + 60|0);
  HEAP32[$61>>2] = $60;
  $62 = ((($46)) + 1024|0);
  $63 = ((($5)) + 64|0);
  HEAP32[$63>>2] = $62;
  $64 = ((($46)) + 1152|0);
  $65 = ((($5)) + 68|0);
  HEAP32[$65>>2] = $64;
  $66 = ((($5)) + 4|0);
  HEAP32[$66>>2] = 124;
  $67 = ((($5)) + 12|0);
  HEAP32[$67>>2] = 125;
  $68 = ((($5)) + 16|0);
  HEAP32[$68>>2] = 0;
  $69 = HEAP32[$2>>2]|0;
  $70 = HEAP32[$69>>2]|0;
  $71 = (FUNCTION_TABLE_iiii[$70 & 255]($0,1,128)|0);
  $72 = ((($5)) + 72|0);
  HEAP32[$72>>2] = $71;
  return;
 }
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = ((($0)) + 216|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 220|0);
  $16 = ((($5)) + 76|0);
  $$05358 = 0;$$05457 = $14;
  while(1) {
   $17 = ((($$05457)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$15>>2]|0;
   $20 = ($19|0)==(0);
   $21 = ($18*3)|0;
   $$ = $20 ? $18 : $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($$05457)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($$05457)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_jround_up($26,$28)|0);
   $30 = ((($$05457)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$17>>2]|0;
   $33 = (_jround_up($31,$32)|0);
   $34 = (FUNCTION_TABLE_iiiiiii[$24 & 127]($0,1,1,$29,$33,$$)|0);
   $35 = (($16) + ($$05358<<2)|0);
   HEAP32[$35>>2] = $34;
   $36 = (($$05358) + 1)|0;
   $37 = ((($$05457)) + 84|0);
   $38 = HEAP32[$10>>2]|0;
   $39 = ($36|0)<($38|0);
   if ($39) {
    $$05358 = $36;$$05457 = $37;
   } else {
    $$pre$phiZ2D = $16;
    break;
   }
  }
 } else {
  $$pre = ((($5)) + 76|0);
  $$pre$phiZ2D = $$pre;
 }
 $40 = ((($5)) + 4|0);
 HEAP32[$40>>2] = 122;
 $41 = ((($5)) + 12|0);
 HEAP32[$41>>2] = 123;
 $42 = ((($5)) + 16|0);
 HEAP32[$42>>2] = $$pre$phiZ2D;
 $69 = HEAP32[$2>>2]|0;
 $70 = HEAP32[$69>>2]|0;
 $71 = (FUNCTION_TABLE_iiii[$70 & 255]($0,1,128)|0);
 $72 = ((($5)) + 72|0);
 HEAP32[$72>>2] = $71;
 return;
}
function _start_input_pass_353($0) {
 $0 = $0|0;
 var $$sink$i = 0, $$sink$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 148|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 428|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 328|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(1);
 if ($6) {
  $$sink$sink$i = 1;
 } else {
  $7 = ((($0)) + 320|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(1);
  $10 = ((($0)) + 332|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = ((($11)) + 72|0);
  $$sink$i = $9 ? $12 : $13;
  $14 = HEAP32[$$sink$i>>2]|0;
  $$sink$sink$i = $14;
 }
 $15 = ((($3)) + 28|0);
 HEAP32[$15>>2] = $$sink$sink$i;
 $16 = ((($3)) + 20|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($3)) + 24|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _start_output_pass($0) {
 $0 = $0|0;
 var $$05058$i = 0, $$05157$i = 0, $$05356$i = 0, $$059$i = 0, $$1$$4$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $decompress_data$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 428|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $85 = ((($0)) + 156|0);
  HEAP32[$85>>2] = 0;
  return;
 }
 $6 = ((($0)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 L4: do {
  if ($8) {
   label = 20;
  } else {
   $9 = ((($0)) + 220|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    label = 20;
   } else {
    $12 = ((($0)) + 160|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     label = 20;
    } else {
     $15 = ((($2)) + 116|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      $18 = ((($0)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$19>>2]|0;
      $21 = ((($0)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22*24)|0;
      $24 = (FUNCTION_TABLE_iiii[$20 & 255]($0,1,$23)|0);
      HEAP32[$15>>2] = $24;
      $$pre$phi$iZ2D = $21;$86 = $24;
     } else {
      $$pre$i = ((($0)) + 36|0);
      $$pre$phi$iZ2D = $$pre$i;$86 = $16;
     }
     $25 = HEAP32[$$pre$phi$iZ2D>>2]|0;
     $26 = ($25|0)>(0);
     if ($26) {
      $27 = ((($0)) + 216|0);
      $28 = HEAP32[$27>>2]|0;
      $$05058$i = 0;$$05157$i = $28;$$05356$i = 0;$$059$i = $86;
      while(1) {
       $29 = ((($$05157$i)) + 76|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0|0);
       if ($31) {
        label = 20;
        break L4;
       }
       $32 = HEAP16[$30>>1]|0;
       $33 = ($32<<16>>16)==(0);
       if ($33) {
        label = 20;
        break L4;
       }
       $34 = ((($30)) + 2|0);
       $35 = HEAP16[$34>>1]|0;
       $36 = ($35<<16>>16)==(0);
       if ($36) {
        label = 20;
        break L4;
       }
       $37 = ((($30)) + 16|0);
       $38 = HEAP16[$37>>1]|0;
       $39 = ($38<<16>>16)==(0);
       if ($39) {
        label = 20;
        break L4;
       }
       $40 = ((($30)) + 32|0);
       $41 = HEAP16[$40>>1]|0;
       $42 = ($41<<16>>16)==(0);
       if ($42) {
        label = 20;
        break L4;
       }
       $43 = ((($30)) + 18|0);
       $44 = HEAP16[$43>>1]|0;
       $45 = ($44<<16>>16)==(0);
       if ($45) {
        label = 20;
        break L4;
       }
       $46 = ((($30)) + 4|0);
       $47 = HEAP16[$46>>1]|0;
       $48 = ($47<<16>>16)==(0);
       if ($48) {
        label = 20;
        break L4;
       }
       $49 = HEAP32[$12>>2]|0;
       $50 = (($49) + ($$05356$i<<8)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)<(0);
       if ($52) {
        label = 20;
        break L4;
       }
       $53 = (((($49) + ($$05356$i<<8)|0)) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($$059$i)) + 4|0);
       HEAP32[$55>>2] = $54;
       $56 = HEAP32[$53>>2]|0;
       $57 = (((($49) + ($$05356$i<<8)|0)) + 8|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ((($$059$i)) + 8|0);
       HEAP32[$59>>2] = $58;
       $60 = HEAP32[$57>>2]|0;
       $61 = $60 | $56;
       $62 = (((($49) + ($$05356$i<<8)|0)) + 12|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ((($$059$i)) + 12|0);
       HEAP32[$64>>2] = $63;
       $65 = HEAP32[$62>>2]|0;
       $66 = $61 | $65;
       $67 = (((($49) + ($$05356$i<<8)|0)) + 16|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($$059$i)) + 16|0);
       HEAP32[$69>>2] = $68;
       $70 = HEAP32[$67>>2]|0;
       $71 = $66 | $70;
       $72 = (((($49) + ($$05356$i<<8)|0)) + 20|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ((($$059$i)) + 20|0);
       HEAP32[$74>>2] = $73;
       $75 = HEAP32[$72>>2]|0;
       $76 = $71 | $75;
       $77 = ($76|0)==(0);
       $$1$$4$i = $77 ? $$05058$i : 1;
       $78 = ((($$059$i)) + 24|0);
       $79 = (($$05356$i) + 1)|0;
       $80 = ((($$05157$i)) + 84|0);
       $81 = HEAP32[$$pre$phi$iZ2D>>2]|0;
       $82 = ($79|0)<($81|0);
       if ($82) {
        $$05058$i = $$1$$4$i;$$05157$i = $80;$$05356$i = $79;$$059$i = $78;
       } else {
        break;
       }
      }
      $83 = ($$1$$4$i|0)==(0);
      if ($83) {
       label = 20;
      } else {
       $decompress_data$sink = 126;
      }
     } else {
      label = 20;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $decompress_data$sink = 123;
 }
 $84 = ((($2)) + 12|0);
 HEAP32[$84>>2] = $decompress_data$sink;
 $85 = ((($0)) + 156|0);
 HEAP32[$85>>2] = 0;
 return;
}
function _consume_data($0) {
 $0 = $0|0;
 var $$071 = 0, $$07297 = 0, $$07386$us = 0, $$07483$us = 0, $$075102 = 0, $$07691 = 0, $$07895 = 0, $$084$us = 0, $$177$lcssa = 0, $$17785$us = 0, $$192 = 0, $$282$us = 0, $$pre = 0, $$pre110 = 0, $$pre111 = 0, $$sink$i = 0, $$sink$sink$i = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 428|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 328|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = ((($0)) + 4|0);
  $8 = ((($0)) + 148|0);
  $$075102 = 0;
  while(1) {
   $9 = (((($0)) + 332|0) + ($$075102<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$7>>2]|0;
   $12 = ((($11)) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($10)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (((($3)) + 76|0) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$8>>2]|0;
   $19 = ((($10)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = Math_imul($20, $18)|0;
   $22 = (FUNCTION_TABLE_iiiiii[$13 & 127]($0,$17,$21,$20,1)|0);
   $23 = (($1) + ($$075102<<2)|0);
   HEAP32[$23>>2] = $22;
   $24 = (($$075102) + 1)|0;
   $25 = HEAP32[$4>>2]|0;
   $26 = ($24|0)<($25|0);
   if ($26) {
    $$075102 = $24;
   } else {
    break;
   }
  }
 }
 $27 = ((($3)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($28|0)<($30|0);
 L6: do {
  if ($31) {
   $32 = ((($3)) + 20|0);
   $33 = ((($0)) + 348|0);
   $34 = ((($0)) + 444|0);
   $35 = ((($3)) + 32|0);
   $$pre = HEAP32[$32>>2]|0;
   $$pre110 = HEAP32[$33>>2]|0;
   $$07297 = $28;$36 = $$pre;$38 = $$pre110;$99 = $30;
   L8: while(1) {
    $37 = ($36>>>0)<($38>>>0);
    if ($37) {
     $$07895 = $36;
     while(1) {
      $39 = HEAP32[$4>>2]|0;
      $40 = ($39|0)>(0);
      if ($40) {
       $$07691 = 0;$$192 = 0;
       while(1) {
        $41 = (((($0)) + 332|0) + ($$192<<2)|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ((($42)) + 52|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = Math_imul($44, $$07895)|0;
        $46 = ((($42)) + 56|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)>(0);
        if ($48) {
         $49 = (($1) + ($$192<<2)|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($44|0)>(0);
         if ($51) {
          $$07386$us = 0;$$17785$us = $$07691;
          while(1) {
           $52 = (($$07386$us) + ($$07297))|0;
           $53 = (($50) + ($52<<2)|0);
           $54 = HEAP32[$53>>2]|0;
           $55 = (($54) + ($45<<7)|0);
           $$07483$us = 0;$$084$us = $55;$$282$us = $$17785$us;
           while(1) {
            $56 = ((($$084$us)) + 128|0);
            $57 = (($$282$us) + 1)|0;
            $58 = (((($3)) + 32|0) + ($$282$us<<2)|0);
            HEAP32[$58>>2] = $$084$us;
            $59 = (($$07483$us) + 1)|0;
            $60 = ($59|0)<($44|0);
            if ($60) {
             $$07483$us = $59;$$084$us = $56;$$282$us = $57;
            } else {
             break;
            }
           }
           $61 = (($$07386$us) + 1)|0;
           $62 = ($61|0)<($47|0);
           if ($62) {
            $$07386$us = $61;$$17785$us = $57;
           } else {
            $$177$lcssa = $57;
            break;
           }
          }
         } else {
          $$177$lcssa = $$07691;
         }
        } else {
         $$177$lcssa = $$07691;
        }
        $63 = (($$192) + 1)|0;
        $64 = ($63|0)<($39|0);
        if ($64) {
         $$07691 = $$177$lcssa;$$192 = $63;
        } else {
         break;
        }
       }
      }
      $65 = HEAP32[$34>>2]|0;
      $66 = ((($65)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_iii[$67 & 255]($0,$35)|0);
      $69 = ($68|0)==(0);
      if ($69) {
       break L8;
      }
      $70 = (($$07895) + 1)|0;
      $71 = HEAP32[$33>>2]|0;
      $72 = ($70>>>0)<($71>>>0);
      if ($72) {
       $$07895 = $70;
      } else {
       break;
      }
     }
     $$pre111 = HEAP32[$29>>2]|0;
     $100 = $71;$75 = $$pre111;
    } else {
     $100 = $38;$75 = $99;
    }
    HEAP32[$32>>2] = 0;
    $73 = (($$07297) + 1)|0;
    $74 = ($73|0)<($75|0);
    if ($74) {
     $$07297 = $73;$36 = 0;$38 = $100;$99 = $75;
    } else {
     break L6;
    }
   }
   HEAP32[$27>>2] = $$07297;
   HEAP32[$32>>2] = $$07895;
   $$071 = 0;
   STACKTOP = sp;return ($$071|0);
  }
 } while(0);
 $76 = ((($0)) + 148|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 1)|0;
 HEAP32[$76>>2] = $78;
 $79 = ((($0)) + 320|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($78>>>0)<($80>>>0);
 if (!($81)) {
  $95 = ((($0)) + 436|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($96)) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vi[$98 & 255]($0);
  $$071 = 4;
  STACKTOP = sp;return ($$071|0);
 }
 $82 = HEAP32[$2>>2]|0;
 $83 = HEAP32[$4>>2]|0;
 $84 = ($83|0)>(1);
 if ($84) {
  $$sink$sink$i = 1;
 } else {
  $85 = (($80) + -1)|0;
  $86 = ($78>>>0)<($85>>>0);
  $87 = ((($0)) + 332|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 12|0);
  $90 = ((($88)) + 72|0);
  $$sink$i = $86 ? $89 : $90;
  $91 = HEAP32[$$sink$i>>2]|0;
  $$sink$sink$i = $91;
 }
 $92 = ((($82)) + 28|0);
 HEAP32[$92>>2] = $$sink$sink$i;
 $93 = ((($82)) + 20|0);
 HEAP32[$93>>2] = 0;
 $94 = ((($82)) + 24|0);
 HEAP32[$94>>2] = 0;
 $$071 = 3;
 STACKTOP = sp;return ($$071|0);
}
function _decompress_data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$083103 = 0, $$08495 = 0, $$08597 = 0, $$08694 = 0, $$08793 = 0, $$088 = 0, $$08996 = 0, $$090100 = 0, $$91 = 0, $$pre = 0, $$pre106 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 428|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 320|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = ((($0)) + 144|0);
 $8 = ((($0)) + 152|0);
 $9 = ((($0)) + 436|0);
 $10 = ((($0)) + 148|0);
 $11 = ((($0)) + 156|0);
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = HEAP32[$8>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   $15 = ($12|0)==($13|0);
   if (!($15)) {
    break;
   }
   $16 = HEAP32[$10>>2]|0;
   $17 = HEAP32[$11>>2]|0;
   $18 = ($16>>>0)>($17>>>0);
   if ($18) {
    break;
   }
  }
  $19 = HEAP32[$9>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 127]($0)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$0 = 0;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  return ($$0|0);
 }
 $23 = ((($0)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 if ($25) {
  $26 = ((($0)) + 216|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($0)) + 4|0);
  $29 = ((($0)) + 448|0);
  $30 = ((($0)) + 420|0);
  $$083103 = $27;$$090100 = 0;
  while(1) {
   $31 = ((($$083103)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 32|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (((($3)) + 76|0) + ($$090100<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$11>>2]|0;
    $40 = ((($$083103)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = Math_imul($41, $39)|0;
    $43 = (FUNCTION_TABLE_iiiiii[$36 & 127]($0,$38,$42,$41,0)|0);
    $44 = HEAP32[$11>>2]|0;
    $45 = ($44>>>0)<($6>>>0);
    if ($45) {
     $46 = HEAP32[$40>>2]|0;
     $$088 = $46;
    } else {
     $47 = ((($$083103)) + 32|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP32[$40>>2]|0;
     $50 = (($48>>>0) % ($49>>>0))&-1;
     $51 = ($50|0)==(0);
     $$ = $51 ? $49 : $50;
     $$088 = $$;
    }
    $52 = HEAP32[$29>>2]|0;
    $53 = (((($52)) + 4|0) + ($$090100<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($$088|0)>(0);
    if ($55) {
     $56 = (($1) + ($$090100<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($$083103)) + 36|0);
     $$pre = HEAP32[$30>>2]|0;
     $$08597 = $57;$$08996 = 0;$60 = $$pre;
     while(1) {
      $59 = (((($60)) + 20|0) + ($$090100<<2)|0);
      $61 = HEAP32[$59>>2]|0;
      $62 = (((($60)) + 60|0) + ($$090100<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($61>>>0)>($63>>>0);
      if ($64) {
       $$pre106 = HEAP32[$58>>2]|0;
       $77 = $$pre106;$87 = $60;
      } else {
       $65 = (($43) + ($$08996<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + ($61<<7)|0);
       $$08495 = 0;$$08694 = $67;$$08793 = $61;
       while(1) {
        FUNCTION_TABLE_viiiii[$54 & 255]($0,$$083103,$$08694,$$08597,$$08495);
        $68 = ((($$08694)) + 128|0);
        $69 = HEAP32[$58>>2]|0;
        $70 = (($69) + ($$08495))|0;
        $71 = (($$08793) + 1)|0;
        $72 = HEAP32[$30>>2]|0;
        $73 = (((($72)) + 60|0) + ($$090100<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = ($71>>>0)>($74>>>0);
        if ($75) {
         $77 = $69;$87 = $72;
         break;
        } else {
         $$08495 = $70;$$08694 = $68;$$08793 = $71;
        }
       }
      }
      $76 = (($$08597) + ($77<<2)|0);
      $78 = (($$08996) + 1)|0;
      $exitcond = ($78|0)==($$088|0);
      if ($exitcond) {
       break;
      } else {
       $$08597 = $76;$$08996 = $78;$60 = $87;
      }
     }
    }
   }
   $79 = (($$090100) + 1)|0;
   $80 = ((($$083103)) + 84|0);
   $81 = HEAP32[$23>>2]|0;
   $82 = ($79|0)<($81|0);
   if ($82) {
    $$083103 = $80;$$090100 = $79;
   } else {
    break;
   }
  }
 }
 $83 = HEAP32[$11>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[$11>>2] = $84;
 $85 = HEAP32[$4>>2]|0;
 $86 = ($84>>>0)<($85>>>0);
 $$91 = $86 ? 3 : 4;
 $$0 = $$91;
 return ($$0|0);
}
function _dummy_consume_data($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _decompress_onepass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0104128 = 0, $$0105118$us = 0, $$0106126 = 0, $$0107120$us = 0, $$0108125 = 0, $$0109130 = 0, $$0110119 = 0, $$0110119$us = 0, $$0111117$us = 0, $$1121 = 0, $$1121$us = 0, $$2 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre139 = 0, $$pre140 = 0, $$pre141 = 0, $$pre142 = 0, $$pre143 = 0;
 var $$pre144 = 0, $$sink = 0, $$sink$i = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 428|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 348|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = ((($0)) + 320|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = ((($3)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)<($13|0);
 do {
  if ($14) {
   $15 = ((($3)) + 20|0);
   $16 = ((($3)) + 32|0);
   $17 = ((($0)) + 356|0);
   $18 = ((($0)) + 444|0);
   $19 = ((($0)) + 420|0);
   $20 = ((($0)) + 328|0);
   $21 = ((($0)) + 448|0);
   $22 = ((($0)) + 148|0);
   $$pre = HEAP32[$15>>2]|0;
   $$0109130 = $11;$131 = $13;$23 = $$pre;
   L3: while(1) {
    $24 = ($23>>>0)>($6>>>0);
    if ($24) {
     $105 = $131;
    } else {
     $$0104128 = $23;
     while(1) {
      $25 = HEAP32[$16>>2]|0;
      $26 = HEAP32[$17>>2]|0;
      $27 = $26 << 7;
      _jzero_far($25,$27);
      $28 = HEAP32[$18>>2]|0;
      $29 = ((($28)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (FUNCTION_TABLE_iii[$30 & 255]($0,$16)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       break L3;
      }
      $33 = HEAP32[$19>>2]|0;
      $34 = ((($33)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($$0104128>>>0)<($35>>>0);
      if (!($36)) {
       $37 = ((($33)) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($$0104128>>>0)>($38>>>0);
       if (!($39)) {
        $40 = HEAP32[$20>>2]|0;
        $41 = ($40|0)>(0);
        if ($41) {
         $42 = ($$0104128>>>0)<($6>>>0);
         $$0106126 = 0;$$0108125 = 0;$132 = $40;
         while(1) {
          $43 = (((($0)) + 332|0) + ($$0108125<<2)|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ((($44)) + 48|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = ($46|0)==(0);
          L15: do {
           if ($47) {
            $48 = ((($44)) + 60|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (($49) + ($$0106126))|0;
            $$2 = $50;$100 = $132;
           } else {
            $51 = HEAP32[$21>>2]|0;
            $52 = ((($44)) + 4|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = (((($51)) + 4|0) + ($53<<2)|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = ((($44)) + 68|0);
            $57 = ((($44)) + 52|0);
            $$sink = $42 ? $57 : $56;
            $58 = HEAP32[$$sink>>2]|0;
            $59 = ((($44)) + 36|0);
            $60 = HEAP32[$19>>2]|0;
            $61 = ((($60)) + 12|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = (($$0104128) - ($62))|0;
            $64 = ((($44)) + 64|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = Math_imul($63, $65)|0;
            $67 = ((($44)) + 56|0);
            $68 = HEAP32[$67>>2]|0;
            $69 = ($68|0)>(0);
            if ($69) {
             $70 = HEAP32[$59>>2]|0;
             $71 = ((($44)) + 72|0);
             $72 = ($58|0)>(0);
             if (!($72)) {
              $$pre139 = HEAP32[$57>>2]|0;
              $$0110119 = 0;$$1121 = $$0106126;
              while(1) {
               $95 = (($$pre139) + ($$1121))|0;
               $96 = (($$0110119) + 1)|0;
               $97 = ($96|0)<($68|0);
               if ($97) {
                $$0110119 = $96;$$1121 = $95;
               } else {
                $$2 = $95;$100 = $132;
                break L15;
               }
              }
             }
             $73 = (($1) + ($53<<2)|0);
             $74 = HEAP32[$73>>2]|0;
             $75 = Math_imul($70, $$0109130)|0;
             $76 = (($74) + ($75<<2)|0);
             $$0107120$us = $76;$$0110119$us = 0;$$1121$us = $$0106126;$133 = $68;$134 = $70;
             while(1) {
              $77 = HEAP32[$22>>2]|0;
              $78 = ($77>>>0)<($9>>>0);
              if ($78) {
               $$0105118$us = $66;$$0111117$us = 0;
               label = 21;
              } else {
               $79 = (($$0110119$us) + ($$0109130))|0;
               $80 = HEAP32[$71>>2]|0;
               $81 = ($79|0)<($80|0);
               if ($81) {
                $$0105118$us = $66;$$0111117$us = 0;
                label = 21;
               } else {
                $85 = $134;$88 = $133;
               }
              }
              if ((label|0) == 21) {
               while(1) {
                label = 0;
                $89 = (($$0111117$us) + ($$1121$us))|0;
                $90 = (((($3)) + 32|0) + ($89<<2)|0);
                $91 = HEAP32[$90>>2]|0;
                FUNCTION_TABLE_viiiii[$55 & 255]($0,$44,$91,$$0107120$us,$$0105118$us);
                $92 = HEAP32[$59>>2]|0;
                $93 = (($92) + ($$0105118$us))|0;
                $94 = (($$0111117$us) + 1)|0;
                $exitcond = ($94|0)==($58|0);
                if ($exitcond) {
                 break;
                } else {
                 $$0105118$us = $93;$$0111117$us = $94;
                 label = 21;
                }
               }
               $$pre140 = HEAP32[$67>>2]|0;
               $85 = $92;$88 = $$pre140;
              }
              $82 = HEAP32[$57>>2]|0;
              $83 = (($82) + ($$1121$us))|0;
              $84 = (($$0107120$us) + ($85<<2)|0);
              $86 = (($$0110119$us) + 1)|0;
              $87 = ($86|0)<($88|0);
              if ($87) {
               $$0107120$us = $84;$$0110119$us = $86;$$1121$us = $83;$133 = $88;$134 = $85;
              } else {
               break;
              }
             }
             $$pre141 = HEAP32[$20>>2]|0;
             $$2 = $83;$100 = $$pre141;
            } else {
             $$2 = $$0106126;$100 = $132;
            }
           }
          } while(0);
          $98 = (($$0108125) + 1)|0;
          $99 = ($98|0)<($100|0);
          if ($99) {
           $$0106126 = $$2;$$0108125 = $98;$132 = $100;
          } else {
           break;
          }
         }
        }
       }
      }
      $101 = (($$0104128) + 1)|0;
      $102 = ($101>>>0)>($6>>>0);
      if ($102) {
       break;
      } else {
       $$0104128 = $101;
      }
     }
     $$pre142 = HEAP32[$12>>2]|0;
     $105 = $$pre142;
    }
    HEAP32[$15>>2] = 0;
    $103 = (($$0109130) + 1)|0;
    $104 = ($103|0)<($105|0);
    if ($104) {
     $$0109130 = $103;$131 = $105;$23 = 0;
    } else {
     label = 28;
     break;
    }
   }
   if ((label|0) == 28) {
    $$pre143 = HEAP32[$7>>2]|0;
    $$pre$phiZ2D = $22;$112 = $$pre143;
    break;
   }
   HEAP32[$10>>2] = $$0109130;
   HEAP32[$15>>2] = $$0104128;
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre144 = ((($0)) + 148|0);
   $$pre$phiZ2D = $$pre144;$112 = $8;
  }
 } while(0);
 $106 = ((($0)) + 156|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + 1)|0;
 HEAP32[$106>>2] = $108;
 $109 = HEAP32[$$pre$phiZ2D>>2]|0;
 $110 = (($109) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $110;
 $111 = ($110>>>0)<($112>>>0);
 if (!($111)) {
  $127 = ((($0)) + 436|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  FUNCTION_TABLE_vi[$130 & 255]($0);
  $$0 = 4;
  return ($$0|0);
 }
 $113 = HEAP32[$2>>2]|0;
 $114 = ((($0)) + 328|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)>(1);
 if ($116) {
  $$sink$sink$i = 1;
 } else {
  $117 = (($112) + -1)|0;
  $118 = ($110>>>0)<($117>>>0);
  $119 = ((($0)) + 332|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($120)) + 12|0);
  $122 = ((($120)) + 72|0);
  $$sink$i = $118 ? $121 : $122;
  $123 = HEAP32[$$sink$i>>2]|0;
  $$sink$sink$i = $123;
 }
 $124 = ((($113)) + 28|0);
 HEAP32[$124>>2] = $$sink$sink$i;
 $125 = ((($113)) + 20|0);
 HEAP32[$125>>2] = 0;
 $126 = ((($113)) + 24|0);
 HEAP32[$126>>2] = 0;
 $$0 = 3;
 return ($$0|0);
}
function _decompress_smooth_data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0304 = 0, $$0308361 = 0, $$0309360 = 0, $$0309360$phi = 0, $$0312359 = 0, $$0313358 = 0, $$0313358$phi = 0, $$0316357 = 0, $$0317356 = 0, $$0317356$phi = 0, $$0318355 = 0, $$0319367 = 0, $$0320363 = 0, $$0323 = 0, $$0324 = 0, $$0325354 = 0, $$0326 = 0, $$0328 = 0, $$0330 = 0, $$0331 = 0;
 var $$0332362 = 0, $$0333366 = 0, $$0334351 = 0, $$1 = 0, $$1307 = 0, $$1311 = 0, $$1315 = 0, $$1322 = 0, $$1327353 = 0, $$1329352 = 0, $$3 = 0, $$335 = 0, $$338 = 0, $$338$ = 0, $$339 = 0, $$339$ = 0, $$340 = 0, $$340$ = 0, $$341 = 0, $$341$ = 0;
 var $$342 = 0, $$342$ = 0, $$343 = 0, $$343$ = 0, $$344 = 0, $$344$ = 0, $$345 = 0, $$345$ = 0, $$346 = 0, $$346$ = 0, $$347 = 0, $$347$ = 0, $$348 = 0, $$5 = 0, $$7 = 0, $$9 = 0, $$pre = 0, $$pre372 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond337 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 428|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 320|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = ((($3)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 144|0);
 $10 = ((($0)) + 152|0);
 $11 = ((($0)) + 436|0);
 $12 = ((($0)) + 400|0);
 $13 = ((($0)) + 148|0);
 $14 = ((($0)) + 156|0);
 while(1) {
  $15 = HEAP32[$9>>2]|0;
  $16 = HEAP32[$10>>2]|0;
  $17 = ($15|0)>($16|0);
  if ($17) {
   break;
  }
  $18 = HEAP32[$11>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   break;
  }
  $22 = ($15|0)==($16|0);
  if ($22) {
   $23 = HEAP32[$12>>2]|0;
   $24 = ($23|0)==(0);
   $25 = $24&1;
   $26 = HEAP32[$13>>2]|0;
   $27 = HEAP32[$14>>2]|0;
   $28 = (($27) + ($25))|0;
   $29 = ($26>>>0)>($28>>>0);
   if ($29) {
    break;
   }
  }
  $30 = HEAP32[$18>>2]|0;
  $31 = (FUNCTION_TABLE_ii[$30 & 127]($0)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $$0304 = 0;
   label = 60;
   break;
  }
 }
 if ((label|0) == 60) {
  return ($$0304|0);
 }
 $33 = ((($0)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = ((($0)) + 216|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($0)) + 4|0);
  $39 = ((($3)) + 116|0);
  $40 = ((($0)) + 448|0);
  $41 = ((($0)) + 420|0);
  $42 = ((($8)) + 4|0);
  $43 = ((($8)) + 18|0);
  $44 = ((($8)) + 32|0);
  $45 = ((($8)) + 16|0);
  $46 = ((($8)) + 2|0);
  $$0319367 = 0;$$0333366 = $37;
  while(1) {
   $47 = ((($$0333366)) + 48|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   if (!($49)) {
    $50 = HEAP32[$14>>2]|0;
    $51 = ($50>>>0)<($6>>>0);
    if ($51) {
     $52 = ((($$0333366)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53 << 1;
     $$0323 = $54;$$0330 = 0;$$1322 = $53;$64 = $53;
    } else {
     $55 = ((($$0333366)) + 32|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($$0333366)) + 12|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($56>>>0) % ($58>>>0))&-1;
     $60 = ($59|0)==(0);
     $$335 = $60 ? $58 : $59;
     $$0323 = $$335;$$0330 = 1;$$1322 = $$335;$64 = $58;
    }
    $61 = ($50|0)==(0);
    if ($61) {
     $75 = HEAP32[$38>>2]|0;
     $76 = ((($75)) + 32|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (((($3)) + 76|0) + ($$0319367<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (FUNCTION_TABLE_iiiiii[$77 & 127]($0,$79,0,$$0323,0)|0);
     $$0324 = $80;$$0331 = 1;
    } else {
     $62 = ((($$0333366)) + 12|0);
     $63 = (($64) + ($$0323))|0;
     $65 = HEAP32[$38>>2]|0;
     $66 = ((($65)) + 32|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (((($3)) + 76|0) + ($$0319367<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($50) + -1)|0;
     $71 = Math_imul($64, $70)|0;
     $72 = (FUNCTION_TABLE_iiiiii[$67 & 127]($0,$69,$71,$63,0)|0);
     $73 = HEAP32[$62>>2]|0;
     $74 = (($72) + ($73<<2)|0);
     $$0324 = $74;$$0331 = 0;
    }
    $81 = HEAP32[$39>>2]|0;
    $82 = ($$0319367*6)|0;
    $83 = (($81) + ($82<<2)|0);
    $84 = ((($$0333366)) + 76|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP16[$85>>1]|0;
    $87 = $86&65535;
    $88 = ((($85)) + 2|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = ((($85)) + 16|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = $92&65535;
    $94 = ((($85)) + 32|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = ((($85)) + 18|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = ((($85)) + 4|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&65535;
    $103 = HEAP32[$40>>2]|0;
    $104 = (((($103)) + 4|0) + ($$0319367<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($$1322|0)>(0);
    if ($106) {
     $107 = (($1) + ($$0319367<<2)|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($$0331|0)!=(0);
     $110 = ($$0330|0)!=(0);
     $111 = (($$1322) + -1)|0;
     $112 = ((($$0333366)) + 28|0);
     $113 = ((($$0333366)) + 36|0);
     $114 = ((($83)) + 4|0);
     $115 = ((($83)) + 8|0);
     $116 = ((($83)) + 12|0);
     $117 = ((($83)) + 16|0);
     $118 = ((($83)) + 20|0);
     $119 = ($87*9)|0;
     $120 = $102 << 7;
     $121 = $102 << 8;
     $122 = ($87*5)|0;
     $123 = $99 << 7;
     $124 = $99 << 8;
     $125 = $96 << 7;
     $126 = $96 << 8;
     $127 = ($87*36)|0;
     $128 = $93 << 7;
     $129 = $93 << 8;
     $130 = $90 << 7;
     $131 = $90 << 8;
     $$pre = HEAP32[$41>>2]|0;
     $$0320363 = 0;$$0332362 = $108;$135 = $$pre;
     while(1) {
      $132 = (($$0324) + ($$0320363<<2)|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (((($135)) + 20|0) + ($$0319367<<2)|0);
      $136 = HEAP32[$134>>2]|0;
      $137 = (($133) + ($136<<7)|0);
      $138 = ($$0320363|0)==(0);
      $or$cond = $109 & $138;
      if ($or$cond) {
       $$0326 = $137;
      } else {
       $139 = (($$0320363) + -1)|0;
       $140 = (($$0324) + ($139<<2)|0);
       $141 = HEAP32[$140>>2]|0;
       $$0326 = $141;
      }
      $142 = ($$0320363|0)==($111|0);
      $or$cond337 = $110 & $142;
      if ($or$cond337) {
       $$0328 = $137;
      } else {
       $143 = (($$0320363) + 1)|0;
       $144 = (($$0324) + ($143<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $$0328 = $145;
      }
      $146 = HEAP16[$$0326>>1]|0;
      $147 = $146 << 16 >> 16;
      $148 = HEAP16[$137>>1]|0;
      $149 = $148 << 16 >> 16;
      $150 = HEAP16[$$0328>>1]|0;
      $151 = $150 << 16 >> 16;
      $152 = HEAP32[$112>>2]|0;
      $153 = (($152) + -1)|0;
      $154 = (((($135)) + 60|0) + ($$0319367<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($136>>>0)>($155>>>0);
      if ($156) {
       $$pre372 = HEAP32[$113>>2]|0;
       $289 = $$pre372;$299 = $135;
      } else {
       $$0308361 = $151;$$0309360 = $151;$$0312359 = $149;$$0313358 = $149;$$0316357 = $147;$$0317356 = $147;$$0318355 = $136;$$0325354 = $137;$$0334351 = 0;$$1327353 = $$0326;$$1329352 = $$0328;
       while(1) {
        _jcopy_block_row($$0325354,$8,1);
        $157 = ($$0318355>>>0)<($153>>>0);
        if ($157) {
         $158 = ((($$1327353)) + 128|0);
         $159 = HEAP16[$158>>1]|0;
         $160 = $159 << 16 >> 16;
         $161 = ((($$0325354)) + 128|0);
         $162 = HEAP16[$161>>1]|0;
         $163 = $162 << 16 >> 16;
         $164 = ((($$1329352)) + 128|0);
         $165 = HEAP16[$164>>1]|0;
         $166 = $165 << 16 >> 16;
         $$1307 = $166;$$1311 = $163;$$1315 = $160;
        } else {
         $$1307 = $$0308361;$$1311 = $$0312359;$$1315 = $$0316357;
        }
        $167 = HEAP32[$114>>2]|0;
        $168 = ($167|0)==(0);
        if (!($168)) {
         $169 = HEAP16[$46>>1]|0;
         $170 = ($169<<16>>16)==(0);
         if ($170) {
          $171 = (($$0313358) - ($$1311))|0;
          $172 = Math_imul($127, $171)|0;
          $173 = ($172|0)>(-1);
          if ($173) {
           $174 = (($172) + ($130))|0;
           $175 = (($174|0) / ($131|0))&-1;
           $176 = ($167|0)>(0);
           $177 = 1 << $167;
           $178 = ($175|0)<($177|0);
           $179 = (($177) + -1)|0;
           $$338 = $178 ? $175 : $179;
           $$338$ = $176 ? $$338 : $175;
           $$1 = $$338$;
          } else {
           $180 = (($130) - ($172))|0;
           $181 = (($180|0) / ($131|0))&-1;
           $182 = ($167|0)>(0);
           $183 = 1 << $167;
           $184 = ($181|0)<($183|0);
           $185 = (($183) + -1)|0;
           $$339 = $184 ? $181 : $185;
           $$339$ = $182 ? $$339 : $181;
           $186 = (0 - ($$339$))|0;
           $$1 = $186;
          }
          $187 = $$1&65535;
          HEAP16[$46>>1] = $187;
         }
        }
        $188 = HEAP32[$115>>2]|0;
        $189 = ($188|0)==(0);
        if (!($189)) {
         $190 = HEAP16[$45>>1]|0;
         $191 = ($190<<16>>16)==(0);
         if ($191) {
          $192 = (($$0316357) - ($$0308361))|0;
          $193 = Math_imul($127, $192)|0;
          $194 = ($193|0)>(-1);
          if ($194) {
           $195 = (($193) + ($128))|0;
           $196 = (($195|0) / ($129|0))&-1;
           $197 = ($188|0)>(0);
           $198 = 1 << $188;
           $199 = ($196|0)<($198|0);
           $200 = (($198) + -1)|0;
           $$340 = $199 ? $196 : $200;
           $$340$ = $197 ? $$340 : $196;
           $$3 = $$340$;
          } else {
           $201 = (($128) - ($193))|0;
           $202 = (($201|0) / ($129|0))&-1;
           $203 = ($188|0)>(0);
           $204 = 1 << $188;
           $205 = ($202|0)<($204|0);
           $206 = (($204) + -1)|0;
           $$341 = $205 ? $202 : $206;
           $$341$ = $203 ? $$341 : $202;
           $207 = (0 - ($$341$))|0;
           $$3 = $207;
          }
          $208 = $$3&65535;
          HEAP16[$45>>1] = $208;
         }
        }
        $209 = HEAP32[$116>>2]|0;
        $210 = ($209|0)==(0);
        if (!($210)) {
         $211 = HEAP16[$44>>1]|0;
         $212 = ($211<<16>>16)==(0);
         if ($212) {
          $213 = $$0312359 << 1;
          $214 = (($$0316357) - ($213))|0;
          $215 = (($214) + ($$0308361))|0;
          $216 = Math_imul($119, $215)|0;
          $217 = ($216|0)>(-1);
          if ($217) {
           $218 = (($216) + ($125))|0;
           $219 = (($218|0) / ($126|0))&-1;
           $220 = ($209|0)>(0);
           $221 = 1 << $209;
           $222 = ($219|0)<($221|0);
           $223 = (($221) + -1)|0;
           $$342 = $222 ? $219 : $223;
           $$342$ = $220 ? $$342 : $219;
           $$5 = $$342$;
          } else {
           $224 = (($125) - ($216))|0;
           $225 = (($224|0) / ($126|0))&-1;
           $226 = ($209|0)>(0);
           $227 = 1 << $209;
           $228 = ($225|0)<($227|0);
           $229 = (($227) + -1)|0;
           $$343 = $228 ? $225 : $229;
           $$343$ = $226 ? $$343 : $225;
           $230 = (0 - ($$343$))|0;
           $$5 = $230;
          }
          $231 = $$5&65535;
          HEAP16[$44>>1] = $231;
         }
        }
        $232 = HEAP32[$117>>2]|0;
        $233 = ($232|0)==(0);
        do {
         if (!($233)) {
          $234 = HEAP16[$43>>1]|0;
          $235 = ($234<<16>>16)==(0);
          if (!($235)) {
           break;
          }
          $236 = (($$0317356) - ($$0309360))|0;
          $237 = (($236) - ($$1315))|0;
          $238 = (($237) + ($$1307))|0;
          $239 = Math_imul($122, $238)|0;
          $240 = ($239|0)>(-1);
          if ($240) {
           $241 = (($239) + ($123))|0;
           $242 = (($241|0) / ($124|0))&-1;
           $243 = ($232|0)>(0);
           $244 = 1 << $232;
           $245 = ($242|0)<($244|0);
           $246 = (($244) + -1)|0;
           $$344 = $245 ? $242 : $246;
           $$344$ = $243 ? $$344 : $242;
           $$7 = $$344$;
          } else {
           $247 = (($123) - ($239))|0;
           $248 = (($247|0) / ($124|0))&-1;
           $249 = ($232|0)>(0);
           $250 = 1 << $232;
           $251 = ($248|0)<($250|0);
           $252 = (($250) + -1)|0;
           $$345 = $251 ? $248 : $252;
           $$345$ = $249 ? $$345 : $248;
           $253 = (0 - ($$345$))|0;
           $$7 = $253;
          }
          $254 = $$7&65535;
          HEAP16[$43>>1] = $254;
         }
        } while(0);
        $255 = HEAP32[$118>>2]|0;
        $256 = ($255|0)==(0);
        do {
         if (!($256)) {
          $257 = HEAP16[$42>>1]|0;
          $258 = ($257<<16>>16)==(0);
          if (!($258)) {
           break;
          }
          $259 = $$0312359 << 1;
          $260 = (($$0313358) - ($259))|0;
          $261 = (($260) + ($$1311))|0;
          $262 = Math_imul($119, $261)|0;
          $263 = ($262|0)>(-1);
          if ($263) {
           $264 = (($262) + ($120))|0;
           $265 = (($264|0) / ($121|0))&-1;
           $266 = ($255|0)>(0);
           $267 = 1 << $255;
           $268 = ($265|0)<($267|0);
           $269 = (($267) + -1)|0;
           $$346 = $268 ? $265 : $269;
           $$346$ = $266 ? $$346 : $265;
           $$9 = $$346$;
          } else {
           $270 = (($120) - ($262))|0;
           $271 = (($270|0) / ($121|0))&-1;
           $272 = ($255|0)>(0);
           $273 = 1 << $255;
           $274 = ($271|0)<($273|0);
           $275 = (($273) + -1)|0;
           $$347 = $274 ? $271 : $275;
           $$347$ = $272 ? $$347 : $271;
           $276 = (0 - ($$347$))|0;
           $$9 = $276;
          }
          $277 = $$9&65535;
          HEAP16[$42>>1] = $277;
         }
        } while(0);
        FUNCTION_TABLE_viiiii[$105 & 255]($0,$$0333366,$8,$$0332362,$$0334351);
        $278 = ((($$0325354)) + 128|0);
        $279 = ((($$1327353)) + 128|0);
        $280 = ((($$1329352)) + 128|0);
        $281 = HEAP32[$113>>2]|0;
        $282 = (($281) + ($$0334351))|0;
        $283 = (($$0318355) + 1)|0;
        $284 = HEAP32[$41>>2]|0;
        $285 = (((($284)) + 60|0) + ($$0319367<<2)|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ($283>>>0)>($286>>>0);
        if ($287) {
         $289 = $281;$299 = $284;
         break;
        } else {
         $$0317356$phi = $$0316357;$$0313358$phi = $$0312359;$$0309360$phi = $$0308361;$$0308361 = $$1307;$$0312359 = $$1311;$$0316357 = $$1315;$$0318355 = $283;$$0325354 = $278;$$0334351 = $282;$$1327353 = $279;$$1329352 = $280;$$0317356 = $$0317356$phi;$$0313358 = $$0313358$phi;$$0309360 = $$0309360$phi;
        }
       }
      }
      $288 = (($$0332362) + ($289<<2)|0);
      $290 = (($$0320363) + 1)|0;
      $exitcond = ($290|0)==($$1322|0);
      if ($exitcond) {
       break;
      } else {
       $$0320363 = $290;$$0332362 = $288;$135 = $299;
      }
     }
    }
   }
   $291 = (($$0319367) + 1)|0;
   $292 = ((($$0333366)) + 84|0);
   $293 = HEAP32[$33>>2]|0;
   $294 = ($291|0)<($293|0);
   if ($294) {
    $$0319367 = $291;$$0333366 = $292;
   } else {
    break;
   }
  }
 }
 $295 = HEAP32[$14>>2]|0;
 $296 = (($295) + 1)|0;
 HEAP32[$14>>2] = $296;
 $297 = HEAP32[$4>>2]|0;
 $298 = ($296>>>0)<($297>>>0);
 $$348 = $298 ? 3 : 4;
 $$0304 = $$348;
 return ($$0304|0);
}
function _jinit_color_deconverter($0) {
 $0 = $0|0;
 var $$0121 = 0, $$019$i = 0, $$03233$i = 0, $$03233$i103 = 0, $$03233$i108 = 0, $$03233$i113 = 0, $$034$i = 0, $$034$i102 = 0, $$034$i107 = 0, $$034$i112 = 0, $$sink2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i100 = 0, $exitcond$i104 = 0;
 var $exitcond$i109 = 0, $exitcond$i114 = 0, $rgb_rgb_convert$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,28)|0);
 $5 = ((($0)) + 456|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 127;
 $6 = ((($0)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 1:  {
  $8 = ((($0)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 20|0);
   HEAP32[$12>>2] = 10;
   $13 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$13 & 255]($0);
  }
  break;
 }
 case 3: case 2:  {
  $14 = ((($0)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(3);
  if (!($16)) {
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 20|0);
   HEAP32[$18>>2] = 10;
   $19 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vi[$19 & 255]($0);
  }
  break;
 }
 case 5: case 4:  {
  $20 = ((($0)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(4);
  if (!($22)) {
   $23 = HEAP32[$0>>2]|0;
   $24 = ((($23)) + 20|0);
   HEAP32[$24>>2] = 10;
   $25 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vi[$25 & 255]($0);
  }
  break;
 }
 default: {
  $26 = ((($0)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<(1);
  if ($28) {
   $29 = HEAP32[$0>>2]|0;
   $30 = ((($29)) + 20|0);
   HEAP32[$30>>2] = 10;
   $31 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vi[$31 & 255]($0);
  }
 }
 }
 $32 = ((($0)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 L11: do {
  switch ($33|0) {
  case 1:  {
   $34 = ((($0)) + 120|0);
   HEAP32[$34>>2] = 1;
   $35 = HEAP32[$6>>2]|0;
   switch ($35|0) {
   case 3: case 1:  {
    $36 = ((($4)) + 4|0);
    HEAP32[$36>>2] = 128;
    $37 = ((($0)) + 36|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)>(1);
    if (!($39)) {
     break L11;
    }
    $40 = ((($0)) + 216|0);
    $41 = HEAP32[$40>>2]|0;
    $$0121 = 1;
    while(1) {
     $42 = (((($41) + (($$0121*84)|0)|0)) + 48|0);
     HEAP32[$42>>2] = 0;
     $43 = (($$0121) + 1)|0;
     $44 = ($43|0)<($38|0);
     if ($44) {
      $$0121 = $43;
     } else {
      break;
     }
    }
    break;
   }
   case 2:  {
    $45 = ((($4)) + 4|0);
    HEAP32[$45>>2] = 129;
    $46 = HEAP32[$5>>2]|0;
    $47 = HEAP32[$1>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = (FUNCTION_TABLE_iiii[$48 & 255]($0,1,3072)|0);
    $50 = ((($46)) + 24|0);
    HEAP32[$50>>2] = $49;
    $$019$i = 0;
    while(1) {
     $51 = ($$019$i*19595)|0;
     $52 = (($49) + ($$019$i<<2)|0);
     HEAP32[$52>>2] = $51;
     $53 = ($$019$i*38470)|0;
     $54 = (($$019$i) + 256)|0;
     $55 = (($49) + ($54<<2)|0);
     HEAP32[$55>>2] = $53;
     $56 = ($$019$i*7471)|0;
     $57 = (($56) + 32768)|0;
     $58 = (($$019$i) + 512)|0;
     $59 = (($49) + ($58<<2)|0);
     HEAP32[$59>>2] = $57;
     $60 = (($$019$i) + 1)|0;
     $exitcond$i = ($60|0)==(256);
     if ($exitcond$i) {
      break;
     } else {
      $$019$i = $60;
     }
    }
    break;
   }
   default: {
    $61 = HEAP32[$0>>2]|0;
    $62 = ((($61)) + 20|0);
    HEAP32[$62>>2] = 27;
    $63 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vi[$63 & 255]($0);
    break L11;
   }
   }
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 2:  {
   $64 = (1332 + ($33<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($0)) + 120|0);
   HEAP32[$66>>2] = $65;
   $67 = HEAP32[$6>>2]|0;
   switch ($67|0) {
   case 3:  {
    $68 = (_jsimd_can_ycc_rgb()|0);
    $69 = ($68|0)==(0);
    $70 = ((($4)) + 4|0);
    if (!($69)) {
     HEAP32[$70>>2] = 130;
     break L11;
    }
    HEAP32[$70>>2] = 131;
    $71 = HEAP32[$5>>2]|0;
    $72 = HEAP32[$1>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_iiii[$73 & 255]($0,1,1024)|0);
    $75 = ((($71)) + 8|0);
    HEAP32[$75>>2] = $74;
    $76 = HEAP32[$1>>2]|0;
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_iiii[$77 & 255]($0,1,1024)|0);
    $79 = ((($71)) + 12|0);
    HEAP32[$79>>2] = $78;
    $80 = HEAP32[$1>>2]|0;
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_iiii[$81 & 255]($0,1,1024)|0);
    $83 = ((($71)) + 16|0);
    HEAP32[$83>>2] = $82;
    $84 = HEAP32[$1>>2]|0;
    $85 = HEAP32[$84>>2]|0;
    $86 = (FUNCTION_TABLE_iiii[$85 & 255]($0,1,1024)|0);
    $87 = ((($71)) + 20|0);
    HEAP32[$87>>2] = $86;
    $88 = HEAP32[$75>>2]|0;
    $89 = HEAP32[$79>>2]|0;
    $90 = HEAP32[$83>>2]|0;
    $$03233$i = 0;$$034$i = -128;
    while(1) {
     $91 = ($$034$i*91881)|0;
     $92 = (($91) + 32768)|0;
     $93 = $92 >> 16;
     $94 = (($88) + ($$03233$i<<2)|0);
     HEAP32[$94>>2] = $93;
     $95 = ($$034$i*116130)|0;
     $96 = (($95) + 32768)|0;
     $97 = $96 >> 16;
     $98 = (($89) + ($$03233$i<<2)|0);
     HEAP32[$98>>2] = $97;
     $99 = Math_imul($$034$i, -46802)|0;
     $100 = (($90) + ($$03233$i<<2)|0);
     HEAP32[$100>>2] = $99;
     $101 = Math_imul($$034$i, -22554)|0;
     $102 = (($101) + 32768)|0;
     $103 = (($86) + ($$03233$i<<2)|0);
     HEAP32[$103>>2] = $102;
     $104 = (($$03233$i) + 1)|0;
     $105 = (($$034$i) + 1)|0;
     $exitcond$i100 = ($104|0)==(256);
     if ($exitcond$i100) {
      break;
     } else {
      $$03233$i = $104;$$034$i = $105;
     }
    }
    break;
   }
   case 1:  {
    $106 = ((($4)) + 4|0);
    HEAP32[$106>>2] = 132;
    break L11;
    break;
   }
   case 2:  {
    $107 = 4292 >>> $33;
    $108 = $107 & 1;
    $109 = ($108|0)==(0);
    if ($109) {
     label = 27;
    } else {
     $110 = 13252 >>> $33;
     $111 = $110 & 1;
     $112 = ($111|0)==(0);
     if ($112) {
      label = 27;
     } else {
      $113 = 324 >>> $33;
      $114 = $113 & 1;
      $115 = ($114|0)==(0);
      if ($115) {
       label = 27;
      } else {
       $rgb_rgb_convert$sink = 141;
      }
     }
    }
    if ((label|0) == 27) {
     $rgb_rgb_convert$sink = 142;
    }
    $116 = ((($4)) + 4|0);
    HEAP32[$116>>2] = $rgb_rgb_convert$sink;
    break L11;
    break;
   }
   default: {
    $117 = HEAP32[$0>>2]|0;
    $118 = ((($117)) + 20|0);
    HEAP32[$118>>2] = 27;
    $119 = HEAP32[$117>>2]|0;
    FUNCTION_TABLE_vi[$119 & 255]($0);
    break L11;
   }
   }
   break;
  }
  case 16:  {
   $120 = ((($0)) + 120|0);
   HEAP32[$120>>2] = 3;
   $121 = ((($0)) + 88|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($122|0)==(0);
   $124 = HEAP32[$6>>2]|0;
   $125 = ($124|0)==(3);
   if (!($123)) {
    if ($125) {
     $169 = ((($4)) + 4|0);
     HEAP32[$169>>2] = 137;
     $170 = HEAP32[$5>>2]|0;
     $171 = HEAP32[$1>>2]|0;
     $172 = HEAP32[$171>>2]|0;
     $173 = (FUNCTION_TABLE_iiii[$172 & 255]($0,1,1024)|0);
     $174 = ((($170)) + 8|0);
     HEAP32[$174>>2] = $173;
     $175 = HEAP32[$1>>2]|0;
     $176 = HEAP32[$175>>2]|0;
     $177 = (FUNCTION_TABLE_iiii[$176 & 255]($0,1,1024)|0);
     $178 = ((($170)) + 12|0);
     HEAP32[$178>>2] = $177;
     $179 = HEAP32[$1>>2]|0;
     $180 = HEAP32[$179>>2]|0;
     $181 = (FUNCTION_TABLE_iiii[$180 & 255]($0,1,1024)|0);
     $182 = ((($170)) + 16|0);
     HEAP32[$182>>2] = $181;
     $183 = HEAP32[$1>>2]|0;
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_iiii[$184 & 255]($0,1,1024)|0);
     $186 = ((($170)) + 20|0);
     HEAP32[$186>>2] = $185;
     $187 = HEAP32[$174>>2]|0;
     $188 = HEAP32[$178>>2]|0;
     $189 = HEAP32[$182>>2]|0;
     $$03233$i108 = 0;$$034$i107 = -128;
     while(1) {
      $190 = ($$034$i107*91881)|0;
      $191 = (($190) + 32768)|0;
      $192 = $191 >> 16;
      $193 = (($187) + ($$03233$i108<<2)|0);
      HEAP32[$193>>2] = $192;
      $194 = ($$034$i107*116130)|0;
      $195 = (($194) + 32768)|0;
      $196 = $195 >> 16;
      $197 = (($188) + ($$03233$i108<<2)|0);
      HEAP32[$197>>2] = $196;
      $198 = Math_imul($$034$i107, -46802)|0;
      $199 = (($189) + ($$03233$i108<<2)|0);
      HEAP32[$199>>2] = $198;
      $200 = Math_imul($$034$i107, -22554)|0;
      $201 = (($200) + 32768)|0;
      $202 = (($185) + ($$03233$i108<<2)|0);
      HEAP32[$202>>2] = $201;
      $203 = (($$03233$i108) + 1)|0;
      $204 = (($$034$i107) + 1)|0;
      $exitcond$i109 = ($203|0)==(256);
      if ($exitcond$i109) {
       break L11;
      } else {
       $$03233$i108 = $203;$$034$i107 = $204;
      }
     }
    }
    switch ($124|0) {
    case 1:  {
     $205 = ((($4)) + 4|0);
     HEAP32[$205>>2] = 138;
     break L11;
     break;
    }
    case 2:  {
     $206 = ((($4)) + 4|0);
     HEAP32[$206>>2] = 139;
     break L11;
     break;
    }
    default: {
     $207 = HEAP32[$0>>2]|0;
     $208 = ((($207)) + 20|0);
     HEAP32[$208>>2] = 27;
     $209 = HEAP32[$207>>2]|0;
     FUNCTION_TABLE_vi[$209 & 255]($0);
     break L11;
    }
    }
   }
   if ($125) {
    $126 = (_jsimd_can_ycc_rgb565()|0);
    $127 = ($126|0)==(0);
    $128 = ((($4)) + 4|0);
    if (!($127)) {
     HEAP32[$128>>2] = 133;
     break L11;
    }
    HEAP32[$128>>2] = 134;
    $129 = HEAP32[$5>>2]|0;
    $130 = HEAP32[$1>>2]|0;
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_iiii[$131 & 255]($0,1,1024)|0);
    $133 = ((($129)) + 8|0);
    HEAP32[$133>>2] = $132;
    $134 = HEAP32[$1>>2]|0;
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_iiii[$135 & 255]($0,1,1024)|0);
    $137 = ((($129)) + 12|0);
    HEAP32[$137>>2] = $136;
    $138 = HEAP32[$1>>2]|0;
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_iiii[$139 & 255]($0,1,1024)|0);
    $141 = ((($129)) + 16|0);
    HEAP32[$141>>2] = $140;
    $142 = HEAP32[$1>>2]|0;
    $143 = HEAP32[$142>>2]|0;
    $144 = (FUNCTION_TABLE_iiii[$143 & 255]($0,1,1024)|0);
    $145 = ((($129)) + 20|0);
    HEAP32[$145>>2] = $144;
    $146 = HEAP32[$133>>2]|0;
    $147 = HEAP32[$137>>2]|0;
    $148 = HEAP32[$141>>2]|0;
    $$03233$i103 = 0;$$034$i102 = -128;
    while(1) {
     $149 = ($$034$i102*91881)|0;
     $150 = (($149) + 32768)|0;
     $151 = $150 >> 16;
     $152 = (($146) + ($$03233$i103<<2)|0);
     HEAP32[$152>>2] = $151;
     $153 = ($$034$i102*116130)|0;
     $154 = (($153) + 32768)|0;
     $155 = $154 >> 16;
     $156 = (($147) + ($$03233$i103<<2)|0);
     HEAP32[$156>>2] = $155;
     $157 = Math_imul($$034$i102, -46802)|0;
     $158 = (($148) + ($$03233$i103<<2)|0);
     HEAP32[$158>>2] = $157;
     $159 = Math_imul($$034$i102, -22554)|0;
     $160 = (($159) + 32768)|0;
     $161 = (($144) + ($$03233$i103<<2)|0);
     HEAP32[$161>>2] = $160;
     $162 = (($$03233$i103) + 1)|0;
     $163 = (($$034$i102) + 1)|0;
     $exitcond$i104 = ($162|0)==(256);
     if ($exitcond$i104) {
      break;
     } else {
      $$03233$i103 = $162;$$034$i102 = $163;
     }
    }
   } else {
    switch ($124|0) {
    case 1:  {
     $164 = ((($4)) + 4|0);
     HEAP32[$164>>2] = 135;
     break L11;
     break;
    }
    case 2:  {
     $165 = ((($4)) + 4|0);
     HEAP32[$165>>2] = 136;
     break L11;
     break;
    }
    default: {
     $166 = HEAP32[$0>>2]|0;
     $167 = ((($166)) + 20|0);
     HEAP32[$167>>2] = 27;
     $168 = HEAP32[$166>>2]|0;
     FUNCTION_TABLE_vi[$168 & 255]($0);
     break L11;
    }
    }
   }
   break;
  }
  case 4:  {
   $210 = ((($0)) + 120|0);
   HEAP32[$210>>2] = 4;
   $211 = HEAP32[$6>>2]|0;
   switch ($211|0) {
   case 5:  {
    $212 = ((($4)) + 4|0);
    HEAP32[$212>>2] = 140;
    $213 = HEAP32[$5>>2]|0;
    $214 = HEAP32[$1>>2]|0;
    $215 = HEAP32[$214>>2]|0;
    $216 = (FUNCTION_TABLE_iiii[$215 & 255]($0,1,1024)|0);
    $217 = ((($213)) + 8|0);
    HEAP32[$217>>2] = $216;
    $218 = HEAP32[$1>>2]|0;
    $219 = HEAP32[$218>>2]|0;
    $220 = (FUNCTION_TABLE_iiii[$219 & 255]($0,1,1024)|0);
    $221 = ((($213)) + 12|0);
    HEAP32[$221>>2] = $220;
    $222 = HEAP32[$1>>2]|0;
    $223 = HEAP32[$222>>2]|0;
    $224 = (FUNCTION_TABLE_iiii[$223 & 255]($0,1,1024)|0);
    $225 = ((($213)) + 16|0);
    HEAP32[$225>>2] = $224;
    $226 = HEAP32[$1>>2]|0;
    $227 = HEAP32[$226>>2]|0;
    $228 = (FUNCTION_TABLE_iiii[$227 & 255]($0,1,1024)|0);
    $229 = ((($213)) + 20|0);
    HEAP32[$229>>2] = $228;
    $230 = HEAP32[$217>>2]|0;
    $231 = HEAP32[$221>>2]|0;
    $232 = HEAP32[$225>>2]|0;
    $$03233$i113 = 0;$$034$i112 = -128;
    while(1) {
     $233 = ($$034$i112*91881)|0;
     $234 = (($233) + 32768)|0;
     $235 = $234 >> 16;
     $236 = (($230) + ($$03233$i113<<2)|0);
     HEAP32[$236>>2] = $235;
     $237 = ($$034$i112*116130)|0;
     $238 = (($237) + 32768)|0;
     $239 = $238 >> 16;
     $240 = (($231) + ($$03233$i113<<2)|0);
     HEAP32[$240>>2] = $239;
     $241 = Math_imul($$034$i112, -46802)|0;
     $242 = (($232) + ($$03233$i113<<2)|0);
     HEAP32[$242>>2] = $241;
     $243 = Math_imul($$034$i112, -22554)|0;
     $244 = (($243) + 32768)|0;
     $245 = (($228) + ($$03233$i113<<2)|0);
     HEAP32[$245>>2] = $244;
     $246 = (($$03233$i113) + 1)|0;
     $247 = (($$034$i112) + 1)|0;
     $exitcond$i114 = ($246|0)==(256);
     if ($exitcond$i114) {
      break;
     } else {
      $$03233$i113 = $246;$$034$i112 = $247;
     }
    }
    break;
   }
   case 4:  {
    $248 = ((($4)) + 4|0);
    HEAP32[$248>>2] = 141;
    break L11;
    break;
   }
   default: {
    $249 = HEAP32[$0>>2]|0;
    $250 = ((($249)) + 20|0);
    HEAP32[$250>>2] = 27;
    $251 = HEAP32[$249>>2]|0;
    FUNCTION_TABLE_vi[$251 & 255]($0);
    break L11;
   }
   }
   break;
  }
  default: {
   $252 = HEAP32[$6>>2]|0;
   $253 = ($33|0)==($252|0);
   if ($253) {
    $254 = ((($0)) + 36|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = ((($0)) + 120|0);
    HEAP32[$256>>2] = $255;
    $257 = ((($4)) + 4|0);
    HEAP32[$257>>2] = 141;
    break L11;
   } else {
    $258 = HEAP32[$0>>2]|0;
    $259 = ((($258)) + 20|0);
    HEAP32[$259>>2] = 27;
    $260 = HEAP32[$258>>2]|0;
    FUNCTION_TABLE_vi[$260 & 255]($0);
    break L11;
   }
  }
  }
 } while(0);
 $261 = ((($0)) + 84|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($262|0)==(0);
 if (!($263)) {
  $$sink2 = 1;
  $266 = ((($0)) + 124|0);
  HEAP32[$266>>2] = $$sink2;
  return;
 }
 $264 = ((($0)) + 120|0);
 $265 = HEAP32[$264>>2]|0;
 $$sink2 = $265;
 $266 = ((($0)) + 124|0);
 HEAP32[$266>>2] = $$sink2;
 return;
}
function _start_pass_dcolor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _grayscale_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 _jcopy_sample_rows($5,$2,$3,0,$4,$7);
 return;
}
function _rgb_gray_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$04952$us = 0, $$05053$us = 0, $$054$us = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 456|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($4|0)>(0);
 if (!($11)) {
  return;
 }
 $12 = ((($1)) + 4|0);
 $13 = ((($1)) + 8|0);
 $14 = ($10|0)==(0);
 if ($14) {
  return;
 } else {
  $$05053$us = $3;$$054$us = $2;$$in = $4;
 }
 while(1) {
  $15 = (($$in) + -1)|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + ($$054$us<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $20 = (($19) + ($$054$us<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$13>>2]|0;
  $23 = (($22) + ($$054$us<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($$054$us) + 1)|0;
  $26 = HEAP32[$$05053$us>>2]|0;
  $$04952$us = 0;
  while(1) {
   $27 = (($18) + ($$04952$us)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = (($21) + ($$04952$us)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (($24) + ($$04952$us)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = (($8) + ($29<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $32 | 256;
   $39 = (($8) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($37))|0;
   $42 = $35 | 512;
   $43 = (($8) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) + ($44))|0;
   $46 = $45 >>> 16;
   $47 = $46&255;
   $48 = (($26) + ($$04952$us)|0);
   HEAP8[$48>>0] = $47;
   $49 = (($$04952$us) + 1)|0;
   $exitcond = ($49|0)==($10|0);
   if ($exitcond) {
    break;
   } else {
    $$04952$us = $49;
   }
  }
  $50 = ((($$05053$us)) + 4|0);
  $51 = ($$in|0)>(1);
  if ($51) {
   $$05053$us = $50;$$054$us = $25;$$in = $15;
  } else {
   break;
  }
 }
 return;
}
function _ycc_rgb_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$07177$us$i = 0, $$07177$us$i38 = 0, $$07177$us$i68 = 0, $$07278$us$i = 0, $$07278$us$i50 = 0, $$07278$us$i59 = 0, $$07278$us$i77 = 0, $$07376$us$i = 0, $$07376$us$i40 = 0, $$07376$us$i70 = 0, $$07475$us$i = 0, $$07475$us$i41 = 0, $$07475$us$i71 = 0, $$07477$us$i = 0, $$07477$us$i52 = 0, $$07477$us$i61 = 0, $$07477$us$i79 = 0, $$07576$us$i = 0, $$07576$us$i53 = 0, $$07576$us$i62 = 0;
 var $$07576$us$i80 = 0, $$078$us$i = 0, $$078$us$i37 = 0, $$078$us$i67 = 0, $$079$us$i = 0, $$079$us$i49 = 0, $$079$us$i58 = 0, $$079$us$i76 = 0, $$in$i = 0, $$in$i36 = 0, $$in$i44 = 0, $$in$i48 = 0, $$in$i57 = 0, $$in$i66 = 0, $$in$i75 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i42 = 0, $exitcond$i45 = 0, $exitcond$i54 = 0, $exitcond$i63 = 0, $exitcond$i72 = 0, $exitcond$i81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 6:  {
  $7 = ((($0)) + 456|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 112|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 324|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($8)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($8)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($8)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($8)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($4|0)>(0);
  if (!($21)) {
   return;
  }
  $22 = ((($1)) + 4|0);
  $23 = ((($1)) + 8|0);
  $24 = ($10|0)==(0);
  if ($24) {
   return;
  } else {
   $$07177$us$i = $3;$$078$us$i = $2;$$in$i = $4;
  }
  while(1) {
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + ($$078$us$i<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$22>>2]|0;
   $29 = (($28) + ($$078$us$i<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$23>>2]|0;
   $32 = (($31) + ($$078$us$i<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$$07177$us$i>>2]|0;
   $$07376$us$i = $34;$$07475$us$i = 0;
   while(1) {
    $35 = (($27) + ($$07475$us$i)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = (($30) + ($$07475$us$i)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = (($33) + ($$07475$us$i)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = (($14) + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($37))|0;
    $47 = (($12) + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    HEAP8[$$07376$us$i>>0] = $48;
    $49 = (($20) + ($40<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($18) + ($43<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($50))|0;
    $54 = $53 >> 16;
    $55 = (($54) + ($37))|0;
    $56 = (($12) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($$07376$us$i)) + 1|0);
    HEAP8[$58>>0] = $57;
    $59 = (($16) + ($40<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($37))|0;
    $62 = (($12) + ($61)|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = ((($$07376$us$i)) + 2|0);
    HEAP8[$64>>0] = $63;
    $65 = ((($$07376$us$i)) + 3|0);
    $66 = (($$07475$us$i) + 1)|0;
    $exitcond$i = ($66|0)==($10|0);
    if ($exitcond$i) {
     break;
    } else {
     $$07376$us$i = $65;$$07475$us$i = $66;
    }
   }
   $67 = (($$in$i) + -1)|0;
   $68 = (($$078$us$i) + 1)|0;
   $69 = ((($$07177$us$i)) + 4|0);
   $70 = ($$in$i|0)>(1);
   if ($70) {
    $$07177$us$i = $69;$$078$us$i = $68;$$in$i = $67;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 12: case 7:  {
  $71 = ((($0)) + 456|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($0)) + 112|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($0)) + 324|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($72)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($72)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($72)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($72)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($4|0)>(0);
  if (!($85)) {
   return;
  }
  $86 = ((($1)) + 4|0);
  $87 = ((($1)) + 8|0);
  $88 = ($74|0)==(0);
  if ($88) {
   return;
  } else {
   $$07278$us$i77 = $3;$$079$us$i76 = $2;$$in$i75 = $4;
  }
  while(1) {
   $89 = HEAP32[$1>>2]|0;
   $90 = (($89) + ($$079$us$i76<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = HEAP32[$86>>2]|0;
   $93 = (($92) + ($$079$us$i76<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$87>>2]|0;
   $96 = (($95) + ($$079$us$i76<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = HEAP32[$$07278$us$i77>>2]|0;
   $$07477$us$i79 = $98;$$07576$us$i80 = 0;
   while(1) {
    $99 = (($91) + ($$07576$us$i80)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = (($94) + ($$07576$us$i80)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($97) + ($$07576$us$i80)|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = (($78) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($101))|0;
    $111 = (($76) + ($110)|0);
    $112 = HEAP8[$111>>0]|0;
    HEAP8[$$07477$us$i79>>0] = $112;
    $113 = (($84) + ($104<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($82) + ($107<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($114))|0;
    $118 = $117 >> 16;
    $119 = (($118) + ($101))|0;
    $120 = (($76) + ($119)|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = ((($$07477$us$i79)) + 1|0);
    HEAP8[$122>>0] = $121;
    $123 = (($80) + ($104<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + ($101))|0;
    $126 = (($76) + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = ((($$07477$us$i79)) + 2|0);
    HEAP8[$128>>0] = $127;
    $129 = ((($$07477$us$i79)) + 3|0);
    HEAP8[$129>>0] = -1;
    $130 = ((($$07477$us$i79)) + 4|0);
    $131 = (($$07576$us$i80) + 1)|0;
    $exitcond$i81 = ($131|0)==($74|0);
    if ($exitcond$i81) {
     break;
    } else {
     $$07477$us$i79 = $130;$$07576$us$i80 = $131;
    }
   }
   $132 = (($$in$i75) + -1)|0;
   $133 = (($$079$us$i76) + 1)|0;
   $134 = ((($$07278$us$i77)) + 4|0);
   $135 = ($$in$i75|0)>(1);
   if ($135) {
    $$07278$us$i77 = $134;$$079$us$i76 = $133;$$in$i75 = $132;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 8:  {
  $136 = ((($0)) + 456|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($0)) + 112|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($0)) + 324|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ((($137)) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($137)) + 12|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($137)) + 16|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ((($137)) + 20|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($4|0)>(0);
  if (!($150)) {
   return;
  }
  $151 = ((($1)) + 4|0);
  $152 = ((($1)) + 8|0);
  $153 = ($139|0)==(0);
  if ($153) {
   return;
  } else {
   $$07177$us$i68 = $3;$$078$us$i67 = $2;$$in$i66 = $4;
  }
  while(1) {
   $154 = HEAP32[$1>>2]|0;
   $155 = (($154) + ($$078$us$i67<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP32[$151>>2]|0;
   $158 = (($157) + ($$078$us$i67<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = HEAP32[$152>>2]|0;
   $161 = (($160) + ($$078$us$i67<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = HEAP32[$$07177$us$i68>>2]|0;
   $$07376$us$i70 = $163;$$07475$us$i71 = 0;
   while(1) {
    $164 = (($156) + ($$07475$us$i71)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = (($159) + ($$07475$us$i71)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($162) + ($$07475$us$i71)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $173 = (($143) + ($172<<2)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($166))|0;
    $176 = (($141) + ($175)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = ((($$07376$us$i70)) + 2|0);
    HEAP8[$178>>0] = $177;
    $179 = (($149) + ($169<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($147) + ($172<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($182) + ($180))|0;
    $184 = $183 >> 16;
    $185 = (($184) + ($166))|0;
    $186 = (($141) + ($185)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = ((($$07376$us$i70)) + 1|0);
    HEAP8[$188>>0] = $187;
    $189 = (($145) + ($169<<2)|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (($190) + ($166))|0;
    $192 = (($141) + ($191)|0);
    $193 = HEAP8[$192>>0]|0;
    HEAP8[$$07376$us$i70>>0] = $193;
    $194 = ((($$07376$us$i70)) + 3|0);
    $195 = (($$07475$us$i71) + 1)|0;
    $exitcond$i72 = ($195|0)==($139|0);
    if ($exitcond$i72) {
     break;
    } else {
     $$07376$us$i70 = $194;$$07475$us$i71 = $195;
    }
   }
   $196 = (($$in$i66) + -1)|0;
   $197 = (($$078$us$i67) + 1)|0;
   $198 = ((($$07177$us$i68)) + 4|0);
   $199 = ($$in$i66|0)>(1);
   if ($199) {
    $$07177$us$i68 = $198;$$078$us$i67 = $197;$$in$i66 = $196;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 13: case 9:  {
  $200 = ((($0)) + 456|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ((($0)) + 112|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($0)) + 324|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ((($201)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($201)) + 12|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ((($201)) + 16|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ((($201)) + 20|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ($4|0)>(0);
  if (!($214)) {
   return;
  }
  $215 = ((($1)) + 4|0);
  $216 = ((($1)) + 8|0);
  $217 = ($203|0)==(0);
  if ($217) {
   return;
  } else {
   $$07278$us$i59 = $3;$$079$us$i58 = $2;$$in$i57 = $4;
  }
  while(1) {
   $218 = HEAP32[$1>>2]|0;
   $219 = (($218) + ($$079$us$i58<<2)|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = HEAP32[$215>>2]|0;
   $222 = (($221) + ($$079$us$i58<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = HEAP32[$216>>2]|0;
   $225 = (($224) + ($$079$us$i58<<2)|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = HEAP32[$$07278$us$i59>>2]|0;
   $$07477$us$i61 = $227;$$07576$us$i62 = 0;
   while(1) {
    $228 = (($220) + ($$07576$us$i62)|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = $229&255;
    $231 = (($223) + ($$07576$us$i62)|0);
    $232 = HEAP8[$231>>0]|0;
    $233 = $232&255;
    $234 = (($226) + ($$07576$us$i62)|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = (($207) + ($236<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (($238) + ($230))|0;
    $240 = (($205) + ($239)|0);
    $241 = HEAP8[$240>>0]|0;
    $242 = ((($$07477$us$i61)) + 2|0);
    HEAP8[$242>>0] = $241;
    $243 = (($213) + ($233<<2)|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($211) + ($236<<2)|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($246) + ($244))|0;
    $248 = $247 >> 16;
    $249 = (($248) + ($230))|0;
    $250 = (($205) + ($249)|0);
    $251 = HEAP8[$250>>0]|0;
    $252 = ((($$07477$us$i61)) + 1|0);
    HEAP8[$252>>0] = $251;
    $253 = (($209) + ($233<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = (($254) + ($230))|0;
    $256 = (($205) + ($255)|0);
    $257 = HEAP8[$256>>0]|0;
    HEAP8[$$07477$us$i61>>0] = $257;
    $258 = ((($$07477$us$i61)) + 3|0);
    HEAP8[$258>>0] = -1;
    $259 = ((($$07477$us$i61)) + 4|0);
    $260 = (($$07576$us$i62) + 1)|0;
    $exitcond$i63 = ($260|0)==($203|0);
    if ($exitcond$i63) {
     break;
    } else {
     $$07477$us$i61 = $259;$$07576$us$i62 = $260;
    }
   }
   $261 = (($$in$i57) + -1)|0;
   $262 = (($$079$us$i58) + 1)|0;
   $263 = ((($$07278$us$i59)) + 4|0);
   $264 = ($$in$i57|0)>(1);
   if ($264) {
    $$07278$us$i59 = $263;$$079$us$i58 = $262;$$in$i57 = $261;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 14: case 10:  {
  $265 = ((($0)) + 456|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ((($0)) + 112|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = ((($0)) + 324|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ((($266)) + 8|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = ((($266)) + 12|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ((($266)) + 16|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ((($266)) + 20|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = ($4|0)>(0);
  if (!($279)) {
   return;
  }
  $280 = ((($1)) + 4|0);
  $281 = ((($1)) + 8|0);
  $282 = ($268|0)==(0);
  if ($282) {
   return;
  } else {
   $$07278$us$i50 = $3;$$079$us$i49 = $2;$$in$i48 = $4;
  }
  while(1) {
   $283 = HEAP32[$1>>2]|0;
   $284 = (($283) + ($$079$us$i49<<2)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = HEAP32[$280>>2]|0;
   $287 = (($286) + ($$079$us$i49<<2)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = HEAP32[$281>>2]|0;
   $290 = (($289) + ($$079$us$i49<<2)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = HEAP32[$$07278$us$i50>>2]|0;
   $$07477$us$i52 = $292;$$07576$us$i53 = 0;
   while(1) {
    $293 = (($285) + ($$07576$us$i53)|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = (($288) + ($$07576$us$i53)|0);
    $297 = HEAP8[$296>>0]|0;
    $298 = $297&255;
    $299 = (($291) + ($$07576$us$i53)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = (($272) + ($301<<2)|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + ($295))|0;
    $305 = (($270) + ($304)|0);
    $306 = HEAP8[$305>>0]|0;
    $307 = ((($$07477$us$i52)) + 3|0);
    HEAP8[$307>>0] = $306;
    $308 = (($278) + ($298<<2)|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (($276) + ($301<<2)|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (($311) + ($309))|0;
    $313 = $312 >> 16;
    $314 = (($313) + ($295))|0;
    $315 = (($270) + ($314)|0);
    $316 = HEAP8[$315>>0]|0;
    $317 = ((($$07477$us$i52)) + 2|0);
    HEAP8[$317>>0] = $316;
    $318 = (($274) + ($298<<2)|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = (($319) + ($295))|0;
    $321 = (($270) + ($320)|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = ((($$07477$us$i52)) + 1|0);
    HEAP8[$323>>0] = $322;
    HEAP8[$$07477$us$i52>>0] = -1;
    $324 = ((($$07477$us$i52)) + 4|0);
    $325 = (($$07576$us$i53) + 1)|0;
    $exitcond$i54 = ($325|0)==($268|0);
    if ($exitcond$i54) {
     break;
    } else {
     $$07477$us$i52 = $324;$$07576$us$i53 = $325;
    }
   }
   $326 = (($$in$i48) + -1)|0;
   $327 = (($$079$us$i49) + 1)|0;
   $328 = ((($$07278$us$i50)) + 4|0);
   $329 = ($$in$i48|0)>(1);
   if ($329) {
    $$07278$us$i50 = $328;$$079$us$i49 = $327;$$in$i48 = $326;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 15: case 11:  {
  $330 = ((($0)) + 456|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = ((($0)) + 112|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = ((($0)) + 324|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ((($331)) + 8|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = ((($331)) + 12|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ((($331)) + 16|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = ((($331)) + 20|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = ($4|0)>(0);
  if (!($344)) {
   return;
  }
  $345 = ((($1)) + 4|0);
  $346 = ((($1)) + 8|0);
  $347 = ($333|0)==(0);
  if ($347) {
   return;
  } else {
   $$07278$us$i = $3;$$079$us$i = $2;$$in$i44 = $4;
  }
  while(1) {
   $348 = HEAP32[$1>>2]|0;
   $349 = (($348) + ($$079$us$i<<2)|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = HEAP32[$345>>2]|0;
   $352 = (($351) + ($$079$us$i<<2)|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = HEAP32[$346>>2]|0;
   $355 = (($354) + ($$079$us$i<<2)|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = HEAP32[$$07278$us$i>>2]|0;
   $$07477$us$i = $357;$$07576$us$i = 0;
   while(1) {
    $358 = (($350) + ($$07576$us$i)|0);
    $359 = HEAP8[$358>>0]|0;
    $360 = $359&255;
    $361 = (($353) + ($$07576$us$i)|0);
    $362 = HEAP8[$361>>0]|0;
    $363 = $362&255;
    $364 = (($356) + ($$07576$us$i)|0);
    $365 = HEAP8[$364>>0]|0;
    $366 = $365&255;
    $367 = (($337) + ($366<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = (($368) + ($360))|0;
    $370 = (($335) + ($369)|0);
    $371 = HEAP8[$370>>0]|0;
    $372 = ((($$07477$us$i)) + 1|0);
    HEAP8[$372>>0] = $371;
    $373 = (($343) + ($363<<2)|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (($341) + ($366<<2)|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (($376) + ($374))|0;
    $378 = $377 >> 16;
    $379 = (($378) + ($360))|0;
    $380 = (($335) + ($379)|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = ((($$07477$us$i)) + 2|0);
    HEAP8[$382>>0] = $381;
    $383 = (($339) + ($363<<2)|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = (($384) + ($360))|0;
    $386 = (($335) + ($385)|0);
    $387 = HEAP8[$386>>0]|0;
    $388 = ((($$07477$us$i)) + 3|0);
    HEAP8[$388>>0] = $387;
    HEAP8[$$07477$us$i>>0] = -1;
    $389 = ((($$07477$us$i)) + 4|0);
    $390 = (($$07576$us$i) + 1)|0;
    $exitcond$i45 = ($390|0)==($333|0);
    if ($exitcond$i45) {
     break;
    } else {
     $$07477$us$i = $389;$$07576$us$i = $390;
    }
   }
   $391 = (($$in$i44) + -1)|0;
   $392 = (($$079$us$i) + 1)|0;
   $393 = ((($$07278$us$i)) + 4|0);
   $394 = ($$in$i44|0)>(1);
   if ($394) {
    $$07278$us$i = $393;$$079$us$i = $392;$$in$i44 = $391;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  $395 = ((($0)) + 456|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($0)) + 112|0);
  $398 = HEAP32[$397>>2]|0;
  $399 = ((($0)) + 324|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = ((($396)) + 8|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = ((($396)) + 12|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = ((($396)) + 16|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = ((($396)) + 20|0);
  $408 = HEAP32[$407>>2]|0;
  $409 = ($4|0)>(0);
  if (!($409)) {
   return;
  }
  $410 = ((($1)) + 4|0);
  $411 = ((($1)) + 8|0);
  $412 = ($398|0)==(0);
  if ($412) {
   return;
  } else {
   $$07177$us$i38 = $3;$$078$us$i37 = $2;$$in$i36 = $4;
  }
  while(1) {
   $413 = HEAP32[$1>>2]|0;
   $414 = (($413) + ($$078$us$i37<<2)|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = HEAP32[$410>>2]|0;
   $417 = (($416) + ($$078$us$i37<<2)|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = HEAP32[$411>>2]|0;
   $420 = (($419) + ($$078$us$i37<<2)|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = HEAP32[$$07177$us$i38>>2]|0;
   $$07376$us$i40 = $422;$$07475$us$i41 = 0;
   while(1) {
    $423 = (($415) + ($$07475$us$i41)|0);
    $424 = HEAP8[$423>>0]|0;
    $425 = $424&255;
    $426 = (($418) + ($$07475$us$i41)|0);
    $427 = HEAP8[$426>>0]|0;
    $428 = $427&255;
    $429 = (($421) + ($$07475$us$i41)|0);
    $430 = HEAP8[$429>>0]|0;
    $431 = $430&255;
    $432 = (($402) + ($431<<2)|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = (($433) + ($425))|0;
    $435 = (($400) + ($434)|0);
    $436 = HEAP8[$435>>0]|0;
    HEAP8[$$07376$us$i40>>0] = $436;
    $437 = (($408) + ($428<<2)|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = (($406) + ($431<<2)|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = (($440) + ($438))|0;
    $442 = $441 >> 16;
    $443 = (($442) + ($425))|0;
    $444 = (($400) + ($443)|0);
    $445 = HEAP8[$444>>0]|0;
    $446 = ((($$07376$us$i40)) + 1|0);
    HEAP8[$446>>0] = $445;
    $447 = (($404) + ($428<<2)|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = (($448) + ($425))|0;
    $450 = (($400) + ($449)|0);
    $451 = HEAP8[$450>>0]|0;
    $452 = ((($$07376$us$i40)) + 2|0);
    HEAP8[$452>>0] = $451;
    $453 = ((($$07376$us$i40)) + 3|0);
    $454 = (($$07475$us$i41) + 1)|0;
    $exitcond$i42 = ($454|0)==($398|0);
    if ($exitcond$i42) {
     break;
    } else {
     $$07376$us$i40 = $453;$$07475$us$i41 = $454;
    }
   }
   $455 = (($$in$i36) + -1)|0;
   $456 = (($$078$us$i37) + 1)|0;
   $457 = ((($$07177$us$i38)) + 4|0);
   $458 = ($$in$i36|0)>(1);
   if ($458) {
    $$07177$us$i38 = $457;$$078$us$i37 = $456;$$in$i36 = $455;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _gray_rgb_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0202$us$i = 0, $$0202$us$i46 = 0, $$0202$us$i79 = 0, $$0211$us$i = 0, $$0211$us$i47 = 0, $$0211$us$i80 = 0, $$0212$us$i = 0, $$0212$us$i61 = 0, $$0212$us$i70 = 0, $$0212$us$i88 = 0, $$0221$us$i = 0, $$0221$us$i62 = 0, $$0221$us$i71 = 0, $$0221$us$i89 = 0, $$0223$us$i = 0, $$0223$us$i44 = 0, $$0223$us$i77 = 0, $$0233$us$i = 0, $$0233$us$i59 = 0, $$0233$us$i68 = 0;
 var $$0233$us$i86 = 0, $$04$us$i = 0, $$04$us$i43 = 0, $$04$us$i52 = 0, $$04$us$i58 = 0, $$04$us$i67 = 0, $$04$us$i76 = 0, $$04$us$i85 = 0, $$idx = 0, $$idx$val = 0, $$idx35 = 0, $$idx35$val = 0, $$idx36 = 0, $$idx36$val = 0, $$idx37 = 0, $$idx37$val = 0, $$idx38 = 0, $$idx38$val = 0, $$idx39 = 0, $$idx39$val = 0;
 var $$idx40 = 0, $$idx40$val = 0, $$in$i = 0, $$in$i42 = 0, $$in$i51 = 0, $$in$i57 = 0, $$in$i66 = 0, $$in$i75 = 0, $$in$i84 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i48 = 0, $exitcond$i54 = 0, $exitcond$i63 = 0, $exitcond$i72 = 0, $exitcond$i81 = 0, $exitcond$i90 = 0, $or$cond$i = 0, $or$cond$i41 = 0, $or$cond$i50 = 0, $or$cond$i56 = 0, $or$cond$i65 = 0, $or$cond$i74 = 0;
 var $or$cond$i83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 6:  {
  $$idx = ((($0)) + 112|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $7 = ($4|0)<(1);
  $8 = ($$idx$val|0)==(0);
  $or$cond$i = $7 | $8;
  if ($or$cond$i) {
   return;
  } else {
   $$0223$us$i = $3;$$04$us$i = $2;$$in$i = $4;
  }
  while(1) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + ($$04$us$i<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$$0223$us$i>>2]|0;
   $$0202$us$i = 0;$$0211$us$i = $12;
   while(1) {
    $13 = (($11) + ($$0202$us$i)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ((($$0211$us$i)) + 2|0);
    HEAP8[$15>>0] = $14;
    $16 = ((($$0211$us$i)) + 1|0);
    HEAP8[$16>>0] = $14;
    HEAP8[$$0211$us$i>>0] = $14;
    $17 = ((($$0211$us$i)) + 3|0);
    $18 = (($$0202$us$i) + 1)|0;
    $exitcond$i = ($18|0)==($$idx$val|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0202$us$i = $18;$$0211$us$i = $17;
    }
   }
   $19 = (($$in$i) + -1)|0;
   $20 = (($$04$us$i) + 1)|0;
   $21 = ((($$0223$us$i)) + 4|0);
   $22 = ($$in$i|0)>(1);
   if ($22) {
    $$0223$us$i = $21;$$04$us$i = $20;$$in$i = $19;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 12: case 7:  {
  $$idx35 = ((($0)) + 112|0);
  $$idx35$val = HEAP32[$$idx35>>2]|0;
  $23 = ($4|0)<(1);
  $24 = ($$idx35$val|0)==(0);
  $or$cond$i83 = $23 | $24;
  if ($or$cond$i83) {
   return;
  } else {
   $$0233$us$i86 = $3;$$04$us$i85 = $2;$$in$i84 = $4;
  }
  while(1) {
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + ($$04$us$i85<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$$0233$us$i86>>2]|0;
   $$0212$us$i88 = 0;$$0221$us$i89 = $28;
   while(1) {
    $29 = (($27) + ($$0212$us$i88)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ((($$0221$us$i89)) + 2|0);
    HEAP8[$31>>0] = $30;
    $32 = ((($$0221$us$i89)) + 1|0);
    HEAP8[$32>>0] = $30;
    HEAP8[$$0221$us$i89>>0] = $30;
    $33 = ((($$0221$us$i89)) + 3|0);
    HEAP8[$33>>0] = -1;
    $34 = ((($$0221$us$i89)) + 4|0);
    $35 = (($$0212$us$i88) + 1)|0;
    $exitcond$i90 = ($35|0)==($$idx35$val|0);
    if ($exitcond$i90) {
     break;
    } else {
     $$0212$us$i88 = $35;$$0221$us$i89 = $34;
    }
   }
   $36 = (($$in$i84) + -1)|0;
   $37 = (($$04$us$i85) + 1)|0;
   $38 = ((($$0233$us$i86)) + 4|0);
   $39 = ($$in$i84|0)>(1);
   if ($39) {
    $$0233$us$i86 = $38;$$04$us$i85 = $37;$$in$i84 = $36;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 8:  {
  $$idx36 = ((($0)) + 112|0);
  $$idx36$val = HEAP32[$$idx36>>2]|0;
  $40 = ($4|0)<(1);
  $41 = ($$idx36$val|0)==(0);
  $or$cond$i74 = $40 | $41;
  if ($or$cond$i74) {
   return;
  } else {
   $$0223$us$i77 = $3;$$04$us$i76 = $2;$$in$i75 = $4;
  }
  while(1) {
   $42 = HEAP32[$1>>2]|0;
   $43 = (($42) + ($$04$us$i76<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$$0223$us$i77>>2]|0;
   $$0202$us$i79 = 0;$$0211$us$i80 = $45;
   while(1) {
    $46 = (($44) + ($$0202$us$i79)|0);
    $47 = HEAP8[$46>>0]|0;
    HEAP8[$$0211$us$i80>>0] = $47;
    $48 = ((($$0211$us$i80)) + 1|0);
    HEAP8[$48>>0] = $47;
    $49 = ((($$0211$us$i80)) + 2|0);
    HEAP8[$49>>0] = $47;
    $50 = ((($$0211$us$i80)) + 3|0);
    $51 = (($$0202$us$i79) + 1)|0;
    $exitcond$i81 = ($51|0)==($$idx36$val|0);
    if ($exitcond$i81) {
     break;
    } else {
     $$0202$us$i79 = $51;$$0211$us$i80 = $50;
    }
   }
   $52 = (($$in$i75) + -1)|0;
   $53 = (($$04$us$i76) + 1)|0;
   $54 = ((($$0223$us$i77)) + 4|0);
   $55 = ($$in$i75|0)>(1);
   if ($55) {
    $$0223$us$i77 = $54;$$04$us$i76 = $53;$$in$i75 = $52;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 13: case 9:  {
  $$idx37 = ((($0)) + 112|0);
  $$idx37$val = HEAP32[$$idx37>>2]|0;
  $56 = ($4|0)<(1);
  $57 = ($$idx37$val|0)==(0);
  $or$cond$i65 = $56 | $57;
  if ($or$cond$i65) {
   return;
  } else {
   $$0233$us$i68 = $3;$$04$us$i67 = $2;$$in$i66 = $4;
  }
  while(1) {
   $58 = HEAP32[$1>>2]|0;
   $59 = (($58) + ($$04$us$i67<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$$0233$us$i68>>2]|0;
   $$0212$us$i70 = 0;$$0221$us$i71 = $61;
   while(1) {
    $62 = (($60) + ($$0212$us$i70)|0);
    $63 = HEAP8[$62>>0]|0;
    HEAP8[$$0221$us$i71>>0] = $63;
    $64 = ((($$0221$us$i71)) + 1|0);
    HEAP8[$64>>0] = $63;
    $65 = ((($$0221$us$i71)) + 2|0);
    HEAP8[$65>>0] = $63;
    $66 = ((($$0221$us$i71)) + 3|0);
    HEAP8[$66>>0] = -1;
    $67 = ((($$0221$us$i71)) + 4|0);
    $68 = (($$0212$us$i70) + 1)|0;
    $exitcond$i72 = ($68|0)==($$idx37$val|0);
    if ($exitcond$i72) {
     break;
    } else {
     $$0212$us$i70 = $68;$$0221$us$i71 = $67;
    }
   }
   $69 = (($$in$i66) + -1)|0;
   $70 = (($$04$us$i67) + 1)|0;
   $71 = ((($$0233$us$i68)) + 4|0);
   $72 = ($$in$i66|0)>(1);
   if ($72) {
    $$0233$us$i68 = $71;$$04$us$i67 = $70;$$in$i66 = $69;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 14: case 10:  {
  $$idx38 = ((($0)) + 112|0);
  $$idx38$val = HEAP32[$$idx38>>2]|0;
  $73 = ($4|0)<(1);
  $74 = ($$idx38$val|0)==(0);
  $or$cond$i56 = $73 | $74;
  if ($or$cond$i56) {
   return;
  } else {
   $$0233$us$i59 = $3;$$04$us$i58 = $2;$$in$i57 = $4;
  }
  while(1) {
   $75 = HEAP32[$1>>2]|0;
   $76 = (($75) + ($$04$us$i58<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = HEAP32[$$0233$us$i59>>2]|0;
   $$0212$us$i61 = 0;$$0221$us$i62 = $78;
   while(1) {
    $79 = (($77) + ($$0212$us$i61)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($$0221$us$i62)) + 1|0);
    HEAP8[$81>>0] = $80;
    $82 = ((($$0221$us$i62)) + 2|0);
    HEAP8[$82>>0] = $80;
    $83 = ((($$0221$us$i62)) + 3|0);
    HEAP8[$83>>0] = $80;
    HEAP8[$$0221$us$i62>>0] = -1;
    $84 = ((($$0221$us$i62)) + 4|0);
    $85 = (($$0212$us$i61) + 1)|0;
    $exitcond$i63 = ($85|0)==($$idx38$val|0);
    if ($exitcond$i63) {
     break;
    } else {
     $$0212$us$i61 = $85;$$0221$us$i62 = $84;
    }
   }
   $86 = (($$in$i57) + -1)|0;
   $87 = (($$04$us$i58) + 1)|0;
   $88 = ((($$0233$us$i59)) + 4|0);
   $89 = ($$in$i57|0)>(1);
   if ($89) {
    $$0233$us$i59 = $88;$$04$us$i58 = $87;$$in$i57 = $86;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 15: case 11:  {
  $$idx39 = ((($0)) + 112|0);
  $$idx39$val = HEAP32[$$idx39>>2]|0;
  $90 = ($4|0)<(1);
  $91 = ($$idx39$val|0)==(0);
  $or$cond$i50 = $90 | $91;
  if ($or$cond$i50) {
   return;
  } else {
   $$0233$us$i = $3;$$04$us$i52 = $2;$$in$i51 = $4;
  }
  while(1) {
   $92 = HEAP32[$1>>2]|0;
   $93 = (($92) + ($$04$us$i52<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$$0233$us$i>>2]|0;
   $$0212$us$i = 0;$$0221$us$i = $95;
   while(1) {
    $96 = (($94) + ($$0212$us$i)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ((($$0221$us$i)) + 3|0);
    HEAP8[$98>>0] = $97;
    $99 = ((($$0221$us$i)) + 2|0);
    HEAP8[$99>>0] = $97;
    $100 = ((($$0221$us$i)) + 1|0);
    HEAP8[$100>>0] = $97;
    HEAP8[$$0221$us$i>>0] = -1;
    $101 = ((($$0221$us$i)) + 4|0);
    $102 = (($$0212$us$i) + 1)|0;
    $exitcond$i54 = ($102|0)==($$idx39$val|0);
    if ($exitcond$i54) {
     break;
    } else {
     $$0212$us$i = $102;$$0221$us$i = $101;
    }
   }
   $103 = (($$in$i51) + -1)|0;
   $104 = (($$04$us$i52) + 1)|0;
   $105 = ((($$0233$us$i)) + 4|0);
   $106 = ($$in$i51|0)>(1);
   if ($106) {
    $$0233$us$i = $105;$$04$us$i52 = $104;$$in$i51 = $103;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  $$idx40 = ((($0)) + 112|0);
  $$idx40$val = HEAP32[$$idx40>>2]|0;
  $107 = ($4|0)<(1);
  $108 = ($$idx40$val|0)==(0);
  $or$cond$i41 = $107 | $108;
  if ($or$cond$i41) {
   return;
  } else {
   $$0223$us$i44 = $3;$$04$us$i43 = $2;$$in$i42 = $4;
  }
  while(1) {
   $109 = HEAP32[$1>>2]|0;
   $110 = (($109) + ($$04$us$i43<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = HEAP32[$$0223$us$i44>>2]|0;
   $$0202$us$i46 = 0;$$0211$us$i47 = $112;
   while(1) {
    $113 = (($111) + ($$0202$us$i46)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ((($$0211$us$i47)) + 2|0);
    HEAP8[$115>>0] = $114;
    $116 = ((($$0211$us$i47)) + 1|0);
    HEAP8[$116>>0] = $114;
    HEAP8[$$0211$us$i47>>0] = $114;
    $117 = ((($$0211$us$i47)) + 3|0);
    $118 = (($$0202$us$i46) + 1)|0;
    $exitcond$i48 = ($118|0)==($$idx40$val|0);
    if ($exitcond$i48) {
     break;
    } else {
     $$0202$us$i46 = $118;$$0211$us$i47 = $117;
    }
   }
   $119 = (($$in$i42) + -1)|0;
   $120 = (($$04$us$i43) + 1)|0;
   $121 = ((($$0223$us$i44)) + 4|0);
   $122 = ($$in$i42|0)>(1);
   if ($122) {
    $$0223$us$i44 = $121;$$04$us$i43 = $120;$$in$i42 = $119;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _rgb_rgb_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0332$us$i = 0, $$0332$us$i46 = 0, $$0332$us$i79 = 0, $$0341$us$i = 0, $$0341$us$i47 = 0, $$0341$us$i80 = 0, $$0342$us$i = 0, $$0342$us$i61 = 0, $$0342$us$i70 = 0, $$0342$us$i88 = 0, $$0351$us$i = 0, $$0351$us$i62 = 0, $$0351$us$i71 = 0, $$0351$us$i89 = 0, $$0353$us$i = 0, $$0353$us$i44 = 0, $$0353$us$i77 = 0, $$0363$us$i = 0, $$0363$us$i59 = 0, $$0363$us$i68 = 0;
 var $$0363$us$i86 = 0, $$04$us$i = 0, $$04$us$i43 = 0, $$04$us$i52 = 0, $$04$us$i58 = 0, $$04$us$i67 = 0, $$04$us$i76 = 0, $$04$us$i85 = 0, $$idx = 0, $$idx$val = 0, $$idx35 = 0, $$idx35$val = 0, $$idx36 = 0, $$idx36$val = 0, $$idx37 = 0, $$idx37$val = 0, $$idx38 = 0, $$idx38$val = 0, $$idx39 = 0, $$idx39$val = 0;
 var $$idx40 = 0, $$idx40$val = 0, $$in$i = 0, $$in$i42 = 0, $$in$i51 = 0, $$in$i57 = 0, $$in$i66 = 0, $$in$i75 = 0, $$in$i84 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i48 = 0, $exitcond$i54 = 0, $exitcond$i63 = 0, $exitcond$i72 = 0, $exitcond$i81 = 0, $exitcond$i90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 6:  {
  $$idx = ((($0)) + 112|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $7 = ($4|0)>(0);
  if (!($7)) {
   return;
  }
  $8 = ((($1)) + 4|0);
  $9 = ((($1)) + 8|0);
  $10 = ($$idx$val|0)==(0);
  if ($10) {
   return;
  } else {
   $$0353$us$i = $3;$$04$us$i = $2;$$in$i = $4;
  }
  while(1) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + ($$04$us$i<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$8>>2]|0;
   $15 = (($14) + ($$04$us$i<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + ($$04$us$i<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$$0353$us$i>>2]|0;
   $$0332$us$i = 0;$$0341$us$i = $20;
   while(1) {
    $21 = (($13) + ($$0332$us$i)|0);
    $22 = HEAP8[$21>>0]|0;
    HEAP8[$$0341$us$i>>0] = $22;
    $23 = (($16) + ($$0332$us$i)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ((($$0341$us$i)) + 1|0);
    HEAP8[$25>>0] = $24;
    $26 = (($19) + ($$0332$us$i)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ((($$0341$us$i)) + 2|0);
    HEAP8[$28>>0] = $27;
    $29 = ((($$0341$us$i)) + 3|0);
    $30 = (($$0332$us$i) + 1)|0;
    $exitcond$i = ($30|0)==($$idx$val|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0332$us$i = $30;$$0341$us$i = $29;
    }
   }
   $31 = (($$in$i) + -1)|0;
   $32 = (($$04$us$i) + 1)|0;
   $33 = ((($$0353$us$i)) + 4|0);
   $34 = ($$in$i|0)>(1);
   if ($34) {
    $$0353$us$i = $33;$$04$us$i = $32;$$in$i = $31;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 12: case 7:  {
  $$idx35 = ((($0)) + 112|0);
  $$idx35$val = HEAP32[$$idx35>>2]|0;
  $35 = ($4|0)>(0);
  if (!($35)) {
   return;
  }
  $36 = ((($1)) + 4|0);
  $37 = ((($1)) + 8|0);
  $38 = ($$idx35$val|0)==(0);
  if ($38) {
   return;
  } else {
   $$0363$us$i86 = $3;$$04$us$i85 = $2;$$in$i84 = $4;
  }
  while(1) {
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + ($$04$us$i85<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$36>>2]|0;
   $43 = (($42) + ($$04$us$i85<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$37>>2]|0;
   $46 = (($45) + ($$04$us$i85<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$$0363$us$i86>>2]|0;
   $$0342$us$i88 = 0;$$0351$us$i89 = $48;
   while(1) {
    $49 = (($41) + ($$0342$us$i88)|0);
    $50 = HEAP8[$49>>0]|0;
    HEAP8[$$0351$us$i89>>0] = $50;
    $51 = (($44) + ($$0342$us$i88)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = ((($$0351$us$i89)) + 1|0);
    HEAP8[$53>>0] = $52;
    $54 = (($47) + ($$0342$us$i88)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = ((($$0351$us$i89)) + 2|0);
    HEAP8[$56>>0] = $55;
    $57 = ((($$0351$us$i89)) + 3|0);
    HEAP8[$57>>0] = -1;
    $58 = ((($$0351$us$i89)) + 4|0);
    $59 = (($$0342$us$i88) + 1)|0;
    $exitcond$i90 = ($59|0)==($$idx35$val|0);
    if ($exitcond$i90) {
     break;
    } else {
     $$0342$us$i88 = $59;$$0351$us$i89 = $58;
    }
   }
   $60 = (($$in$i84) + -1)|0;
   $61 = (($$04$us$i85) + 1)|0;
   $62 = ((($$0363$us$i86)) + 4|0);
   $63 = ($$in$i84|0)>(1);
   if ($63) {
    $$0363$us$i86 = $62;$$04$us$i85 = $61;$$in$i84 = $60;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 8:  {
  $$idx36 = ((($0)) + 112|0);
  $$idx36$val = HEAP32[$$idx36>>2]|0;
  $64 = ($4|0)>(0);
  if (!($64)) {
   return;
  }
  $65 = ((($1)) + 4|0);
  $66 = ((($1)) + 8|0);
  $67 = ($$idx36$val|0)==(0);
  if ($67) {
   return;
  } else {
   $$0353$us$i77 = $3;$$04$us$i76 = $2;$$in$i75 = $4;
  }
  while(1) {
   $68 = HEAP32[$1>>2]|0;
   $69 = (($68) + ($$04$us$i76<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$65>>2]|0;
   $72 = (($71) + ($$04$us$i76<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$66>>2]|0;
   $75 = (($74) + ($$04$us$i76<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$$0353$us$i77>>2]|0;
   $$0332$us$i79 = 0;$$0341$us$i80 = $77;
   while(1) {
    $78 = (($70) + ($$0332$us$i79)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($$0341$us$i80)) + 2|0);
    HEAP8[$80>>0] = $79;
    $81 = (($73) + ($$0332$us$i79)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($$0341$us$i80)) + 1|0);
    HEAP8[$83>>0] = $82;
    $84 = (($76) + ($$0332$us$i79)|0);
    $85 = HEAP8[$84>>0]|0;
    HEAP8[$$0341$us$i80>>0] = $85;
    $86 = ((($$0341$us$i80)) + 3|0);
    $87 = (($$0332$us$i79) + 1)|0;
    $exitcond$i81 = ($87|0)==($$idx36$val|0);
    if ($exitcond$i81) {
     break;
    } else {
     $$0332$us$i79 = $87;$$0341$us$i80 = $86;
    }
   }
   $88 = (($$in$i75) + -1)|0;
   $89 = (($$04$us$i76) + 1)|0;
   $90 = ((($$0353$us$i77)) + 4|0);
   $91 = ($$in$i75|0)>(1);
   if ($91) {
    $$0353$us$i77 = $90;$$04$us$i76 = $89;$$in$i75 = $88;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 13: case 9:  {
  $$idx37 = ((($0)) + 112|0);
  $$idx37$val = HEAP32[$$idx37>>2]|0;
  $92 = ($4|0)>(0);
  if (!($92)) {
   return;
  }
  $93 = ((($1)) + 4|0);
  $94 = ((($1)) + 8|0);
  $95 = ($$idx37$val|0)==(0);
  if ($95) {
   return;
  } else {
   $$0363$us$i68 = $3;$$04$us$i67 = $2;$$in$i66 = $4;
  }
  while(1) {
   $96 = HEAP32[$1>>2]|0;
   $97 = (($96) + ($$04$us$i67<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = HEAP32[$93>>2]|0;
   $100 = (($99) + ($$04$us$i67<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[$94>>2]|0;
   $103 = (($102) + ($$04$us$i67<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$$0363$us$i68>>2]|0;
   $$0342$us$i70 = 0;$$0351$us$i71 = $105;
   while(1) {
    $106 = (($98) + ($$0342$us$i70)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ((($$0351$us$i71)) + 2|0);
    HEAP8[$108>>0] = $107;
    $109 = (($101) + ($$0342$us$i70)|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = ((($$0351$us$i71)) + 1|0);
    HEAP8[$111>>0] = $110;
    $112 = (($104) + ($$0342$us$i70)|0);
    $113 = HEAP8[$112>>0]|0;
    HEAP8[$$0351$us$i71>>0] = $113;
    $114 = ((($$0351$us$i71)) + 3|0);
    HEAP8[$114>>0] = -1;
    $115 = ((($$0351$us$i71)) + 4|0);
    $116 = (($$0342$us$i70) + 1)|0;
    $exitcond$i72 = ($116|0)==($$idx37$val|0);
    if ($exitcond$i72) {
     break;
    } else {
     $$0342$us$i70 = $116;$$0351$us$i71 = $115;
    }
   }
   $117 = (($$in$i66) + -1)|0;
   $118 = (($$04$us$i67) + 1)|0;
   $119 = ((($$0363$us$i68)) + 4|0);
   $120 = ($$in$i66|0)>(1);
   if ($120) {
    $$0363$us$i68 = $119;$$04$us$i67 = $118;$$in$i66 = $117;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 14: case 10:  {
  $$idx38 = ((($0)) + 112|0);
  $$idx38$val = HEAP32[$$idx38>>2]|0;
  $121 = ($4|0)>(0);
  if (!($121)) {
   return;
  }
  $122 = ((($1)) + 4|0);
  $123 = ((($1)) + 8|0);
  $124 = ($$idx38$val|0)==(0);
  if ($124) {
   return;
  } else {
   $$0363$us$i59 = $3;$$04$us$i58 = $2;$$in$i57 = $4;
  }
  while(1) {
   $125 = HEAP32[$1>>2]|0;
   $126 = (($125) + ($$04$us$i58<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = HEAP32[$122>>2]|0;
   $129 = (($128) + ($$04$us$i58<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = HEAP32[$123>>2]|0;
   $132 = (($131) + ($$04$us$i58<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = HEAP32[$$0363$us$i59>>2]|0;
   $$0342$us$i61 = 0;$$0351$us$i62 = $134;
   while(1) {
    $135 = (($127) + ($$0342$us$i61)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = ((($$0351$us$i62)) + 3|0);
    HEAP8[$137>>0] = $136;
    $138 = (($130) + ($$0342$us$i61)|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = ((($$0351$us$i62)) + 2|0);
    HEAP8[$140>>0] = $139;
    $141 = (($133) + ($$0342$us$i61)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = ((($$0351$us$i62)) + 1|0);
    HEAP8[$143>>0] = $142;
    HEAP8[$$0351$us$i62>>0] = -1;
    $144 = ((($$0351$us$i62)) + 4|0);
    $145 = (($$0342$us$i61) + 1)|0;
    $exitcond$i63 = ($145|0)==($$idx38$val|0);
    if ($exitcond$i63) {
     break;
    } else {
     $$0342$us$i61 = $145;$$0351$us$i62 = $144;
    }
   }
   $146 = (($$in$i57) + -1)|0;
   $147 = (($$04$us$i58) + 1)|0;
   $148 = ((($$0363$us$i59)) + 4|0);
   $149 = ($$in$i57|0)>(1);
   if ($149) {
    $$0363$us$i59 = $148;$$04$us$i58 = $147;$$in$i57 = $146;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 15: case 11:  {
  $$idx39 = ((($0)) + 112|0);
  $$idx39$val = HEAP32[$$idx39>>2]|0;
  $150 = ($4|0)>(0);
  if (!($150)) {
   return;
  }
  $151 = ((($1)) + 4|0);
  $152 = ((($1)) + 8|0);
  $153 = ($$idx39$val|0)==(0);
  if ($153) {
   return;
  } else {
   $$0363$us$i = $3;$$04$us$i52 = $2;$$in$i51 = $4;
  }
  while(1) {
   $154 = HEAP32[$1>>2]|0;
   $155 = (($154) + ($$04$us$i52<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP32[$151>>2]|0;
   $158 = (($157) + ($$04$us$i52<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = HEAP32[$152>>2]|0;
   $161 = (($160) + ($$04$us$i52<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = HEAP32[$$0363$us$i>>2]|0;
   $$0342$us$i = 0;$$0351$us$i = $163;
   while(1) {
    $164 = (($156) + ($$0342$us$i)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = ((($$0351$us$i)) + 1|0);
    HEAP8[$166>>0] = $165;
    $167 = (($159) + ($$0342$us$i)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = ((($$0351$us$i)) + 2|0);
    HEAP8[$169>>0] = $168;
    $170 = (($162) + ($$0342$us$i)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = ((($$0351$us$i)) + 3|0);
    HEAP8[$172>>0] = $171;
    HEAP8[$$0351$us$i>>0] = -1;
    $173 = ((($$0351$us$i)) + 4|0);
    $174 = (($$0342$us$i) + 1)|0;
    $exitcond$i54 = ($174|0)==($$idx39$val|0);
    if ($exitcond$i54) {
     break;
    } else {
     $$0342$us$i = $174;$$0351$us$i = $173;
    }
   }
   $175 = (($$in$i51) + -1)|0;
   $176 = (($$04$us$i52) + 1)|0;
   $177 = ((($$0363$us$i)) + 4|0);
   $178 = ($$in$i51|0)>(1);
   if ($178) {
    $$0363$us$i = $177;$$04$us$i52 = $176;$$in$i51 = $175;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  $$idx40 = ((($0)) + 112|0);
  $$idx40$val = HEAP32[$$idx40>>2]|0;
  $179 = ($4|0)>(0);
  if (!($179)) {
   return;
  }
  $180 = ((($1)) + 4|0);
  $181 = ((($1)) + 8|0);
  $182 = ($$idx40$val|0)==(0);
  if ($182) {
   return;
  } else {
   $$0353$us$i44 = $3;$$04$us$i43 = $2;$$in$i42 = $4;
  }
  while(1) {
   $183 = HEAP32[$1>>2]|0;
   $184 = (($183) + ($$04$us$i43<<2)|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = HEAP32[$180>>2]|0;
   $187 = (($186) + ($$04$us$i43<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = HEAP32[$181>>2]|0;
   $190 = (($189) + ($$04$us$i43<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = HEAP32[$$0353$us$i44>>2]|0;
   $$0332$us$i46 = 0;$$0341$us$i47 = $192;
   while(1) {
    $193 = (($185) + ($$0332$us$i46)|0);
    $194 = HEAP8[$193>>0]|0;
    HEAP8[$$0341$us$i47>>0] = $194;
    $195 = (($188) + ($$0332$us$i46)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = ((($$0341$us$i47)) + 1|0);
    HEAP8[$197>>0] = $196;
    $198 = (($191) + ($$0332$us$i46)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = ((($$0341$us$i47)) + 2|0);
    HEAP8[$200>>0] = $199;
    $201 = ((($$0341$us$i47)) + 3|0);
    $202 = (($$0332$us$i46) + 1)|0;
    $exitcond$i48 = ($202|0)==($$idx40$val|0);
    if ($exitcond$i48) {
     break;
    } else {
     $$0332$us$i46 = $202;$$0341$us$i47 = $201;
    }
   }
   $203 = (($$in$i42) + -1)|0;
   $204 = (($$04$us$i43) + 1)|0;
   $205 = ((($$0353$us$i44)) + 4|0);
   $206 = ($$in$i42|0)>(1);
   if ($206) {
    $$0353$us$i44 = $205;$$04$us$i43 = $204;$$in$i42 = $203;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _null_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0110$us$us = 0, $$088131$us = 0, $$089130$us = 0, $$092127$us = 0, $$095126$us = 0, $$1138$us = 0, $$190137$us = 0, $$193134$us = 0, $$196133$us = 0, $$2116$us = 0, $$291113$us = 0, $$294109$us$us = 0, $$297108$us$us = 0, $$in = 0, $$in150 = 0, $$in151 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $exitcond = 0, $exitcond146 = 0, $exitcond148 = 0, $exitcond149 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($6|0) {
 case 3:  {
  $44 = ($4|0)>(0);
  if (!($44)) {
   return;
  }
  $45 = ((($1)) + 4|0);
  $46 = ((($1)) + 8|0);
  $47 = ($8|0)==(0);
  if ($47) {
   return;
  } else {
   $$088131$us = $2;$$089130$us = $3;$$in150 = $4;
  }
  while(1) {
   $48 = (($$in150) + -1)|0;
   $49 = HEAP32[$1>>2]|0;
   $50 = (($49) + ($$088131$us<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$45>>2]|0;
   $53 = (($52) + ($$088131$us<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$46>>2]|0;
   $56 = (($55) + ($$088131$us<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($$088131$us) + 1)|0;
   $59 = HEAP32[$$089130$us>>2]|0;
   $$092127$us = 0;$$095126$us = $59;
   while(1) {
    $60 = (($51) + ($$092127$us)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = ((($$095126$us)) + 1|0);
    HEAP8[$$095126$us>>0] = $61;
    $63 = (($54) + ($$092127$us)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = ((($$095126$us)) + 2|0);
    HEAP8[$62>>0] = $64;
    $66 = (($57) + ($$092127$us)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ((($$095126$us)) + 3|0);
    HEAP8[$65>>0] = $67;
    $69 = (($$092127$us) + 1)|0;
    $exitcond148 = ($69|0)==($8|0);
    if ($exitcond148) {
     break;
    } else {
     $$092127$us = $69;$$095126$us = $68;
    }
   }
   $70 = ((($$089130$us)) + 4|0);
   $71 = ($$in150|0)>(1);
   if ($71) {
    $$088131$us = $58;$$089130$us = $70;$$in150 = $48;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 4:  {
  $9 = ($4|0)>(0);
  if (!($9)) {
   return;
  }
  $10 = ((($1)) + 4|0);
  $11 = ((($1)) + 8|0);
  $12 = ((($1)) + 12|0);
  $13 = ($8|0)==(0);
  if ($13) {
   return;
  } else {
   $$1138$us = $2;$$190137$us = $3;$$in = $4;
  }
  while(1) {
   $14 = (($$in) + -1)|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + ($$1138$us<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$10>>2]|0;
   $19 = (($18) + ($$1138$us<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$11>>2]|0;
   $22 = (($21) + ($$1138$us<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$12>>2]|0;
   $25 = (($24) + ($$1138$us<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($$1138$us) + 1)|0;
   $28 = HEAP32[$$190137$us>>2]|0;
   $$193134$us = 0;$$196133$us = $28;
   while(1) {
    $29 = (($17) + ($$193134$us)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ((($$196133$us)) + 1|0);
    HEAP8[$$196133$us>>0] = $30;
    $32 = (($20) + ($$193134$us)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ((($$196133$us)) + 2|0);
    HEAP8[$31>>0] = $33;
    $35 = (($23) + ($$193134$us)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = ((($$196133$us)) + 3|0);
    HEAP8[$34>>0] = $36;
    $38 = (($26) + ($$193134$us)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ((($$196133$us)) + 4|0);
    HEAP8[$37>>0] = $39;
    $41 = (($$193134$us) + 1)|0;
    $exitcond149 = ($41|0)==($8|0);
    if ($exitcond149) {
     break;
    } else {
     $$193134$us = $41;$$196133$us = $40;
    }
   }
   $42 = ((($$190137$us)) + 4|0);
   $43 = ($$in|0)>(1);
   if ($43) {
    $$1138$us = $27;$$190137$us = $42;$$in = $14;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  $72 = ($4|0)>(0);
  if (!($72)) {
   return;
  }
  $73 = ($6|0)>(0);
  $74 = ($8|0)==(0);
  if ($73) {
   $$2116$us = $2;$$291113$us = $3;$$in151 = $4;
  } else {
   return;
  }
  while(1) {
   $75 = (($$in151) + -1)|0;
   if (!($74)) {
    $$0110$us$us = 0;
    while(1) {
     $79 = (($1) + ($$0110$us$us<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + ($$2116$us<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$$291113$us>>2]|0;
     $$294109$us$us = 0;$$297108$us$us = $83;
     while(1) {
      $85 = (($82) + ($$294109$us$us)|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = (($$297108$us$us) + ($$0110$us$us)|0);
      HEAP8[$87>>0] = $86;
      $88 = (($$297108$us$us) + ($6)|0);
      $89 = (($$294109$us$us) + 1)|0;
      $exitcond = ($89|0)==($8|0);
      if ($exitcond) {
       break;
      } else {
       $$294109$us$us = $89;$$297108$us$us = $88;
      }
     }
     $84 = (($$0110$us$us) + 1)|0;
     $exitcond146 = ($84|0)==($6|0);
     if ($exitcond146) {
      break;
     } else {
      $$0110$us$us = $84;
     }
    }
   }
   $76 = ((($$291113$us)) + 4|0);
   $77 = (($$2116$us) + 1)|0;
   $78 = ($$in151|0)>(1);
   if ($78) {
    $$2116$us = $77;$$291113$us = $76;$$in151 = $75;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _ycc_rgb565_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0147168$i = 0, $$0149167$i = 0, $$0150163$i = 0, $$0151$i = 0, $$0153$i = 0, $$0155$i = 0, $$0157$i = 0, $$0169$i = 0, $$1$i = 0, $$1152$lcssa$i = 0, $$1152162$i = 0, $$1154$lcssa$i = 0, $$1154161$i = 0, $$1156$lcssa$i = 0, $$1156160$i = 0, $$1158$lcssa$i = 0, $$1158159$i = 0, $$in$i = 0, $$pre$i = 0, $$pre179$i = 0;
 var $$pre180$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $scevgep$i = 0, $scevgep176$i = 0, $scevgep177$i = 0, $scevgep178$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 456|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 324|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($6)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($4|0)>(0);
 if (!($17)) {
  return;
 }
 $18 = ((($0)) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 4|0);
 $21 = ((($1)) + 8|0);
 $$pre$i = HEAP32[$1>>2]|0;
 $$pre179$i = HEAP32[$20>>2]|0;
 $$pre180$i = HEAP32[$21>>2]|0;
 $$0147168$i = $3;$$0149167$i = $19;$$0169$i = $2;$$in$i = $4;
 while(1) {
  $22 = (($$in$i) + -1)|0;
  $23 = (($$pre$i) + ($$0169$i<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($$pre179$i) + ($$0169$i<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($$pre180$i) + ($$0169$i<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($$0169$i) + 1)|0;
  $30 = ((($$0147168$i)) + 4|0);
  $31 = HEAP32[$$0147168$i>>2]|0;
  $32 = $31;
  $33 = $32 & 3;
  $34 = ($33|0)==(0);
  if ($34) {
   $$0151$i = $28;$$0153$i = $26;$$0155$i = $24;$$0157$i = $31;$$1$i = $$0149167$i;
  } else {
   $35 = ((($24)) + 1|0);
   $36 = HEAP8[$24>>0]|0;
   $37 = $36&255;
   $38 = ((($26)) + 1|0);
   $39 = HEAP8[$26>>0]|0;
   $40 = $39&255;
   $41 = ((($28)) + 1|0);
   $42 = HEAP8[$28>>0]|0;
   $43 = $42&255;
   $44 = (($10) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($37))|0;
   $47 = (($8) + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($16) + ($40<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($14) + ($43<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($51))|0;
   $55 = $54 >> 16;
   $56 = (($55) + ($37))|0;
   $57 = (($8) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($12) + ($40<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($37))|0;
   $63 = (($8) + ($62)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $49 << 8;
   $67 = $66 & 63488;
   $68 = $59 << 3;
   $69 = $68 & 2016;
   $70 = $69 | $67;
   $71 = $65 >>> 3;
   $72 = $70 | $71;
   $73 = $72&65535;
   HEAP16[$31>>1] = $73;
   $74 = ((($31)) + 2|0);
   $75 = (($$0149167$i) + -1)|0;
   $$0151$i = $41;$$0153$i = $38;$$0155$i = $35;$$0157$i = $74;$$1$i = $75;
  }
  $76 = $$1$i >>> 1;
  $77 = ($76|0)==(0);
  if ($77) {
   $$1152$lcssa$i = $$0151$i;$$1154$lcssa$i = $$0153$i;$$1156$lcssa$i = $$0155$i;$$1158$lcssa$i = $$0157$i;
  } else {
   $78 = $$1$i & -2;
   $scevgep176$i = (($$0153$i) + ($78)|0);
   $$0150163$i = 0;$$1152162$i = $$0151$i;$$1154161$i = $$0153$i;$$1156160$i = $$0155$i;$$1158159$i = $$0157$i;
   while(1) {
    $79 = ((($$1156160$i)) + 1|0);
    $80 = HEAP8[$$1156160$i>>0]|0;
    $81 = $80&255;
    $82 = ((($$1154161$i)) + 1|0);
    $83 = HEAP8[$$1154161$i>>0]|0;
    $84 = $83&255;
    $85 = ((($$1152162$i)) + 1|0);
    $86 = HEAP8[$$1152162$i>>0]|0;
    $87 = $86&255;
    $88 = (($10) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($81))|0;
    $91 = (($8) + ($90)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = (($16) + ($84<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($14) + ($87<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($95))|0;
    $99 = $98 >> 16;
    $100 = (($99) + ($81))|0;
    $101 = (($8) + ($100)|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = (($12) + ($84<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($81))|0;
    $107 = (($8) + ($106)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = $93 << 8;
    $111 = $110 & 63488;
    $112 = $103 << 3;
    $113 = $112 & 2016;
    $114 = $113 | $111;
    $115 = $109 >>> 3;
    $116 = $114 | $115;
    $117 = ((($$1156160$i)) + 2|0);
    $118 = HEAP8[$79>>0]|0;
    $119 = $118&255;
    $120 = ((($$1154161$i)) + 2|0);
    $121 = HEAP8[$82>>0]|0;
    $122 = $121&255;
    $123 = ((($$1152162$i)) + 2|0);
    $124 = HEAP8[$85>>0]|0;
    $125 = $124&255;
    $126 = (($10) + ($125<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) + ($119))|0;
    $129 = (($8) + ($128)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = (($16) + ($122<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($14) + ($125<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($133))|0;
    $137 = $136 >> 16;
    $138 = (($137) + ($119))|0;
    $139 = (($8) + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = (($12) + ($122<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + ($119))|0;
    $145 = (($8) + ($144)|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    $148 = $131 << 8;
    $149 = $148 & 63488;
    $150 = $141 << 3;
    $151 = $150 & 2016;
    $152 = $151 | $149;
    $153 = $147 >>> 3;
    $154 = $152 | $153;
    $155 = $154 << 16;
    $156 = $116 | $155;
    HEAP32[$$1158159$i>>2] = $156;
    $157 = ((($$1158159$i)) + 4|0);
    $158 = (($$0150163$i) + 1)|0;
    $exitcond$i = ($158|0)==($76|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0150163$i = $158;$$1152162$i = $123;$$1154161$i = $120;$$1156160$i = $117;$$1158159$i = $157;
    }
   }
   $159 = $76 << 2;
   $scevgep$i = (($$0155$i) + ($78)|0);
   $scevgep177$i = (($$0151$i) + ($78)|0);
   $scevgep178$i = (($$0157$i) + ($159)|0);
   $$1152$lcssa$i = $scevgep177$i;$$1154$lcssa$i = $scevgep176$i;$$1156$lcssa$i = $scevgep$i;$$1158$lcssa$i = $scevgep178$i;
  }
  $160 = $$1$i & 1;
  $161 = ($160|0)==(0);
  if (!($161)) {
   $163 = HEAP8[$$1156$lcssa$i>>0]|0;
   $164 = $163&255;
   $165 = HEAP8[$$1154$lcssa$i>>0]|0;
   $166 = $165&255;
   $167 = HEAP8[$$1152$lcssa$i>>0]|0;
   $168 = $167&255;
   $169 = (($10) + ($168<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + ($164))|0;
   $172 = (($8) + ($171)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = (($16) + ($166<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($14) + ($168<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($176))|0;
   $180 = $179 >> 16;
   $181 = (($180) + ($164))|0;
   $182 = (($8) + ($181)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = (($12) + ($166<<2)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($164))|0;
   $188 = (($8) + ($187)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $174 << 8;
   $192 = $191 & 63488;
   $193 = $184 << 3;
   $194 = $193 & 2016;
   $195 = $194 | $192;
   $196 = $190 >>> 3;
   $197 = $195 | $196;
   $198 = $197&65535;
   HEAP16[$$1158$lcssa$i>>1] = $198;
  }
  $162 = ($$in$i|0)>(1);
  if ($162) {
   $$0147168$i = $30;$$0149167$i = $$1$i;$$0169$i = $29;$$in$i = $22;
  } else {
   break;
  }
 }
 return;
}
function _gray_rgb565_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0463$i = 0, $$047$i = 0, $$049$i = 0, $$0526$i = 0, $$0535$i = 0, $$07$i = 0, $$1$i = 0, $$148$lcssa$i = 0, $$1482$i = 0, $$150$lcssa$i = 0, $$1501$i = 0, $$idx = 0, $$idx$val = 0, $$in$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $scevgep$i = 0, $scevgep12$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)>(0);
 if (!($5)) {
  return;
 }
 $$idx = ((($0)) + 112|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$pre$i = HEAP32[$1>>2]|0;
 $$0526$i = $3;$$0535$i = $2;$$07$i = $$idx$val;$$in$i = $4;
 while(1) {
  $6 = (($$in$i) + -1)|0;
  $7 = (($$0535$i) + 1)|0;
  $8 = (($$pre$i) + ($$0535$i<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($$0526$i)) + 4|0);
  $11 = HEAP32[$$0526$i>>2]|0;
  $12 = $11;
  $13 = $12 & 3;
  $14 = ($13|0)==(0);
  if ($14) {
   $$047$i = $11;$$049$i = $9;$$1$i = $$07$i;
  } else {
   $15 = ((($9)) + 1|0);
   $16 = HEAP8[$9>>0]|0;
   $17 = $16&255;
   $18 = $17 << 8;
   $19 = $18 & 63488;
   $20 = $17 << 3;
   $21 = $20 & 2016;
   $22 = $17 >>> 3;
   $23 = $21 | $22;
   $24 = $23 | $19;
   $25 = $24&65535;
   HEAP16[$11>>1] = $25;
   $26 = ((($11)) + 2|0);
   $27 = (($$07$i) + -1)|0;
   $$047$i = $26;$$049$i = $15;$$1$i = $27;
  }
  $28 = $$1$i >>> 1;
  $29 = ($28|0)==(0);
  if ($29) {
   $$148$lcssa$i = $$047$i;$$150$lcssa$i = $$049$i;
  } else {
   $30 = $$1$i & -2;
   $$0463$i = 0;$$1482$i = $$047$i;$$1501$i = $$049$i;
   while(1) {
    $31 = ((($$1501$i)) + 1|0);
    $32 = HEAP8[$$1501$i>>0]|0;
    $33 = $32&255;
    $34 = $33 << 8;
    $35 = $34 & 63488;
    $36 = $33 << 3;
    $37 = $36 & 2016;
    $38 = $33 >>> 3;
    $39 = ((($$1501$i)) + 2|0);
    $40 = HEAP8[$31>>0]|0;
    $41 = $40&255;
    $42 = $41 << 8;
    $43 = $42 & 63488;
    $44 = $41 << 3;
    $45 = $44 & 2016;
    $46 = $41 >>> 3;
    $47 = $45 | $46;
    $48 = $47 | $43;
    $49 = $48 << 16;
    $50 = $37 | $38;
    $51 = $50 | $35;
    $52 = $51 | $49;
    HEAP32[$$1482$i>>2] = $52;
    $53 = ((($$1482$i)) + 4|0);
    $54 = (($$0463$i) + 1)|0;
    $exitcond$i = ($54|0)==($28|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0463$i = $54;$$1482$i = $53;$$1501$i = $39;
    }
   }
   $55 = $28 << 2;
   $scevgep$i = (($$049$i) + ($30)|0);
   $scevgep12$i = (($$047$i) + ($55)|0);
   $$148$lcssa$i = $scevgep12$i;$$150$lcssa$i = $scevgep$i;
  }
  $56 = $$1$i & 1;
  $57 = ($56|0)==(0);
  if (!($57)) {
   $59 = HEAP8[$$150$lcssa$i>>0]|0;
   $60 = $59&255;
   $61 = $60 << 8;
   $62 = $61 & 63488;
   $63 = $60 << 3;
   $64 = $63 & 2016;
   $65 = $60 >>> 3;
   $66 = $64 | $65;
   $67 = $66 | $62;
   $68 = $67&65535;
   HEAP16[$$148$lcssa$i>>1] = $68;
  }
  $58 = ($$in$i|0)>(1);
  if ($58) {
   $$0526$i = $10;$$0535$i = $7;$$07$i = $$1$i;$$in$i = $6;
  } else {
   break;
  }
 }
 return;
}
function _rgb_rgb565_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$011$i = 0, $$0675$i = 0, $$068$i = 0, $$070$i = 0, $$072$i = 0, $$074$i = 0, $$07710$i = 0, $$0789$i = 0, $$1$i = 0, $$169$lcssa$i = 0, $$1694$i = 0, $$171$lcssa$i = 0, $$1713$i = 0, $$173$lcssa$i = 0, $$1732$i = 0, $$175$lcssa$i = 0, $$1751$i = 0, $$idx = 0, $$idx$val = 0, $$in$i = 0;
 var $$pre$i = 0, $$pre21$i = 0, $$pre22$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $exitcond$i = 0, $scevgep$i = 0, $scevgep18$i = 0, $scevgep19$i = 0, $scevgep20$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)>(0);
 if (!($5)) {
  return;
 }
 $$idx = ((($0)) + 112|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = ((($1)) + 8|0);
 $$pre$i = HEAP32[$1>>2]|0;
 $$pre21$i = HEAP32[$6>>2]|0;
 $$pre22$i = HEAP32[$7>>2]|0;
 $$011$i = $$idx$val;$$07710$i = $3;$$0789$i = $2;$$in$i = $4;
 while(1) {
  $8 = (($$in$i) + -1)|0;
  $9 = (($$pre$i) + ($$0789$i<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($$pre21$i) + ($$0789$i<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($$pre22$i) + ($$0789$i<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($$0789$i) + 1)|0;
  $16 = ((($$07710$i)) + 4|0);
  $17 = HEAP32[$$07710$i>>2]|0;
  $18 = $17;
  $19 = $18 & 3;
  $20 = ($19|0)==(0);
  if ($20) {
   $$068$i = $14;$$070$i = $12;$$072$i = $10;$$074$i = $17;$$1$i = $$011$i;
  } else {
   $21 = ((($10)) + 1|0);
   $22 = HEAP8[$10>>0]|0;
   $23 = $22&255;
   $24 = ((($12)) + 1|0);
   $25 = HEAP8[$12>>0]|0;
   $26 = $25&255;
   $27 = ((($14)) + 1|0);
   $28 = HEAP8[$14>>0]|0;
   $29 = $28&255;
   $30 = $23 << 8;
   $31 = $30 & 63488;
   $32 = $26 << 3;
   $33 = $32 & 2016;
   $34 = $33 | $31;
   $35 = $29 >>> 3;
   $36 = $34 | $35;
   $37 = $36&65535;
   HEAP16[$17>>1] = $37;
   $38 = ((($17)) + 2|0);
   $39 = (($$011$i) + -1)|0;
   $$068$i = $27;$$070$i = $24;$$072$i = $21;$$074$i = $38;$$1$i = $39;
  }
  $40 = $$1$i >>> 1;
  $41 = ($40|0)==(0);
  if ($41) {
   $$169$lcssa$i = $$068$i;$$171$lcssa$i = $$070$i;$$173$lcssa$i = $$072$i;$$175$lcssa$i = $$074$i;
  } else {
   $42 = $$1$i & -2;
   $scevgep18$i = (($$070$i) + ($42)|0);
   $$0675$i = 0;$$1694$i = $$068$i;$$1713$i = $$070$i;$$1732$i = $$072$i;$$1751$i = $$074$i;
   while(1) {
    $43 = ((($$1732$i)) + 1|0);
    $44 = HEAP8[$$1732$i>>0]|0;
    $45 = $44&255;
    $46 = ((($$1713$i)) + 1|0);
    $47 = HEAP8[$$1713$i>>0]|0;
    $48 = $47&255;
    $49 = ((($$1694$i)) + 1|0);
    $50 = HEAP8[$$1694$i>>0]|0;
    $51 = $50&255;
    $52 = $45 << 8;
    $53 = $52 & 63488;
    $54 = $48 << 3;
    $55 = $54 & 2016;
    $56 = $55 | $53;
    $57 = $51 >>> 3;
    $58 = $56 | $57;
    $59 = ((($$1732$i)) + 2|0);
    $60 = HEAP8[$43>>0]|0;
    $61 = $60&255;
    $62 = ((($$1713$i)) + 2|0);
    $63 = HEAP8[$46>>0]|0;
    $64 = $63&255;
    $65 = ((($$1694$i)) + 2|0);
    $66 = HEAP8[$49>>0]|0;
    $67 = $66&255;
    $68 = $61 << 8;
    $69 = $68 & 63488;
    $70 = $64 << 3;
    $71 = $70 & 2016;
    $72 = $71 | $69;
    $73 = $67 >>> 3;
    $74 = $72 | $73;
    $75 = $74 << 16;
    $76 = $58 | $75;
    HEAP32[$$1751$i>>2] = $76;
    $77 = ((($$1751$i)) + 4|0);
    $78 = (($$0675$i) + 1)|0;
    $exitcond$i = ($78|0)==($40|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0675$i = $78;$$1694$i = $65;$$1713$i = $62;$$1732$i = $59;$$1751$i = $77;
    }
   }
   $79 = $40 << 2;
   $scevgep$i = (($$072$i) + ($42)|0);
   $scevgep19$i = (($$068$i) + ($42)|0);
   $scevgep20$i = (($$074$i) + ($79)|0);
   $$169$lcssa$i = $scevgep19$i;$$171$lcssa$i = $scevgep18$i;$$173$lcssa$i = $scevgep$i;$$175$lcssa$i = $scevgep20$i;
  }
  $80 = $$1$i & 1;
  $81 = ($80|0)==(0);
  if (!($81)) {
   $83 = HEAP8[$$173$lcssa$i>>0]|0;
   $84 = $83&255;
   $85 = HEAP8[$$171$lcssa$i>>0]|0;
   $86 = $85&255;
   $87 = HEAP8[$$169$lcssa$i>>0]|0;
   $88 = $87&255;
   $89 = $84 << 8;
   $90 = $89 & 63488;
   $91 = $86 << 3;
   $92 = $91 & 2016;
   $93 = $92 | $90;
   $94 = $88 >>> 3;
   $95 = $93 | $94;
   $96 = $95&65535;
   HEAP16[$$175$lcssa$i>>1] = $96;
  }
  $82 = ($$in$i|0)>(1);
  if ($82) {
   $$011$i = $$1$i;$$07710$i = $16;$$0789$i = $15;$$in$i = $8;
  } else {
   break;
  }
 }
 return;
}
function _ycc_rgb565D_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0166192$i = 0, $$0167191$i = 0, $$0169190$i = 0, $$0171184$i = 0, $$0172$i = 0, $$0174$i = 0, $$0176$i = 0, $$0178$i = 0, $$0193$i = 0, $$1$lcssa$i = 0, $$1170$i = 0, $$1173$lcssa$i = 0, $$1173183$i = 0, $$1175$lcssa$i = 0, $$1175182$i = 0, $$1177$lcssa$i = 0, $$1177181$i = 0, $$1179$lcssa$i = 0, $$1179180$i = 0, $$1185$i = 0;
 var $$in$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $scevgep$i = 0, $scevgep201$i = 0, $scevgep202$i = 0, $scevgep203$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 456|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 324|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($6)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($4|0)>(0);
 if (!($17)) {
  return;
 }
 $18 = ((($0)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 3;
 $21 = (1400 + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 112|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($1)) + 4|0);
 $26 = ((($1)) + 8|0);
 $$0166192$i = $2;$$0167191$i = $3;$$0169190$i = $24;$$0193$i = $22;$$in$i = $4;
 while(1) {
  $27 = (($$in$i) + -1)|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + ($$0166192$i<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$25>>2]|0;
  $32 = (($31) + ($$0166192$i<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$26>>2]|0;
  $35 = (($34) + ($$0166192$i<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($$0166192$i) + 1)|0;
  $38 = ((($$0167191$i)) + 4|0);
  $39 = HEAP32[$$0167191$i>>2]|0;
  $40 = $39;
  $41 = $40 & 3;
  $42 = ($41|0)==(0);
  if ($42) {
   $$0172$i = $36;$$0174$i = $33;$$0176$i = $30;$$0178$i = $39;$$1170$i = $$0169190$i;
  } else {
   $43 = ((($30)) + 1|0);
   $44 = HEAP8[$30>>0]|0;
   $45 = $44&255;
   $46 = ((($33)) + 1|0);
   $47 = HEAP8[$33>>0]|0;
   $48 = $47&255;
   $49 = ((($36)) + 1|0);
   $50 = HEAP8[$36>>0]|0;
   $51 = $50&255;
   $52 = (($10) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $$0193$i & 255;
   $55 = (($54) + ($45))|0;
   $56 = (($53) + ($55))|0;
   $57 = (($8) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($16) + ($48<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($14) + ($51<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($61))|0;
   $65 = $64 >> 16;
   $66 = $54 >>> 1;
   $67 = (($66) + ($45))|0;
   $68 = (($67) + ($65))|0;
   $69 = (($8) + ($68)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = (($12) + ($48<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($55))|0;
   $75 = (($8) + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $59 << 8;
   $79 = $78 & 63488;
   $80 = $71 << 3;
   $81 = $80 & 2016;
   $82 = $81 | $79;
   $83 = $77 >>> 3;
   $84 = $82 | $83;
   $85 = $84&65535;
   HEAP16[$39>>1] = $85;
   $86 = ((($39)) + 2|0);
   $87 = (($$0169190$i) + -1)|0;
   $$0172$i = $49;$$0174$i = $46;$$0176$i = $43;$$0178$i = $86;$$1170$i = $87;
  }
  $88 = $$1170$i >>> 1;
  $89 = ($88|0)==(0);
  if ($89) {
   $$1$lcssa$i = $$0193$i;$$1173$lcssa$i = $$0172$i;$$1175$lcssa$i = $$0174$i;$$1177$lcssa$i = $$0176$i;$$1179$lcssa$i = $$0178$i;
  } else {
   $90 = $$1170$i & -2;
   $scevgep201$i = (($$0174$i) + ($90)|0);
   $$0171184$i = 0;$$1173183$i = $$0172$i;$$1175182$i = $$0174$i;$$1177181$i = $$0176$i;$$1179180$i = $$0178$i;$$1185$i = $$0193$i;
   while(1) {
    $91 = ((($$1177181$i)) + 1|0);
    $92 = HEAP8[$$1177181$i>>0]|0;
    $93 = $92&255;
    $94 = ((($$1175182$i)) + 1|0);
    $95 = HEAP8[$$1175182$i>>0]|0;
    $96 = $95&255;
    $97 = ((($$1173183$i)) + 1|0);
    $98 = HEAP8[$$1173183$i>>0]|0;
    $99 = $98&255;
    $100 = (($10) + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $$1185$i & 255;
    $103 = (($102) + ($93))|0;
    $104 = (($101) + ($103))|0;
    $105 = (($8) + ($104)|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = (($16) + ($96<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($14) + ($99<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($109))|0;
    $113 = $112 >> 16;
    $114 = $102 >>> 1;
    $115 = (($114) + ($93))|0;
    $116 = (($115) + ($113))|0;
    $117 = (($8) + ($116)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = (($12) + ($96<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + ($103))|0;
    $123 = (($8) + ($122)|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = $$1185$i << 24;
    $127 = $$1185$i >>> 8;
    $128 = $126 | $127;
    $129 = $107 << 8;
    $130 = $129 & 63488;
    $131 = $119 << 3;
    $132 = $131 & 2016;
    $133 = $132 | $130;
    $134 = $125 >>> 3;
    $135 = $133 | $134;
    $136 = ((($$1177181$i)) + 2|0);
    $137 = HEAP8[$91>>0]|0;
    $138 = $137&255;
    $139 = ((($$1175182$i)) + 2|0);
    $140 = HEAP8[$94>>0]|0;
    $141 = $140&255;
    $142 = ((($$1173183$i)) + 2|0);
    $143 = HEAP8[$97>>0]|0;
    $144 = $143&255;
    $145 = (($10) + ($144<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $127 & 255;
    $148 = (($147) + ($138))|0;
    $149 = (($146) + ($148))|0;
    $150 = (($8) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = (($16) + ($141<<2)|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($14) + ($144<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($156) + ($154))|0;
    $158 = $157 >> 16;
    $159 = $147 >>> 1;
    $160 = (($159) + ($138))|0;
    $161 = (($160) + ($158))|0;
    $162 = (($8) + ($161)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = (($12) + ($141<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + ($148))|0;
    $168 = (($8) + ($167)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = $127 << 24;
    $172 = $128 >>> 8;
    $173 = $172 | $171;
    $174 = $152 << 8;
    $175 = $174 & 63488;
    $176 = $164 << 3;
    $177 = $176 & 2016;
    $178 = $177 | $175;
    $179 = $170 >>> 3;
    $180 = $178 | $179;
    $181 = $180 << 16;
    $182 = $135 | $181;
    HEAP32[$$1179180$i>>2] = $182;
    $183 = ((($$1179180$i)) + 4|0);
    $184 = (($$0171184$i) + 1)|0;
    $exitcond$i = ($184|0)==($88|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0171184$i = $184;$$1173183$i = $142;$$1175182$i = $139;$$1177181$i = $136;$$1179180$i = $183;$$1185$i = $173;
    }
   }
   $185 = $88 << 2;
   $scevgep$i = (($$0176$i) + ($90)|0);
   $scevgep202$i = (($$0172$i) + ($90)|0);
   $scevgep203$i = (($$0178$i) + ($185)|0);
   $$1$lcssa$i = $173;$$1173$lcssa$i = $scevgep202$i;$$1175$lcssa$i = $scevgep201$i;$$1177$lcssa$i = $scevgep$i;$$1179$lcssa$i = $scevgep203$i;
  }
  $186 = $$1170$i & 1;
  $187 = ($186|0)==(0);
  if (!($187)) {
   $189 = HEAP8[$$1177$lcssa$i>>0]|0;
   $190 = $189&255;
   $191 = HEAP8[$$1175$lcssa$i>>0]|0;
   $192 = $191&255;
   $193 = HEAP8[$$1173$lcssa$i>>0]|0;
   $194 = $193&255;
   $195 = (($10) + ($194<<2)|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $$1$lcssa$i & 255;
   $198 = (($197) + ($190))|0;
   $199 = (($196) + ($198))|0;
   $200 = (($8) + ($199)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($16) + ($192<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($14) + ($194<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($206) + ($204))|0;
   $208 = $207 >> 16;
   $209 = $197 >>> 1;
   $210 = (($209) + ($190))|0;
   $211 = (($210) + ($208))|0;
   $212 = (($8) + ($211)|0);
   $213 = HEAP8[$212>>0]|0;
   $214 = $213&255;
   $215 = (($12) + ($192<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($198))|0;
   $218 = (($8) + ($217)|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = $202 << 8;
   $222 = $221 & 63488;
   $223 = $214 << 3;
   $224 = $223 & 2016;
   $225 = $224 | $222;
   $226 = $220 >>> 3;
   $227 = $225 | $226;
   $228 = $227&65535;
   HEAP16[$$1179$lcssa$i>>1] = $228;
  }
  $188 = ($$in$i|0)>(1);
  if ($188) {
   $$0166192$i = $37;$$0167191$i = $38;$$0169190$i = $$1170$i;$$0193$i = $$1$lcssa$i;$$in$i = $27;
  } else {
   break;
  }
 }
 return;
}
function _gray_rgb565D_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$010$i = 0, $$0689$i = 0, $$0708$i = 0, $$0713$i = 0, $$072$i = 0, $$074$i = 0, $$0777$i = 0, $$1$lcssa$i = 0, $$14$i = 0, $$169$i = 0, $$173$lcssa$i = 0, $$1732$i = 0, $$175$lcssa$i = 0, $$1751$i = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx5 = 0, $$idx5$val = 0;
 var $$in$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $exitcond$i = 0, $scevgep$i = 0, $scevgep16$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx5 = ((($0)) + 324|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  return;
 }
 $$idx4 = ((($0)) + 140|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $$idx = ((($0)) + 112|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $6 = $$idx4$val & 3;
 $7 = (1400 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $$pre$i = HEAP32[$1>>2]|0;
 $$010$i = $8;$$0689$i = $$idx$val;$$0708$i = $2;$$0777$i = $3;$$in$i = $4;
 while(1) {
  $9 = (($$in$i) + -1)|0;
  $10 = (($$0708$i) + 1)|0;
  $11 = (($$pre$i) + ($$0708$i<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($$0777$i)) + 4|0);
  $14 = HEAP32[$$0777$i>>2]|0;
  $15 = $14;
  $16 = $15 & 3;
  $17 = ($16|0)==(0);
  if ($17) {
   $$072$i = $14;$$074$i = $12;$$169$i = $$0689$i;
  } else {
   $18 = ((($12)) + 1|0);
   $19 = HEAP8[$12>>0]|0;
   $20 = $19&255;
   $21 = $$010$i & 255;
   $22 = (($21) + ($20))|0;
   $23 = (($$idx5$val) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $25 << 8;
   $27 = $26 & 63488;
   $28 = $25 << 3;
   $29 = $28 & 2016;
   $30 = $25 >>> 3;
   $31 = $29 | $30;
   $32 = $31 | $27;
   $33 = $32&65535;
   HEAP16[$14>>1] = $33;
   $34 = ((($14)) + 2|0);
   $35 = (($$0689$i) + -1)|0;
   $$072$i = $34;$$074$i = $18;$$169$i = $35;
  }
  $36 = $$169$i >>> 1;
  $37 = ($36|0)==(0);
  if ($37) {
   $$1$lcssa$i = $$010$i;$$173$lcssa$i = $$072$i;$$175$lcssa$i = $$074$i;
  } else {
   $38 = $$169$i & -2;
   $$0713$i = 0;$$14$i = $$010$i;$$1732$i = $$072$i;$$1751$i = $$074$i;
   while(1) {
    $39 = ((($$1751$i)) + 1|0);
    $40 = HEAP8[$$1751$i>>0]|0;
    $41 = $40&255;
    $42 = $$14$i & 255;
    $43 = (($42) + ($41))|0;
    $44 = (($$idx5$val) + ($43)|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $46 << 8;
    $48 = $47 & 63488;
    $49 = $46 << 3;
    $50 = $49 & 2016;
    $51 = $46 >>> 3;
    $52 = $$14$i << 24;
    $53 = $$14$i >>> 8;
    $54 = $52 | $53;
    $55 = ((($$1751$i)) + 2|0);
    $56 = HEAP8[$39>>0]|0;
    $57 = $56&255;
    $58 = $53 & 255;
    $59 = (($58) + ($57))|0;
    $60 = (($$idx5$val) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 << 8;
    $64 = $63 & 63488;
    $65 = $62 << 3;
    $66 = $65 & 2016;
    $67 = $62 >>> 3;
    $68 = $66 | $67;
    $69 = $68 | $64;
    $70 = $69 << 16;
    $71 = $50 | $51;
    $72 = $71 | $48;
    $73 = $72 | $70;
    $74 = $53 << 24;
    $75 = $54 >>> 8;
    $76 = $75 | $74;
    HEAP32[$$1732$i>>2] = $73;
    $77 = ((($$1732$i)) + 4|0);
    $78 = (($$0713$i) + 1)|0;
    $exitcond$i = ($78|0)==($36|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0713$i = $78;$$14$i = $76;$$1732$i = $77;$$1751$i = $55;
    }
   }
   $79 = $36 << 2;
   $scevgep$i = (($$074$i) + ($38)|0);
   $scevgep16$i = (($$072$i) + ($79)|0);
   $$1$lcssa$i = $76;$$173$lcssa$i = $scevgep16$i;$$175$lcssa$i = $scevgep$i;
  }
  $80 = $$169$i & 1;
  $81 = ($80|0)==(0);
  if (!($81)) {
   $83 = HEAP8[$$175$lcssa$i>>0]|0;
   $84 = $83&255;
   $85 = $$1$lcssa$i & 255;
   $86 = (($85) + ($84))|0;
   $87 = (($$idx5$val) + ($86)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $89 << 8;
   $91 = $90 & 63488;
   $92 = $89 << 3;
   $93 = $92 & 2016;
   $94 = $89 >>> 3;
   $95 = $93 | $94;
   $96 = $95 | $91;
   $97 = $96&65535;
   HEAP16[$$173$lcssa$i>>1] = $97;
  }
  $82 = ($$in$i|0)>(1);
  if ($82) {
   $$010$i = $$1$lcssa$i;$$0689$i = $$169$i;$$0708$i = $10;$$0777$i = $13;$$in$i = $9;
  } else {
   break;
  }
 }
 return;
}
function _rgb_rgb565D_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$010113$i = 0, $$010312$i = 0, $$01045$i = 0, $$0105$i = 0, $$0107$i = 0, $$0109$i = 0, $$0111$i = 0, $$011411$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$1102$i = 0, $$1106$lcssa$i = 0, $$11064$i = 0, $$1108$lcssa$i = 0, $$11083$i = 0, $$1110$lcssa$i = 0, $$11102$i = 0, $$1112$lcssa$i = 0, $$11121$i = 0, $$16$i = 0;
 var $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx5 = 0, $$idx5$val = 0, $$in$i = 0, $$pre$i = 0, $$pre25$i = 0, $$pre26$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $scevgep$i = 0, $scevgep22$i = 0, $scevgep23$i = 0, $scevgep24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx5 = ((($0)) + 324|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  return;
 }
 $$idx4 = ((($0)) + 140|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $$idx = ((($0)) + 112|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $6 = $$idx4$val & 3;
 $7 = (1400 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 4|0);
 $10 = ((($1)) + 8|0);
 $$pre$i = HEAP32[$1>>2]|0;
 $$pre25$i = HEAP32[$9>>2]|0;
 $$pre26$i = HEAP32[$10>>2]|0;
 $$010113$i = $$idx$val;$$010312$i = $2;$$011411$i = $3;$$014$i = $8;$$in$i = $4;
 while(1) {
  $11 = (($$in$i) + -1)|0;
  $12 = (($$pre$i) + ($$010312$i<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($$pre25$i) + ($$010312$i<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($$pre26$i) + ($$010312$i<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($$010312$i) + 1)|0;
  $19 = ((($$011411$i)) + 4|0);
  $20 = HEAP32[$$011411$i>>2]|0;
  $21 = $20;
  $22 = $21 & 3;
  $23 = ($22|0)==(0);
  if ($23) {
   $$0105$i = $17;$$0107$i = $15;$$0109$i = $13;$$0111$i = $20;$$1102$i = $$010113$i;
  } else {
   $24 = ((($13)) + 1|0);
   $25 = HEAP8[$13>>0]|0;
   $26 = $25&255;
   $27 = $$014$i & 255;
   $28 = (($27) + ($26))|0;
   $29 = (($$idx5$val) + ($28)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ((($15)) + 1|0);
   $33 = HEAP8[$15>>0]|0;
   $34 = $33&255;
   $35 = $27 >>> 1;
   $36 = (($35) + ($34))|0;
   $37 = (($$idx5$val) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ((($17)) + 1|0);
   $41 = HEAP8[$17>>0]|0;
   $42 = $41&255;
   $43 = (($27) + ($42))|0;
   $44 = (($$idx5$val) + ($43)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $31 << 8;
   $48 = $47 & 63488;
   $49 = $39 << 3;
   $50 = $49 & 2016;
   $51 = $50 | $48;
   $52 = $46 >>> 3;
   $53 = $51 | $52;
   $54 = $53&65535;
   HEAP16[$20>>1] = $54;
   $55 = ((($20)) + 2|0);
   $56 = (($$010113$i) + -1)|0;
   $$0105$i = $40;$$0107$i = $32;$$0109$i = $24;$$0111$i = $55;$$1102$i = $56;
  }
  $57 = $$1102$i >>> 1;
  $58 = ($57|0)==(0);
  if ($58) {
   $$1$lcssa$i = $$014$i;$$1106$lcssa$i = $$0105$i;$$1108$lcssa$i = $$0107$i;$$1110$lcssa$i = $$0109$i;$$1112$lcssa$i = $$0111$i;
  } else {
   $59 = $$1102$i & -2;
   $scevgep22$i = (($$0107$i) + ($59)|0);
   $$01045$i = 0;$$11064$i = $$0105$i;$$11083$i = $$0107$i;$$11102$i = $$0109$i;$$11121$i = $$0111$i;$$16$i = $$014$i;
   while(1) {
    $60 = ((($$11102$i)) + 1|0);
    $61 = HEAP8[$$11102$i>>0]|0;
    $62 = $61&255;
    $63 = $$16$i & 255;
    $64 = (($63) + ($62))|0;
    $65 = (($$idx5$val) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ((($$11083$i)) + 1|0);
    $69 = HEAP8[$$11083$i>>0]|0;
    $70 = $69&255;
    $71 = $63 >>> 1;
    $72 = (($71) + ($70))|0;
    $73 = (($$idx5$val) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = ((($$11064$i)) + 1|0);
    $77 = HEAP8[$$11064$i>>0]|0;
    $78 = $77&255;
    $79 = (($63) + ($78))|0;
    $80 = (($$idx5$val) + ($79)|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = $$16$i << 24;
    $84 = $$16$i >>> 8;
    $85 = $83 | $84;
    $86 = $67 << 8;
    $87 = $86 & 63488;
    $88 = $75 << 3;
    $89 = $88 & 2016;
    $90 = $89 | $87;
    $91 = $82 >>> 3;
    $92 = $90 | $91;
    $93 = ((($$11102$i)) + 2|0);
    $94 = HEAP8[$60>>0]|0;
    $95 = $94&255;
    $96 = $84 & 255;
    $97 = (($96) + ($95))|0;
    $98 = (($$idx5$val) + ($97)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ((($$11083$i)) + 2|0);
    $102 = HEAP8[$68>>0]|0;
    $103 = $102&255;
    $104 = $96 >>> 1;
    $105 = (($104) + ($103))|0;
    $106 = (($$idx5$val) + ($105)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = ((($$11064$i)) + 2|0);
    $110 = HEAP8[$76>>0]|0;
    $111 = $110&255;
    $112 = (($96) + ($111))|0;
    $113 = (($$idx5$val) + ($112)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $84 << 24;
    $117 = $85 >>> 8;
    $118 = $117 | $116;
    $119 = $100 << 8;
    $120 = $119 & 63488;
    $121 = $108 << 3;
    $122 = $121 & 2016;
    $123 = $122 | $120;
    $124 = $115 >>> 3;
    $125 = $123 | $124;
    $126 = $125 << 16;
    $127 = $92 | $126;
    HEAP32[$$11121$i>>2] = $127;
    $128 = ((($$11121$i)) + 4|0);
    $129 = (($$01045$i) + 1)|0;
    $exitcond$i = ($129|0)==($57|0);
    if ($exitcond$i) {
     break;
    } else {
     $$01045$i = $129;$$11064$i = $109;$$11083$i = $101;$$11102$i = $93;$$11121$i = $128;$$16$i = $118;
    }
   }
   $130 = $57 << 2;
   $scevgep$i = (($$0109$i) + ($59)|0);
   $scevgep23$i = (($$0105$i) + ($59)|0);
   $scevgep24$i = (($$0111$i) + ($130)|0);
   $$1$lcssa$i = $118;$$1106$lcssa$i = $scevgep23$i;$$1108$lcssa$i = $scevgep22$i;$$1110$lcssa$i = $scevgep$i;$$1112$lcssa$i = $scevgep24$i;
  }
  $131 = $$1102$i & 1;
  $132 = ($131|0)==(0);
  if (!($132)) {
   $134 = HEAP8[$$1110$lcssa$i>>0]|0;
   $135 = $134&255;
   $136 = $$1$lcssa$i & 255;
   $137 = (($136) + ($135))|0;
   $138 = (($$idx5$val) + ($137)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = HEAP8[$$1108$lcssa$i>>0]|0;
   $142 = $141&255;
   $143 = $136 >>> 1;
   $144 = (($143) + ($142))|0;
   $145 = (($$idx5$val) + ($144)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = HEAP8[$$1106$lcssa$i>>0]|0;
   $149 = $148&255;
   $150 = (($136) + ($149))|0;
   $151 = (($$idx5$val) + ($150)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = $140 << 8;
   $155 = $154 & 63488;
   $156 = $147 << 3;
   $157 = $156 & 2016;
   $158 = $157 | $155;
   $159 = $153 >>> 3;
   $160 = $158 | $159;
   $161 = $160&65535;
   HEAP16[$$1112$lcssa$i>>1] = $161;
  }
  $133 = ($$in$i|0)>(1);
  if ($133) {
   $$010113$i = $$1102$i;$$010312$i = $18;$$011411$i = $19;$$014$i = $$1$lcssa$i;$$in$i = $11;
  } else {
   break;
  }
 }
 return;
}
function _ycck_cmyk_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$07890$us = 0, $$08089$us = 0, $$08188$us = 0, $$091$us = 0, $$in = 0, $$neg83$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 456|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 324|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($6)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($6)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($4|0)>(0);
 if (!($19)) {
  return;
 }
 $20 = ((($1)) + 4|0);
 $21 = ((($1)) + 8|0);
 $22 = ((($1)) + 12|0);
 $23 = ($8|0)==(0);
 if ($23) {
  return;
 } else {
  $$07890$us = $3;$$091$us = $2;$$in = $4;
 }
 while(1) {
  $24 = (($$in) + -1)|0;
  $25 = HEAP32[$1>>2]|0;
  $26 = (($25) + ($$091$us<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$20>>2]|0;
  $29 = (($28) + ($$091$us<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + ($$091$us<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$22>>2]|0;
  $35 = (($34) + ($$091$us<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($$091$us) + 1)|0;
  $38 = HEAP32[$$07890$us>>2]|0;
  $$08089$us = $38;$$08188$us = 0;
  while(1) {
   $39 = (($27) + ($$08188$us)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = (($30) + ($$08188$us)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = (($33) + ($$08188$us)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (($12) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $40 ^ -1;
   $$neg83$us = $49&255;
   $50 = (($$neg83$us) - ($48))|0;
   $51 = (($10) + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   HEAP8[$$08089$us>>0] = $52;
   $53 = (($18) + ($43<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($16) + ($46<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($54))|0;
   $58 = $57 >> 16;
   $59 = (($$neg83$us) - ($58))|0;
   $60 = (($10) + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ((($$08089$us)) + 1|0);
   HEAP8[$62>>0] = $61;
   $63 = (($14) + ($43<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($$neg83$us) - ($64))|0;
   $66 = (($10) + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = ((($$08089$us)) + 2|0);
   HEAP8[$68>>0] = $67;
   $69 = (($36) + ($$08188$us)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = ((($$08089$us)) + 3|0);
   HEAP8[$71>>0] = $70;
   $72 = ((($$08089$us)) + 4|0);
   $73 = (($$08188$us) + 1)|0;
   $exitcond = ($73|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$08089$us = $72;$$08188$us = $73;
   }
  }
  $74 = ((($$07890$us)) + 4|0);
  $75 = ($$in|0)>(1);
  if ($75) {
   $$07890$us = $74;$$091$us = $37;$$in = $24;
  } else {
   break;
  }
 }
 return;
}
function _jinit_inverse_dct($0) {
 $0 = $0|0;
 var $$02021 = 0, $$022 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($0,1,84)|0);
 $5 = ((($0)) + 448|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$4>>2] = 143;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = ((($0)) + 216|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 44|0);
 $$02021 = 0;$$022 = $10;
 while(1) {
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($0,1,256)|0);
  $15 = ((($$022)) + 80|0);
  HEAP32[$15>>2] = $14;
  _memset(($14|0),0,256)|0;
  $16 = (($11) + ($$02021<<2)|0);
  HEAP32[$16>>2] = -1;
  $17 = (($$02021) + 1)|0;
  $18 = ((($$022)) + 84|0);
  $19 = HEAP32[$6>>2]|0;
  $20 = ($17|0)<($19|0);
  if ($20) {
   $$02021 = $17;$$022 = $18;
  } else {
   break;
  }
 }
 return;
}
function _start_pass_360($0) {
 $0 = $0|0;
 var $$08196 = 0, $$082102 = 0, $$08398 = 0, $$084101 = 0, $$085100 = 0, $$08799 = 0, $$186 = 0, $$197 = 0, $$295 = 0, $$6 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond105 = 0, $exitcond106 = 0, $jpeg_idct_2x2$jsimd_idct_2x2 = 0, $jpeg_idct_4x4$jsimd_idct_4x4 = 0, $jpeg_idct_float$jsimd_idct_float = 0, $jpeg_idct_ifast$jsimd_idct_ifast = 0, $jpeg_idct_islow$jsimd_idct_islow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 448|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 216|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 72|0);
 $$082102 = 0;$$084101 = $7;$$085100 = 0;$$08799 = 0;
 while(1) {
  $9 = ((($$084101)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  L6: do {
   switch ($10|0) {
   case 1:  {
    $$186 = 0;$$6 = 154;
    break;
   }
   case 2:  {
    $11 = (_jsimd_can_idct_2x2()|0);
    $12 = ($11|0)==(0);
    $jpeg_idct_2x2$jsimd_idct_2x2 = $12 ? 145 : 144;
    $$186 = 0;$$6 = $jpeg_idct_2x2$jsimd_idct_2x2;
    break;
   }
   case 3:  {
    $$186 = 0;$$6 = 155;
    break;
   }
   case 4:  {
    $13 = (_jsimd_can_idct_4x4()|0);
    $14 = ($13|0)==(0);
    $jpeg_idct_4x4$jsimd_idct_4x4 = $14 ? 147 : 146;
    $$186 = 0;$$6 = $jpeg_idct_4x4$jsimd_idct_4x4;
    break;
   }
   case 5:  {
    $$186 = 0;$$6 = 156;
    break;
   }
   case 6:  {
    $$186 = 0;$$6 = 157;
    break;
   }
   case 7:  {
    $$186 = 0;$$6 = 158;
    break;
   }
   case 8:  {
    $15 = HEAP32[$8>>2]|0;
    switch ($15|0) {
    case 0:  {
     $16 = (_jsimd_can_idct_islow()|0);
     $17 = ($16|0)==(0);
     $jpeg_idct_islow$jsimd_idct_islow = $17 ? 149 : 148;
     $$186 = 0;$$6 = $jpeg_idct_islow$jsimd_idct_islow;
     break L6;
     break;
    }
    case 1:  {
     $18 = (_jsimd_can_idct_ifast()|0);
     $19 = ($18|0)==(0);
     $jpeg_idct_ifast$jsimd_idct_ifast = $19 ? 151 : 150;
     $$186 = 1;$$6 = $jpeg_idct_ifast$jsimd_idct_ifast;
     break L6;
     break;
    }
    case 2:  {
     $20 = (_jsimd_can_idct_float()|0);
     $21 = ($20|0)==(0);
     $jpeg_idct_float$jsimd_idct_float = $21 ? 153 : 152;
     $$186 = 2;$$6 = $jpeg_idct_float$jsimd_idct_float;
     break L6;
     break;
    }
    default: {
     $22 = HEAP32[$0>>2]|0;
     $23 = ((($22)) + 20|0);
     HEAP32[$23>>2] = 48;
     $24 = HEAP32[$22>>2]|0;
     FUNCTION_TABLE_vi[$24 & 255]($0);
     $$186 = $$085100;$$6 = $$08799;
     break L6;
    }
    }
    break;
   }
   case 9:  {
    $$186 = 0;$$6 = 159;
    break;
   }
   case 10:  {
    $$186 = 0;$$6 = 160;
    break;
   }
   case 11:  {
    $$186 = 0;$$6 = 161;
    break;
   }
   case 12:  {
    $$186 = 0;$$6 = 162;
    break;
   }
   case 13:  {
    $$186 = 0;$$6 = 163;
    break;
   }
   case 14:  {
    $$186 = 0;$$6 = 164;
    break;
   }
   case 15:  {
    $$186 = 0;$$6 = 165;
    break;
   }
   case 16:  {
    $$186 = 0;$$6 = 166;
    break;
   }
   default: {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + 20|0);
    HEAP32[$26>>2] = 7;
    $27 = ((($25)) + 24|0);
    HEAP32[$27>>2] = $10;
    $28 = HEAP32[$0>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    FUNCTION_TABLE_vi[$29 & 255]($0);
    $$186 = $$085100;$$6 = $$08799;
   }
   }
  } while(0);
  $30 = (((($2)) + 4|0) + ($$082102<<2)|0);
  HEAP32[$30>>2] = $$6;
  $31 = ((($$084101)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  L29: do {
   if (!($33)) {
    $34 = (((($2)) + 44|0) + ($$082102<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==($$186|0);
    if (!($36)) {
     $37 = ((($$084101)) + 76|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(0|0);
     if (!($39)) {
      HEAP32[$34>>2] = $$186;
      switch ($$186|0) {
      case 0:  {
       $40 = ((($$084101)) + 80|0);
       $41 = HEAP32[$40>>2]|0;
       $$08398 = 0;
       while(1) {
        $42 = (($38) + ($$08398<<1)|0);
        $43 = HEAP16[$42>>1]|0;
        $44 = $43&65535;
        $45 = (($41) + ($$08398<<2)|0);
        HEAP32[$45>>2] = $44;
        $46 = (($$08398) + 1)|0;
        $exitcond106 = ($46|0)==(64);
        if ($exitcond106) {
         break;
        } else {
         $$08398 = $46;
        }
       }
       break;
      }
      case 1:  {
       $47 = ((($$084101)) + 80|0);
       $48 = HEAP32[$47>>2]|0;
       $$197 = 0;
       while(1) {
        $49 = (($38) + ($$197<<1)|0);
        $50 = HEAP16[$49>>1]|0;
        $51 = $50&65535;
        $52 = (2872 + ($$197<<1)|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = $53 << 16 >> 16;
        $55 = Math_imul($54, $51)|0;
        $56 = (($55) + 2048)|0;
        $57 = $56 >> 12;
        $58 = (($48) + ($$197<<2)|0);
        HEAP32[$58>>2] = $57;
        $59 = (($$197) + 1)|0;
        $exitcond105 = ($59|0)==(64);
        if ($exitcond105) {
         break;
        } else {
         $$197 = $59;
        }
       }
       break;
      }
      case 2:  {
       $60 = ((($$084101)) + 80|0);
       $61 = HEAP32[$60>>2]|0;
       $$08196 = 0;$$295 = 0;
       while(1) {
        $62 = (8 + ($$08196<<3)|0);
        $63 = +HEAPF64[$62>>3];
        $64 = (($38) + ($$295<<1)|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = (+($65&65535));
        $67 = $63 * $66;
        $68 = $67;
        $69 = (($61) + ($$295<<2)|0);
        HEAPF32[$69>>2] = $68;
        $70 = $$295 | 1;
        $71 = (($38) + ($70<<1)|0);
        $72 = HEAP16[$71>>1]|0;
        $73 = (+($72&65535));
        $74 = $63 * $73;
        $75 = $74 * 1.3870398450000001;
        $76 = $75;
        $77 = (($61) + ($70<<2)|0);
        HEAPF32[$77>>2] = $76;
        $78 = (($70) + 1)|0;
        $79 = (($38) + ($78<<1)|0);
        $80 = HEAP16[$79>>1]|0;
        $81 = (+($80&65535));
        $82 = $63 * $81;
        $83 = $82 * 1.3065629649999999;
        $84 = $83;
        $85 = (($61) + ($78<<2)|0);
        HEAPF32[$85>>2] = $84;
        $86 = $$295 | 3;
        $87 = (($38) + ($86<<1)|0);
        $88 = HEAP16[$87>>1]|0;
        $89 = (+($88&65535));
        $90 = $63 * $89;
        $91 = $90 * 1.1758756020000001;
        $92 = $91;
        $93 = (($61) + ($86<<2)|0);
        HEAPF32[$93>>2] = $92;
        $94 = (($86) + 1)|0;
        $95 = (($38) + ($94<<1)|0);
        $96 = HEAP16[$95>>1]|0;
        $97 = (+($96&65535));
        $98 = $63 * $97;
        $99 = $98;
        $100 = (($61) + ($94<<2)|0);
        HEAPF32[$100>>2] = $99;
        $101 = (($86) + 2)|0;
        $102 = (($38) + ($101<<1)|0);
        $103 = HEAP16[$102>>1]|0;
        $104 = (+($103&65535));
        $105 = $63 * $104;
        $106 = $105 * 0.785694958;
        $107 = $106;
        $108 = (($61) + ($101<<2)|0);
        HEAPF32[$108>>2] = $107;
        $109 = (($86) + 3)|0;
        $110 = (($38) + ($109<<1)|0);
        $111 = HEAP16[$110>>1]|0;
        $112 = (+($111&65535));
        $113 = $63 * $112;
        $114 = $113 * 0.54119609999999996;
        $115 = $114;
        $116 = (($61) + ($109<<2)|0);
        HEAPF32[$116>>2] = $115;
        $117 = $$295 | 7;
        $118 = (($38) + ($117<<1)|0);
        $119 = HEAP16[$118>>1]|0;
        $120 = (+($119&65535));
        $121 = $63 * $120;
        $122 = $121 * 0.275899379;
        $123 = $122;
        $124 = (($61) + ($117<<2)|0);
        HEAPF32[$124>>2] = $123;
        $125 = (($$295) + 8)|0;
        $126 = (($$08196) + 1)|0;
        $exitcond = ($126|0)==(8);
        if ($exitcond) {
         break;
        } else {
         $$08196 = $126;$$295 = $125;
        }
       }
       break;
      }
      default: {
       $127 = HEAP32[$0>>2]|0;
       $128 = ((($127)) + 20|0);
       HEAP32[$128>>2] = 48;
       $129 = HEAP32[$127>>2]|0;
       FUNCTION_TABLE_vi[$129 & 255]($0);
       break L29;
      }
      }
     }
    }
   }
  } while(0);
  $130 = (($$082102) + 1)|0;
  $131 = ((($$084101)) + 84|0);
  $132 = HEAP32[$3>>2]|0;
  $133 = ($130|0)<($132|0);
  if ($133) {
   $$082102 = $130;$$084101 = $131;$$085100 = $$186;$$08799 = $$6;
  } else {
   break;
  }
 }
 return;
}
function _jpeg_make_d_derived_tbl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0126164 = 0, $$0128145$us = 0, $$0128145$us$1 = 0, $$0128145$us$2 = 0, $$0128145$us$3 = 0, $$0128145$us$4 = 0, $$0128145$us$5 = 0, $$0128145$us$6 = 0, $$0128145$us$7 = 0, $$0129144$us = 0, $$0129144$us$1 = 0, $$0129144$us$2 = 0, $$0129144$us$3 = 0, $$0129144$us$4 = 0, $$0129144$us$5 = 0, $$0129144$us$6 = 0, $$0129144$us$7 = 0, $$0134162 = 0, $$1$lcssa = 0, $$1$lcssa$1 = 0;
 var $$1$lcssa$10 = 0, $$1$lcssa$11 = 0, $$1$lcssa$12 = 0, $$1$lcssa$13 = 0, $$1$lcssa$14 = 0, $$1$lcssa$15 = 0, $$1$lcssa$2 = 0, $$1$lcssa$3 = 0, $$1$lcssa$4 = 0, $$1$lcssa$5 = 0, $$1$lcssa$6 = 0, $$1$lcssa$7 = 0, $$1$lcssa$8 = 0, $$1$lcssa$9 = 0, $$1127$lcssa = 0, $$1127156 = 0, $$1131153 = 0, $$2132147$us = 0, $$2132147$us$1 = 0, $$2132147$us$2 = 0;
 var $$2132147$us$3 = 0, $$2132147$us$4 = 0, $$2132147$us$5 = 0, $$2132147$us$6 = 0, $$2132147$us$7 = 0, $$2165 = 0, $$3$lcssa = 0, $$3133143 = 0, $$3157 = 0, $$5 = 0, $$5$1 = 0, $$5$10 = 0, $$5$11 = 0, $$5$12 = 0, $$5$13 = 0, $$5$14 = 0, $$5$2 = 0, $$5$3 = 0, $$5$4 = 0, $$5$5 = 0;
 var $$5$6 = 0, $$5$7 = 0, $$5$8 = 0, $$5$9 = 0, $$7$lcssa = 0, $$7$lcssa$1 = 0, $$7$lcssa$2 = 0, $$7$lcssa$3 = 0, $$7$lcssa$4 = 0, $$7$lcssa$5 = 0, $$7$lcssa$6 = 0, $$7148$us = 0, $$7148$us$1 = 0, $$7148$us$2 = 0, $$7148$us$3 = 0, $$7148$us$4 = 0, $$7148$us$5 = 0, $$7148$us$6 = 0, $$7148$us$7 = 0, $$pre$phiZ2D = 0;
 var $$sink = 0, $$sink2 = 0, $$sink2$1 = 0, $$sink2$10 = 0, $$sink2$11 = 0, $$sink2$12 = 0, $$sink2$13 = 0, $$sink2$14 = 0, $$sink2$15 = 0, $$sink2$2 = 0, $$sink2$3 = 0, $$sink2$4 = 0, $$sink2$5 = 0, $$sink2$6 = 0, $$sink2$7 = 0, $$sink2$8 = 0, $$sink2$9 = 0, $$sink3 = 0, $$sink3$1 = 0, $$sink3$10 = 0;
 var $$sink3$11 = 0, $$sink3$12 = 0, $$sink3$13 = 0, $$sink3$14 = 0, $$sink3$15 = 0, $$sink3$2 = 0, $$sink3$3 = 0, $$sink3$4 = 0, $$sink3$5 = 0, $$sink3$6 = 0, $$sink3$7 = 0, $$sink3$8 = 0, $$sink3$9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond179 = 0, $or$cond = 0, $scevgep$1 = 0, $scevgep$10 = 0, $scevgep$11 = 0, $scevgep$12 = 0, $scevgep$13 = 0, $scevgep$14 = 0, $scevgep$15 = 0;
 var $scevgep$2 = 0, $scevgep$3 = 0, $scevgep$4 = 0, $scevgep$5 = 0, $scevgep$6 = 0, $scevgep$7 = 0, $scevgep$8 = 0, $scevgep$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $4 = sp + 1028|0;
 $5 = sp;
 $6 = ($2>>>0)>(3);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 20|0);
  HEAP32[$8>>2] = 50;
  $9 = ((($7)) + 24|0);
  HEAP32[$9>>2] = $2;
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 255]($0);
 }
 $12 = ($1|0)!=(0);
 $13 = (((($0)) + 196|0) + ($2<<2)|0);
 $14 = (((($0)) + 180|0) + ($2<<2)|0);
 $$sink = $12 ? $14 : $13;
 $15 = HEAP32[$$sink>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = 50;
  $19 = ((($17)) + 24|0);
  HEAP32[$19>>2] = $2;
  $20 = HEAP32[$0>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vi[$21 & 255]($0);
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = ((($0)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_iiii[$26 & 255]($0,1,1172)|0);
  HEAP32[$3>>2] = $27;
  $$pre$phiZ2D = $0;$29 = $27;
 } else {
  $$pre$phiZ2D = $0;$29 = $22;
 }
 $28 = ((($29)) + 144|0);
 HEAP32[$28>>2] = $15;
 $30 = ((($15)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($31<<24>>24)==(0);
 if ($33) {
  $$1$lcssa = 0;
 } else {
  _memset(($4|0),1,($32|0))|0;
  $$1$lcssa = $32;
 }
 $34 = ((($15)) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = (($$1$lcssa) + ($36))|0;
 $38 = ($37>>>0)>(256);
 if ($38) {
  $429 = HEAP32[$0>>2]|0;
  $430 = ((($429)) + 20|0);
  HEAP32[$430>>2] = 8;
  $431 = HEAP32[$429>>2]|0;
  FUNCTION_TABLE_vi[$431 & 255]($$pre$phiZ2D);
 }
 $432 = ($35<<24>>24)==(0);
 if ($432) {
  $$1$lcssa$1 = $$1$lcssa;
 } else {
  $scevgep$1 = (($4) + ($$1$lcssa)|0);
  _memset(($scevgep$1|0),2,($36|0))|0;
  $$1$lcssa$1 = $37;
 }
 $433 = ((($15)) + 3|0);
 $434 = HEAP8[$433>>0]|0;
 $435 = $434&255;
 $436 = (($$1$lcssa$1) + ($435))|0;
 $437 = ($436|0)>(256);
 if ($437) {
  $438 = HEAP32[$0>>2]|0;
  $439 = ((($438)) + 20|0);
  HEAP32[$439>>2] = 8;
  $440 = HEAP32[$438>>2]|0;
  FUNCTION_TABLE_vi[$440 & 255]($$pre$phiZ2D);
 }
 $441 = ($434<<24>>24)==(0);
 if ($441) {
  $$1$lcssa$2 = $$1$lcssa$1;
 } else {
  $scevgep$2 = (($4) + ($$1$lcssa$1)|0);
  _memset(($scevgep$2|0),3,($435|0))|0;
  $$1$lcssa$2 = $436;
 }
 $442 = ((($15)) + 4|0);
 $443 = HEAP8[$442>>0]|0;
 $444 = $443&255;
 $445 = (($$1$lcssa$2) + ($444))|0;
 $446 = ($445|0)>(256);
 if ($446) {
  $447 = HEAP32[$0>>2]|0;
  $448 = ((($447)) + 20|0);
  HEAP32[$448>>2] = 8;
  $449 = HEAP32[$447>>2]|0;
  FUNCTION_TABLE_vi[$449 & 255]($$pre$phiZ2D);
 }
 $450 = ($443<<24>>24)==(0);
 if ($450) {
  $$1$lcssa$3 = $$1$lcssa$2;
 } else {
  $scevgep$3 = (($4) + ($$1$lcssa$2)|0);
  _memset(($scevgep$3|0),4,($444|0))|0;
  $$1$lcssa$3 = $445;
 }
 $451 = ((($15)) + 5|0);
 $452 = HEAP8[$451>>0]|0;
 $453 = $452&255;
 $454 = (($$1$lcssa$3) + ($453))|0;
 $455 = ($454|0)>(256);
 if ($455) {
  $456 = HEAP32[$0>>2]|0;
  $457 = ((($456)) + 20|0);
  HEAP32[$457>>2] = 8;
  $458 = HEAP32[$456>>2]|0;
  FUNCTION_TABLE_vi[$458 & 255]($$pre$phiZ2D);
 }
 $459 = ($452<<24>>24)==(0);
 if ($459) {
  $$1$lcssa$4 = $$1$lcssa$3;
 } else {
  $scevgep$4 = (($4) + ($$1$lcssa$3)|0);
  _memset(($scevgep$4|0),5,($453|0))|0;
  $$1$lcssa$4 = $454;
 }
 $460 = ((($15)) + 6|0);
 $461 = HEAP8[$460>>0]|0;
 $462 = $461&255;
 $463 = (($$1$lcssa$4) + ($462))|0;
 $464 = ($463|0)>(256);
 if ($464) {
  $465 = HEAP32[$0>>2]|0;
  $466 = ((($465)) + 20|0);
  HEAP32[$466>>2] = 8;
  $467 = HEAP32[$465>>2]|0;
  FUNCTION_TABLE_vi[$467 & 255]($$pre$phiZ2D);
 }
 $468 = ($461<<24>>24)==(0);
 if ($468) {
  $$1$lcssa$5 = $$1$lcssa$4;
 } else {
  $scevgep$5 = (($4) + ($$1$lcssa$4)|0);
  _memset(($scevgep$5|0),6,($462|0))|0;
  $$1$lcssa$5 = $463;
 }
 $469 = ((($15)) + 7|0);
 $470 = HEAP8[$469>>0]|0;
 $471 = $470&255;
 $472 = (($$1$lcssa$5) + ($471))|0;
 $473 = ($472|0)>(256);
 if ($473) {
  $474 = HEAP32[$0>>2]|0;
  $475 = ((($474)) + 20|0);
  HEAP32[$475>>2] = 8;
  $476 = HEAP32[$474>>2]|0;
  FUNCTION_TABLE_vi[$476 & 255]($$pre$phiZ2D);
 }
 $477 = ($470<<24>>24)==(0);
 if ($477) {
  $$1$lcssa$6 = $$1$lcssa$5;
 } else {
  $scevgep$6 = (($4) + ($$1$lcssa$5)|0);
  _memset(($scevgep$6|0),7,($471|0))|0;
  $$1$lcssa$6 = $472;
 }
 $478 = ((($15)) + 8|0);
 $479 = HEAP8[$478>>0]|0;
 $480 = $479&255;
 $481 = (($$1$lcssa$6) + ($480))|0;
 $482 = ($481|0)>(256);
 if ($482) {
  $483 = HEAP32[$0>>2]|0;
  $484 = ((($483)) + 20|0);
  HEAP32[$484>>2] = 8;
  $485 = HEAP32[$483>>2]|0;
  FUNCTION_TABLE_vi[$485 & 255]($$pre$phiZ2D);
 }
 $486 = ($479<<24>>24)==(0);
 if ($486) {
  $$1$lcssa$7 = $$1$lcssa$6;
 } else {
  $scevgep$7 = (($4) + ($$1$lcssa$6)|0);
  _memset(($scevgep$7|0),8,($480|0))|0;
  $$1$lcssa$7 = $481;
 }
 $487 = ((($15)) + 9|0);
 $488 = HEAP8[$487>>0]|0;
 $489 = $488&255;
 $490 = (($$1$lcssa$7) + ($489))|0;
 $491 = ($490|0)>(256);
 if ($491) {
  $492 = HEAP32[$0>>2]|0;
  $493 = ((($492)) + 20|0);
  HEAP32[$493>>2] = 8;
  $494 = HEAP32[$492>>2]|0;
  FUNCTION_TABLE_vi[$494 & 255]($$pre$phiZ2D);
 }
 $495 = ($488<<24>>24)==(0);
 if ($495) {
  $$1$lcssa$8 = $$1$lcssa$7;
 } else {
  $scevgep$8 = (($4) + ($$1$lcssa$7)|0);
  _memset(($scevgep$8|0),9,($489|0))|0;
  $$1$lcssa$8 = $490;
 }
 $496 = ((($15)) + 10|0);
 $497 = HEAP8[$496>>0]|0;
 $498 = $497&255;
 $499 = (($$1$lcssa$8) + ($498))|0;
 $500 = ($499|0)>(256);
 if ($500) {
  $501 = HEAP32[$0>>2]|0;
  $502 = ((($501)) + 20|0);
  HEAP32[$502>>2] = 8;
  $503 = HEAP32[$501>>2]|0;
  FUNCTION_TABLE_vi[$503 & 255]($$pre$phiZ2D);
 }
 $504 = ($497<<24>>24)==(0);
 if ($504) {
  $$1$lcssa$9 = $$1$lcssa$8;
 } else {
  $scevgep$9 = (($4) + ($$1$lcssa$8)|0);
  _memset(($scevgep$9|0),10,($498|0))|0;
  $$1$lcssa$9 = $499;
 }
 $505 = ((($15)) + 11|0);
 $506 = HEAP8[$505>>0]|0;
 $507 = $506&255;
 $508 = (($$1$lcssa$9) + ($507))|0;
 $509 = ($508|0)>(256);
 if ($509) {
  $510 = HEAP32[$0>>2]|0;
  $511 = ((($510)) + 20|0);
  HEAP32[$511>>2] = 8;
  $512 = HEAP32[$510>>2]|0;
  FUNCTION_TABLE_vi[$512 & 255]($$pre$phiZ2D);
 }
 $513 = ($506<<24>>24)==(0);
 if ($513) {
  $$1$lcssa$10 = $$1$lcssa$9;
 } else {
  $scevgep$10 = (($4) + ($$1$lcssa$9)|0);
  _memset(($scevgep$10|0),11,($507|0))|0;
  $$1$lcssa$10 = $508;
 }
 $514 = ((($15)) + 12|0);
 $515 = HEAP8[$514>>0]|0;
 $516 = $515&255;
 $517 = (($$1$lcssa$10) + ($516))|0;
 $518 = ($517|0)>(256);
 if ($518) {
  $519 = HEAP32[$0>>2]|0;
  $520 = ((($519)) + 20|0);
  HEAP32[$520>>2] = 8;
  $521 = HEAP32[$519>>2]|0;
  FUNCTION_TABLE_vi[$521 & 255]($$pre$phiZ2D);
 }
 $522 = ($515<<24>>24)==(0);
 if ($522) {
  $$1$lcssa$11 = $$1$lcssa$10;
 } else {
  $scevgep$11 = (($4) + ($$1$lcssa$10)|0);
  _memset(($scevgep$11|0),12,($516|0))|0;
  $$1$lcssa$11 = $517;
 }
 $523 = ((($15)) + 13|0);
 $524 = HEAP8[$523>>0]|0;
 $525 = $524&255;
 $526 = (($$1$lcssa$11) + ($525))|0;
 $527 = ($526|0)>(256);
 if ($527) {
  $528 = HEAP32[$0>>2]|0;
  $529 = ((($528)) + 20|0);
  HEAP32[$529>>2] = 8;
  $530 = HEAP32[$528>>2]|0;
  FUNCTION_TABLE_vi[$530 & 255]($$pre$phiZ2D);
 }
 $531 = ($524<<24>>24)==(0);
 if ($531) {
  $$1$lcssa$12 = $$1$lcssa$11;
 } else {
  $scevgep$12 = (($4) + ($$1$lcssa$11)|0);
  _memset(($scevgep$12|0),13,($525|0))|0;
  $$1$lcssa$12 = $526;
 }
 $532 = ((($15)) + 14|0);
 $533 = HEAP8[$532>>0]|0;
 $534 = $533&255;
 $535 = (($$1$lcssa$12) + ($534))|0;
 $536 = ($535|0)>(256);
 if ($536) {
  $537 = HEAP32[$0>>2]|0;
  $538 = ((($537)) + 20|0);
  HEAP32[$538>>2] = 8;
  $539 = HEAP32[$537>>2]|0;
  FUNCTION_TABLE_vi[$539 & 255]($$pre$phiZ2D);
 }
 $540 = ($533<<24>>24)==(0);
 if ($540) {
  $$1$lcssa$13 = $$1$lcssa$12;
 } else {
  $scevgep$13 = (($4) + ($$1$lcssa$12)|0);
  _memset(($scevgep$13|0),14,($534|0))|0;
  $$1$lcssa$13 = $535;
 }
 $541 = ((($15)) + 15|0);
 $542 = HEAP8[$541>>0]|0;
 $543 = $542&255;
 $544 = (($$1$lcssa$13) + ($543))|0;
 $545 = ($544|0)>(256);
 if ($545) {
  $546 = HEAP32[$0>>2]|0;
  $547 = ((($546)) + 20|0);
  HEAP32[$547>>2] = 8;
  $548 = HEAP32[$546>>2]|0;
  FUNCTION_TABLE_vi[$548 & 255]($$pre$phiZ2D);
 }
 $549 = ($542<<24>>24)==(0);
 if ($549) {
  $$1$lcssa$14 = $$1$lcssa$13;
 } else {
  $scevgep$14 = (($4) + ($$1$lcssa$13)|0);
  _memset(($scevgep$14|0),15,($543|0))|0;
  $$1$lcssa$14 = $544;
 }
 $550 = ((($15)) + 16|0);
 $551 = HEAP8[$550>>0]|0;
 $552 = $551&255;
 $553 = (($$1$lcssa$14) + ($552))|0;
 $554 = ($553|0)>(256);
 if ($554) {
  $555 = HEAP32[$0>>2]|0;
  $556 = ((($555)) + 20|0);
  HEAP32[$556>>2] = 8;
  $557 = HEAP32[$555>>2]|0;
  FUNCTION_TABLE_vi[$557 & 255]($$pre$phiZ2D);
 }
 $558 = ($551<<24>>24)==(0);
 if ($558) {
  $$1$lcssa$15 = $$1$lcssa$14;
 } else {
  $scevgep$15 = (($4) + ($$1$lcssa$14)|0);
  _memset(($scevgep$15|0),16,($552|0))|0;
  $$1$lcssa$15 = $553;
 }
 $559 = (($4) + ($$1$lcssa$15)|0);
 HEAP8[$559>>0] = 0;
 $40 = HEAP8[$4>>0]|0;
 $560 = ($40<<24>>24)==(0);
 if (!($560)) {
  $39 = $40 << 24 >> 24;
  $$0126164 = 0;$$0134162 = $39;$$2165 = 0;$42 = $40;
  while(1) {
   $41 = $42 << 24 >> 24;
   $43 = ($$0134162|0)==($41|0);
   if ($43) {
    $$1127156 = $$0126164;$$3157 = $$2165;
    while(1) {
     $44 = (($$3157) + 1)|0;
     $45 = (($5) + ($$3157<<2)|0);
     HEAP32[$45>>2] = $$1127156;
     $46 = (($$1127156) + 1)|0;
     $47 = (($4) + ($44)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = ($$0134162|0)==($49|0);
     if ($50) {
      $$1127156 = $46;$$3157 = $44;
     } else {
      $$1127$lcssa = $46;$$3$lcssa = $44;$58 = $48;
      break;
     }
    }
   } else {
    $$1127$lcssa = $$0126164;$$3$lcssa = $$2165;$58 = $42;
   }
   $51 = 1 << $$0134162;
   $52 = ($$1127$lcssa|0)<($51|0);
   if (!($52)) {
    $53 = HEAP32[$0>>2]|0;
    $54 = ((($53)) + 20|0);
    HEAP32[$54>>2] = 8;
    $55 = HEAP32[$53>>2]|0;
    FUNCTION_TABLE_vi[$55 & 255]($$pre$phiZ2D);
   }
   $56 = $$1127$lcssa << 1;
   $57 = (($$0134162) + 1)|0;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    break;
   } else {
    $$0126164 = $56;$$0134162 = $57;$$2165 = $$3$lcssa;$42 = $58;
   }
  }
 }
 $60 = ((($15)) + 1|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  $$5 = 0;$$sink2 = -1;
 } else {
  $63 = HEAP32[$5>>2]|0;
  $64 = (0 - ($63))|0;
  $65 = ((($29)) + 76|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP8[$60>>0]|0;
  $67 = $66&255;
  $68 = (($67) + -1)|0;
  $69 = (($5) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $$5 = $67;$$sink2 = $70;
 }
 $$sink3 = ((($29)) + 4|0);
 HEAP32[$$sink3>>2] = $$sink2;
 $71 = ((($15)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $$5$1 = $$5;$$sink2$1 = -1;
 } else {
  $105 = (($5) + ($$5<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($$5) - ($106))|0;
  $108 = ((($29)) + 80|0);
  HEAP32[$108>>2] = $107;
  $109 = HEAP8[$71>>0]|0;
  $110 = $109&255;
  $111 = (($$5) + ($110))|0;
  $112 = (($111) + -1)|0;
  $113 = (($5) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $$5$1 = $111;$$sink2$1 = $114;
 }
 $$sink3$1 = ((($29)) + 8|0);
 HEAP32[$$sink3$1>>2] = $$sink2$1;
 $115 = ((($15)) + 3|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = ($116<<24>>24)==(0);
 if ($117) {
  $$5$2 = $$5$1;$$sink2$2 = -1;
 } else {
  $118 = (($5) + ($$5$1<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($$5$1) - ($119))|0;
  $121 = ((($29)) + 84|0);
  HEAP32[$121>>2] = $120;
  $122 = HEAP8[$115>>0]|0;
  $123 = $122&255;
  $124 = (($$5$1) + ($123))|0;
  $125 = (($124) + -1)|0;
  $126 = (($5) + ($125<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $$5$2 = $124;$$sink2$2 = $127;
 }
 $$sink3$2 = ((($29)) + 12|0);
 HEAP32[$$sink3$2>>2] = $$sink2$2;
 $128 = ((($15)) + 4|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = ($129<<24>>24)==(0);
 if ($130) {
  $$5$3 = $$5$2;$$sink2$3 = -1;
 } else {
  $131 = (($5) + ($$5$2<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($$5$2) - ($132))|0;
  $134 = ((($29)) + 88|0);
  HEAP32[$134>>2] = $133;
  $135 = HEAP8[$128>>0]|0;
  $136 = $135&255;
  $137 = (($$5$2) + ($136))|0;
  $138 = (($137) + -1)|0;
  $139 = (($5) + ($138<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $$5$3 = $137;$$sink2$3 = $140;
 }
 $$sink3$3 = ((($29)) + 16|0);
 HEAP32[$$sink3$3>>2] = $$sink2$3;
 $141 = ((($15)) + 5|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = ($142<<24>>24)==(0);
 if ($143) {
  $$5$4 = $$5$3;$$sink2$4 = -1;
 } else {
  $144 = (($5) + ($$5$3<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($$5$3) - ($145))|0;
  $147 = ((($29)) + 92|0);
  HEAP32[$147>>2] = $146;
  $148 = HEAP8[$141>>0]|0;
  $149 = $148&255;
  $150 = (($$5$3) + ($149))|0;
  $151 = (($150) + -1)|0;
  $152 = (($5) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $$5$4 = $150;$$sink2$4 = $153;
 }
 $$sink3$4 = ((($29)) + 20|0);
 HEAP32[$$sink3$4>>2] = $$sink2$4;
 $154 = ((($15)) + 6|0);
 $155 = HEAP8[$154>>0]|0;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $$5$5 = $$5$4;$$sink2$5 = -1;
 } else {
  $157 = (($5) + ($$5$4<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($$5$4) - ($158))|0;
  $160 = ((($29)) + 96|0);
  HEAP32[$160>>2] = $159;
  $161 = HEAP8[$154>>0]|0;
  $162 = $161&255;
  $163 = (($$5$4) + ($162))|0;
  $164 = (($163) + -1)|0;
  $165 = (($5) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $$5$5 = $163;$$sink2$5 = $166;
 }
 $$sink3$5 = ((($29)) + 24|0);
 HEAP32[$$sink3$5>>2] = $$sink2$5;
 $167 = ((($15)) + 7|0);
 $168 = HEAP8[$167>>0]|0;
 $169 = ($168<<24>>24)==(0);
 if ($169) {
  $$5$6 = $$5$5;$$sink2$6 = -1;
 } else {
  $170 = (($5) + ($$5$5<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($$5$5) - ($171))|0;
  $173 = ((($29)) + 100|0);
  HEAP32[$173>>2] = $172;
  $174 = HEAP8[$167>>0]|0;
  $175 = $174&255;
  $176 = (($$5$5) + ($175))|0;
  $177 = (($176) + -1)|0;
  $178 = (($5) + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $$5$6 = $176;$$sink2$6 = $179;
 }
 $$sink3$6 = ((($29)) + 28|0);
 HEAP32[$$sink3$6>>2] = $$sink2$6;
 $180 = ((($15)) + 8|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = ($181<<24>>24)==(0);
 if ($182) {
  $$5$7 = $$5$6;$$sink2$7 = -1;
 } else {
  $183 = (($5) + ($$5$6<<2)|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($$5$6) - ($184))|0;
  $186 = ((($29)) + 104|0);
  HEAP32[$186>>2] = $185;
  $187 = HEAP8[$180>>0]|0;
  $188 = $187&255;
  $189 = (($$5$6) + ($188))|0;
  $190 = (($189) + -1)|0;
  $191 = (($5) + ($190<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  $$5$7 = $189;$$sink2$7 = $192;
 }
 $$sink3$7 = ((($29)) + 32|0);
 HEAP32[$$sink3$7>>2] = $$sink2$7;
 $193 = ((($15)) + 9|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = ($194<<24>>24)==(0);
 if ($195) {
  $$5$8 = $$5$7;$$sink2$8 = -1;
 } else {
  $196 = (($5) + ($$5$7<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = (($$5$7) - ($197))|0;
  $199 = ((($29)) + 108|0);
  HEAP32[$199>>2] = $198;
  $200 = HEAP8[$193>>0]|0;
  $201 = $200&255;
  $202 = (($$5$7) + ($201))|0;
  $203 = (($202) + -1)|0;
  $204 = (($5) + ($203<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  $$5$8 = $202;$$sink2$8 = $205;
 }
 $$sink3$8 = ((($29)) + 36|0);
 HEAP32[$$sink3$8>>2] = $$sink2$8;
 $206 = ((($15)) + 10|0);
 $207 = HEAP8[$206>>0]|0;
 $208 = ($207<<24>>24)==(0);
 if ($208) {
  $$5$9 = $$5$8;$$sink2$9 = -1;
 } else {
  $209 = (($5) + ($$5$8<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($$5$8) - ($210))|0;
  $212 = ((($29)) + 112|0);
  HEAP32[$212>>2] = $211;
  $213 = HEAP8[$206>>0]|0;
  $214 = $213&255;
  $215 = (($$5$8) + ($214))|0;
  $216 = (($215) + -1)|0;
  $217 = (($5) + ($216<<2)|0);
  $218 = HEAP32[$217>>2]|0;
  $$5$9 = $215;$$sink2$9 = $218;
 }
 $$sink3$9 = ((($29)) + 40|0);
 HEAP32[$$sink3$9>>2] = $$sink2$9;
 $219 = ((($15)) + 11|0);
 $220 = HEAP8[$219>>0]|0;
 $221 = ($220<<24>>24)==(0);
 if ($221) {
  $$5$10 = $$5$9;$$sink2$10 = -1;
 } else {
  $222 = (($5) + ($$5$9<<2)|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($$5$9) - ($223))|0;
  $225 = ((($29)) + 116|0);
  HEAP32[$225>>2] = $224;
  $226 = HEAP8[$219>>0]|0;
  $227 = $226&255;
  $228 = (($$5$9) + ($227))|0;
  $229 = (($228) + -1)|0;
  $230 = (($5) + ($229<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $$5$10 = $228;$$sink2$10 = $231;
 }
 $$sink3$10 = ((($29)) + 44|0);
 HEAP32[$$sink3$10>>2] = $$sink2$10;
 $232 = ((($15)) + 12|0);
 $233 = HEAP8[$232>>0]|0;
 $234 = ($233<<24>>24)==(0);
 if ($234) {
  $$5$11 = $$5$10;$$sink2$11 = -1;
 } else {
  $235 = (($5) + ($$5$10<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($$5$10) - ($236))|0;
  $238 = ((($29)) + 120|0);
  HEAP32[$238>>2] = $237;
  $239 = HEAP8[$232>>0]|0;
  $240 = $239&255;
  $241 = (($$5$10) + ($240))|0;
  $242 = (($241) + -1)|0;
  $243 = (($5) + ($242<<2)|0);
  $244 = HEAP32[$243>>2]|0;
  $$5$11 = $241;$$sink2$11 = $244;
 }
 $$sink3$11 = ((($29)) + 48|0);
 HEAP32[$$sink3$11>>2] = $$sink2$11;
 $245 = ((($15)) + 13|0);
 $246 = HEAP8[$245>>0]|0;
 $247 = ($246<<24>>24)==(0);
 if ($247) {
  $$5$12 = $$5$11;$$sink2$12 = -1;
 } else {
  $248 = (($5) + ($$5$11<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($$5$11) - ($249))|0;
  $251 = ((($29)) + 124|0);
  HEAP32[$251>>2] = $250;
  $252 = HEAP8[$245>>0]|0;
  $253 = $252&255;
  $254 = (($$5$11) + ($253))|0;
  $255 = (($254) + -1)|0;
  $256 = (($5) + ($255<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $$5$12 = $254;$$sink2$12 = $257;
 }
 $$sink3$12 = ((($29)) + 52|0);
 HEAP32[$$sink3$12>>2] = $$sink2$12;
 $258 = ((($15)) + 14|0);
 $259 = HEAP8[$258>>0]|0;
 $260 = ($259<<24>>24)==(0);
 if ($260) {
  $$5$13 = $$5$12;$$sink2$13 = -1;
 } else {
  $261 = (($5) + ($$5$12<<2)|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = (($$5$12) - ($262))|0;
  $264 = ((($29)) + 128|0);
  HEAP32[$264>>2] = $263;
  $265 = HEAP8[$258>>0]|0;
  $266 = $265&255;
  $267 = (($$5$12) + ($266))|0;
  $268 = (($267) + -1)|0;
  $269 = (($5) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $$5$13 = $267;$$sink2$13 = $270;
 }
 $$sink3$13 = ((($29)) + 56|0);
 HEAP32[$$sink3$13>>2] = $$sink2$13;
 $271 = ((($15)) + 15|0);
 $272 = HEAP8[$271>>0]|0;
 $273 = ($272<<24>>24)==(0);
 if ($273) {
  $$5$14 = $$5$13;$$sink2$14 = -1;
 } else {
  $274 = (($5) + ($$5$13<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($$5$13) - ($275))|0;
  $277 = ((($29)) + 132|0);
  HEAP32[$277>>2] = $276;
  $278 = HEAP8[$271>>0]|0;
  $279 = $278&255;
  $280 = (($$5$13) + ($279))|0;
  $281 = (($280) + -1)|0;
  $282 = (($5) + ($281<<2)|0);
  $283 = HEAP32[$282>>2]|0;
  $$5$14 = $280;$$sink2$14 = $283;
 }
 $$sink3$14 = ((($29)) + 60|0);
 HEAP32[$$sink3$14>>2] = $$sink2$14;
 $284 = ((($15)) + 16|0);
 $285 = HEAP8[$284>>0]|0;
 $286 = ($285<<24>>24)==(0);
 if ($286) {
  $$sink2$15 = -1;
 } else {
  $287 = (($5) + ($$5$14<<2)|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($$5$14) - ($288))|0;
  $290 = ((($29)) + 136|0);
  HEAP32[$290>>2] = $289;
  $291 = HEAP8[$284>>0]|0;
  $292 = $291&255;
  $293 = (($$5$14) + ($292))|0;
  $294 = (($293) + -1)|0;
  $295 = (($5) + ($294<<2)|0);
  $296 = HEAP32[$295>>2]|0;
  $$sink2$15 = $296;
 }
 $$sink3$15 = ((($29)) + 64|0);
 HEAP32[$$sink3$15>>2] = $$sink2$15;
 $297 = ((($29)) + 140|0);
 HEAP32[$297>>2] = 0;
 $298 = ((($29)) + 68|0);
 HEAP32[$298>>2] = 1048575;
 $$1131153 = 0;
 while(1) {
  $74 = (((($29)) + 148|0) + ($$1131153<<2)|0);
  HEAP32[$74>>2] = 2304;
  $75 = (($$1131153) + 1)|0;
  $exitcond179 = ($75|0)==(256);
  if ($exitcond179) {
   break;
  } else {
   $$1131153 = $75;
  }
 }
 $76 = ((($15)) + 1|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77<<24>>24)==(0);
 if ($78) {
  $$7$lcssa = 0;
 } else {
  $$2132147$us = 1;$$7148$us = 0;
  while(1) {
   $79 = (($5) + ($$7148$us<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 << 7;
   $82 = (((($15)) + 17|0) + ($$7148$us)|0);
   $$0128145$us = 128;$$0129144$us = $81;
   while(1) {
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 | 256;
    $86 = (((($29)) + 148|0) + ($$0129144$us<<2)|0);
    HEAP32[$86>>2] = $85;
    $87 = (($$0129144$us) + 1)|0;
    $88 = (($$0128145$us) + -1)|0;
    $89 = ($$0128145$us|0)>(1);
    if ($89) {
     $$0128145$us = $88;$$0129144$us = $87;
    } else {
     break;
    }
   }
   $90 = (($$2132147$us) + 1)|0;
   $91 = (($$7148$us) + 1)|0;
   $92 = HEAP8[$76>>0]|0;
   $93 = $92&255;
   $94 = ($$2132147$us|0)<($93|0);
   if ($94) {
    $$2132147$us = $90;$$7148$us = $91;
   } else {
    $$7$lcssa = $91;
    break;
   }
  }
 }
 $95 = ((($15)) + 2|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ($96<<24>>24)==(0);
 if ($97) {
  $$7$lcssa$1 = $$7$lcssa;
 } else {
  $$2132147$us$1 = 1;$$7148$us$1 = $$7$lcssa;
  while(1) {
   $299 = (($5) + ($$7148$us$1<<2)|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $300 << 6;
   $302 = (((($15)) + 17|0) + ($$7148$us$1)|0);
   $$0128145$us$1 = 64;$$0129144$us$1 = $301;
   while(1) {
    $303 = HEAP8[$302>>0]|0;
    $304 = $303&255;
    $305 = $304 | 512;
    $306 = (((($29)) + 148|0) + ($$0129144$us$1<<2)|0);
    HEAP32[$306>>2] = $305;
    $307 = (($$0129144$us$1) + 1)|0;
    $308 = (($$0128145$us$1) + -1)|0;
    $309 = ($$0128145$us$1|0)>(1);
    if ($309) {
     $$0128145$us$1 = $308;$$0129144$us$1 = $307;
    } else {
     break;
    }
   }
   $310 = (($$2132147$us$1) + 1)|0;
   $311 = (($$7148$us$1) + 1)|0;
   $312 = HEAP8[$95>>0]|0;
   $313 = $312&255;
   $314 = ($$2132147$us$1|0)<($313|0);
   if ($314) {
    $$2132147$us$1 = $310;$$7148$us$1 = $311;
   } else {
    $$7$lcssa$1 = $311;
    break;
   }
  }
 }
 $315 = ((($15)) + 3|0);
 $316 = HEAP8[$315>>0]|0;
 $317 = ($316<<24>>24)==(0);
 if ($317) {
  $$7$lcssa$2 = $$7$lcssa$1;
 } else {
  $$2132147$us$2 = 1;$$7148$us$2 = $$7$lcssa$1;
  while(1) {
   $318 = (($5) + ($$7148$us$2<<2)|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = $319 << 5;
   $321 = (((($15)) + 17|0) + ($$7148$us$2)|0);
   $$0128145$us$2 = 32;$$0129144$us$2 = $320;
   while(1) {
    $322 = HEAP8[$321>>0]|0;
    $323 = $322&255;
    $324 = $323 | 768;
    $325 = (((($29)) + 148|0) + ($$0129144$us$2<<2)|0);
    HEAP32[$325>>2] = $324;
    $326 = (($$0129144$us$2) + 1)|0;
    $327 = (($$0128145$us$2) + -1)|0;
    $328 = ($$0128145$us$2|0)>(1);
    if ($328) {
     $$0128145$us$2 = $327;$$0129144$us$2 = $326;
    } else {
     break;
    }
   }
   $329 = (($$2132147$us$2) + 1)|0;
   $330 = (($$7148$us$2) + 1)|0;
   $331 = HEAP8[$315>>0]|0;
   $332 = $331&255;
   $333 = ($$2132147$us$2|0)<($332|0);
   if ($333) {
    $$2132147$us$2 = $329;$$7148$us$2 = $330;
   } else {
    $$7$lcssa$2 = $330;
    break;
   }
  }
 }
 $334 = ((($15)) + 4|0);
 $335 = HEAP8[$334>>0]|0;
 $336 = ($335<<24>>24)==(0);
 if ($336) {
  $$7$lcssa$3 = $$7$lcssa$2;
 } else {
  $$2132147$us$3 = 1;$$7148$us$3 = $$7$lcssa$2;
  while(1) {
   $337 = (($5) + ($$7148$us$3<<2)|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = $338 << 4;
   $340 = (((($15)) + 17|0) + ($$7148$us$3)|0);
   $$0128145$us$3 = 16;$$0129144$us$3 = $339;
   while(1) {
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = $342 | 1024;
    $344 = (((($29)) + 148|0) + ($$0129144$us$3<<2)|0);
    HEAP32[$344>>2] = $343;
    $345 = (($$0129144$us$3) + 1)|0;
    $346 = (($$0128145$us$3) + -1)|0;
    $347 = ($$0128145$us$3|0)>(1);
    if ($347) {
     $$0128145$us$3 = $346;$$0129144$us$3 = $345;
    } else {
     break;
    }
   }
   $348 = (($$2132147$us$3) + 1)|0;
   $349 = (($$7148$us$3) + 1)|0;
   $350 = HEAP8[$334>>0]|0;
   $351 = $350&255;
   $352 = ($$2132147$us$3|0)<($351|0);
   if ($352) {
    $$2132147$us$3 = $348;$$7148$us$3 = $349;
   } else {
    $$7$lcssa$3 = $349;
    break;
   }
  }
 }
 $353 = ((($15)) + 5|0);
 $354 = HEAP8[$353>>0]|0;
 $355 = ($354<<24>>24)==(0);
 if ($355) {
  $$7$lcssa$4 = $$7$lcssa$3;
 } else {
  $$2132147$us$4 = 1;$$7148$us$4 = $$7$lcssa$3;
  while(1) {
   $356 = (($5) + ($$7148$us$4<<2)|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = $357 << 3;
   $359 = (((($15)) + 17|0) + ($$7148$us$4)|0);
   $$0128145$us$4 = 8;$$0129144$us$4 = $358;
   while(1) {
    $360 = HEAP8[$359>>0]|0;
    $361 = $360&255;
    $362 = $361 | 1280;
    $363 = (((($29)) + 148|0) + ($$0129144$us$4<<2)|0);
    HEAP32[$363>>2] = $362;
    $364 = (($$0129144$us$4) + 1)|0;
    $365 = (($$0128145$us$4) + -1)|0;
    $366 = ($$0128145$us$4|0)>(1);
    if ($366) {
     $$0128145$us$4 = $365;$$0129144$us$4 = $364;
    } else {
     break;
    }
   }
   $367 = (($$2132147$us$4) + 1)|0;
   $368 = (($$7148$us$4) + 1)|0;
   $369 = HEAP8[$353>>0]|0;
   $370 = $369&255;
   $371 = ($$2132147$us$4|0)<($370|0);
   if ($371) {
    $$2132147$us$4 = $367;$$7148$us$4 = $368;
   } else {
    $$7$lcssa$4 = $368;
    break;
   }
  }
 }
 $372 = ((($15)) + 6|0);
 $373 = HEAP8[$372>>0]|0;
 $374 = ($373<<24>>24)==(0);
 if ($374) {
  $$7$lcssa$5 = $$7$lcssa$4;
 } else {
  $$2132147$us$5 = 1;$$7148$us$5 = $$7$lcssa$4;
  while(1) {
   $375 = (($5) + ($$7148$us$5<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $376 << 2;
   $378 = (((($15)) + 17|0) + ($$7148$us$5)|0);
   $$0128145$us$5 = 4;$$0129144$us$5 = $377;
   while(1) {
    $379 = HEAP8[$378>>0]|0;
    $380 = $379&255;
    $381 = $380 | 1536;
    $382 = (((($29)) + 148|0) + ($$0129144$us$5<<2)|0);
    HEAP32[$382>>2] = $381;
    $383 = (($$0129144$us$5) + 1)|0;
    $384 = (($$0128145$us$5) + -1)|0;
    $385 = ($$0128145$us$5|0)>(1);
    if ($385) {
     $$0128145$us$5 = $384;$$0129144$us$5 = $383;
    } else {
     break;
    }
   }
   $386 = (($$2132147$us$5) + 1)|0;
   $387 = (($$7148$us$5) + 1)|0;
   $388 = HEAP8[$372>>0]|0;
   $389 = $388&255;
   $390 = ($$2132147$us$5|0)<($389|0);
   if ($390) {
    $$2132147$us$5 = $386;$$7148$us$5 = $387;
   } else {
    $$7$lcssa$5 = $387;
    break;
   }
  }
 }
 $391 = ((($15)) + 7|0);
 $392 = HEAP8[$391>>0]|0;
 $393 = ($392<<24>>24)==(0);
 if ($393) {
  $$7$lcssa$6 = $$7$lcssa$5;
 } else {
  $$2132147$us$6 = 1;$$7148$us$6 = $$7$lcssa$5;
  while(1) {
   $394 = (($5) + ($$7148$us$6<<2)|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = $395 << 1;
   $397 = (((($15)) + 17|0) + ($$7148$us$6)|0);
   $$0128145$us$6 = 2;$$0129144$us$6 = $396;
   while(1) {
    $398 = HEAP8[$397>>0]|0;
    $399 = $398&255;
    $400 = $399 | 1792;
    $401 = (((($29)) + 148|0) + ($$0129144$us$6<<2)|0);
    HEAP32[$401>>2] = $400;
    $402 = (($$0129144$us$6) + 1)|0;
    $403 = (($$0128145$us$6) + -1)|0;
    $404 = ($$0128145$us$6|0)>(1);
    if ($404) {
     $$0128145$us$6 = $403;$$0129144$us$6 = $402;
    } else {
     break;
    }
   }
   $405 = (($$2132147$us$6) + 1)|0;
   $406 = (($$7148$us$6) + 1)|0;
   $407 = HEAP8[$391>>0]|0;
   $408 = $407&255;
   $409 = ($$2132147$us$6|0)<($408|0);
   if ($409) {
    $$2132147$us$6 = $405;$$7148$us$6 = $406;
   } else {
    $$7$lcssa$6 = $406;
    break;
   }
  }
 }
 $410 = ((($15)) + 8|0);
 $411 = HEAP8[$410>>0]|0;
 $412 = ($411<<24>>24)==(0);
 if (!($412)) {
  $$2132147$us$7 = 1;$$7148$us$7 = $$7$lcssa$6;
  while(1) {
   $413 = (($5) + ($$7148$us$7<<2)|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = (((($15)) + 17|0) + ($$7148$us$7)|0);
   $$0128145$us$7 = 1;$$0129144$us$7 = $414;
   while(1) {
    $416 = HEAP8[$415>>0]|0;
    $417 = $416&255;
    $418 = $417 | 2048;
    $419 = (((($29)) + 148|0) + ($$0129144$us$7<<2)|0);
    HEAP32[$419>>2] = $418;
    $420 = (($$0129144$us$7) + 1)|0;
    $421 = (($$0128145$us$7) + -1)|0;
    $422 = ($$0128145$us$7|0)>(1);
    if ($422) {
     $$0128145$us$7 = $421;$$0129144$us$7 = $420;
    } else {
     break;
    }
   }
   $423 = (($$2132147$us$7) + 1)|0;
   $424 = (($$7148$us$7) + 1)|0;
   $425 = HEAP8[$410>>0]|0;
   $426 = $425&255;
   $427 = ($$2132147$us$7|0)<($426|0);
   if ($427) {
    $$2132147$us$7 = $423;$$7148$us$7 = $424;
   } else {
    break;
   }
  }
 }
 $428 = ($$1$lcssa$15|0)>(0);
 $or$cond = $12 & $428;
 if ($or$cond) {
  $$3133143 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $98 = (((($15)) + 17|0) + ($$3133143)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = ($99&255)>(15);
  if ($100) {
   $101 = HEAP32[$0>>2]|0;
   $102 = ((($101)) + 20|0);
   HEAP32[$102>>2] = 8;
   $103 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vi[$103 & 255]($$pre$phiZ2D);
  }
  $104 = (($$3133143) + 1)|0;
  $exitcond = ($104|0)==($$1$lcssa$15|0);
  if ($exitcond) {
   break;
  } else {
   $$3133143 = $104;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_fill_bit_buffer($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$052 = 0, $$05498 = 0, $$05797 = 0, $$06595 = 0, $$06993 = 0, $$155 = 0, $$158 = 0, $$2 = 0, $$256 = 0, $$259 = 0, $$267 = 0, $$271 = 0, $$3 = 0, $$360 = 0, $$368 = 0, $$372 = 0, $$4 = 0, $$461 = 0, $$6 = 0, $$663 = 0;
 var $$7 = 0, $$764 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 416|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = ($2|0)<(25);
   if ($12) {
    $13 = ((($8)) + 24|0);
    $$05498 = $6;$$05797 = $4;$$06595 = $1;$$06993 = $2;
    L4: while(1) {
     $14 = ($$05498|0)==(0);
     if ($14) {
      $15 = HEAP32[$13>>2]|0;
      $16 = ((($15)) + 12|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (FUNCTION_TABLE_ii[$17 & 127]($8)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       $$2 = 0;
       label = 19;
       break;
      }
      $20 = HEAP32[$13>>2]|0;
      $21 = HEAP32[$20>>2]|0;
      $22 = ((($20)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $$155 = $23;$$158 = $21;
     } else {
      $$155 = $$05498;$$158 = $$05797;
     }
     $24 = (($$155) + -1)|0;
     $25 = ((($$158)) + 1|0);
     $26 = HEAP8[$$158>>0]|0;
     $27 = $26&255;
     $28 = ($26<<24>>24)==(-1);
     L10: do {
      if ($28) {
       $$256 = $24;$$259 = $25;
       while(1) {
        $29 = ($$256|0)==(0);
        if ($29) {
         $30 = HEAP32[$13>>2]|0;
         $31 = ((($30)) + 12|0);
         $32 = HEAP32[$31>>2]|0;
         $33 = (FUNCTION_TABLE_ii[$32 & 127]($8)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          $$2 = 0;
          label = 19;
          break L4;
         }
         $35 = HEAP32[$13>>2]|0;
         $36 = HEAP32[$35>>2]|0;
         $37 = ((($35)) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $$3 = $38;$$360 = $36;
        } else {
         $$3 = $$256;$$360 = $$259;
        }
        $39 = (($$3) + -1)|0;
        $40 = ((($$360)) + 1|0);
        $41 = HEAP8[$$360>>0]|0;
        switch ($41<<24>>24) {
        case 0:  {
         $$052 = 255;$$4 = $39;$$461 = $40;
         break L10;
         break;
        }
        case -1:  {
         $$256 = $39;$$259 = $40;
         break;
        }
        default: {
         label = 13;
         break L4;
        }
        }
       }
      } else {
       $$052 = $27;$$4 = $24;$$461 = $25;
      }
     } while(0);
     $42 = $$06595 << 8;
     $43 = $$052 | $42;
     $44 = (($$06993) + 8)|0;
     $45 = ($$06993|0)<(17);
     if ($45) {
      $$05498 = $$4;$$05797 = $$461;$$06595 = $43;$$06993 = $44;
     } else {
      $$368 = $43;$$372 = $44;$$7 = $$4;$$764 = $$461;
      break L1;
     }
    }
    if ((label|0) == 13) {
     $46 = $41&255;
     HEAP32[$9>>2] = $46;
     $$267 = $$06595;$$271 = $$06993;$$6 = $39;$$663 = $40;
     label = 14;
     break;
    }
    else if ((label|0) == 19) {
     return ($$2|0);
    }
   } else {
    $$368 = $1;$$372 = $2;$$7 = $6;$$764 = $4;
   }
  } else {
   $$267 = $1;$$271 = $2;$$6 = $6;$$663 = $4;
   label = 14;
  }
 } while(0);
 if ((label|0) == 14) {
  $47 = ($$271|0)<($3|0);
  if ($47) {
   $48 = ((($8)) + 444|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = HEAP32[$8>>2]|0;
    $54 = ((($53)) + 20|0);
    HEAP32[$54>>2] = 117;
    $55 = ((($53)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    FUNCTION_TABLE_vii[$56 & 255]($8,-1);
    $57 = HEAP32[$48>>2]|0;
    $58 = ((($57)) + 8|0);
    HEAP32[$58>>2] = 1;
   }
   $59 = (25 - ($$271))|0;
   $60 = $$267 << $59;
   $$368 = $60;$$372 = 25;$$7 = $$6;$$764 = $$663;
  } else {
   $$368 = $$267;$$372 = $$271;$$7 = $$6;$$764 = $$663;
  }
 }
 HEAP32[$0>>2] = $$764;
 HEAP32[$5>>2] = $$7;
 $61 = ((($0)) + 8|0);
 HEAP32[$61>>2] = $$368;
 $62 = ((($0)) + 12|0);
 HEAP32[$62>>2] = $$372;
 $$2 = 1;
 return ($$2|0);
}
function _jpeg_huff_decode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$042$lcssa = 0, $$04254 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$055 = 0, $$1$lcssa = 0, $$146$lcssa = 0, $$14652 = 0, $$153 = 0, $$2 = 0, $$247 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)<($4|0);
 do {
  if ($5) {
   $6 = (_jpeg_fill_bit_buffer($0,$1,$2,$4)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$043 = -1;
    return ($$043|0);
   } else {
    $8 = ((($0)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($0)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $$044 = $9;$$045 = $11;
    break;
   }
  } else {
   $$044 = $1;$$045 = $2;
  }
 } while(0);
 $12 = (($$045) - ($4))|0;
 $13 = $$044 >>> $12;
 $14 = 1 << $4;
 $15 = (($14) + -1)|0;
 $16 = $13 & $15;
 $17 = (($3) + ($4<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)>($18|0);
 $20 = ((($0)) + 8|0);
 $21 = ((($0)) + 12|0);
 L7: do {
  if ($19) {
   $$04254 = $4;$$055 = $16;$$14652 = $12;$$153 = $$044;
   while(1) {
    $22 = $$055 << 1;
    $23 = ($$14652|0)<(1);
    if ($23) {
     $24 = (_jpeg_fill_bit_buffer($0,$$153,$$14652,1)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $$043 = -1;
      break;
     }
     $26 = HEAP32[$20>>2]|0;
     $27 = HEAP32[$21>>2]|0;
     $$2 = $26;$$247 = $27;
    } else {
     $$2 = $$153;$$247 = $$14652;
    }
    $28 = (($$247) + -1)|0;
    $29 = $$2 >>> $28;
    $30 = $29 & 1;
    $31 = $30 | $22;
    $32 = (($$04254) + 1)|0;
    $33 = (($3) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($31|0)>($34|0);
    if ($35) {
     $$04254 = $32;$$055 = $31;$$14652 = $28;$$153 = $$2;
    } else {
     $$0$lcssa = $31;$$042$lcssa = $32;$$1$lcssa = $$2;$$146$lcssa = $28;
     break L7;
    }
   }
   return ($$043|0);
  } else {
   $$0$lcssa = $16;$$042$lcssa = $4;$$1$lcssa = $$044;$$146$lcssa = $12;
  }
 } while(0);
 HEAP32[$20>>2] = $$1$lcssa;
 HEAP32[$21>>2] = $$146$lcssa;
 $36 = ($$042$lcssa|0)>(16);
 if ($36) {
  $37 = ((($0)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 20|0);
  HEAP32[$40>>2] = 118;
  $41 = ((($39)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  FUNCTION_TABLE_vii[$42 & 255]($38,-1);
  $$043 = 0;
  return ($$043|0);
 } else {
  $43 = ((($3)) + 144|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (((($3)) + 72|0) + ($$042$lcssa<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($$0$lcssa))|0;
  $48 = (((($44)) + 17|0) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $$043 = $50;
  return ($$043|0);
 }
 return (0)|0;
}
function _jinit_huff_decoder($0) {
 $0 = $0|0;
 var $$0$i = 0, $$015$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ((($0)) + 180|0);
 $5 = ((($0)) + 196|0);
 $6 = ((($0)) + 88|0);
 $7 = ((($0)) + 104|0);
 $$015$i = $3 ? $6 : $4;
 $$0$i = $3 ? $7 : $5;
 _add_huff_table_371($0,$$015$i,12261,12278);
 _add_huff_table_371($0,$$0$i,12290,12307);
 $8 = ((($$015$i)) + 4|0);
 _add_huff_table_371($0,$8,12469,12486);
 $9 = ((($$0$i)) + 4|0);
 _add_huff_table_371($0,$9,12498,12515);
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$12 & 255]($0,1,232)|0);
 $14 = ((($0)) + 444|0);
 HEAP32[$14>>2] = $13;
 HEAP32[$13>>2] = 167;
 $15 = ((($13)) + 4|0);
 HEAP32[$15>>2] = 168;
 $16 = ((($13)) + 56|0);
 $17 = ((($13)) + 40|0);
 HEAP32[$16>>2] = 0;
 HEAP32[$17>>2] = 0;
 $18 = ((($13)) + 60|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($13)) + 44|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($13)) + 64|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($13)) + 48|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($13)) + 68|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($13)) + 52|0);
 HEAP32[$23>>2] = 0;
 return;
}
function _add_huff_table_371($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$025$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  return;
 }
 $6 = (_jpeg_alloc_huff_table($0)|0);
 HEAP32[$1>>2] = $6;
 dest=$6; src=$2; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = ((($2)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($2)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($9) + ($12))|0;
 $14 = ((($2)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($13) + ($16))|0;
 $18 = ((($2)) + 4|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($17) + ($20))|0;
 $22 = ((($2)) + 5|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($21) + ($24))|0;
 $26 = ((($2)) + 6|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($25) + ($28))|0;
 $30 = ((($2)) + 7|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($29) + ($32))|0;
 $34 = ((($2)) + 8|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = (($33) + ($36))|0;
 $38 = ((($2)) + 9|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (($37) + ($40))|0;
 $42 = ((($2)) + 10|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (($41) + ($44))|0;
 $46 = ((($2)) + 11|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (($45) + ($48))|0;
 $50 = ((($2)) + 12|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($49) + ($52))|0;
 $54 = ((($2)) + 13|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = (($53) + ($56))|0;
 $58 = ((($2)) + 14|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($57) + ($60))|0;
 $62 = ((($2)) + 15|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (($61) + ($64))|0;
 $66 = ((($2)) + 16|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($65) + ($68))|0;
 $$025$off = (($69) + -1)|0;
 $70 = ($$025$off>>>0)>(255);
 if ($70) {
  $71 = HEAP32[$0>>2]|0;
  $72 = ((($71)) + 20|0);
  HEAP32[$72>>2] = 8;
  $73 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vi[$73 & 255]($0);
 }
 $74 = HEAP32[$1>>2]|0;
 $75 = ((($74)) + 17|0);
 _memcpy(($75|0),($3|0),($69|0))|0;
 $76 = HEAP32[$1>>2]|0;
 $77 = (((($76)) + 17|0) + ($69)|0);
 $78 = (256 - ($69))|0;
 _memset(($77|0),0,($78|0))|0;
 $79 = HEAP32[$1>>2]|0;
 $80 = ((($79)) + 276|0);
 HEAP32[$80>>2] = 0;
 return;
}
function _start_pass_huff_decoder($0) {
 $0 = $0|0;
 var $$06971 = 0, $$072 = 0, $$sink = 0, $$sink1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 444|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 404|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(63);
  if ($8) {
   $9 = ((($0)) + 408|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($0)) + 412|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0);
    if (!($14)) {
     label = 5;
    }
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 20|0);
  HEAP32[$16>>2] = 122;
  $17 = ((($15)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vii[$18 & 255]($0,-1);
 }
 $19 = ((($0)) + 328|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $$072 = 0;
  while(1) {
   $25 = (((($0)) + 332|0) + ($$072<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($26)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (((($2)) + 40|0) + ($28<<2)|0);
   _jpeg_make_d_derived_tbl($0,1,$28,$31);
   $32 = (((($2)) + 56|0) + ($30<<2)|0);
   _jpeg_make_d_derived_tbl($0,0,$30,$32);
   $33 = (((($2)) + 20|0) + ($$072<<2)|0);
   HEAP32[$33>>2] = 0;
   $34 = (($$072) + 1)|0;
   $35 = HEAP32[$19>>2]|0;
   $36 = ($34|0)<($35|0);
   if ($36) {
    $$072 = $34;
   } else {
    break;
   }
  }
 }
 $22 = ((($0)) + 356|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(0);
 if ($24) {
  $$06971 = 0;
 } else {
  $65 = ((($2)) + 16|0);
  HEAP32[$65>>2] = 0;
  $66 = ((($2)) + 12|0);
  HEAP32[$66>>2] = 0;
  $67 = ((($2)) + 8|0);
  HEAP32[$67>>2] = 0;
  $68 = ((($0)) + 276|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($2)) + 36|0);
  HEAP32[$70>>2] = $69;
  return;
 }
 while(1) {
  $37 = (((($0)) + 360|0) + ($$06971<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (((($0)) + 332|0) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (((($2)) + 40|0) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (((($2)) + 72|0) + ($$06971<<2)|0);
  HEAP32[$45>>2] = $44;
  $46 = ((($40)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (((($2)) + 56|0) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (((($2)) + 112|0) + ($$06971<<2)|0);
  HEAP32[$50>>2] = $49;
  $51 = ((($40)) + 48|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $60 = (((($2)) + 192|0) + ($$06971<<2)|0);
   HEAP32[$60>>2] = 0;
   $61 = (((($2)) + 152|0) + ($$06971<<2)|0);
   $$sink = 0;$$sink1 = $61;
  } else {
   $54 = (((($2)) + 152|0) + ($$06971<<2)|0);
   HEAP32[$54>>2] = 1;
   $55 = ((($40)) + 36|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)>(1);
   $58 = $57&1;
   $59 = (((($2)) + 192|0) + ($$06971<<2)|0);
   $$sink = $58;$$sink1 = $59;
  }
  HEAP32[$$sink1>>2] = $$sink;
  $62 = (($$06971) + 1)|0;
  $63 = HEAP32[$22>>2]|0;
  $64 = ($62|0)<($63|0);
  if ($64) {
   $$06971 = $62;
  } else {
   break;
  }
 }
 $65 = ((($2)) + 16|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($2)) + 12|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($2)) + 8|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($0)) + 276|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($2)) + 36|0);
 HEAP32[$70>>2] = $69;
 return;
}
function _decode_mcu_378($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$017 = 0, $$0180$i = 0, $$0181$lcssa$i = 0, $$0181276$i = 0, $$019$i = 0, $$0190$i = 0, $$0191$lcssa$i = 0, $$0191275$i = 0, $$0218272$i = 0, $$0219$i = 0, $$0220269$i = 0, $$0384$lcssa$i = 0, $$0384495$i = 0, $$0385$lcssa$i = 0, $$0385494$i = 0, $$0404$lcssa$i = 0, $$0404493$i = 0, $$0429490$i = 0, $$0430$lcssa$i = 0;
 var $$0430460$i = 0, $$0437486$i = 0, $$0441$lcssa$i = 0, $$0441459$i = 0, $$1 = 0, $$1$i = 0, $$1$ph$i = 0, $$10395$i = 0, $$11$i = 0, $$11$ph$i = 0, $$11202$ph$i = 0, $$11235$ph$i = 0, $$11396$i = 0, $$11415$i = 0, $$1182$i = 0, $$1192$i = 0, $$12$i = 0, $$12$i25 = 0, $$12$ph$i = 0, $$12203$i = 0;
 var $$1221$i = 0, $$12397475$i = 0, $$12416$i = 0, $$12416$ph$i = 0, $$13$i = 0, $$13204$i = 0, $$13398$i = 0, $$1386$i = 0, $$14$i = 0, $$1405$i = 0, $$1405$ph$i = 0, $$14205267$i = 0, $$14268$i = 0, $$1431$i = 0, $$1438$i = 0, $$14399$lcssa$i = 0, $$14399466$i = 0, $$14418$i = 0, $$1442$lcssa$i = 0, $$1442477$i = 0;
 var $$15$i = 0, $$15$i27 = 0, $$15206$i = 0, $$15400$i = 0, $$15419$i = 0, $$16$i = 0, $$16207$i = 0, $$16401$i = 0, $$16420474$i = 0, $$16476$i = 0, $$17$i = 0, $$17$ph$i = 0, $$17402$i = 0, $$17421$i = 0, $$17421$ph$i = 0, $$18$ph$i = 0, $$18209$ph$i = 0, $$18403$i = 0, $$19$i = 0, $$19$i28 = 0;
 var $$19210$i = 0, $$19423$i = 0, $$20$i = 0, $$20$i30 = 0, $$20$ph$i = 0, $$20211$i = 0, $$20424$i = 0, $$20424$ph$i = 0, $$2183$i = 0, $$2193$i = 0, $$22$i = 0, $$22$i32 = 0, $$22213$i = 0, $$2222266$i = 0, $$2226$ph$i = 0, $$22426$i = 0, $$23$i = 0, $$23427$i = 0, $$2387$lcssa$i = 0, $$2387461$i = 0;
 var $$24$i = 0, $$2432$i = 0, $$2439473$i = 0, $$24428$i = 0, $$2443$lcssa$i = 0, $$2443464$i = 0, $$3$i = 0, $$3223$i = 0, $$3227$i = 0, $$3388$i = 0, $$3407$i = 0, $$3433$lcssa$i = 0, $$3433478$i = 0, $$3440$i = 0, $$4$i = 0, $$4$ph$i = 0, $$4185$ph$i = 0, $$4195$ph$i = 0, $$4389$i = 0, $$4408$i = 0;
 var $$4408$ph$i = 0, $$4434$i = 0, $$5186$i = 0, $$5196$i = 0, $$5390$i = 0, $$5435$lcssa$i = 0, $$5435465$i = 0, $$6$i = 0, $$6187$i = 0, $$6197$i = 0, $$6391488$i = 0, $$6410$i = 0, $$6436$i = 0, $$7$i = 0, $$7188271$i = 0, $$7198270$i = 0, $$7231$ph$i = 0, $$7392$i = 0, $$7411$i = 0, $$8189$i = 0;
 var $$8199$i = 0, $$8393$lcssa$i = 0, $$8393479$i = 0, $$8412487$i = 0, $$8489$i = 0, $$9$i = 0, $$9$i24 = 0, $$9$ph$i = 0, $$9200$i = 0, $$9394$i = 0, $$9413$i = 0, $$9413$ph$i = 0, $$in$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert72 = 0, $$pn$i = 0, $$pn$i29 = 0, $$pr$i = 0, $$pr445$i = 0, $$pr448$i = 0;
 var $$pr450$i = 0, $$pr452$i = 0, $$pr454$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i34 = 0, $$pre$phi$iZ2D = 0, $$pre283$i = 0, $$pre284$i = 0, $$pre70 = 0, $$pre71 = 0, $$pre73 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $or$cond$i = 0, $or$cond$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = ((($0)) + 444|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 276|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
 } else {
  $10 = ((($6)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14|0) / 8)&-1;
   $16 = ((($0)) + 440|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($15))|0;
   HEAP32[$18>>2] = $20;
   HEAP32[$13>>2] = 0;
   $21 = ((($17)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (FUNCTION_TABLE_ii[$22 & 127]($0)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $$017 = 0;
    STACKTOP = sp;return ($$017|0);
   }
   $25 = ((($0)) + 328|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)>(0);
   if ($27) {
    $$019$i = 0;
    while(1) {
     $28 = (((($6)) + 20|0) + ($$019$i<<2)|0);
     HEAP32[$28>>2] = 0;
     $29 = (($$019$i) + 1)|0;
     $30 = HEAP32[$25>>2]|0;
     $31 = ($29|0)<($30|0);
     if ($31) {
      $$019$i = $29;
     } else {
      break;
     }
    }
   }
   $32 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = $32;
   $33 = ((($0)) + 416|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($6)) + 8|0);
    HEAP32[$36>>2] = 0;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 }
 $37 = ((($0)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 356|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 << 9;
 $44 = ($40>>>0)<($43>>>0);
 if ($44) {
  label = 10;
 } else {
  $45 = ((($0)) + 416|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   $$1 = $$0;
  } else {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $$1 = 0;
 }
 $48 = ((($6)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 L18: do {
  if ($50) {
   $51 = ($$1|0)==(0);
   $$pre = HEAP32[$5>>2]|0;
   do {
    if ($51) {
     $$pre70 = HEAP32[$38>>2]|0;
     $$phi$trans$insert = ((($$pre)) + 12|0);
     $$pre71 = HEAP32[$$phi$trans$insert>>2]|0;
     $$phi$trans$insert72 = ((($$pre)) + 16|0);
     $$pre73 = HEAP32[$$phi$trans$insert72>>2]|0;
     $370 = $$pre70;$527 = $$pre73;$528 = $$pre71;
    } else {
     $52 = HEAP32[$38>>2]|0;
     $53 = ((($$pre)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($$pre)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($$pre)) + 20|0);
     ;HEAP32[$4>>2]=HEAP32[$57>>2]|0;HEAP32[$4+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$57+12>>2]|0;
     $58 = ($42|0)>(0);
     $59 = $52;
     if ($58) {
      $60 = ($1|0)==(0|0);
      $61 = ((($0)) + 416|0);
      $$0384495$i = $54;$$0385494$i = $56;$$0404493$i = $52;$$0429490$i = 0;
      while(1) {
       if ($60) {
        $168 = 0;
       } else {
        $62 = (($1) + ($$0429490$i<<2)|0);
        $63 = HEAP32[$62>>2]|0;
        $168 = $63;
       }
       $64 = (((($$pre)) + 72|0) + ($$0429490$i<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (((($$pre)) + 112|0) + ($$0429490$i<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($$0385494$i|0)<(17);
       if ($68) {
        $69 = ((($$0404493$i)) + 1|0);
        $70 = HEAP8[$$0404493$i>>0]|0;
        $71 = $70&255;
        $72 = HEAP8[$69>>0]|0;
        $73 = $72&255;
        $74 = $$0384495$i << 8;
        $75 = $74 | $71;
        $76 = ($70<<24>>24)==(-1);
        if ($76) {
         $77 = ((($$0404493$i)) + 2|0);
         $78 = ($72<<24>>24)==(0);
         if ($78) {
          $$1$ph$i = $75;$$1405$ph$i = $77;
         } else {
          HEAP32[$61>>2] = $73;
          $$1$ph$i = $74;$$1405$ph$i = $$0404493$i;
         }
         $$pr$i = HEAP8[$$1405$ph$i>>0]|0;
         $$1$i = $$1$ph$i;$$1405$i = $$1405$ph$i;$81 = $$pr$i;
        } else {
         $$1$i = $75;$$1405$i = $69;$81 = $72;
        }
        $79 = ((($$1405$i)) + 1|0);
        $80 = $81&255;
        $82 = HEAP8[$79>>0]|0;
        $83 = $82&255;
        $84 = $$1$i << 8;
        $85 = $84 | $80;
        $86 = (($$0385494$i) + 16)|0;
        $87 = ($81<<24>>24)==(-1);
        if ($87) {
         $88 = ((($$1405$i)) + 2|0);
         $89 = ($82<<24>>24)==(0);
         if ($89) {
          $$1386$i = $86;$$3$i = $85;$$3407$i = $88;
         } else {
          HEAP32[$61>>2] = $83;
          $$1386$i = $86;$$3$i = $84;$$3407$i = $$1405$i;
         }
        } else {
         $$1386$i = $86;$$3$i = $85;$$3407$i = $79;
        }
       } else {
        $$1386$i = $$0385494$i;$$3$i = $$0384495$i;$$3407$i = $$0404493$i;
       }
       $90 = (($$1386$i) + -8)|0;
       $91 = $$3$i >>> $90;
       $92 = $91 & 255;
       $93 = (((($65)) + 148|0) + ($92<<2)|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $94 >> 8;
       $96 = (($$1386$i) - ($95))|0;
       $97 = $94 & 255;
       $98 = ($95|0)>(8);
       if ($98) {
        $99 = $$3$i >>> $96;
        $100 = 1 << $95;
        $101 = (($100) + -1)|0;
        $102 = $99 & $101;
        $103 = (($65) + ($95<<2)|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = ($102|0)>($104|0);
        if ($105) {
         $$0430460$i = $102;$$0441459$i = $95;$$2387461$i = $96;
         while(1) {
          $106 = $$0430460$i << 1;
          $107 = (($$2387461$i) + -1)|0;
          $108 = $$3$i >>> $107;
          $109 = $108 & 1;
          $110 = $109 | $106;
          $111 = (($$0441459$i) + 1)|0;
          $112 = (($65) + ($111<<2)|0);
          $113 = HEAP32[$112>>2]|0;
          $114 = ($110|0)>($113|0);
          if ($114) {
           $$0430460$i = $110;$$0441459$i = $111;$$2387461$i = $107;
          } else {
           $$0430$lcssa$i = $110;$$0441$lcssa$i = $111;$$2387$lcssa$i = $107;
           break;
          }
         }
        } else {
         $$0430$lcssa$i = $102;$$0441$lcssa$i = $95;$$2387$lcssa$i = $96;
        }
        $115 = ((($65)) + 144|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = (((($65)) + 72|0) + ($$0441$lcssa$i<<2)|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = (($118) + ($$0430$lcssa$i))|0;
        $120 = $119 & 255;
        $121 = (((($116)) + 17|0) + ($120)|0);
        $122 = HEAP8[$121>>0]|0;
        $123 = $122&255;
        $$1431$i = $123;$$3388$i = $$2387$lcssa$i;
       } else {
        $$1431$i = $97;$$3388$i = $96;
       }
       $124 = ($$1431$i|0)==(0);
       if ($124) {
        $$2432$i = 0;$$5390$i = $$3388$i;$$7$i = $$3$i;$$7411$i = $$3407$i;
       } else {
        $125 = ($$3388$i|0)<(17);
        if ($125) {
         $126 = ((($$3407$i)) + 1|0);
         $127 = HEAP8[$$3407$i>>0]|0;
         $128 = $127&255;
         $129 = HEAP8[$126>>0]|0;
         $130 = $129&255;
         $131 = $$3$i << 8;
         $132 = $131 | $128;
         $133 = ($127<<24>>24)==(-1);
         if ($133) {
          $134 = ((($$3407$i)) + 2|0);
          $135 = ($129<<24>>24)==(0);
          if ($135) {
           $$4$ph$i = $132;$$4408$ph$i = $134;
          } else {
           HEAP32[$61>>2] = $130;
           $$4$ph$i = $131;$$4408$ph$i = $$3407$i;
          }
          $$pr445$i = HEAP8[$$4408$ph$i>>0]|0;
          $$4$i = $$4$ph$i;$$4408$i = $$4408$ph$i;$138 = $$pr445$i;
         } else {
          $$4$i = $132;$$4408$i = $126;$138 = $129;
         }
         $136 = ((($$4408$i)) + 1|0);
         $137 = $138&255;
         $139 = HEAP8[$136>>0]|0;
         $140 = $139&255;
         $141 = $$4$i << 8;
         $142 = $141 | $137;
         $143 = (($$3388$i) + 16)|0;
         $144 = ($138<<24>>24)==(-1);
         if ($144) {
          $145 = ((($$4408$i)) + 2|0);
          $146 = ($139<<24>>24)==(0);
          if ($146) {
           $$4389$i = $143;$$6$i = $142;$$6410$i = $145;
          } else {
           HEAP32[$61>>2] = $140;
           $$4389$i = $143;$$6$i = $141;$$6410$i = $$4408$i;
          }
         } else {
          $$4389$i = $143;$$6$i = $142;$$6410$i = $136;
         }
        } else {
         $$4389$i = $$3388$i;$$6$i = $$3$i;$$6410$i = $$3407$i;
        }
        $147 = (($$4389$i) - ($$1431$i))|0;
        $148 = $$6$i >>> $147;
        $149 = 1 << $$1431$i;
        $150 = (($149) + -1)|0;
        $151 = $148 & $150;
        $152 = (($$1431$i) + -1)|0;
        $153 = 1 << $152;
        $154 = (($151) - ($153))|0;
        $155 = $154 >> 31;
        $156 = -1 << $$1431$i;
        $157 = (($156) + 1)|0;
        $158 = $155 & $157;
        $159 = (($158) + ($151))|0;
        $$2432$i = $159;$$5390$i = $147;$$7$i = $$6$i;$$7411$i = $$6410$i;
       }
       $160 = (((($$pre)) + 152|0) + ($$0429490$i<<2)|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161|0)==(0);
       if ($162) {
        label = 45;
       } else {
        $163 = (((($0)) + 360|0) + ($$0429490$i<<2)|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = (($4) + ($164<<2)|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (($166) + ($$2432$i))|0;
        HEAP32[$165>>2] = $167;
        $169 = ($168|0)==(0|0);
        if ($169) {
         label = 43;
        } else {
         $171 = $167&65535;
         HEAP16[$168>>1] = $171;
         label = 45;
        }
       }
       L65: do {
        if ((label|0) == 45) {
         label = 0;
         $172 = (((($$pre)) + 192|0) + ($$0429490$i<<2)|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ($173|0)!=(0);
         $175 = ($168|0)!=(0|0);
         $or$cond$i = $175 & $174;
         if ($or$cond$i) {
          $176 = ((($67)) + 144|0);
          $$0437486$i = 1;$$6391488$i = $$5390$i;$$8412487$i = $$7411$i;$$8489$i = $$7$i;
          while(1) {
           $177 = ($$6391488$i|0)<(17);
           do {
            if ($177) {
             $178 = ((($$8412487$i)) + 1|0);
             $179 = HEAP8[$$8412487$i>>0]|0;
             $180 = $179&255;
             $181 = HEAP8[$178>>0]|0;
             $182 = $181&255;
             $183 = $$8489$i << 8;
             $184 = $183 | $180;
             $185 = ($179<<24>>24)==(-1);
             if ($185) {
              $186 = ((($$8412487$i)) + 2|0);
              $187 = ($181<<24>>24)==(0);
              if ($187) {
               $$9$ph$i = $184;$$9413$ph$i = $186;
              } else {
               HEAP32[$61>>2] = $182;
               $$9$ph$i = $183;$$9413$ph$i = $$8412487$i;
              }
              $$pr448$i = HEAP8[$$9413$ph$i>>0]|0;
              $$9$i = $$9$ph$i;$$9413$i = $$9413$ph$i;$190 = $$pr448$i;
             } else {
              $$9$i = $184;$$9413$i = $178;$190 = $181;
             }
             $188 = ((($$9413$i)) + 1|0);
             $189 = $190&255;
             $191 = HEAP8[$188>>0]|0;
             $192 = $191&255;
             $193 = $$9$i << 8;
             $194 = $193 | $189;
             $195 = (($$6391488$i) + 16)|0;
             $196 = ($190<<24>>24)==(-1);
             if (!($196)) {
              $$11$i = $194;$$11415$i = $188;$$7392$i = $195;
              break;
             }
             $197 = ((($$9413$i)) + 2|0);
             $198 = ($191<<24>>24)==(0);
             if ($198) {
              $$11$i = $194;$$11415$i = $197;$$7392$i = $195;
              break;
             }
             HEAP32[$61>>2] = $192;
             $$11$i = $193;$$11415$i = $$9413$i;$$7392$i = $195;
            } else {
             $$11$i = $$8489$i;$$11415$i = $$8412487$i;$$7392$i = $$6391488$i;
            }
           } while(0);
           $199 = (($$7392$i) + -8)|0;
           $200 = $$11$i >>> $199;
           $201 = $200 & 255;
           $202 = (((($67)) + 148|0) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = $203 >> 8;
           $205 = (($$7392$i) - ($204))|0;
           $206 = $203 & 255;
           $207 = ($204|0)>(8);
           if ($207) {
            $208 = $$11$i >>> $205;
            $209 = 1 << $204;
            $210 = (($209) + -1)|0;
            $211 = $208 & $210;
            $212 = (($67) + ($204<<2)|0);
            $213 = HEAP32[$212>>2]|0;
            $214 = ($211|0)>($213|0);
            if ($214) {
             $$1442477$i = $204;$$3433478$i = $211;$$8393479$i = $205;
             while(1) {
              $215 = $$3433478$i << 1;
              $216 = (($$8393479$i) + -1)|0;
              $217 = $$11$i >>> $216;
              $218 = $217 & 1;
              $219 = $218 | $215;
              $220 = (($$1442477$i) + 1)|0;
              $221 = (($67) + ($220<<2)|0);
              $222 = HEAP32[$221>>2]|0;
              $223 = ($219|0)>($222|0);
              if ($223) {
               $$1442477$i = $220;$$3433478$i = $219;$$8393479$i = $216;
              } else {
               $$1442$lcssa$i = $220;$$3433$lcssa$i = $219;$$8393$lcssa$i = $216;
               break;
              }
             }
            } else {
             $$1442$lcssa$i = $204;$$3433$lcssa$i = $211;$$8393$lcssa$i = $205;
            }
            $224 = HEAP32[$176>>2]|0;
            $225 = (((($67)) + 72|0) + ($$1442$lcssa$i<<2)|0);
            $226 = HEAP32[$225>>2]|0;
            $227 = (($226) + ($$3433$lcssa$i))|0;
            $228 = $227 & 255;
            $229 = (((($224)) + 17|0) + ($228)|0);
            $230 = HEAP8[$229>>0]|0;
            $231 = $230&255;
            $$4434$i = $231;$$9394$i = $$8393$lcssa$i;
           } else {
            $$4434$i = $206;$$9394$i = $205;
           }
           $232 = $$4434$i >>> 4;
           $233 = $$4434$i & 15;
           $234 = ($233|0)==(0);
           if ($234) {
            $275 = ($232|0)==(15);
            if (!($275)) {
             $$18403$i = $$9394$i;$$24$i = $$11$i;$$24428$i = $$11415$i;
             break L65;
            }
            $276 = (($$0437486$i) + 15)|0;
            $$11396$i = $$9394$i;$$1438$i = $276;$$15$i = $$11$i;$$15419$i = $$11415$i;
           } else {
            $235 = (($232) + ($$0437486$i))|0;
            $236 = ($$9394$i|0)<(17);
            do {
             if ($236) {
              $237 = ((($$11415$i)) + 1|0);
              $238 = HEAP8[$$11415$i>>0]|0;
              $239 = $238&255;
              $240 = HEAP8[$237>>0]|0;
              $241 = $240&255;
              $242 = $$11$i << 8;
              $243 = $242 | $239;
              $244 = ($238<<24>>24)==(-1);
              if ($244) {
               $245 = ((($$11415$i)) + 2|0);
               $246 = ($240<<24>>24)==(0);
               if ($246) {
                $$12$ph$i = $243;$$12416$ph$i = $245;
               } else {
                HEAP32[$61>>2] = $241;
                $$12$ph$i = $242;$$12416$ph$i = $$11415$i;
               }
               $$pr450$i = HEAP8[$$12416$ph$i>>0]|0;
               $$12$i = $$12$ph$i;$$12416$i = $$12416$ph$i;$249 = $$pr450$i;
              } else {
               $$12$i = $243;$$12416$i = $237;$249 = $240;
              }
              $247 = ((($$12416$i)) + 1|0);
              $248 = $249&255;
              $250 = HEAP8[$247>>0]|0;
              $251 = $250&255;
              $252 = $$12$i << 8;
              $253 = $252 | $248;
              $254 = (($$9394$i) + 16)|0;
              $255 = ($249<<24>>24)==(-1);
              if (!($255)) {
               $$10395$i = $254;$$14$i = $253;$$14418$i = $247;
               break;
              }
              $256 = ((($$12416$i)) + 2|0);
              $257 = ($250<<24>>24)==(0);
              if ($257) {
               $$10395$i = $254;$$14$i = $253;$$14418$i = $256;
               break;
              }
              HEAP32[$61>>2] = $251;
              $$10395$i = $254;$$14$i = $252;$$14418$i = $$12416$i;
             } else {
              $$10395$i = $$9394$i;$$14$i = $$11$i;$$14418$i = $$11415$i;
             }
            } while(0);
            $258 = (($$10395$i) - ($233))|0;
            $259 = $$14$i >>> $258;
            $260 = 1 << $233;
            $261 = (($260) + -1)|0;
            $262 = $259 & $261;
            $263 = (($233) + -1)|0;
            $264 = 1 << $263;
            $265 = (($262) - ($264))|0;
            $266 = $265 >> 31;
            $267 = -1 << $233;
            $268 = (($267) + 1)|0;
            $269 = $266 & $268;
            $270 = (($269) + ($262))|0;
            $271 = $270&65535;
            $272 = (996 + ($235<<2)|0);
            $273 = HEAP32[$272>>2]|0;
            $274 = (($168) + ($273<<1)|0);
            HEAP16[$274>>1] = $271;
            $$11396$i = $258;$$1438$i = $235;$$15$i = $$14$i;$$15419$i = $$14418$i;
           }
           $277 = (($$1438$i) + 1)|0;
           $278 = ($$1438$i|0)<(63);
           if ($278) {
            $$0437486$i = $277;$$6391488$i = $$11396$i;$$8412487$i = $$15419$i;$$8489$i = $$15$i;
           } else {
            $$18403$i = $$11396$i;$$24$i = $$15$i;$$24428$i = $$15419$i;
            break;
           }
          }
         } else {
          label = 43;
         }
        }
       } while(0);
       L104: do {
        if ((label|0) == 43) {
         label = 0;
         $170 = ((($67)) + 144|0);
         $$12397475$i = $$5390$i;$$16420474$i = $$7411$i;$$16476$i = $$7$i;$$2439473$i = 1;
         while(1) {
          $279 = ($$12397475$i|0)<(17);
          do {
           if ($279) {
            $280 = ((($$16420474$i)) + 1|0);
            $281 = HEAP8[$$16420474$i>>0]|0;
            $282 = $281&255;
            $283 = HEAP8[$280>>0]|0;
            $284 = $283&255;
            $285 = $$16476$i << 8;
            $286 = $285 | $282;
            $287 = ($281<<24>>24)==(-1);
            if ($287) {
             $288 = ((($$16420474$i)) + 2|0);
             $289 = ($283<<24>>24)==(0);
             if ($289) {
              $$17$ph$i = $286;$$17421$ph$i = $288;
             } else {
              HEAP32[$61>>2] = $284;
              $$17$ph$i = $285;$$17421$ph$i = $$16420474$i;
             }
             $$pr452$i = HEAP8[$$17421$ph$i>>0]|0;
             $$17$i = $$17$ph$i;$$17421$i = $$17421$ph$i;$292 = $$pr452$i;
            } else {
             $$17$i = $286;$$17421$i = $280;$292 = $283;
            }
            $290 = ((($$17421$i)) + 1|0);
            $291 = $292&255;
            $293 = HEAP8[$290>>0]|0;
            $294 = $293&255;
            $295 = $$17$i << 8;
            $296 = $295 | $291;
            $297 = (($$12397475$i) + 16)|0;
            $298 = ($292<<24>>24)==(-1);
            if ($298) {
             $299 = ((($$17421$i)) + 2|0);
             $300 = ($293<<24>>24)==(0);
             if ($300) {
              $$13398$i = $297;$$19$i = $296;$$19423$i = $299;
              break;
             }
             HEAP32[$61>>2] = $294;
             $$13398$i = $297;$$19$i = $295;$$19423$i = $$17421$i;
            } else {
             $$13398$i = $297;$$19$i = $296;$$19423$i = $290;
            }
           } else {
            $$13398$i = $$12397475$i;$$19$i = $$16476$i;$$19423$i = $$16420474$i;
           }
          } while(0);
          $301 = (($$13398$i) + -8)|0;
          $302 = $$19$i >>> $301;
          $303 = $302 & 255;
          $304 = (((($67)) + 148|0) + ($303<<2)|0);
          $305 = HEAP32[$304>>2]|0;
          $306 = $305 >> 8;
          $307 = (($$13398$i) - ($306))|0;
          $308 = $305 & 255;
          $309 = ($306|0)>(8);
          if ($309) {
           $310 = $$19$i >>> $307;
           $311 = 1 << $306;
           $312 = (($311) + -1)|0;
           $313 = $310 & $312;
           $314 = (($67) + ($306<<2)|0);
           $315 = HEAP32[$314>>2]|0;
           $316 = ($313|0)>($315|0);
           if ($316) {
            $$14399466$i = $307;$$2443464$i = $306;$$5435465$i = $313;
            while(1) {
             $317 = $$5435465$i << 1;
             $318 = (($$14399466$i) + -1)|0;
             $319 = $$19$i >>> $318;
             $320 = $319 & 1;
             $321 = $320 | $317;
             $322 = (($$2443464$i) + 1)|0;
             $323 = (($67) + ($322<<2)|0);
             $324 = HEAP32[$323>>2]|0;
             $325 = ($321|0)>($324|0);
             if ($325) {
              $$14399466$i = $318;$$2443464$i = $322;$$5435465$i = $321;
             } else {
              $$14399$lcssa$i = $318;$$2443$lcssa$i = $322;$$5435$lcssa$i = $321;
              break;
             }
            }
           } else {
            $$14399$lcssa$i = $307;$$2443$lcssa$i = $306;$$5435$lcssa$i = $313;
           }
           $326 = HEAP32[$170>>2]|0;
           $327 = (((($67)) + 72|0) + ($$2443$lcssa$i<<2)|0);
           $328 = HEAP32[$327>>2]|0;
           $329 = (($328) + ($$5435$lcssa$i))|0;
           $330 = $329 & 255;
           $331 = (((($326)) + 17|0) + ($330)|0);
           $332 = HEAP8[$331>>0]|0;
           $333 = $332&255;
           $$15400$i = $$14399$lcssa$i;$$6436$i = $333;
          } else {
           $$15400$i = $307;$$6436$i = $308;
          }
          $334 = $$6436$i >>> 4;
          $335 = $$6436$i & 15;
          $336 = ($335|0)==(0);
          if ($336) {
           $360 = ($334|0)==(15);
           if ($360) {
            $$17402$i = $$15400$i;$$23$i = $$19$i;$$23427$i = $$19423$i;$$pn$i = 15;
           } else {
            $$18403$i = $$15400$i;$$24$i = $$19$i;$$24428$i = $$19423$i;
            break L104;
           }
          } else {
           $337 = ($$15400$i|0)<(17);
           do {
            if ($337) {
             $338 = ((($$19423$i)) + 1|0);
             $339 = HEAP8[$$19423$i>>0]|0;
             $340 = $339&255;
             $341 = HEAP8[$338>>0]|0;
             $342 = $341&255;
             $343 = $$19$i << 8;
             $344 = $343 | $340;
             $345 = ($339<<24>>24)==(-1);
             if ($345) {
              $346 = ((($$19423$i)) + 2|0);
              $347 = ($341<<24>>24)==(0);
              if ($347) {
               $$20$ph$i = $344;$$20424$ph$i = $346;
              } else {
               HEAP32[$61>>2] = $342;
               $$20$ph$i = $343;$$20424$ph$i = $$19423$i;
              }
              $$pr454$i = HEAP8[$$20424$ph$i>>0]|0;
              $$20$i = $$20$ph$i;$$20424$i = $$20424$ph$i;$350 = $$pr454$i;
             } else {
              $$20$i = $344;$$20424$i = $338;$350 = $341;
             }
             $348 = ((($$20424$i)) + 1|0);
             $349 = $350&255;
             $351 = HEAP8[$348>>0]|0;
             $352 = $351&255;
             $353 = $$20$i << 8;
             $354 = $353 | $349;
             $355 = (($$15400$i) + 16)|0;
             $356 = ($350<<24>>24)==(-1);
             if (!($356)) {
              $$16401$i = $355;$$22$i = $354;$$22426$i = $348;
              break;
             }
             $357 = ((($$20424$i)) + 2|0);
             $358 = ($351<<24>>24)==(0);
             if ($358) {
              $$16401$i = $355;$$22$i = $354;$$22426$i = $357;
              break;
             }
             HEAP32[$61>>2] = $352;
             $$16401$i = $355;$$22$i = $353;$$22426$i = $$20424$i;
            } else {
             $$16401$i = $$15400$i;$$22$i = $$19$i;$$22426$i = $$19423$i;
            }
           } while(0);
           $359 = (($$16401$i) - ($335))|0;
           $$17402$i = $359;$$23$i = $$22$i;$$23427$i = $$22426$i;$$pn$i = $334;
          }
          $$3440$i = (($$2439473$i) + 1)|0;
          $361 = (($$3440$i) + ($$pn$i))|0;
          $362 = ($361|0)<(64);
          if ($362) {
           $$12397475$i = $$17402$i;$$16420474$i = $$23427$i;$$16476$i = $$23$i;$$2439473$i = $361;
          } else {
           $$18403$i = $$17402$i;$$24$i = $$23$i;$$24428$i = $$23427$i;
           break;
          }
         }
        }
       } while(0);
       $363 = (($$0429490$i) + 1)|0;
       $exitcond = ($363|0)==($42|0);
       if ($exitcond) {
        $$0384$lcssa$i = $$24$i;$$0385$lcssa$i = $$18403$i;$$0404$lcssa$i = $$24428$i;$$pre$phi$iZ2D = $61;
        break;
       } else {
        $$0384495$i = $$24$i;$$0385494$i = $$18403$i;$$0404493$i = $$24428$i;$$0429490$i = $363;
       }
      }
     } else {
      $$pre$i = ((($0)) + 416|0);
      $$0384$lcssa$i = $54;$$0385$lcssa$i = $56;$$0404$lcssa$i = $52;$$pre$phi$iZ2D = $$pre$i;
     }
     $364 = HEAP32[$$pre$phi$iZ2D>>2]|0;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $$0404$lcssa$i;
      $367 = (($40) + ($59))|0;
      $368 = (($367) - ($366))|0;
      HEAP32[$38>>2] = $$0404$lcssa$i;
      HEAP32[$39>>2] = $368;
      HEAP32[$53>>2] = $$0384$lcssa$i;
      HEAP32[$55>>2] = $$0385$lcssa$i;
      ;HEAP32[$57>>2]=HEAP32[$4>>2]|0;HEAP32[$57+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$57+12>>2]=HEAP32[$4+12>>2]|0;
      break L18;
     } else {
      HEAP32[$$pre$phi$iZ2D>>2] = 0;
      $370 = $59;$527 = $56;$528 = $54;
      break;
     }
    }
   } while(0);
   $369 = ((($2)) + 16|0);
   HEAP32[$369>>2] = $0;
   HEAP32[$2>>2] = $370;
   $371 = ((($2)) + 4|0);
   HEAP32[$371>>2] = $40;
   $372 = ((($$pre)) + 12|0);
   $373 = ((($$pre)) + 16|0);
   $374 = ((($$pre)) + 20|0);
   ;HEAP32[$3>>2]=HEAP32[$374>>2]|0;HEAP32[$3+4>>2]=HEAP32[$374+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$374+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$374+12>>2]|0;
   $375 = ($42|0)>(0);
   do {
    if ($375) {
     $376 = ($1|0)==(0|0);
     $377 = ((($2)) + 8|0);
     $378 = ((($2)) + 12|0);
     $$0181276$i = $528;$$0191275$i = $527;$$0218272$i = 0;
     L150: while(1) {
      if ($376) {
       $431 = 0;
      } else {
       $379 = (($1) + ($$0218272$i<<2)|0);
       $380 = HEAP32[$379>>2]|0;
       $431 = $380;
      }
      $381 = (((($$pre)) + 72|0) + ($$0218272$i<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = (((($$pre)) + 112|0) + ($$0218272$i<<2)|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ($$0191275$i|0)<(8);
      if ($385) {
       $386 = (_jpeg_fill_bit_buffer($2,$$0181276$i,$$0191275$i,0)|0);
       $387 = ($386|0)==(0);
       if ($387) {
        break;
       }
       $388 = HEAP32[$377>>2]|0;
       $389 = HEAP32[$378>>2]|0;
       $390 = ($389|0)<(8);
       if ($390) {
        $$0219$i = 1;$$2183$i = $388;$$2193$i = $389;
        label = 109;
       } else {
        $$1182$i = $388;$$1192$i = $389;
        label = 107;
       }
      } else {
       $$1182$i = $$0181276$i;$$1192$i = $$0191275$i;
       label = 107;
      }
      if ((label|0) == 107) {
       label = 0;
       $391 = (($$1192$i) + -8)|0;
       $392 = $$1182$i >>> $391;
       $393 = $392 & 255;
       $394 = (((($382)) + 148|0) + ($393<<2)|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = $395 >> 8;
       $397 = ($396|0)<(9);
       if ($397) {
        $398 = (($$1192$i) - ($396))|0;
        $399 = $395 & 255;
        $$2226$ph$i = $399;$$4185$ph$i = $$1182$i;$$4195$ph$i = $398;
       } else {
        $$0219$i = $396;$$2183$i = $$1182$i;$$2193$i = $$1192$i;
        label = 109;
       }
      }
      if ((label|0) == 109) {
       label = 0;
       $400 = (_jpeg_huff_decode($2,$$2183$i,$$2193$i,$382,$$0219$i)|0);
       $401 = ($400|0)<(0);
       if ($401) {
        break;
       }
       $402 = HEAP32[$377>>2]|0;
       $403 = HEAP32[$378>>2]|0;
       $$2226$ph$i = $400;$$4185$ph$i = $402;$$4195$ph$i = $403;
      }
      $404 = ($$2226$ph$i|0)==(0);
      if ($404) {
       $$3227$i = 0;$$6187$i = $$4185$ph$i;$$6197$i = $$4195$ph$i;
      } else {
       $405 = ($$4195$ph$i|0)<($$2226$ph$i|0);
       if ($405) {
        $406 = (_jpeg_fill_bit_buffer($2,$$4185$ph$i,$$4195$ph$i,$$2226$ph$i)|0);
        $407 = ($406|0)==(0);
        if ($407) {
         break;
        }
        $408 = HEAP32[$377>>2]|0;
        $409 = HEAP32[$378>>2]|0;
        $$5186$i = $408;$$5196$i = $409;
       } else {
        $$5186$i = $$4185$ph$i;$$5196$i = $$4195$ph$i;
       }
       $410 = (($$5196$i) - ($$2226$ph$i))|0;
       $411 = $$5186$i >>> $410;
       $412 = 1 << $$2226$ph$i;
       $413 = (($412) + -1)|0;
       $414 = $411 & $413;
       $415 = (($$2226$ph$i) + -1)|0;
       $416 = 1 << $415;
       $417 = (($414) - ($416))|0;
       $418 = $417 >> 31;
       $419 = -1 << $$2226$ph$i;
       $420 = (($419) + 1)|0;
       $421 = $418 & $420;
       $422 = (($421) + ($414))|0;
       $$3227$i = $422;$$6187$i = $$5186$i;$$6197$i = $410;
      }
      $423 = (((($$pre)) + 152|0) + ($$0218272$i<<2)|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = ($424|0)==(0);
      if ($425) {
       label = 119;
      } else {
       $426 = (((($0)) + 360|0) + ($$0218272$i<<2)|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = (($3) + ($427<<2)|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = (($429) + ($$3227$i))|0;
       HEAP32[$428>>2] = $430;
       $432 = ($431|0)==(0|0);
       if ($432) {
        $$14205267$i = $$6197$i;$$14268$i = $$6187$i;$$2222266$i = 1;
        label = 135;
       } else {
        $433 = $430&65535;
        HEAP16[$431>>1] = $433;
        label = 119;
       }
      }
      L175: do {
       if ((label|0) == 119) {
        label = 0;
        $434 = (((($$pre)) + 192|0) + ($$0218272$i<<2)|0);
        $435 = HEAP32[$434>>2]|0;
        $436 = ($435|0)!=(0);
        $437 = ($431|0)!=(0|0);
        $or$cond$i22 = $437 & $436;
        if ($or$cond$i22) {
         $$0220269$i = 1;$$7188271$i = $$6187$i;$$7198270$i = $$6197$i;
         while(1) {
          $438 = ($$7198270$i|0)<(8);
          if ($438) {
           $439 = (_jpeg_fill_bit_buffer($2,$$7188271$i,$$7198270$i,0)|0);
           $440 = ($439|0)==(0);
           if ($440) {
            break L150;
           }
           $441 = HEAP32[$377>>2]|0;
           $442 = HEAP32[$378>>2]|0;
           $443 = ($442|0)<(8);
           if ($443) {
            $$0190$i = 1;$$9$i24 = $441;$$9200$i = $442;
            label = 125;
           } else {
            $$8189$i = $441;$$8199$i = $442;
            label = 123;
           }
          } else {
           $$8189$i = $$7188271$i;$$8199$i = $$7198270$i;
           label = 123;
          }
          if ((label|0) == 123) {
           label = 0;
           $444 = (($$8199$i) + -8)|0;
           $445 = $$8189$i >>> $444;
           $446 = $445 & 255;
           $447 = (((($384)) + 148|0) + ($446<<2)|0);
           $448 = HEAP32[$447>>2]|0;
           $449 = $448 >> 8;
           $450 = ($449|0)<(9);
           if ($450) {
            $451 = (($$8199$i) - ($449))|0;
            $452 = $448 & 255;
            $$11$ph$i = $$8189$i;$$11202$ph$i = $451;$$7231$ph$i = $452;
           } else {
            $$0190$i = $449;$$9$i24 = $$8189$i;$$9200$i = $$8199$i;
            label = 125;
           }
          }
          if ((label|0) == 125) {
           label = 0;
           $453 = (_jpeg_huff_decode($2,$$9$i24,$$9200$i,$384,$$0190$i)|0);
           $454 = ($453|0)<(0);
           if ($454) {
            break L150;
           }
           $455 = HEAP32[$377>>2]|0;
           $456 = HEAP32[$378>>2]|0;
           $$11$ph$i = $455;$$11202$ph$i = $456;$$7231$ph$i = $453;
          }
          $457 = $$7231$ph$i >> 4;
          $458 = $$7231$ph$i & 15;
          $459 = ($458|0)==(0);
          if ($459) {
           $483 = ($457|0)==(15);
           if (!($483)) {
            $$22$i32 = $$11$ph$i;$$22213$i = $$11202$ph$i;
            break L175;
           }
           $484 = (($$0220269$i) + 15)|0;
           $$1221$i = $484;$$13$i = $$11$ph$i;$$13204$i = $$11202$ph$i;
          } else {
           $460 = (($457) + ($$0220269$i))|0;
           $461 = ($$11202$ph$i|0)<($458|0);
           if ($461) {
            $462 = (_jpeg_fill_bit_buffer($2,$$11$ph$i,$$11202$ph$i,$458)|0);
            $463 = ($462|0)==(0);
            if ($463) {
             break L150;
            }
            $464 = HEAP32[$377>>2]|0;
            $465 = HEAP32[$378>>2]|0;
            $$12$i25 = $464;$$12203$i = $465;
           } else {
            $$12$i25 = $$11$ph$i;$$12203$i = $$11202$ph$i;
           }
           $466 = (($$12203$i) - ($458))|0;
           $467 = $$12$i25 >>> $466;
           $468 = 1 << $458;
           $469 = (($468) + -1)|0;
           $470 = $467 & $469;
           $471 = (($458) + -1)|0;
           $472 = 1 << $471;
           $473 = (($470) - ($472))|0;
           $474 = $473 >> 31;
           $475 = -1 << $458;
           $476 = (($475) + 1)|0;
           $477 = $474 & $476;
           $478 = (($477) + ($470))|0;
           $479 = $478&65535;
           $480 = (996 + ($460<<2)|0);
           $481 = HEAP32[$480>>2]|0;
           $482 = (($431) + ($481<<1)|0);
           HEAP16[$482>>1] = $479;
           $$1221$i = $460;$$13$i = $$12$i25;$$13204$i = $466;
          }
          $485 = (($$1221$i) + 1)|0;
          $486 = ($$1221$i|0)<(63);
          if ($486) {
           $$0220269$i = $485;$$7188271$i = $$13$i;$$7198270$i = $$13204$i;
          } else {
           $$22$i32 = $$13$i;$$22213$i = $$13204$i;
           break;
          }
         }
        } else {
         $$14205267$i = $$6197$i;$$14268$i = $$6187$i;$$2222266$i = 1;
         label = 135;
        }
       }
      } while(0);
      L198: do {
       if ((label|0) == 135) {
        while(1) {
         label = 0;
         $487 = ($$14205267$i|0)<(8);
         if ($487) {
          $488 = (_jpeg_fill_bit_buffer($2,$$14268$i,$$14205267$i,0)|0);
          $489 = ($488|0)==(0);
          if ($489) {
           break L150;
          }
          $490 = HEAP32[$377>>2]|0;
          $491 = HEAP32[$378>>2]|0;
          $492 = ($491|0)<(8);
          if ($492) {
           $$0180$i = 1;$$16$i = $490;$$16207$i = $491;
           label = 140;
          } else {
           $$15$i27 = $490;$$15206$i = $491;
           label = 138;
          }
         } else {
          $$15$i27 = $$14268$i;$$15206$i = $$14205267$i;
          label = 138;
         }
         if ((label|0) == 138) {
          label = 0;
          $493 = (($$15206$i) + -8)|0;
          $494 = $$15$i27 >>> $493;
          $495 = $494 & 255;
          $496 = (((($384)) + 148|0) + ($495<<2)|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = $497 >> 8;
          $499 = ($498|0)<(9);
          if ($499) {
           $500 = (($$15206$i) - ($498))|0;
           $501 = $497 & 255;
           $$11235$ph$i = $501;$$18$ph$i = $$15$i27;$$18209$ph$i = $500;
          } else {
           $$0180$i = $498;$$16$i = $$15$i27;$$16207$i = $$15206$i;
           label = 140;
          }
         }
         if ((label|0) == 140) {
          label = 0;
          $502 = (_jpeg_huff_decode($2,$$16$i,$$16207$i,$384,$$0180$i)|0);
          $503 = ($502|0)<(0);
          if ($503) {
           break L150;
          }
          $504 = HEAP32[$377>>2]|0;
          $505 = HEAP32[$378>>2]|0;
          $$11235$ph$i = $502;$$18$ph$i = $504;$$18209$ph$i = $505;
         }
         $506 = $$11235$ph$i >> 4;
         $507 = $$11235$ph$i & 15;
         $508 = ($507|0)==(0);
         if ($508) {
          $515 = ($506|0)==(15);
          if ($515) {
           $$20$i30 = $$18$ph$i;$$20211$i = $$18209$ph$i;$$pn$i29 = 15;
          } else {
           $$22$i32 = $$18$ph$i;$$22213$i = $$18209$ph$i;
           break L198;
          }
         } else {
          $509 = ($$18209$ph$i|0)<($507|0);
          if ($509) {
           $510 = (_jpeg_fill_bit_buffer($2,$$18$ph$i,$$18209$ph$i,$507)|0);
           $511 = ($510|0)==(0);
           if ($511) {
            break L150;
           }
           $512 = HEAP32[$377>>2]|0;
           $513 = HEAP32[$378>>2]|0;
           $$19$i28 = $512;$$19210$i = $513;
          } else {
           $$19$i28 = $$18$ph$i;$$19210$i = $$18209$ph$i;
          }
          $514 = (($$19210$i) - ($507))|0;
          $$20$i30 = $$19$i28;$$20211$i = $514;$$pn$i29 = $506;
         }
         $$3223$i = (($$2222266$i) + 1)|0;
         $516 = (($$3223$i) + ($$pn$i29))|0;
         $517 = ($516|0)<(64);
         if ($517) {
          $$14205267$i = $$20211$i;$$14268$i = $$20$i30;$$2222266$i = $516;
          label = 135;
         } else {
          $$22$i32 = $$20$i30;$$22213$i = $$20211$i;
          break;
         }
        }
       }
      } while(0);
      $518 = (($$0218272$i) + 1)|0;
      $519 = HEAP32[$41>>2]|0;
      $520 = ($518|0)<($519|0);
      if ($520) {
       $$0181276$i = $$22$i32;$$0191275$i = $$22213$i;$$0218272$i = $518;
      } else {
       label = 150;
       break;
      }
     }
     if ((label|0) == 150) {
      $$pre$i34 = HEAP32[$2>>2]|0;
      $$pre283$i = HEAP32[$37>>2]|0;
      $$pre284$i = HEAP32[$371>>2]|0;
      $$0181$lcssa$i = $$22$i32;$$0191$lcssa$i = $$22213$i;$$in$i = $$pre283$i;$521 = $$pre$i34;$523 = $$pre284$i;
      break;
     }
     $$017 = 0;
     STACKTOP = sp;return ($$017|0);
    } else {
     $$0181$lcssa$i = $528;$$0191$lcssa$i = $527;$$in$i = $38;$521 = $370;$523 = $40;
    }
   } while(0);
   HEAP32[$$in$i>>2] = $521;
   $522 = ((($$in$i)) + 4|0);
   HEAP32[$522>>2] = $523;
   HEAP32[$372>>2] = $$0181$lcssa$i;
   HEAP32[$373>>2] = $$0191$lcssa$i;
   ;HEAP32[$374>>2]=HEAP32[$3>>2]|0;HEAP32[$374+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$374+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$374+12>>2]=HEAP32[$3+12>>2]|0;
  }
 } while(0);
 $524 = ((($6)) + 36|0);
 $525 = HEAP32[$524>>2]|0;
 $526 = (($525) + -1)|0;
 HEAP32[$524>>2] = $526;
 $$017 = 1;
 STACKTOP = sp;return ($$017|0);
}
function _jinit_d_main_controller($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$040 = 0, $$04142 = 0, $$04243$i = 0, $$043 = 0, $$044$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre45 = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($0,1,80)|0);
 $6 = ((($0)) + 424|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$5>>2] = 169;
 $7 = ($1|0)==(0);
 if (!($7)) {
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + 20|0);
  HEAP32[$9>>2] = 4;
  $10 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$10 & 255]($0);
 }
 $11 = ((($0)) + 452|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 $16 = ((($0)) + 316|0);
 $17 = HEAP32[$16>>2]|0;
 if ($15) {
  $$phi$trans$insert = ((($0)) + 36|0);
  $$pre45 = HEAP32[$$phi$trans$insert>>2]|0;
  $$040 = $17;$$pre$phiZ2D = $$phi$trans$insert;$62 = $$pre45;$87 = $17;
 } else {
  $18 = ($17|0)<(2);
  if ($18) {
   $19 = HEAP32[$0>>2]|0;
   $20 = ((($19)) + 20|0);
   HEAP32[$20>>2] = 47;
   $21 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vi[$21 & 255]($0);
   $$pre = HEAP32[$16>>2]|0;
   $37 = $$pre;
  } else {
   $37 = $17;
  }
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 << 3;
  $28 = (FUNCTION_TABLE_iiii[$24 & 255]($0,1,$27)|0);
  $29 = ((($22)) + 56|0);
  HEAP32[$29>>2] = $28;
  $30 = HEAP32[$25>>2]|0;
  $31 = (($28) + ($30<<2)|0);
  $32 = ((($22)) + 60|0);
  HEAP32[$32>>2] = $31;
  $33 = ($30|0)>(0);
  if ($33) {
   $34 = ((($0)) + 216|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($37) + 4)|0;
   $$04243$i = $35;$$044$i = 0;
   while(1) {
    $38 = ((($$04243$i)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($$04243$i)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = Math_imul($41, $39)|0;
    $43 = HEAP32[$16>>2]|0;
    $44 = (($42|0) / ($43|0))&-1;
    $45 = HEAP32[$2>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = Math_imul($44, $36)|0;
    $48 = $47 << 3;
    $49 = (FUNCTION_TABLE_iiii[$46 & 255]($0,1,$48)|0);
    $50 = (($49) + ($44<<2)|0);
    $51 = HEAP32[$29>>2]|0;
    $52 = (($51) + ($$044$i<<2)|0);
    HEAP32[$52>>2] = $50;
    $53 = (($50) + ($47<<2)|0);
    $54 = HEAP32[$32>>2]|0;
    $55 = (($54) + ($$044$i<<2)|0);
    HEAP32[$55>>2] = $53;
    $56 = (($$044$i) + 1)|0;
    $57 = ((($$04243$i)) + 84|0);
    $58 = HEAP32[$25>>2]|0;
    $59 = ($56|0)<($58|0);
    if ($59) {
     $$04243$i = $57;$$044$i = $56;
    } else {
     $88 = $58;
     break;
    }
   }
  } else {
   $88 = $30;
  }
  $60 = HEAP32[$16>>2]|0;
  $61 = (($60) + 2)|0;
  $$040 = $61;$$pre$phiZ2D = $25;$62 = $88;$87 = $60;
 }
 $63 = ($62|0)>(0);
 if (!($63)) {
  return;
 }
 $64 = ((($0)) + 216|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($5)) + 8|0);
 $$04142 = 0;$$043 = $65;$73 = $87;
 while(1) {
  $67 = ((($$043)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($$043)) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = Math_imul($70, $68)|0;
  $72 = (($71|0) / ($73|0))&-1;
  $74 = HEAP32[$2>>2]|0;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($$043)) + 28|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = Math_imul($78, $70)|0;
  $80 = Math_imul($72, $$040)|0;
  $81 = (FUNCTION_TABLE_iiiii[$76 & 127]($0,1,$79,$80)|0);
  $82 = (($66) + ($$04142<<2)|0);
  HEAP32[$82>>2] = $81;
  $83 = (($$04142) + 1)|0;
  $84 = HEAP32[$$pre$phiZ2D>>2]|0;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = ((($$043)) + 84|0);
  $$pre47 = HEAP32[$16>>2]|0;
  $$04142 = $83;$$043 = $86;$73 = $$pre47;
 }
 return;
}
function _start_pass_main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06871$i = 0, $$06976$i = 0, $$077$i = 0, $$172$i = 0, $$274$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond83$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 424|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($1|0) {
 case 0:  {
  $4 = ((($0)) + 452|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  $9 = ((($3)) + 4|0);
  if ($8) {
   HEAP32[$9>>2] = 171;
  } else {
   HEAP32[$9>>2] = 170;
   $10 = ((($0)) + 316|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($0)) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)>(0);
   if ($14) {
    $15 = ((($0)) + 216|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($3)) + 56|0);
    $18 = ((($3)) + 60|0);
    $19 = (($11) + 2)|0;
    $20 = (($11) + -2)|0;
    $$06976$i = $16;$$077$i = 0;
    while(1) {
     $21 = ((($$06976$i)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$06976$i)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = Math_imul($24, $22)|0;
     $26 = (($25|0) / ($11|0))&-1;
     $27 = HEAP32[$17>>2]|0;
     $28 = (($27) + ($$077$i<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$18>>2]|0;
     $31 = (($30) + ($$077$i<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (((($3)) + 8|0) + ($$077$i<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = Math_imul($26, $19)|0;
     $36 = ($35|0)>(0);
     if ($36) {
      $$06871$i = 0;
      while(1) {
       $41 = (($34) + ($$06871$i<<2)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($32) + ($$06871$i<<2)|0);
       HEAP32[$43>>2] = $42;
       $44 = (($29) + ($$06871$i<<2)|0);
       HEAP32[$44>>2] = $42;
       $45 = (($$06871$i) + 1)|0;
       $exitcond$i = ($45|0)==($35|0);
       if ($exitcond$i) {
        break;
       } else {
        $$06871$i = $45;
       }
      }
     }
     $37 = $26 << 1;
     $38 = ($26|0)>(0);
     if ($38) {
      $39 = Math_imul($26, $11)|0;
      $40 = Math_imul($26, $20)|0;
      $$172$i = 0;
      while(1) {
       $46 = (($$172$i) + ($39))|0;
       $47 = (($34) + ($46<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (($$172$i) + ($40))|0;
       $50 = (($32) + ($49<<2)|0);
       HEAP32[$50>>2] = $48;
       $51 = (($34) + ($49<<2)|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($32) + ($46<<2)|0);
       HEAP32[$53>>2] = $52;
       $54 = (($$172$i) + 1)|0;
       $55 = ($54|0)<($37|0);
       if ($55) {
        $$172$i = $54;
       } else {
        break;
       }
      }
      $$274$i = 0;
      while(1) {
       $56 = HEAP32[$29>>2]|0;
       $57 = (($$274$i) - ($26))|0;
       $58 = (($29) + ($57<<2)|0);
       HEAP32[$58>>2] = $56;
       $59 = (($$274$i) + 1)|0;
       $exitcond83$i = ($59|0)==($26|0);
       if ($exitcond83$i) {
        break;
       } else {
        $$274$i = $59;
       }
      }
     }
     $60 = (($$077$i) + 1)|0;
     $61 = ((($$06976$i)) + 84|0);
     $exitcond = ($60|0)==($13|0);
     if ($exitcond) {
      break;
     } else {
      $$06976$i = $61;$$077$i = $60;
     }
    }
   }
   $62 = ((($3)) + 64|0);
   HEAP32[$62>>2] = 0;
   $63 = ((($3)) + 68|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($3)) + 76|0);
   HEAP32[$64>>2] = 0;
  }
  $65 = ((($3)) + 48|0);
  HEAP32[$65>>2] = 0;
  $66 = ((($3)) + 52|0);
  HEAP32[$66>>2] = 0;
  return;
  break;
 }
 case 2:  {
  $67 = ((($3)) + 4|0);
  HEAP32[$67>>2] = 172;
  return;
  break;
 }
 default: {
  $68 = HEAP32[$0>>2]|0;
  $69 = ((($68)) + 20|0);
  HEAP32[$69>>2] = 4;
  $70 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vi[$70 & 255]($0);
  return;
 }
 }
}
function _process_data_context_main($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$04347$i = 0, $$04546$i = 0, $$048$i = 0, $$05759$i = 0, $$05860$i = 0, $$061$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre58 = 0, $$pre60 = 0, $$pre62 = 0, $$pre64 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 424|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = ((($0)) + 428|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($5)) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (((($5)) + 56|0) + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_iii[$12 & 255]($0,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    return;
   } else {
    HEAP32[$6>>2] = 1;
    $19 = ((($5)) + 76|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 1)|0;
    HEAP32[$19>>2] = $21;
    break;
   }
  }
 } while(0);
 $22 = ((($5)) + 68|0);
 $23 = HEAP32[$22>>2]|0;
 switch ($23|0) {
 case 2:  {
  $24 = ((($0)) + 432|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($5)) + 64|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (((($5)) + 56|0) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 52|0);
  $33 = ((($5)) + 72|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_viiiiiii[$27 & 127]($0,$31,$32,$34,$1,$2,$3);
  $35 = HEAP32[$32>>2]|0;
  $36 = HEAP32[$33>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   return;
  }
  HEAP32[$22>>2] = 0;
  $38 = HEAP32[$2>>2]|0;
  $39 = ($38>>>0)<($3>>>0);
  if ($39) {
   $$pre$phi59Z2D = $32;$$pre$phi61Z2D = $33;
   label = 9;
  } else {
   return;
  }
  break;
 }
 case 0:  {
  $$pre58 = ((($5)) + 52|0);
  $$pre60 = ((($5)) + 72|0);
  $$pre$phi59Z2D = $$pre58;$$pre$phi61Z2D = $$pre60;
  label = 9;
  break;
 }
 case 1:  {
  $$pre62 = ((($5)) + 52|0);
  $$pre64 = ((($5)) + 72|0);
  $$pre$phi63Z2D = $$pre62;$$pre$phi65Z2D = $$pre64;
  break;
 }
 default: {
  return;
 }
 }
 if ((label|0) == 9) {
  HEAP32[$$pre$phi59Z2D>>2] = 0;
  $40 = ((($0)) + 316|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + -1)|0;
  HEAP32[$$pre$phi61Z2D>>2] = $42;
  $43 = ((($5)) + 76|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($0)) + 320|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($44|0)==($46|0);
  if ($47) {
   $48 = HEAP32[$4>>2]|0;
   $49 = ((($0)) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)>(0);
   if ($51) {
    $52 = ((($0)) + 216|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($48)) + 72|0);
    $55 = ((($48)) + 64|0);
    $$04347$i = $53;$$048$i = 0;
    while(1) {
     $56 = ((($$04347$i)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($$04347$i)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = Math_imul($59, $57)|0;
     $61 = (($60|0) / ($41|0))&-1;
     $62 = ((($$04347$i)) + 44|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63>>>0) % ($60>>>0))&-1;
     $65 = ($64|0)==(0);
     $$$i = $65 ? $60 : $64;
     $66 = ($$048$i|0)==(0);
     if ($66) {
      $67 = (($$$i) + -1)|0;
      $68 = (($67|0) / ($61|0))&-1;
      $69 = (($68) + 1)|0;
      HEAP32[$54>>2] = $69;
     }
     $70 = HEAP32[$55>>2]|0;
     $71 = (((($48)) + 56|0) + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + ($$048$i<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $61 << 1;
     $76 = ($61|0)>(0);
     if ($76) {
      $77 = (($$$i) + -1)|0;
      $78 = (($74) + ($77<<2)|0);
      $$04546$i = 0;
      while(1) {
       $79 = HEAP32[$78>>2]|0;
       $80 = (($$04546$i) + ($$$i))|0;
       $81 = (($74) + ($80<<2)|0);
       HEAP32[$81>>2] = $79;
       $82 = (($$04546$i) + 1)|0;
       $83 = ($82|0)<($75|0);
       if ($83) {
        $$04546$i = $82;
       } else {
        break;
       }
      }
     }
     $84 = (($$048$i) + 1)|0;
     $85 = ((($$04347$i)) + 84|0);
     $exitcond56 = ($84|0)==($50|0);
     if ($exitcond56) {
      break;
     } else {
      $$04347$i = $85;$$048$i = $84;
     }
    }
   }
  }
  HEAP32[$22>>2] = 1;
  $$pre$phi63Z2D = $$pre$phi59Z2D;$$pre$phi65Z2D = $$pre$phi61Z2D;
 }
 $86 = ((($0)) + 432|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($5)) + 64|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (((($5)) + 56|0) + ($91<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$$pre$phi65Z2D>>2]|0;
 FUNCTION_TABLE_viiiiiii[$89 & 127]($0,$93,$$pre$phi63Z2D,$94,$1,$2,$3);
 $95 = HEAP32[$$pre$phi63Z2D>>2]|0;
 $96 = HEAP32[$$pre$phi65Z2D>>2]|0;
 $97 = ($95>>>0)<($96>>>0);
 if ($97) {
  return;
 }
 $98 = ((($5)) + 76|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(1);
 if ($100) {
  $101 = HEAP32[$4>>2]|0;
  $102 = ((($0)) + 316|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($0)) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)>(0);
  if ($106) {
   $107 = ((($0)) + 216|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($101)) + 56|0);
   $110 = ((($101)) + 60|0);
   $111 = (($103) + 1)|0;
   $112 = (($103) + 2)|0;
   $$05860$i = $108;$$061$i = 0;
   while(1) {
    $113 = ((($$05860$i)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($$05860$i)) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = Math_imul($116, $114)|0;
    $118 = (($117|0) / ($103|0))&-1;
    $119 = HEAP32[$109>>2]|0;
    $120 = (($119) + ($$061$i<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = HEAP32[$110>>2]|0;
    $123 = (($122) + ($$061$i<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($118|0)>(0);
    if ($125) {
     $126 = Math_imul($118, $111)|0;
     $127 = Math_imul($118, $112)|0;
     $$05759$i = 0;
     while(1) {
      $128 = (($$05759$i) + ($126))|0;
      $129 = (($121) + ($128<<2)|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (($$05759$i) - ($118))|0;
      $132 = (($121) + ($131<<2)|0);
      HEAP32[$132>>2] = $130;
      $133 = (($124) + ($128<<2)|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (($124) + ($131<<2)|0);
      HEAP32[$135>>2] = $134;
      $136 = (($121) + ($$05759$i<<2)|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (($$05759$i) + ($127))|0;
      $139 = (($121) + ($138<<2)|0);
      HEAP32[$139>>2] = $137;
      $140 = (($124) + ($$05759$i<<2)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (($124) + ($138<<2)|0);
      HEAP32[$142>>2] = $141;
      $143 = (($$05759$i) + 1)|0;
      $exitcond$i = ($143|0)==($118|0);
      if ($exitcond$i) {
       break;
      } else {
       $$05759$i = $143;
      }
     }
    }
    $144 = (($$061$i) + 1)|0;
    $145 = ((($$05860$i)) + 84|0);
    $exitcond = ($144|0)==($105|0);
    if ($exitcond) {
     $149 = $103;
     break;
    } else {
     $$05860$i = $145;$$061$i = $144;
    }
   }
  } else {
   $149 = $103;
  }
 } else {
  $$phi$trans$insert = ((($0)) + 316|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $149 = $$pre;
 }
 $146 = HEAP32[$90>>2]|0;
 $147 = $146 ^ 1;
 HEAP32[$90>>2] = $147;
 HEAP32[$6>>2] = 0;
 $148 = (($149) + 1)|0;
 HEAP32[$$pre$phi63Z2D>>2] = $148;
 $150 = (($149) + 2)|0;
 HEAP32[$$pre$phi65Z2D>>2] = $150;
 HEAP32[$22>>2] = 2;
 return;
}
function _process_data_simple_main($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 424|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = ((($0)) + 428|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($5)) + 8|0);
   $14 = (FUNCTION_TABLE_iii[$12 & 255]($0,$13)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    return;
   } else {
    HEAP32[$6>>2] = 1;
    $$pre$phiZ2D = $13;
    break;
   }
  } else {
   $$pre = ((($5)) + 8|0);
   $$pre$phiZ2D = $$pre;
  }
 } while(0);
 $16 = ((($0)) + 316|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 432|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($5)) + 52|0);
 FUNCTION_TABLE_viiiiiii[$21 & 127]($0,$$pre$phiZ2D,$22,$17,$1,$2,$3);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23>>>0)<($17>>>0);
 if ($24) {
  return;
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$22>>2] = 0;
 return;
}
function _process_data_crank_post($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 432|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viiiiiii[$7 & 127]($0,0,0,0,$1,$2,$3);
 return;
}
function _jpeg_idct_float($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0243255 = 0, $$0245254 = 0, $$0247253 = 0, $$0256 = 0, $$1244 = 0, $$1246 = 0, $$1248 = 0, $$1252 = 0, $$2251 = 0, $$sink = 0.0, $$sink250 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0;
 var $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0;
 var $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0;
 var $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0;
 var $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0;
 var $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0243255 = $5;$$0245254 = $9;$$0247253 = $2;$$0256 = 8;
 while(1) {
  $10 = ((($$0247253)) + 16|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ((($$0247253)) + 32|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $11 | $13;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $16 = ((($$0247253)) + 48|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $19 = ((($$0247253)) + 64|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(0);
    if ($21) {
     $22 = ((($$0247253)) + 80|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = ($23<<16>>16)==(0);
     if ($24) {
      $25 = ((($$0247253)) + 96|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = ($26<<16>>16)==(0);
      if ($27) {
       $28 = ((($$0247253)) + 112|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = ($29<<16>>16)==(0);
       if ($30) {
        $31 = HEAP16[$$0247253>>1]|0;
        $32 = (+($31<<16>>16));
        $33 = +HEAPF32[$$0245254>>2];
        $34 = $33 * 0.125;
        $35 = $34 * $32;
        HEAPF32[$$0243255>>2] = $35;
        $36 = ((($$0243255)) + 32|0);
        HEAPF32[$36>>2] = $35;
        $37 = ((($$0243255)) + 64|0);
        HEAPF32[$37>>2] = $35;
        $38 = ((($$0243255)) + 96|0);
        HEAPF32[$38>>2] = $35;
        $39 = ((($$0243255)) + 128|0);
        HEAPF32[$39>>2] = $35;
        $40 = ((($$0243255)) + 160|0);
        HEAPF32[$40>>2] = $35;
        $41 = ((($$0243255)) + 192|0);
        HEAPF32[$41>>2] = $35;
        $$sink = $35;$$sink250 = 56;
       } else {
        $48 = 0;
        label = 9;
       }
      } else {
       $48 = 0;
       label = 9;
      }
     } else {
      $48 = 0;
      label = 9;
     }
    } else {
     $48 = 0;
     label = 9;
    }
   } else {
    $48 = 0;
    label = 9;
   }
  } else {
   $48 = $13;
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $42 = HEAP16[$$0247253>>1]|0;
   $43 = (+($42<<16>>16));
   $44 = +HEAPF32[$$0245254>>2];
   $45 = $44 * 0.125;
   $46 = $45 * $43;
   $47 = (+($48<<16>>16));
   $49 = ((($$0245254)) + 64|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 * 0.125;
   $52 = $51 * $47;
   $53 = ((($$0247253)) + 64|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = (+($54<<16>>16));
   $56 = ((($$0245254)) + 128|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $57 * 0.125;
   $59 = $58 * $55;
   $60 = ((($$0247253)) + 96|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = (+($61<<16>>16));
   $63 = ((($$0245254)) + 192|0);
   $64 = +HEAPF32[$63>>2];
   $65 = $64 * 0.125;
   $66 = $65 * $62;
   $67 = $46 + $59;
   $68 = $46 - $59;
   $69 = $52 + $66;
   $70 = $52 - $66;
   $71 = $70 * 1.4142135381698608;
   $72 = $71 - $69;
   $73 = $67 + $69;
   $74 = $67 - $69;
   $75 = $68 + $72;
   $76 = $68 - $72;
   $77 = (+($11<<16>>16));
   $78 = ((($$0245254)) + 32|0);
   $79 = +HEAPF32[$78>>2];
   $80 = $79 * 0.125;
   $81 = $80 * $77;
   $82 = ((($$0247253)) + 48|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = (+($83<<16>>16));
   $85 = ((($$0245254)) + 96|0);
   $86 = +HEAPF32[$85>>2];
   $87 = $86 * 0.125;
   $88 = $87 * $84;
   $89 = ((($$0247253)) + 80|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = (+($90<<16>>16));
   $92 = ((($$0245254)) + 160|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $93 * 0.125;
   $95 = $94 * $91;
   $96 = ((($$0247253)) + 112|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = (+($97<<16>>16));
   $99 = ((($$0245254)) + 224|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $100 * 0.125;
   $102 = $101 * $98;
   $103 = $88 + $95;
   $104 = $95 - $88;
   $105 = $81 + $102;
   $106 = $81 - $102;
   $107 = $103 + $105;
   $108 = $105 - $103;
   $109 = $108 * 1.4142135381698608;
   $110 = $104 + $106;
   $111 = $110 * 1.8477590084075928;
   $112 = $106 * 1.0823922157287598;
   $113 = $111 - $112;
   $114 = $104 * 2.6131260395050049;
   $115 = $111 - $114;
   $116 = $115 - $107;
   $117 = $109 - $116;
   $118 = $113 - $117;
   $119 = $73 + $107;
   HEAPF32[$$0243255>>2] = $119;
   $120 = $73 - $107;
   $121 = ((($$0243255)) + 224|0);
   HEAPF32[$121>>2] = $120;
   $122 = $75 + $116;
   $123 = ((($$0243255)) + 32|0);
   HEAPF32[$123>>2] = $122;
   $124 = $75 - $116;
   $125 = ((($$0243255)) + 192|0);
   HEAPF32[$125>>2] = $124;
   $126 = $76 + $117;
   $127 = ((($$0243255)) + 64|0);
   HEAPF32[$127>>2] = $126;
   $128 = $76 - $117;
   $129 = ((($$0243255)) + 160|0);
   HEAPF32[$129>>2] = $128;
   $130 = $74 + $118;
   $131 = ((($$0243255)) + 96|0);
   HEAPF32[$131>>2] = $130;
   $132 = $74 - $118;
   $$sink = $132;$$sink250 = 32;
  }
  $133 = (($$0243255) + ($$sink250<<2)|0);
  HEAPF32[$133>>2] = $$sink;
  $$1244 = ((($$0243255)) + 4|0);
  $$1246 = ((($$0245254)) + 4|0);
  $$1248 = ((($$0247253)) + 2|0);
  $134 = (($$0256) + -1)|0;
  $135 = ($$0256|0)>(1);
  if ($135) {
   $$0243255 = $$1244;$$0245254 = $$1246;$$0247253 = $$1248;$$0256 = $134;
  } else {
   $$1252 = 0;$$2251 = $5;
   break;
  }
 }
 while(1) {
  $136 = (($3) + ($$1252<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + ($4)|0);
  $139 = +HEAPF32[$$2251>>2];
  $140 = $139 + 128.5;
  $141 = ((($$2251)) + 16|0);
  $142 = +HEAPF32[$141>>2];
  $143 = $140 + $142;
  $144 = $140 - $142;
  $145 = ((($$2251)) + 8|0);
  $146 = +HEAPF32[$145>>2];
  $147 = ((($$2251)) + 24|0);
  $148 = +HEAPF32[$147>>2];
  $149 = $146 + $148;
  $150 = $146 - $148;
  $151 = $150 * 1.4142135381698608;
  $152 = $151 - $149;
  $153 = $143 + $149;
  $154 = $143 - $149;
  $155 = $144 + $152;
  $156 = $144 - $152;
  $157 = ((($$2251)) + 20|0);
  $158 = +HEAPF32[$157>>2];
  $159 = ((($$2251)) + 12|0);
  $160 = +HEAPF32[$159>>2];
  $161 = $158 + $160;
  $162 = $158 - $160;
  $163 = ((($$2251)) + 4|0);
  $164 = +HEAPF32[$163>>2];
  $165 = ((($$2251)) + 28|0);
  $166 = +HEAPF32[$165>>2];
  $167 = $164 + $166;
  $168 = $164 - $166;
  $169 = $161 + $167;
  $170 = $167 - $161;
  $171 = $170 * 1.4142135381698608;
  $172 = $162 + $168;
  $173 = $172 * 1.8477590084075928;
  $174 = $168 * 1.0823922157287598;
  $175 = $173 - $174;
  $176 = $162 * 2.6131260395050049;
  $177 = $173 - $176;
  $178 = $177 - $169;
  $179 = $171 - $178;
  $180 = $175 - $179;
  $181 = $153 + $169;
  $182 = (~~(($181)));
  $183 = $182 & 1023;
  $184 = (($7) + ($183)|0);
  $185 = HEAP8[$184>>0]|0;
  HEAP8[$138>>0] = $185;
  $186 = $153 - $169;
  $187 = (~~(($186)));
  $188 = $187 & 1023;
  $189 = (($7) + ($188)|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = ((($138)) + 7|0);
  HEAP8[$191>>0] = $190;
  $192 = $155 + $178;
  $193 = (~~(($192)));
  $194 = $193 & 1023;
  $195 = (($7) + ($194)|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = ((($138)) + 1|0);
  HEAP8[$197>>0] = $196;
  $198 = $155 - $178;
  $199 = (~~(($198)));
  $200 = $199 & 1023;
  $201 = (($7) + ($200)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = ((($138)) + 6|0);
  HEAP8[$203>>0] = $202;
  $204 = $156 + $179;
  $205 = (~~(($204)));
  $206 = $205 & 1023;
  $207 = (($7) + ($206)|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = ((($138)) + 2|0);
  HEAP8[$209>>0] = $208;
  $210 = $156 - $179;
  $211 = (~~(($210)));
  $212 = $211 & 1023;
  $213 = (($7) + ($212)|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = ((($138)) + 5|0);
  HEAP8[$215>>0] = $214;
  $216 = $154 + $180;
  $217 = (~~(($216)));
  $218 = $217 & 1023;
  $219 = (($7) + ($218)|0);
  $220 = HEAP8[$219>>0]|0;
  $221 = ((($138)) + 3|0);
  HEAP8[$221>>0] = $220;
  $222 = $154 - $180;
  $223 = (~~(($222)));
  $224 = $223 & 1023;
  $225 = (($7) + ($224)|0);
  $226 = HEAP8[$225>>0]|0;
  $227 = ((($138)) + 4|0);
  HEAP8[$227>>0] = $226;
  $228 = ((($$2251)) + 32|0);
  $229 = (($$1252) + 1)|0;
  $exitcond = ($229|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$1252 = $229;$$2251 = $228;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_ifast($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0268284 = 0, $$0270283 = 0, $$0272282 = 0, $$0285 = 0, $$1269 = 0, $$1271 = 0, $$1273 = 0, $$1281 = 0, $$2280 = 0, $$3 = 0, $$sink = 0, $$sink275 = 0, $$sink276 = 0, $$sink278 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0268284 = $5;$$0270283 = $9;$$0272282 = $2;$$0285 = 8;
 while(1) {
  $10 = ((($$0272282)) + 16|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ((($$0272282)) + 32|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $11 | $13;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $16 = ((($$0272282)) + 48|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $19 = ((($$0272282)) + 64|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(0);
    if ($21) {
     $22 = ((($$0272282)) + 80|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = ($23<<16>>16)==(0);
     if ($24) {
      $25 = ((($$0272282)) + 96|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = ($26<<16>>16)==(0);
      if ($27) {
       $28 = ((($$0272282)) + 112|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = ($29<<16>>16)==(0);
       if ($30) {
        $31 = HEAP16[$$0272282>>1]|0;
        $32 = $31 << 16 >> 16;
        $33 = HEAP32[$$0270283>>2]|0;
        $34 = Math_imul($33, $32)|0;
        HEAP32[$$0268284>>2] = $34;
        $35 = ((($$0268284)) + 32|0);
        HEAP32[$35>>2] = $34;
        $36 = ((($$0268284)) + 64|0);
        HEAP32[$36>>2] = $34;
        $37 = ((($$0268284)) + 96|0);
        HEAP32[$37>>2] = $34;
        $38 = ((($$0268284)) + 128|0);
        HEAP32[$38>>2] = $34;
        $39 = ((($$0268284)) + 160|0);
        HEAP32[$39>>2] = $34;
        $40 = ((($$0268284)) + 192|0);
        HEAP32[$40>>2] = $34;
        $$sink = $34;$$sink275 = 56;
       } else {
        $46 = 0;
        label = 9;
       }
      } else {
       $46 = 0;
       label = 9;
      }
     } else {
      $46 = 0;
      label = 9;
     }
    } else {
     $46 = 0;
     label = 9;
    }
   } else {
    $46 = 0;
    label = 9;
   }
  } else {
   $46 = $13;
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $41 = HEAP16[$$0272282>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = HEAP32[$$0270283>>2]|0;
   $44 = Math_imul($43, $42)|0;
   $45 = $46 << 16 >> 16;
   $47 = ((($$0270283)) + 64|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = Math_imul($48, $45)|0;
   $50 = ((($$0272282)) + 64|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = ((($$0270283)) + 128|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = Math_imul($54, $52)|0;
   $56 = ((($$0272282)) + 96|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57 << 16 >> 16;
   $59 = ((($$0270283)) + 192|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = Math_imul($60, $58)|0;
   $62 = (($55) + ($44))|0;
   $63 = (($44) - ($55))|0;
   $64 = (($61) + ($49))|0;
   $65 = (($49) - ($61))|0;
   $66 = ($65*362)|0;
   $67 = $66 >> 8;
   $68 = (($67) - ($64))|0;
   $69 = (($64) + ($62))|0;
   $70 = (($62) - ($64))|0;
   $71 = (($68) + ($63))|0;
   $72 = (($63) - ($68))|0;
   $73 = $11 << 16 >> 16;
   $74 = ((($$0270283)) + 32|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = Math_imul($75, $73)|0;
   $77 = ((($$0272282)) + 48|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78 << 16 >> 16;
   $80 = ((($$0270283)) + 96|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = Math_imul($81, $79)|0;
   $83 = ((($$0272282)) + 80|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84 << 16 >> 16;
   $86 = ((($$0270283)) + 160|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = Math_imul($87, $85)|0;
   $89 = ((($$0272282)) + 112|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = ((($$0270283)) + 224|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = Math_imul($93, $91)|0;
   $95 = (($88) + ($82))|0;
   $96 = (($88) - ($82))|0;
   $97 = (($94) + ($76))|0;
   $98 = (($76) - ($94))|0;
   $99 = (($97) + ($95))|0;
   $100 = (($97) - ($95))|0;
   $101 = ($100*362)|0;
   $102 = $101 >> 8;
   $103 = (($98) + ($96))|0;
   $104 = ($103*473)|0;
   $105 = $104 >> 8;
   $106 = ($98*277)|0;
   $107 = $106 >> 8;
   $108 = (($107) - ($105))|0;
   $109 = Math_imul($96, -669)|0;
   $110 = $109 >> 8;
   $111 = (($110) - ($99))|0;
   $112 = (($111) + ($105))|0;
   $113 = (($102) - ($112))|0;
   $114 = (($113) + ($108))|0;
   $115 = (($99) + ($69))|0;
   HEAP32[$$0268284>>2] = $115;
   $116 = (($69) - ($99))|0;
   $117 = ((($$0268284)) + 224|0);
   HEAP32[$117>>2] = $116;
   $118 = (($112) + ($71))|0;
   $119 = ((($$0268284)) + 32|0);
   HEAP32[$119>>2] = $118;
   $120 = (($71) - ($112))|0;
   $121 = ((($$0268284)) + 192|0);
   HEAP32[$121>>2] = $120;
   $122 = (($113) + ($72))|0;
   $123 = ((($$0268284)) + 64|0);
   HEAP32[$123>>2] = $122;
   $124 = (($72) - ($113))|0;
   $125 = ((($$0268284)) + 160|0);
   HEAP32[$125>>2] = $124;
   $126 = (($114) + ($70))|0;
   $127 = ((($$0268284)) + 128|0);
   HEAP32[$127>>2] = $126;
   $128 = (($70) - ($114))|0;
   $$sink = $128;$$sink275 = 24;
  }
  $129 = (($$0268284) + ($$sink275<<2)|0);
  HEAP32[$129>>2] = $$sink;
  $$1269 = ((($$0268284)) + 4|0);
  $$1271 = ((($$0270283)) + 4|0);
  $$1273 = ((($$0272282)) + 2|0);
  $130 = (($$0285) + -1)|0;
  $131 = ($$0285|0)>(1);
  if ($131) {
   $$0268284 = $$1269;$$0270283 = $$1271;$$0272282 = $$1273;$$0285 = $130;
  } else {
   break;
  }
 }
 $132 = ((($7)) + 128|0);
 $$1281 = 0;$$2280 = $5;
 while(1) {
  $133 = (($3) + ($$1281<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + ($4)|0);
  $136 = ((($$2280)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($$2280)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $137 | $139;
  $141 = ($140|0)==(0);
  if ($141) {
   $142 = ((($$2280)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)==(0);
   if ($144) {
    $145 = ((($$2280)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0);
    if ($147) {
     $148 = ((($$2280)) + 20|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==(0);
     if ($150) {
      $151 = ((($$2280)) + 24|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==(0);
      if ($153) {
       $154 = ((($$2280)) + 28|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)==(0);
       if ($156) {
        $157 = HEAP32[$$2280>>2]|0;
        $158 = $157 >>> 5;
        $159 = $158 & 1023;
        $160 = (($132) + ($159)|0);
        $161 = HEAP8[$160>>0]|0;
        HEAP8[$135>>0] = $161;
        $162 = ((($135)) + 1|0);
        _memset(($162|0),($161|0),6)|0;
        $$sink276 = $161;$$sink278 = 7;
       } else {
        $171 = 0;
        label = 19;
       }
      } else {
       $171 = 0;
       label = 19;
      }
     } else {
      $171 = 0;
      label = 19;
     }
    } else {
     $171 = 0;
     label = 19;
    }
   } else {
    $171 = 0;
    label = 19;
   }
  } else {
   $171 = $139;
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $163 = HEAP32[$$2280>>2]|0;
   $164 = ((($$2280)) + 16|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + ($163))|0;
   $167 = (($163) - ($165))|0;
   $168 = ((($$2280)) + 24|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + ($171))|0;
   $172 = (($171) - ($169))|0;
   $173 = ($172*362)|0;
   $174 = $173 >> 8;
   $175 = (($174) - ($170))|0;
   $176 = (($170) + ($166))|0;
   $177 = (($166) - ($170))|0;
   $178 = (($175) + ($167))|0;
   $179 = (($167) - ($175))|0;
   $180 = ((($$2280)) + 20|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ((($$2280)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($183) + ($181))|0;
   $185 = (($181) - ($183))|0;
   $186 = ((($$2280)) + 28|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($137))|0;
   $189 = (($137) - ($187))|0;
   $190 = (($188) + ($184))|0;
   $191 = (($188) - ($184))|0;
   $192 = ($191*362)|0;
   $193 = $192 >> 8;
   $194 = (($189) + ($185))|0;
   $195 = ($194*473)|0;
   $196 = $195 >> 8;
   $197 = ($189*277)|0;
   $198 = $197 >> 8;
   $199 = (($198) - ($196))|0;
   $200 = Math_imul($185, -669)|0;
   $201 = $200 >> 8;
   $202 = (($201) - ($190))|0;
   $203 = (($202) + ($196))|0;
   $204 = (($193) - ($203))|0;
   $205 = (($204) + ($199))|0;
   $206 = (($190) + ($176))|0;
   $207 = $206 >>> 5;
   $208 = $207 & 1023;
   $209 = (($132) + ($208)|0);
   $210 = HEAP8[$209>>0]|0;
   HEAP8[$135>>0] = $210;
   $211 = (($176) - ($190))|0;
   $212 = $211 >>> 5;
   $213 = $212 & 1023;
   $214 = (($132) + ($213)|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = ((($135)) + 7|0);
   HEAP8[$216>>0] = $215;
   $217 = (($203) + ($178))|0;
   $218 = $217 >>> 5;
   $219 = $218 & 1023;
   $220 = (($132) + ($219)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = ((($135)) + 1|0);
   HEAP8[$222>>0] = $221;
   $223 = (($178) - ($203))|0;
   $224 = $223 >>> 5;
   $225 = $224 & 1023;
   $226 = (($132) + ($225)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = ((($135)) + 6|0);
   HEAP8[$228>>0] = $227;
   $229 = (($204) + ($179))|0;
   $230 = $229 >>> 5;
   $231 = $230 & 1023;
   $232 = (($132) + ($231)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = ((($135)) + 2|0);
   HEAP8[$234>>0] = $233;
   $235 = (($179) - ($204))|0;
   $236 = $235 >>> 5;
   $237 = $236 & 1023;
   $238 = (($132) + ($237)|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = ((($135)) + 5|0);
   HEAP8[$240>>0] = $239;
   $241 = (($205) + ($177))|0;
   $242 = $241 >>> 5;
   $243 = $242 & 1023;
   $244 = (($132) + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = ((($135)) + 4|0);
   HEAP8[$246>>0] = $245;
   $247 = (($177) - ($205))|0;
   $248 = $247 >>> 5;
   $249 = $248 & 1023;
   $250 = (($132) + ($249)|0);
   $251 = HEAP8[$250>>0]|0;
   $$sink276 = $251;$$sink278 = 3;
  }
  $252 = (($135) + ($$sink278)|0);
  HEAP8[$252>>0] = $$sink276;
  $$3 = ((($$2280)) + 32|0);
  $253 = (($$1281) + 1)|0;
  $exitcond = ($253|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$1281 = $253;$$2280 = $$3;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_islow($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0288310 = 0, $$0290309 = 0, $$0292308 = 0, $$0311 = 0, $$1289 = 0, $$1291 = 0, $$1293 = 0, $$1307 = 0, $$2306 = 0, $$3 = 0, $$sink = 0, $$sink295 = 0, $$sink296 = 0, $$sink298 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0288310 = $5;$$0290309 = $9;$$0292308 = $2;$$0311 = 8;
 while(1) {
  $10 = ((($$0292308)) + 16|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ((($$0292308)) + 32|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $11 | $13;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $16 = ((($$0292308)) + 48|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $19 = ((($$0292308)) + 64|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(0);
    if ($21) {
     $22 = ((($$0292308)) + 80|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = ($23<<16>>16)==(0);
     if ($24) {
      $25 = ((($$0292308)) + 96|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = ($26<<16>>16)==(0);
      if ($27) {
       $28 = ((($$0292308)) + 112|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = ($29<<16>>16)==(0);
       if ($30) {
        $31 = HEAP16[$$0292308>>1]|0;
        $32 = $31 << 16 >> 16;
        $33 = HEAP32[$$0290309>>2]|0;
        $34 = $32 << 2;
        $35 = Math_imul($34, $33)|0;
        HEAP32[$$0288310>>2] = $35;
        $36 = ((($$0288310)) + 32|0);
        HEAP32[$36>>2] = $35;
        $37 = ((($$0288310)) + 64|0);
        HEAP32[$37>>2] = $35;
        $38 = ((($$0288310)) + 96|0);
        HEAP32[$38>>2] = $35;
        $39 = ((($$0288310)) + 128|0);
        HEAP32[$39>>2] = $35;
        $40 = ((($$0288310)) + 160|0);
        HEAP32[$40>>2] = $35;
        $41 = ((($$0288310)) + 192|0);
        HEAP32[$41>>2] = $35;
        $$sink = $35;$$sink295 = 56;
       } else {
        $43 = 0;
        label = 9;
       }
      } else {
       $43 = 0;
       label = 9;
      }
     } else {
      $43 = 0;
      label = 9;
     }
    } else {
     $43 = 0;
     label = 9;
    }
   } else {
    $43 = 0;
    label = 9;
   }
  } else {
   $43 = $13;
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $42 = $43 << 16 >> 16;
   $44 = ((($$0290309)) + 64|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = Math_imul($45, $42)|0;
   $47 = ((($$0292308)) + 96|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = ((($$0290309)) + 192|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($51, $49)|0;
   $53 = (($52) + ($46))|0;
   $54 = ($53*4433)|0;
   $55 = Math_imul($52, -15137)|0;
   $56 = (($54) + ($55))|0;
   $57 = ($46*6270)|0;
   $58 = (($54) + ($57))|0;
   $59 = HEAP16[$$0292308>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = HEAP32[$$0290309>>2]|0;
   $62 = Math_imul($61, $60)|0;
   $63 = ((($$0292308)) + 64|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64 << 16 >> 16;
   $66 = ((($$0290309)) + 128|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = Math_imul($67, $65)|0;
   $69 = (($68) + ($62))|0;
   $70 = $69 << 13;
   $71 = (($62) - ($68))|0;
   $72 = $71 << 13;
   $73 = (($70) + ($58))|0;
   $74 = (($70) - ($58))|0;
   $75 = (($72) + ($56))|0;
   $76 = (($72) - ($56))|0;
   $77 = ((($$0292308)) + 112|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78 << 16 >> 16;
   $80 = ((($$0290309)) + 224|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = Math_imul($81, $79)|0;
   $83 = ((($$0292308)) + 80|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84 << 16 >> 16;
   $86 = ((($$0290309)) + 160|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = Math_imul($87, $85)|0;
   $89 = ((($$0292308)) + 48|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = ((($$0290309)) + 96|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = Math_imul($93, $91)|0;
   $95 = $11 << 16 >> 16;
   $96 = ((($$0290309)) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = Math_imul($97, $95)|0;
   $99 = (($98) + ($82))|0;
   $100 = (($94) + ($88))|0;
   $101 = (($94) + ($82))|0;
   $102 = (($98) + ($88))|0;
   $103 = (($102) + ($101))|0;
   $104 = ($103*9633)|0;
   $105 = ($82*2446)|0;
   $106 = ($88*16819)|0;
   $107 = ($94*25172)|0;
   $108 = ($98*12299)|0;
   $109 = Math_imul($99, -7373)|0;
   $110 = Math_imul($100, -20995)|0;
   $111 = Math_imul($101, -16069)|0;
   $112 = Math_imul($102, -3196)|0;
   $113 = (($104) + ($111))|0;
   $114 = (($104) + ($112))|0;
   $115 = (($109) + ($105))|0;
   $116 = (($115) + ($113))|0;
   $117 = (($110) + ($106))|0;
   $118 = (($117) + ($114))|0;
   $119 = (($110) + ($107))|0;
   $120 = (($119) + ($113))|0;
   $121 = (($109) + ($108))|0;
   $122 = (($121) + ($114))|0;
   $123 = (($73) + 1024)|0;
   $124 = (($123) + ($122))|0;
   $125 = $124 >> 11;
   HEAP32[$$0288310>>2] = $125;
   $126 = (($123) - ($122))|0;
   $127 = $126 >> 11;
   $128 = ((($$0288310)) + 224|0);
   HEAP32[$128>>2] = $127;
   $129 = (($75) + 1024)|0;
   $130 = (($129) + ($120))|0;
   $131 = $130 >> 11;
   $132 = ((($$0288310)) + 32|0);
   HEAP32[$132>>2] = $131;
   $133 = (($129) - ($120))|0;
   $134 = $133 >> 11;
   $135 = ((($$0288310)) + 192|0);
   HEAP32[$135>>2] = $134;
   $136 = (($76) + 1024)|0;
   $137 = (($136) + ($118))|0;
   $138 = $137 >> 11;
   $139 = ((($$0288310)) + 64|0);
   HEAP32[$139>>2] = $138;
   $140 = (($136) - ($118))|0;
   $141 = $140 >> 11;
   $142 = ((($$0288310)) + 160|0);
   HEAP32[$142>>2] = $141;
   $143 = (($74) + 1024)|0;
   $144 = (($143) + ($116))|0;
   $145 = $144 >> 11;
   $146 = ((($$0288310)) + 96|0);
   HEAP32[$146>>2] = $145;
   $147 = (($143) - ($116))|0;
   $148 = $147 >> 11;
   $$sink = $148;$$sink295 = 32;
  }
  $149 = (($$0288310) + ($$sink295<<2)|0);
  HEAP32[$149>>2] = $$sink;
  $$1289 = ((($$0288310)) + 4|0);
  $$1291 = ((($$0290309)) + 4|0);
  $$1293 = ((($$0292308)) + 2|0);
  $150 = (($$0311) + -1)|0;
  $151 = ($$0311|0)>(1);
  if ($151) {
   $$0288310 = $$1289;$$0290309 = $$1291;$$0292308 = $$1293;$$0311 = $150;
  } else {
   break;
  }
 }
 $152 = ((($7)) + 128|0);
 $$1307 = 0;$$2306 = $5;
 while(1) {
  $153 = (($3) + ($$1307<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + ($4)|0);
  $156 = ((($$2306)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($$2306)) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $157 | $159;
  $161 = ($160|0)==(0);
  if ($161) {
   $162 = ((($$2306)) + 12|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163|0)==(0);
   if ($164) {
    $165 = ((($$2306)) + 16|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==(0);
    if ($167) {
     $168 = ((($$2306)) + 20|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)==(0);
     if ($170) {
      $171 = ((($$2306)) + 24|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0);
      if ($173) {
       $174 = ((($$2306)) + 28|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0);
       if ($176) {
        $177 = HEAP32[$$2306>>2]|0;
        $178 = (($177) + 16)|0;
        $179 = $178 >>> 5;
        $180 = $179 & 1023;
        $181 = (($152) + ($180)|0);
        $182 = HEAP8[$181>>0]|0;
        HEAP8[$155>>0] = $182;
        $183 = ((($155)) + 1|0);
        _memset(($183|0),($182|0),6)|0;
        $$sink296 = $182;$$sink298 = 7;
       } else {
        $187 = 0;
        label = 19;
       }
      } else {
       $187 = 0;
       label = 19;
      }
     } else {
      $187 = 0;
      label = 19;
     }
    } else {
     $187 = 0;
     label = 19;
    }
   } else {
    $187 = 0;
    label = 19;
   }
  } else {
   $187 = $159;
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $184 = ((($$2306)) + 24|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + ($187))|0;
   $188 = ($186*4433)|0;
   $189 = Math_imul($185, -15137)|0;
   $190 = (($188) + ($189))|0;
   $191 = ($187*6270)|0;
   $192 = (($188) + ($191))|0;
   $193 = HEAP32[$$2306>>2]|0;
   $194 = ((($$2306)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($193))|0;
   $197 = $196 << 13;
   $198 = (($193) - ($195))|0;
   $199 = $198 << 13;
   $200 = (($197) + ($192))|0;
   $201 = (($197) - ($192))|0;
   $202 = (($199) + ($190))|0;
   $203 = (($199) - ($190))|0;
   $204 = ((($$2306)) + 28|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ((($$2306)) + 20|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ((($$2306)) + 12|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($157) + ($205))|0;
   $211 = (($209) + ($207))|0;
   $212 = (($209) + ($205))|0;
   $213 = (($157) + ($207))|0;
   $214 = (($213) + ($212))|0;
   $215 = ($214*9633)|0;
   $216 = ($205*2446)|0;
   $217 = ($207*16819)|0;
   $218 = ($209*25172)|0;
   $219 = ($157*12299)|0;
   $220 = Math_imul($210, -7373)|0;
   $221 = Math_imul($211, -20995)|0;
   $222 = Math_imul($212, -16069)|0;
   $223 = Math_imul($213, -3196)|0;
   $224 = (($215) + ($222))|0;
   $225 = (($215) + ($223))|0;
   $226 = (($220) + ($216))|0;
   $227 = (($226) + ($224))|0;
   $228 = (($221) + ($217))|0;
   $229 = (($228) + ($225))|0;
   $230 = (($221) + ($218))|0;
   $231 = (($230) + ($224))|0;
   $232 = (($220) + ($219))|0;
   $233 = (($232) + ($225))|0;
   $234 = (($200) + 131072)|0;
   $235 = (($234) + ($233))|0;
   $236 = $235 >>> 18;
   $237 = $236 & 1023;
   $238 = (($152) + ($237)|0);
   $239 = HEAP8[$238>>0]|0;
   HEAP8[$155>>0] = $239;
   $240 = (($234) - ($233))|0;
   $241 = $240 >>> 18;
   $242 = $241 & 1023;
   $243 = (($152) + ($242)|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = ((($155)) + 7|0);
   HEAP8[$245>>0] = $244;
   $246 = (($202) + 131072)|0;
   $247 = (($246) + ($231))|0;
   $248 = $247 >>> 18;
   $249 = $248 & 1023;
   $250 = (($152) + ($249)|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = ((($155)) + 1|0);
   HEAP8[$252>>0] = $251;
   $253 = (($246) - ($231))|0;
   $254 = $253 >>> 18;
   $255 = $254 & 1023;
   $256 = (($152) + ($255)|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = ((($155)) + 6|0);
   HEAP8[$258>>0] = $257;
   $259 = (($203) + 131072)|0;
   $260 = (($259) + ($229))|0;
   $261 = $260 >>> 18;
   $262 = $261 & 1023;
   $263 = (($152) + ($262)|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = ((($155)) + 2|0);
   HEAP8[$265>>0] = $264;
   $266 = (($259) - ($229))|0;
   $267 = $266 >>> 18;
   $268 = $267 & 1023;
   $269 = (($152) + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = ((($155)) + 5|0);
   HEAP8[$271>>0] = $270;
   $272 = (($201) + 131072)|0;
   $273 = (($272) + ($227))|0;
   $274 = $273 >>> 18;
   $275 = $274 & 1023;
   $276 = (($152) + ($275)|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = ((($155)) + 3|0);
   HEAP8[$278>>0] = $277;
   $279 = (($272) - ($227))|0;
   $280 = $279 >>> 18;
   $281 = $280 & 1023;
   $282 = (($152) + ($281)|0);
   $283 = HEAP8[$282>>0]|0;
   $$sink296 = $283;$$sink298 = 4;
  }
  $284 = (($155) + ($$sink298)|0);
  HEAP8[$284>>0] = $$sink296;
  $$3 = ((($$2306)) + 32|0);
  $285 = (($$1307) + 1)|0;
  $exitcond = ($285|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$1307 = $285;$$2306 = $$3;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_7x7($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0197205 = 0, $$0199204 = 0, $$0200203 = 0, $$0206 = 0, $$1198201 = 0, $$1202 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond207 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0197205 = $5;$$0199204 = $9;$$0200203 = $2;$$0206 = 0;
 while(1) {
  $10 = HEAP16[$$0200203>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0199204>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0200203)) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0199204)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ((($$0200203)) + 64|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ((($$0199204)) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $24)|0;
  $28 = ((($$0200203)) + 96|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0199204)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $30)|0;
  $34 = (($27) - ($33))|0;
  $35 = ($34*7223)|0;
  $36 = (($21) - ($27))|0;
  $37 = ($36*2578)|0;
  $38 = Math_imul($27, -15083)|0;
  $39 = (($38) + ($15))|0;
  $40 = (($39) + ($37))|0;
  $41 = (($40) + ($35))|0;
  $42 = (($33) + ($21))|0;
  $43 = (($27) - ($42))|0;
  $44 = ($42*10438)|0;
  $45 = (($44) + ($15))|0;
  $46 = Math_imul($33, -637)|0;
  $47 = (($35) + ($46))|0;
  $48 = (($47) + ($45))|0;
  $49 = Math_imul($21, -20239)|0;
  $50 = (($37) + ($49))|0;
  $51 = (($50) + ($45))|0;
  $52 = ($43*11585)|0;
  $53 = (($52) + ($15))|0;
  $54 = ((($$0200203)) + 16|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = ((($$0199204)) + 32|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = Math_imul($58, $56)|0;
  $60 = ((($$0200203)) + 48|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = ((($$0199204)) + 96|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = Math_imul($64, $62)|0;
  $66 = ((($$0200203)) + 80|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = ((($$0199204)) + 160|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = Math_imul($70, $68)|0;
  $72 = (($65) + ($59))|0;
  $73 = ($72*7663)|0;
  $74 = (($59) - ($65))|0;
  $75 = ($74*1395)|0;
  $76 = (($73) - ($75))|0;
  $77 = (($73) + ($75))|0;
  $78 = (($71) + ($65))|0;
  $79 = Math_imul($78, -11295)|0;
  $80 = (($77) + ($79))|0;
  $81 = (($71) + ($59))|0;
  $82 = ($81*5027)|0;
  $83 = (($82) + ($76))|0;
  $84 = ($71*15326)|0;
  $85 = (($82) + ($84))|0;
  $86 = (($85) + ($79))|0;
  $87 = (($83) + ($48))|0;
  $88 = $87 >> 11;
  HEAP32[$$0197205>>2] = $88;
  $89 = (($48) - ($83))|0;
  $90 = $89 >> 11;
  $91 = ((($$0197205)) + 168|0);
  HEAP32[$91>>2] = $90;
  $92 = (($80) + ($41))|0;
  $93 = $92 >> 11;
  $94 = ((($$0197205)) + 28|0);
  HEAP32[$94>>2] = $93;
  $95 = (($41) - ($80))|0;
  $96 = $95 >> 11;
  $97 = ((($$0197205)) + 140|0);
  HEAP32[$97>>2] = $96;
  $98 = (($86) + ($51))|0;
  $99 = $98 >> 11;
  $100 = ((($$0197205)) + 56|0);
  HEAP32[$100>>2] = $99;
  $101 = (($51) - ($86))|0;
  $102 = $101 >> 11;
  $103 = ((($$0197205)) + 112|0);
  HEAP32[$103>>2] = $102;
  $104 = $53 >> 11;
  $105 = ((($$0197205)) + 84|0);
  HEAP32[$105>>2] = $104;
  $106 = (($$0206) + 1)|0;
  $107 = ((($$0200203)) + 2|0);
  $108 = ((($$0199204)) + 4|0);
  $109 = ((($$0197205)) + 4|0);
  $exitcond207 = ($106|0)==(7);
  if ($exitcond207) {
   break;
  } else {
   $$0197205 = $109;$$0199204 = $108;$$0200203 = $107;$$0206 = $106;
  }
 }
 $110 = ((($7)) + 128|0);
 $$1198201 = $5;$$1202 = 0;
 while(1) {
  $111 = (($3) + ($$1202<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + ($4)|0);
  $114 = HEAP32[$$1198201>>2]|0;
  $115 = $114 << 13;
  $116 = (($115) + 131072)|0;
  $117 = ((($$1198201)) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$1198201)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$1198201)) + 24|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($120) - ($122))|0;
  $124 = ($123*7223)|0;
  $125 = (($118) - ($120))|0;
  $126 = ($125*2578)|0;
  $127 = Math_imul($120, -15083)|0;
  $128 = (($127) + ($116))|0;
  $129 = (($128) + ($126))|0;
  $130 = (($129) + ($124))|0;
  $131 = (($122) + ($118))|0;
  $132 = (($120) - ($131))|0;
  $133 = ($131*10438)|0;
  $134 = (($133) + ($116))|0;
  $135 = Math_imul($122, -637)|0;
  $136 = (($124) + ($135))|0;
  $137 = (($136) + ($134))|0;
  $138 = Math_imul($118, -20239)|0;
  $139 = (($126) + ($138))|0;
  $140 = (($139) + ($134))|0;
  $141 = ($132*11585)|0;
  $142 = (($141) + ($116))|0;
  $143 = ((($$1198201)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ((($$1198201)) + 12|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($$1198201)) + 20|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($146) + ($144))|0;
  $150 = ($149*7663)|0;
  $151 = (($144) - ($146))|0;
  $152 = ($151*1395)|0;
  $153 = (($150) - ($152))|0;
  $154 = (($150) + ($152))|0;
  $155 = (($148) + ($146))|0;
  $156 = Math_imul($155, -11295)|0;
  $157 = (($154) + ($156))|0;
  $158 = (($148) + ($144))|0;
  $159 = ($158*5027)|0;
  $160 = (($153) + ($159))|0;
  $161 = ($148*15326)|0;
  $162 = (($159) + ($161))|0;
  $163 = (($162) + ($156))|0;
  $164 = (($160) + ($137))|0;
  $165 = $164 >>> 18;
  $166 = $165 & 1023;
  $167 = (($110) + ($166)|0);
  $168 = HEAP8[$167>>0]|0;
  HEAP8[$113>>0] = $168;
  $169 = (($137) - ($160))|0;
  $170 = $169 >>> 18;
  $171 = $170 & 1023;
  $172 = (($110) + ($171)|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = ((($113)) + 6|0);
  HEAP8[$174>>0] = $173;
  $175 = (($157) + ($130))|0;
  $176 = $175 >>> 18;
  $177 = $176 & 1023;
  $178 = (($110) + ($177)|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = ((($113)) + 1|0);
  HEAP8[$180>>0] = $179;
  $181 = (($130) - ($157))|0;
  $182 = $181 >>> 18;
  $183 = $182 & 1023;
  $184 = (($110) + ($183)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = ((($113)) + 5|0);
  HEAP8[$186>>0] = $185;
  $187 = (($163) + ($140))|0;
  $188 = $187 >>> 18;
  $189 = $188 & 1023;
  $190 = (($110) + ($189)|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = ((($113)) + 2|0);
  HEAP8[$192>>0] = $191;
  $193 = (($140) - ($163))|0;
  $194 = $193 >>> 18;
  $195 = $194 & 1023;
  $196 = (($110) + ($195)|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = ((($113)) + 4|0);
  HEAP8[$198>>0] = $197;
  $199 = $142 >>> 18;
  $200 = $199 & 1023;
  $201 = (($110) + ($200)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = ((($113)) + 3|0);
  HEAP8[$203>>0] = $202;
  $204 = ((($$1198201)) + 28|0);
  $205 = (($$1202) + 1)|0;
  $exitcond = ($205|0)==(7);
  if ($exitcond) {
   break;
  } else {
   $$1198201 = $204;$$1202 = $205;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_6x6($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0149162 = 0, $$0151161 = 0, $$0152160 = 0, $$0163 = 0, $$1150158 = 0, $$1159 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond164 = 0, $factor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0149162 = $5;$$0151161 = $9;$$0152160 = $2;$$0163 = 0;
 while(1) {
  $10 = HEAP16[$$0152160>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0151161>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0152160)) + 64|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0151161)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18*5793)|0;
  $22 = Math_imul($21, $20)|0;
  $23 = (($22) + ($15))|0;
  $factor = Math_imul($22, -2)|0;
  $24 = (($factor) + ($15))|0;
  $25 = $24 >> 11;
  $26 = ((($$0152160)) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = ((($$0151161)) + 64|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28*10033)|0;
  $32 = Math_imul($31, $30)|0;
  $33 = (($32) + ($23))|0;
  $34 = (($23) - ($32))|0;
  $35 = ((($$0152160)) + 16|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = ((($$0151161)) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($39, $37)|0;
  $41 = ((($$0152160)) + 48|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = ((($$0151161)) + 96|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = Math_imul($45, $43)|0;
  $47 = ((($$0152160)) + 80|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = ((($$0151161)) + 160|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($51, $49)|0;
  $53 = (($52) + ($40))|0;
  $54 = ($53*2998)|0;
  $55 = (($46) + ($40))|0;
  $56 = $55 << 13;
  $57 = (($54) + ($56))|0;
  $58 = (($52) - ($46))|0;
  $59 = $58 << 13;
  $60 = (($54) + ($59))|0;
  $61 = (($40) - ($46))|0;
  $62 = (($61) - ($52))|0;
  $63 = $62 << 2;
  $64 = (($57) + ($33))|0;
  $65 = $64 >> 11;
  HEAP32[$$0149162>>2] = $65;
  $66 = (($33) - ($57))|0;
  $67 = $66 >> 11;
  $68 = ((($$0149162)) + 120|0);
  HEAP32[$68>>2] = $67;
  $69 = (($63) + ($25))|0;
  $70 = ((($$0149162)) + 24|0);
  HEAP32[$70>>2] = $69;
  $71 = (($25) - ($63))|0;
  $72 = ((($$0149162)) + 96|0);
  HEAP32[$72>>2] = $71;
  $73 = (($60) + ($34))|0;
  $74 = $73 >> 11;
  $75 = ((($$0149162)) + 48|0);
  HEAP32[$75>>2] = $74;
  $76 = (($34) - ($60))|0;
  $77 = $76 >> 11;
  $78 = ((($$0149162)) + 72|0);
  HEAP32[$78>>2] = $77;
  $79 = (($$0163) + 1)|0;
  $80 = ((($$0152160)) + 2|0);
  $81 = ((($$0151161)) + 4|0);
  $82 = ((($$0149162)) + 4|0);
  $exitcond164 = ($79|0)==(6);
  if ($exitcond164) {
   break;
  } else {
   $$0149162 = $82;$$0151161 = $81;$$0152160 = $80;$$0163 = $79;
  }
 }
 $83 = ((($7)) + 128|0);
 $$1150158 = $5;$$1159 = 0;
 while(1) {
  $84 = (($3) + ($$1159<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($4)|0);
  $87 = HEAP32[$$1150158>>2]|0;
  $88 = $87 << 13;
  $89 = (($88) + 131072)|0;
  $90 = ((($$1150158)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91*5793)|0;
  $93 = (($89) + ($92))|0;
  $94 = (($89) - ($92))|0;
  $95 = (($94) - ($92))|0;
  $96 = ((($$1150158)) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97*10033)|0;
  $99 = (($93) + ($98))|0;
  $100 = (($93) - ($98))|0;
  $101 = ((($$1150158)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($$1150158)) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($$1150158)) + 20|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($102))|0;
  $108 = ($107*2998)|0;
  $109 = (($104) + ($102))|0;
  $110 = $109 << 13;
  $111 = (($108) + ($110))|0;
  $112 = (($106) - ($104))|0;
  $113 = $112 << 13;
  $114 = (($108) + ($113))|0;
  $115 = (($102) - ($104))|0;
  $116 = (($115) - ($106))|0;
  $117 = $116 << 13;
  $118 = (($111) + ($99))|0;
  $119 = $118 >>> 18;
  $120 = $119 & 1023;
  $121 = (($83) + ($120)|0);
  $122 = HEAP8[$121>>0]|0;
  HEAP8[$86>>0] = $122;
  $123 = (($99) - ($111))|0;
  $124 = $123 >>> 18;
  $125 = $124 & 1023;
  $126 = (($83) + ($125)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = ((($86)) + 5|0);
  HEAP8[$128>>0] = $127;
  $129 = (($117) + ($95))|0;
  $130 = $129 >>> 18;
  $131 = $130 & 1023;
  $132 = (($83) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = ((($86)) + 1|0);
  HEAP8[$134>>0] = $133;
  $135 = (($95) - ($117))|0;
  $136 = $135 >>> 18;
  $137 = $136 & 1023;
  $138 = (($83) + ($137)|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = ((($86)) + 4|0);
  HEAP8[$140>>0] = $139;
  $141 = (($114) + ($100))|0;
  $142 = $141 >>> 18;
  $143 = $142 & 1023;
  $144 = (($83) + ($143)|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = ((($86)) + 2|0);
  HEAP8[$146>>0] = $145;
  $147 = (($100) - ($114))|0;
  $148 = $147 >>> 18;
  $149 = $148 & 1023;
  $150 = (($83) + ($149)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = ((($86)) + 3|0);
  HEAP8[$152>>0] = $151;
  $153 = ((($$1150158)) + 24|0);
  $154 = (($$1159) + 1)|0;
  $exitcond = ($154|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$1150158 = $153;$$1159 = $154;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_5x5($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP16[$2>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = HEAP32[$9>>2]|0;
 $13 = $11 << 13;
 $14 = Math_imul($13, $12)|0;
 $15 = $14 | 1024;
 $16 = ((($2)) + 32|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ((($9)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($20, $18)|0;
 $22 = ((($2)) + 64|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = ((($9)) + 128|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($26, $24)|0;
 $28 = (($27) + ($21))|0;
 $29 = ($28*6476)|0;
 $30 = (($21) - ($27))|0;
 $31 = ($30*2896)|0;
 $32 = (($31) + ($15))|0;
 $33 = (($32) + ($29))|0;
 $34 = (($32) - ($29))|0;
 $35 = Math_imul($30, -11584)|0;
 $36 = (($35) + ($15))|0;
 $37 = ((($2)) + 16|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 $40 = ((($9)) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($41, $39)|0;
 $43 = ((($2)) + 48|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = ((($9)) + 96|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = Math_imul($47, $45)|0;
 $49 = (($48) + ($42))|0;
 $50 = ($49*6810)|0;
 $51 = ($42*4209)|0;
 $52 = (($50) + ($51))|0;
 $53 = Math_imul($48, -17828)|0;
 $54 = (($50) + ($53))|0;
 $55 = (($52) + ($33))|0;
 $56 = $55 >> 11;
 HEAP32[$5>>2] = $56;
 $57 = (($33) - ($52))|0;
 $58 = $57 >> 11;
 $59 = ((($5)) + 80|0);
 HEAP32[$59>>2] = $58;
 $60 = (($54) + ($34))|0;
 $61 = $60 >> 11;
 $62 = ((($5)) + 20|0);
 HEAP32[$62>>2] = $61;
 $63 = (($34) - ($54))|0;
 $64 = $63 >> 11;
 $65 = ((($5)) + 60|0);
 HEAP32[$65>>2] = $64;
 $66 = $36 >> 11;
 $67 = ((($5)) + 40|0);
 HEAP32[$67>>2] = $66;
 $68 = ((($2)) + 2|0);
 $69 = ((($9)) + 4|0);
 $70 = ((($5)) + 4|0);
 $71 = HEAP16[$68>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = HEAP32[$69>>2]|0;
 $74 = $72 << 13;
 $75 = Math_imul($74, $73)|0;
 $76 = $75 | 1024;
 $77 = ((($2)) + 34|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = $78 << 16 >> 16;
 $80 = ((($9)) + 68|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = Math_imul($81, $79)|0;
 $83 = ((($2)) + 66|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = ((($9)) + 132|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = Math_imul($87, $85)|0;
 $89 = (($88) + ($82))|0;
 $90 = ($89*6476)|0;
 $91 = (($82) - ($88))|0;
 $92 = ($91*2896)|0;
 $93 = (($92) + ($76))|0;
 $94 = (($93) + ($90))|0;
 $95 = (($93) - ($90))|0;
 $96 = Math_imul($91, -11584)|0;
 $97 = (($96) + ($76))|0;
 $98 = ((($2)) + 18|0);
 $99 = HEAP16[$98>>1]|0;
 $100 = $99 << 16 >> 16;
 $101 = ((($9)) + 36|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = Math_imul($102, $100)|0;
 $104 = ((($2)) + 50|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105 << 16 >> 16;
 $107 = ((($9)) + 100|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = Math_imul($108, $106)|0;
 $110 = (($109) + ($103))|0;
 $111 = ($110*6810)|0;
 $112 = ($103*4209)|0;
 $113 = (($111) + ($112))|0;
 $114 = Math_imul($109, -17828)|0;
 $115 = (($111) + ($114))|0;
 $116 = (($113) + ($94))|0;
 $117 = $116 >> 11;
 HEAP32[$70>>2] = $117;
 $118 = (($94) - ($113))|0;
 $119 = $118 >> 11;
 $120 = ((($5)) + 84|0);
 HEAP32[$120>>2] = $119;
 $121 = (($115) + ($95))|0;
 $122 = $121 >> 11;
 $123 = ((($5)) + 24|0);
 HEAP32[$123>>2] = $122;
 $124 = (($95) - ($115))|0;
 $125 = $124 >> 11;
 $126 = ((($5)) + 64|0);
 HEAP32[$126>>2] = $125;
 $127 = $97 >> 11;
 $128 = ((($5)) + 44|0);
 HEAP32[$128>>2] = $127;
 $129 = ((($2)) + 4|0);
 $130 = ((($9)) + 8|0);
 $131 = ((($5)) + 8|0);
 $132 = HEAP16[$129>>1]|0;
 $133 = $132 << 16 >> 16;
 $134 = HEAP32[$130>>2]|0;
 $135 = $133 << 13;
 $136 = Math_imul($135, $134)|0;
 $137 = $136 | 1024;
 $138 = ((($2)) + 36|0);
 $139 = HEAP16[$138>>1]|0;
 $140 = $139 << 16 >> 16;
 $141 = ((($9)) + 72|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = Math_imul($142, $140)|0;
 $144 = ((($2)) + 68|0);
 $145 = HEAP16[$144>>1]|0;
 $146 = $145 << 16 >> 16;
 $147 = ((($9)) + 136|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = Math_imul($148, $146)|0;
 $150 = (($149) + ($143))|0;
 $151 = ($150*6476)|0;
 $152 = (($143) - ($149))|0;
 $153 = ($152*2896)|0;
 $154 = (($153) + ($137))|0;
 $155 = (($154) + ($151))|0;
 $156 = (($154) - ($151))|0;
 $157 = Math_imul($152, -11584)|0;
 $158 = (($157) + ($137))|0;
 $159 = ((($2)) + 20|0);
 $160 = HEAP16[$159>>1]|0;
 $161 = $160 << 16 >> 16;
 $162 = ((($9)) + 40|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = Math_imul($163, $161)|0;
 $165 = ((($2)) + 52|0);
 $166 = HEAP16[$165>>1]|0;
 $167 = $166 << 16 >> 16;
 $168 = ((($9)) + 104|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = Math_imul($169, $167)|0;
 $171 = (($170) + ($164))|0;
 $172 = ($171*6810)|0;
 $173 = ($164*4209)|0;
 $174 = (($172) + ($173))|0;
 $175 = Math_imul($170, -17828)|0;
 $176 = (($172) + ($175))|0;
 $177 = (($174) + ($155))|0;
 $178 = $177 >> 11;
 HEAP32[$131>>2] = $178;
 $179 = (($155) - ($174))|0;
 $180 = $179 >> 11;
 $181 = ((($5)) + 88|0);
 HEAP32[$181>>2] = $180;
 $182 = (($176) + ($156))|0;
 $183 = $182 >> 11;
 $184 = ((($5)) + 28|0);
 HEAP32[$184>>2] = $183;
 $185 = (($156) - ($176))|0;
 $186 = $185 >> 11;
 $187 = ((($5)) + 68|0);
 HEAP32[$187>>2] = $186;
 $188 = $158 >> 11;
 $189 = ((($5)) + 48|0);
 HEAP32[$189>>2] = $188;
 $190 = ((($2)) + 6|0);
 $191 = ((($9)) + 12|0);
 $192 = ((($5)) + 12|0);
 $193 = HEAP16[$190>>1]|0;
 $194 = $193 << 16 >> 16;
 $195 = HEAP32[$191>>2]|0;
 $196 = $194 << 13;
 $197 = Math_imul($196, $195)|0;
 $198 = $197 | 1024;
 $199 = ((($2)) + 38|0);
 $200 = HEAP16[$199>>1]|0;
 $201 = $200 << 16 >> 16;
 $202 = ((($9)) + 76|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = Math_imul($203, $201)|0;
 $205 = ((($2)) + 70|0);
 $206 = HEAP16[$205>>1]|0;
 $207 = $206 << 16 >> 16;
 $208 = ((($9)) + 140|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = Math_imul($209, $207)|0;
 $211 = (($210) + ($204))|0;
 $212 = ($211*6476)|0;
 $213 = (($204) - ($210))|0;
 $214 = ($213*2896)|0;
 $215 = (($214) + ($198))|0;
 $216 = (($215) + ($212))|0;
 $217 = (($215) - ($212))|0;
 $218 = Math_imul($213, -11584)|0;
 $219 = (($218) + ($198))|0;
 $220 = ((($2)) + 22|0);
 $221 = HEAP16[$220>>1]|0;
 $222 = $221 << 16 >> 16;
 $223 = ((($9)) + 44|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = Math_imul($224, $222)|0;
 $226 = ((($2)) + 54|0);
 $227 = HEAP16[$226>>1]|0;
 $228 = $227 << 16 >> 16;
 $229 = ((($9)) + 108|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = Math_imul($230, $228)|0;
 $232 = (($231) + ($225))|0;
 $233 = ($232*6810)|0;
 $234 = ($225*4209)|0;
 $235 = (($233) + ($234))|0;
 $236 = Math_imul($231, -17828)|0;
 $237 = (($233) + ($236))|0;
 $238 = (($235) + ($216))|0;
 $239 = $238 >> 11;
 HEAP32[$192>>2] = $239;
 $240 = (($216) - ($235))|0;
 $241 = $240 >> 11;
 $242 = ((($5)) + 92|0);
 HEAP32[$242>>2] = $241;
 $243 = (($237) + ($217))|0;
 $244 = $243 >> 11;
 $245 = ((($5)) + 32|0);
 HEAP32[$245>>2] = $244;
 $246 = (($217) - ($237))|0;
 $247 = $246 >> 11;
 $248 = ((($5)) + 72|0);
 HEAP32[$248>>2] = $247;
 $249 = $219 >> 11;
 $250 = ((($5)) + 52|0);
 HEAP32[$250>>2] = $249;
 $251 = ((($2)) + 8|0);
 $252 = ((($9)) + 16|0);
 $253 = ((($5)) + 16|0);
 $254 = HEAP16[$251>>1]|0;
 $255 = $254 << 16 >> 16;
 $256 = HEAP32[$252>>2]|0;
 $257 = $255 << 13;
 $258 = Math_imul($257, $256)|0;
 $259 = $258 | 1024;
 $260 = ((($2)) + 40|0);
 $261 = HEAP16[$260>>1]|0;
 $262 = $261 << 16 >> 16;
 $263 = ((($9)) + 80|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = Math_imul($264, $262)|0;
 $266 = ((($2)) + 72|0);
 $267 = HEAP16[$266>>1]|0;
 $268 = $267 << 16 >> 16;
 $269 = ((($9)) + 144|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = Math_imul($270, $268)|0;
 $272 = (($271) + ($265))|0;
 $273 = ($272*6476)|0;
 $274 = (($265) - ($271))|0;
 $275 = ($274*2896)|0;
 $276 = (($275) + ($259))|0;
 $277 = (($276) + ($273))|0;
 $278 = (($276) - ($273))|0;
 $279 = Math_imul($274, -11584)|0;
 $280 = (($279) + ($259))|0;
 $281 = ((($2)) + 24|0);
 $282 = HEAP16[$281>>1]|0;
 $283 = $282 << 16 >> 16;
 $284 = ((($9)) + 48|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = Math_imul($285, $283)|0;
 $287 = ((($2)) + 56|0);
 $288 = HEAP16[$287>>1]|0;
 $289 = $288 << 16 >> 16;
 $290 = ((($9)) + 112|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = Math_imul($291, $289)|0;
 $293 = (($292) + ($286))|0;
 $294 = ($293*6810)|0;
 $295 = ($286*4209)|0;
 $296 = (($294) + ($295))|0;
 $297 = Math_imul($292, -17828)|0;
 $298 = (($294) + ($297))|0;
 $299 = (($296) + ($277))|0;
 $300 = $299 >> 11;
 HEAP32[$253>>2] = $300;
 $301 = (($277) - ($296))|0;
 $302 = $301 >> 11;
 $303 = ((($5)) + 96|0);
 HEAP32[$303>>2] = $302;
 $304 = (($298) + ($278))|0;
 $305 = $304 >> 11;
 $306 = ((($5)) + 36|0);
 HEAP32[$306>>2] = $305;
 $307 = (($278) - ($298))|0;
 $308 = $307 >> 11;
 $309 = ((($5)) + 76|0);
 HEAP32[$309>>2] = $308;
 $310 = $280 >> 11;
 $311 = ((($5)) + 56|0);
 HEAP32[$311>>2] = $310;
 $312 = ((($7)) + 128|0);
 $313 = HEAP32[$3>>2]|0;
 $314 = (($313) + ($4)|0);
 $315 = HEAP32[$5>>2]|0;
 $316 = $315 << 13;
 $317 = (($316) + 131072)|0;
 $318 = ((($5)) + 8|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = ((($5)) + 16|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = (($321) + ($319))|0;
 $323 = ($322*6476)|0;
 $324 = (($319) - ($321))|0;
 $325 = ($324*2896)|0;
 $326 = (($325) + ($317))|0;
 $327 = (($326) + ($323))|0;
 $328 = (($326) - ($323))|0;
 $329 = Math_imul($324, -11584)|0;
 $330 = (($329) + ($317))|0;
 $331 = HEAP32[$70>>2]|0;
 $332 = ((($5)) + 12|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = (($333) + ($331))|0;
 $335 = ($334*6810)|0;
 $336 = ($331*4209)|0;
 $337 = (($335) + ($336))|0;
 $338 = Math_imul($333, -17828)|0;
 $339 = (($335) + ($338))|0;
 $340 = (($337) + ($327))|0;
 $341 = $340 >>> 18;
 $342 = $341 & 1023;
 $343 = (($312) + ($342)|0);
 $344 = HEAP8[$343>>0]|0;
 HEAP8[$314>>0] = $344;
 $345 = (($327) - ($337))|0;
 $346 = $345 >>> 18;
 $347 = $346 & 1023;
 $348 = (($312) + ($347)|0);
 $349 = HEAP8[$348>>0]|0;
 $350 = ((($314)) + 4|0);
 HEAP8[$350>>0] = $349;
 $351 = (($339) + ($328))|0;
 $352 = $351 >>> 18;
 $353 = $352 & 1023;
 $354 = (($312) + ($353)|0);
 $355 = HEAP8[$354>>0]|0;
 $356 = ((($314)) + 1|0);
 HEAP8[$356>>0] = $355;
 $357 = (($328) - ($339))|0;
 $358 = $357 >>> 18;
 $359 = $358 & 1023;
 $360 = (($312) + ($359)|0);
 $361 = HEAP8[$360>>0]|0;
 $362 = ((($314)) + 3|0);
 HEAP8[$362>>0] = $361;
 $363 = $330 >>> 18;
 $364 = $363 & 1023;
 $365 = (($312) + ($364)|0);
 $366 = HEAP8[$365>>0]|0;
 $367 = ((($314)) + 2|0);
 HEAP8[$367>>0] = $366;
 $368 = ((($3)) + 4|0);
 $369 = HEAP32[$368>>2]|0;
 $370 = (($369) + ($4)|0);
 $371 = HEAP32[$62>>2]|0;
 $372 = $371 << 13;
 $373 = (($372) + 131072)|0;
 $374 = ((($5)) + 28|0);
 $375 = HEAP32[$374>>2]|0;
 $376 = ((($5)) + 36|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = (($377) + ($375))|0;
 $379 = ($378*6476)|0;
 $380 = (($375) - ($377))|0;
 $381 = ($380*2896)|0;
 $382 = (($381) + ($373))|0;
 $383 = (($382) + ($379))|0;
 $384 = (($382) - ($379))|0;
 $385 = Math_imul($380, -11584)|0;
 $386 = (($385) + ($373))|0;
 $387 = ((($5)) + 24|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = ((($5)) + 32|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = (($390) + ($388))|0;
 $392 = ($391*6810)|0;
 $393 = ($388*4209)|0;
 $394 = (($392) + ($393))|0;
 $395 = Math_imul($390, -17828)|0;
 $396 = (($392) + ($395))|0;
 $397 = (($394) + ($383))|0;
 $398 = $397 >>> 18;
 $399 = $398 & 1023;
 $400 = (($312) + ($399)|0);
 $401 = HEAP8[$400>>0]|0;
 HEAP8[$370>>0] = $401;
 $402 = (($383) - ($394))|0;
 $403 = $402 >>> 18;
 $404 = $403 & 1023;
 $405 = (($312) + ($404)|0);
 $406 = HEAP8[$405>>0]|0;
 $407 = ((($370)) + 4|0);
 HEAP8[$407>>0] = $406;
 $408 = (($396) + ($384))|0;
 $409 = $408 >>> 18;
 $410 = $409 & 1023;
 $411 = (($312) + ($410)|0);
 $412 = HEAP8[$411>>0]|0;
 $413 = ((($370)) + 1|0);
 HEAP8[$413>>0] = $412;
 $414 = (($384) - ($396))|0;
 $415 = $414 >>> 18;
 $416 = $415 & 1023;
 $417 = (($312) + ($416)|0);
 $418 = HEAP8[$417>>0]|0;
 $419 = ((($370)) + 3|0);
 HEAP8[$419>>0] = $418;
 $420 = $386 >>> 18;
 $421 = $420 & 1023;
 $422 = (($312) + ($421)|0);
 $423 = HEAP8[$422>>0]|0;
 $424 = ((($370)) + 2|0);
 HEAP8[$424>>0] = $423;
 $425 = ((($5)) + 40|0);
 $426 = ((($3)) + 8|0);
 $427 = HEAP32[$426>>2]|0;
 $428 = (($427) + ($4)|0);
 $429 = HEAP32[$425>>2]|0;
 $430 = $429 << 13;
 $431 = (($430) + 131072)|0;
 $432 = ((($5)) + 48|0);
 $433 = HEAP32[$432>>2]|0;
 $434 = ((($5)) + 56|0);
 $435 = HEAP32[$434>>2]|0;
 $436 = (($435) + ($433))|0;
 $437 = ($436*6476)|0;
 $438 = (($433) - ($435))|0;
 $439 = ($438*2896)|0;
 $440 = (($439) + ($431))|0;
 $441 = (($440) + ($437))|0;
 $442 = (($440) - ($437))|0;
 $443 = Math_imul($438, -11584)|0;
 $444 = (($443) + ($431))|0;
 $445 = ((($5)) + 44|0);
 $446 = HEAP32[$445>>2]|0;
 $447 = ((($5)) + 52|0);
 $448 = HEAP32[$447>>2]|0;
 $449 = (($448) + ($446))|0;
 $450 = ($449*6810)|0;
 $451 = ($446*4209)|0;
 $452 = (($450) + ($451))|0;
 $453 = Math_imul($448, -17828)|0;
 $454 = (($450) + ($453))|0;
 $455 = (($452) + ($441))|0;
 $456 = $455 >>> 18;
 $457 = $456 & 1023;
 $458 = (($312) + ($457)|0);
 $459 = HEAP8[$458>>0]|0;
 HEAP8[$428>>0] = $459;
 $460 = (($441) - ($452))|0;
 $461 = $460 >>> 18;
 $462 = $461 & 1023;
 $463 = (($312) + ($462)|0);
 $464 = HEAP8[$463>>0]|0;
 $465 = ((($428)) + 4|0);
 HEAP8[$465>>0] = $464;
 $466 = (($454) + ($442))|0;
 $467 = $466 >>> 18;
 $468 = $467 & 1023;
 $469 = (($312) + ($468)|0);
 $470 = HEAP8[$469>>0]|0;
 $471 = ((($428)) + 1|0);
 HEAP8[$471>>0] = $470;
 $472 = (($442) - ($454))|0;
 $473 = $472 >>> 18;
 $474 = $473 & 1023;
 $475 = (($312) + ($474)|0);
 $476 = HEAP8[$475>>0]|0;
 $477 = ((($428)) + 3|0);
 HEAP8[$477>>0] = $476;
 $478 = $444 >>> 18;
 $479 = $478 & 1023;
 $480 = (($312) + ($479)|0);
 $481 = HEAP8[$480>>0]|0;
 $482 = ((($428)) + 2|0);
 HEAP8[$482>>0] = $481;
 $483 = ((($5)) + 60|0);
 $484 = ((($3)) + 12|0);
 $485 = HEAP32[$484>>2]|0;
 $486 = (($485) + ($4)|0);
 $487 = HEAP32[$483>>2]|0;
 $488 = $487 << 13;
 $489 = (($488) + 131072)|0;
 $490 = ((($5)) + 68|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = ((($5)) + 76|0);
 $493 = HEAP32[$492>>2]|0;
 $494 = (($493) + ($491))|0;
 $495 = ($494*6476)|0;
 $496 = (($491) - ($493))|0;
 $497 = ($496*2896)|0;
 $498 = (($497) + ($489))|0;
 $499 = (($498) + ($495))|0;
 $500 = (($498) - ($495))|0;
 $501 = Math_imul($496, -11584)|0;
 $502 = (($501) + ($489))|0;
 $503 = ((($5)) + 64|0);
 $504 = HEAP32[$503>>2]|0;
 $505 = ((($5)) + 72|0);
 $506 = HEAP32[$505>>2]|0;
 $507 = (($506) + ($504))|0;
 $508 = ($507*6810)|0;
 $509 = ($504*4209)|0;
 $510 = (($508) + ($509))|0;
 $511 = Math_imul($506, -17828)|0;
 $512 = (($508) + ($511))|0;
 $513 = (($510) + ($499))|0;
 $514 = $513 >>> 18;
 $515 = $514 & 1023;
 $516 = (($312) + ($515)|0);
 $517 = HEAP8[$516>>0]|0;
 HEAP8[$486>>0] = $517;
 $518 = (($499) - ($510))|0;
 $519 = $518 >>> 18;
 $520 = $519 & 1023;
 $521 = (($312) + ($520)|0);
 $522 = HEAP8[$521>>0]|0;
 $523 = ((($486)) + 4|0);
 HEAP8[$523>>0] = $522;
 $524 = (($512) + ($500))|0;
 $525 = $524 >>> 18;
 $526 = $525 & 1023;
 $527 = (($312) + ($526)|0);
 $528 = HEAP8[$527>>0]|0;
 $529 = ((($486)) + 1|0);
 HEAP8[$529>>0] = $528;
 $530 = (($500) - ($512))|0;
 $531 = $530 >>> 18;
 $532 = $531 & 1023;
 $533 = (($312) + ($532)|0);
 $534 = HEAP8[$533>>0]|0;
 $535 = ((($486)) + 3|0);
 HEAP8[$535>>0] = $534;
 $536 = $502 >>> 18;
 $537 = $536 & 1023;
 $538 = (($312) + ($537)|0);
 $539 = HEAP8[$538>>0]|0;
 $540 = ((($486)) + 2|0);
 HEAP8[$540>>0] = $539;
 $541 = ((($5)) + 80|0);
 $542 = ((($3)) + 16|0);
 $543 = HEAP32[$542>>2]|0;
 $544 = (($543) + ($4)|0);
 $545 = HEAP32[$541>>2]|0;
 $546 = $545 << 13;
 $547 = (($546) + 131072)|0;
 $548 = ((($5)) + 88|0);
 $549 = HEAP32[$548>>2]|0;
 $550 = ((($5)) + 96|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = (($551) + ($549))|0;
 $553 = ($552*6476)|0;
 $554 = (($549) - ($551))|0;
 $555 = ($554*2896)|0;
 $556 = (($555) + ($547))|0;
 $557 = (($556) + ($553))|0;
 $558 = (($556) - ($553))|0;
 $559 = Math_imul($554, -11584)|0;
 $560 = (($559) + ($547))|0;
 $561 = ((($5)) + 84|0);
 $562 = HEAP32[$561>>2]|0;
 $563 = ((($5)) + 92|0);
 $564 = HEAP32[$563>>2]|0;
 $565 = (($564) + ($562))|0;
 $566 = ($565*6810)|0;
 $567 = ($562*4209)|0;
 $568 = (($566) + ($567))|0;
 $569 = Math_imul($564, -17828)|0;
 $570 = (($566) + ($569))|0;
 $571 = (($568) + ($557))|0;
 $572 = $571 >>> 18;
 $573 = $572 & 1023;
 $574 = (($312) + ($573)|0);
 $575 = HEAP8[$574>>0]|0;
 HEAP8[$544>>0] = $575;
 $576 = (($557) - ($568))|0;
 $577 = $576 >>> 18;
 $578 = $577 & 1023;
 $579 = (($312) + ($578)|0);
 $580 = HEAP8[$579>>0]|0;
 $581 = ((($544)) + 4|0);
 HEAP8[$581>>0] = $580;
 $582 = (($570) + ($558))|0;
 $583 = $582 >>> 18;
 $584 = $583 & 1023;
 $585 = (($312) + ($584)|0);
 $586 = HEAP8[$585>>0]|0;
 $587 = ((($544)) + 1|0);
 HEAP8[$587>>0] = $586;
 $588 = (($558) - ($570))|0;
 $589 = $588 >>> 18;
 $590 = $589 & 1023;
 $591 = (($312) + ($590)|0);
 $592 = HEAP8[$591>>0]|0;
 $593 = ((($544)) + 3|0);
 HEAP8[$593>>0] = $592;
 $594 = $560 >>> 18;
 $595 = $594 & 1023;
 $596 = (($312) + ($595)|0);
 $597 = HEAP8[$596>>0]|0;
 $598 = ((($544)) + 2|0);
 HEAP8[$598>>0] = $597;
 STACKTOP = sp;return;
}
function _jpeg_idct_3x3($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $factor = 0, $factor$1 = 0;
 var $factor$2 = 0, $factor81 = 0, $factor81$1 = 0, $factor81$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP16[$2>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = HEAP32[$9>>2]|0;
 $13 = $11 << 13;
 $14 = Math_imul($13, $12)|0;
 $15 = $14 | 1024;
 $16 = ((($2)) + 32|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ((($9)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18*5793)|0;
 $22 = Math_imul($21, $20)|0;
 $23 = (($22) + ($15))|0;
 $factor81 = Math_imul($22, -2)|0;
 $24 = (($factor81) + ($15))|0;
 $25 = ((($2)) + 16|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = ((($9)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27*10033)|0;
 $31 = Math_imul($30, $29)|0;
 $32 = (($31) + ($23))|0;
 $33 = $32 >> 11;
 HEAP32[$5>>2] = $33;
 $34 = (($23) - ($31))|0;
 $35 = $34 >> 11;
 $36 = ((($5)) + 24|0);
 HEAP32[$36>>2] = $35;
 $37 = $24 >> 11;
 $38 = ((($5)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($2)) + 2|0);
 $40 = ((($9)) + 4|0);
 $41 = ((($5)) + 4|0);
 $42 = HEAP16[$39>>1]|0;
 $43 = $42 << 16 >> 16;
 $44 = HEAP32[$40>>2]|0;
 $45 = $43 << 13;
 $46 = Math_imul($45, $44)|0;
 $47 = $46 | 1024;
 $48 = ((($2)) + 34|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = ((($9)) + 68|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50*5793)|0;
 $54 = Math_imul($53, $52)|0;
 $55 = (($54) + ($47))|0;
 $factor81$1 = Math_imul($54, -2)|0;
 $56 = (($factor81$1) + ($47))|0;
 $57 = ((($2)) + 18|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = $58 << 16 >> 16;
 $60 = ((($9)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59*10033)|0;
 $63 = Math_imul($62, $61)|0;
 $64 = (($63) + ($55))|0;
 $65 = $64 >> 11;
 HEAP32[$41>>2] = $65;
 $66 = (($55) - ($63))|0;
 $67 = $66 >> 11;
 $68 = ((($5)) + 28|0);
 HEAP32[$68>>2] = $67;
 $69 = $56 >> 11;
 $70 = ((($5)) + 16|0);
 HEAP32[$70>>2] = $69;
 $71 = ((($2)) + 4|0);
 $72 = ((($9)) + 8|0);
 $73 = ((($5)) + 8|0);
 $74 = HEAP16[$71>>1]|0;
 $75 = $74 << 16 >> 16;
 $76 = HEAP32[$72>>2]|0;
 $77 = $75 << 13;
 $78 = Math_imul($77, $76)|0;
 $79 = $78 | 1024;
 $80 = ((($2)) + 36|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81 << 16 >> 16;
 $83 = ((($9)) + 72|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($82*5793)|0;
 $86 = Math_imul($85, $84)|0;
 $87 = (($86) + ($79))|0;
 $factor81$2 = Math_imul($86, -2)|0;
 $88 = (($factor81$2) + ($79))|0;
 $89 = ((($2)) + 20|0);
 $90 = HEAP16[$89>>1]|0;
 $91 = $90 << 16 >> 16;
 $92 = ((($9)) + 40|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($91*10033)|0;
 $95 = Math_imul($94, $93)|0;
 $96 = (($95) + ($87))|0;
 $97 = $96 >> 11;
 HEAP32[$73>>2] = $97;
 $98 = (($87) - ($95))|0;
 $99 = $98 >> 11;
 $100 = ((($5)) + 32|0);
 HEAP32[$100>>2] = $99;
 $101 = $88 >> 11;
 $102 = ((($5)) + 20|0);
 HEAP32[$102>>2] = $101;
 $103 = ((($7)) + 128|0);
 $104 = HEAP32[$3>>2]|0;
 $105 = (($104) + ($4)|0);
 $106 = $33 << 13;
 $107 = (($106) + 131072)|0;
 $108 = ($97*5793)|0;
 $109 = (($107) + ($108))|0;
 $factor = Math_imul($97, -11586)|0;
 $110 = (($factor) + ($107))|0;
 $111 = ($65*10033)|0;
 $112 = (($109) + ($111))|0;
 $113 = $112 >>> 18;
 $114 = $113 & 1023;
 $115 = (($103) + ($114)|0);
 $116 = HEAP8[$115>>0]|0;
 HEAP8[$105>>0] = $116;
 $117 = (($109) - ($111))|0;
 $118 = $117 >>> 18;
 $119 = $118 & 1023;
 $120 = (($103) + ($119)|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = ((($105)) + 2|0);
 HEAP8[$122>>0] = $121;
 $123 = $110 >>> 18;
 $124 = $123 & 1023;
 $125 = (($103) + ($124)|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = ((($105)) + 1|0);
 HEAP8[$127>>0] = $126;
 $128 = ((($3)) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + ($4)|0);
 $131 = HEAP32[$38>>2]|0;
 $132 = $131 << 13;
 $133 = (($132) + 131072)|0;
 $134 = ($101*5793)|0;
 $135 = (($133) + ($134))|0;
 $factor$1 = Math_imul($101, -11586)|0;
 $136 = (($factor$1) + ($133))|0;
 $137 = ($69*10033)|0;
 $138 = (($135) + ($137))|0;
 $139 = $138 >>> 18;
 $140 = $139 & 1023;
 $141 = (($103) + ($140)|0);
 $142 = HEAP8[$141>>0]|0;
 HEAP8[$130>>0] = $142;
 $143 = (($135) - ($137))|0;
 $144 = $143 >>> 18;
 $145 = $144 & 1023;
 $146 = (($103) + ($145)|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = ((($130)) + 2|0);
 HEAP8[$148>>0] = $147;
 $149 = $136 >>> 18;
 $150 = $149 & 1023;
 $151 = (($103) + ($150)|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = ((($130)) + 1|0);
 HEAP8[$153>>0] = $152;
 $154 = ((($5)) + 24|0);
 $155 = ((($3)) + 8|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + ($4)|0);
 $158 = HEAP32[$154>>2]|0;
 $159 = $158 << 13;
 $160 = (($159) + 131072)|0;
 $161 = ($99*5793)|0;
 $162 = (($160) + ($161))|0;
 $factor$2 = Math_imul($99, -11586)|0;
 $163 = (($factor$2) + ($160))|0;
 $164 = ((($5)) + 28|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165*10033)|0;
 $167 = (($162) + ($166))|0;
 $168 = $167 >>> 18;
 $169 = $168 & 1023;
 $170 = (($103) + ($169)|0);
 $171 = HEAP8[$170>>0]|0;
 HEAP8[$157>>0] = $171;
 $172 = (($162) - ($166))|0;
 $173 = $172 >>> 18;
 $174 = $173 & 1023;
 $175 = (($103) + ($174)|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = ((($157)) + 2|0);
 HEAP8[$177>>0] = $176;
 $178 = $163 >>> 18;
 $179 = $178 & 1023;
 $180 = (($103) + ($179)|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = ((($157)) + 1|0);
 HEAP8[$182>>0] = $181;
 STACKTOP = sp;return;
}
function _jpeg_idct_9x9($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0228248 = 0, $$0230247 = 0, $$0231246 = 0, $$0249 = 0, $$1229244 = 0, $$1245 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond250 = 0, $factor = 0, $factor239 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0228248 = $5;$$0230247 = $9;$$0231246 = $2;$$0249 = 0;
 while(1) {
  $10 = HEAP16[$$0231246>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0230247>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0231246)) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0230247)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ((($$0231246)) + 64|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ((($$0230247)) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $24)|0;
  $28 = ((($$0231246)) + 96|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0230247)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30*5793)|0;
  $34 = Math_imul($33, $32)|0;
  $35 = (($34) + ($15))|0;
  $36 = (($15) - ($34))|0;
  $37 = (($36) - ($34))|0;
  $38 = (($21) - ($27))|0;
  $39 = ($38*5793)|0;
  $40 = (($37) + ($39))|0;
  $factor239 = Math_imul($38, -11586)|0;
  $41 = (($factor239) + ($37))|0;
  $42 = (($27) + ($21))|0;
  $43 = ($42*10887)|0;
  $44 = ($21*8875)|0;
  $45 = ($27*2012)|0;
  $46 = (($43) - ($45))|0;
  $47 = (($46) + ($35))|0;
  $48 = (($35) - ($43))|0;
  $49 = (($48) + ($44))|0;
  $50 = (($35) - ($44))|0;
  $51 = (($50) + ($45))|0;
  $52 = ((($$0231246)) + 16|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = ((($$0230247)) + 32|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = Math_imul($56, $54)|0;
  $58 = ((($$0231246)) + 48|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ((($$0230247)) + 96|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($$0231246)) + 80|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = ((($$0230247)) + 160|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = Math_imul($67, $65)|0;
  $69 = ((($$0231246)) + 112|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = ((($$0230247)) + 224|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = Math_imul($73, $71)|0;
  $75 = Math_imul($60, -10033)|0;
  $76 = Math_imul($75, $62)|0;
  $77 = (($68) + ($57))|0;
  $78 = ($77*7447)|0;
  $79 = (($74) + ($57))|0;
  $80 = ($79*3962)|0;
  $81 = (($78) - ($76))|0;
  $82 = (($81) + ($80))|0;
  $83 = (($68) - ($74))|0;
  $84 = ($83*11409)|0;
  $85 = (($76) - ($84))|0;
  $86 = (($85) + ($78))|0;
  $87 = (($84) + ($76))|0;
  $88 = (($87) + ($80))|0;
  $89 = (($57) - ($68))|0;
  $90 = (($89) - ($74))|0;
  $91 = ($90*10033)|0;
  $92 = (($82) + ($47))|0;
  $93 = $92 >> 11;
  HEAP32[$$0228248>>2] = $93;
  $94 = (($47) - ($82))|0;
  $95 = $94 >> 11;
  $96 = ((($$0228248)) + 256|0);
  HEAP32[$96>>2] = $95;
  $97 = (($91) + ($40))|0;
  $98 = $97 >> 11;
  $99 = ((($$0228248)) + 32|0);
  HEAP32[$99>>2] = $98;
  $100 = (($40) - ($91))|0;
  $101 = $100 >> 11;
  $102 = ((($$0228248)) + 224|0);
  HEAP32[$102>>2] = $101;
  $103 = (($86) + ($49))|0;
  $104 = $103 >> 11;
  $105 = ((($$0228248)) + 64|0);
  HEAP32[$105>>2] = $104;
  $106 = (($49) - ($86))|0;
  $107 = $106 >> 11;
  $108 = ((($$0228248)) + 192|0);
  HEAP32[$108>>2] = $107;
  $109 = (($88) + ($51))|0;
  $110 = $109 >> 11;
  $111 = ((($$0228248)) + 96|0);
  HEAP32[$111>>2] = $110;
  $112 = (($51) - ($88))|0;
  $113 = $112 >> 11;
  $114 = ((($$0228248)) + 160|0);
  HEAP32[$114>>2] = $113;
  $115 = $41 >> 11;
  $116 = ((($$0228248)) + 128|0);
  HEAP32[$116>>2] = $115;
  $117 = (($$0249) + 1)|0;
  $118 = ((($$0231246)) + 2|0);
  $119 = ((($$0230247)) + 4|0);
  $120 = ((($$0228248)) + 4|0);
  $exitcond250 = ($117|0)==(8);
  if ($exitcond250) {
   break;
  } else {
   $$0228248 = $120;$$0230247 = $119;$$0231246 = $118;$$0249 = $117;
  }
 }
 $121 = ((($7)) + 128|0);
 $$1229244 = $5;$$1245 = 0;
 while(1) {
  $122 = (($3) + ($$1245<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($4)|0);
  $125 = HEAP32[$$1229244>>2]|0;
  $126 = $125 << 13;
  $127 = (($126) + 131072)|0;
  $128 = ((($$1229244)) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($$1229244)) + 16|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ((($$1229244)) + 24|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133*5793)|0;
  $135 = (($134) + ($127))|0;
  $136 = (($127) - ($134))|0;
  $137 = (($136) - ($134))|0;
  $138 = (($129) - ($131))|0;
  $139 = ($138*5793)|0;
  $140 = (($137) + ($139))|0;
  $factor = Math_imul($138, -11586)|0;
  $141 = (($factor) + ($137))|0;
  $142 = (($131) + ($129))|0;
  $143 = ($142*10887)|0;
  $144 = ($129*8875)|0;
  $145 = ($131*2012)|0;
  $146 = (($143) - ($145))|0;
  $147 = (($146) + ($135))|0;
  $148 = (($135) - ($143))|0;
  $149 = (($148) + ($144))|0;
  $150 = (($135) - ($144))|0;
  $151 = (($150) + ($145))|0;
  $152 = ((($$1229244)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ((($$1229244)) + 12|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ((($$1229244)) + 20|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($$1229244)) + 28|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = Math_imul($155, -10033)|0;
  $161 = (($157) + ($153))|0;
  $162 = ($161*7447)|0;
  $163 = (($159) + ($153))|0;
  $164 = ($163*3962)|0;
  $165 = (($162) - ($160))|0;
  $166 = (($165) + ($164))|0;
  $167 = (($157) - ($159))|0;
  $168 = ($167*11409)|0;
  $169 = (($160) - ($168))|0;
  $170 = (($169) + ($162))|0;
  $171 = (($168) + ($160))|0;
  $172 = (($171) + ($164))|0;
  $173 = (($153) - ($157))|0;
  $174 = (($173) - ($159))|0;
  $175 = ($174*10033)|0;
  $176 = (($166) + ($147))|0;
  $177 = $176 >>> 18;
  $178 = $177 & 1023;
  $179 = (($121) + ($178)|0);
  $180 = HEAP8[$179>>0]|0;
  HEAP8[$124>>0] = $180;
  $181 = (($147) - ($166))|0;
  $182 = $181 >>> 18;
  $183 = $182 & 1023;
  $184 = (($121) + ($183)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = ((($124)) + 8|0);
  HEAP8[$186>>0] = $185;
  $187 = (($175) + ($140))|0;
  $188 = $187 >>> 18;
  $189 = $188 & 1023;
  $190 = (($121) + ($189)|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = ((($124)) + 1|0);
  HEAP8[$192>>0] = $191;
  $193 = (($140) - ($175))|0;
  $194 = $193 >>> 18;
  $195 = $194 & 1023;
  $196 = (($121) + ($195)|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = ((($124)) + 7|0);
  HEAP8[$198>>0] = $197;
  $199 = (($170) + ($149))|0;
  $200 = $199 >>> 18;
  $201 = $200 & 1023;
  $202 = (($121) + ($201)|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = ((($124)) + 2|0);
  HEAP8[$204>>0] = $203;
  $205 = (($149) - ($170))|0;
  $206 = $205 >>> 18;
  $207 = $206 & 1023;
  $208 = (($121) + ($207)|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = ((($124)) + 6|0);
  HEAP8[$210>>0] = $209;
  $211 = (($172) + ($151))|0;
  $212 = $211 >>> 18;
  $213 = $212 & 1023;
  $214 = (($121) + ($213)|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = ((($124)) + 3|0);
  HEAP8[$216>>0] = $215;
  $217 = (($151) - ($172))|0;
  $218 = $217 >>> 18;
  $219 = $218 & 1023;
  $220 = (($121) + ($219)|0);
  $221 = HEAP8[$220>>0]|0;
  $222 = ((($124)) + 5|0);
  HEAP8[$222>>0] = $221;
  $223 = $141 >>> 18;
  $224 = $223 & 1023;
  $225 = (($121) + ($224)|0);
  $226 = HEAP8[$225>>0]|0;
  $227 = ((($124)) + 4|0);
  HEAP8[$227>>0] = $226;
  $228 = ((($$1229244)) + 32|0);
  $229 = (($$1245) + 1)|0;
  $exitcond = ($229|0)==(9);
  if ($exitcond) {
   break;
  } else {
   $$1229244 = $228;$$1245 = $229;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_10x10($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0253266 = 0, $$0255265 = 0, $$0256264 = 0, $$0267 = 0, $$1254262 = 0, $$1263 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0253266 = $5;$$0255265 = $9;$$0256264 = $2;$$0267 = 0;
 while(1) {
  $10 = HEAP16[$$0256264>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0255265>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0256264)) + 64|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0255265)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ($21*9373)|0;
  $23 = (($22) + ($15))|0;
  $24 = Math_imul($21, -3580)|0;
  $25 = (($24) + ($15))|0;
  $26 = Math_imul($21, -11586)|0;
  $27 = (($26) + ($15))|0;
  $28 = $27 >> 11;
  $29 = ((($$0256264)) + 32|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = ((($$0255265)) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($33, $31)|0;
  $35 = ((($$0256264)) + 96|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = ((($$0255265)) + 192|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($39, $37)|0;
  $41 = (($40) + ($34))|0;
  $42 = ($41*6810)|0;
  $43 = ($34*4209)|0;
  $44 = (($42) + ($43))|0;
  $45 = Math_imul($40, -17828)|0;
  $46 = (($42) + ($45))|0;
  $47 = (($44) + ($23))|0;
  $48 = (($23) - ($44))|0;
  $49 = (($46) + ($25))|0;
  $50 = (($25) - ($46))|0;
  $51 = ((($$0256264)) + 16|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ((($$0255265)) + 32|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = Math_imul($55, $53)|0;
  $57 = ((($$0256264)) + 48|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ((($$0255265)) + 96|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = Math_imul($61, $59)|0;
  $63 = ((($$0256264)) + 80|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = ((($$0255265)) + 160|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = Math_imul($67, $65)|0;
  $69 = ((($$0256264)) + 112|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = ((($$0255265)) + 224|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = Math_imul($73, $71)|0;
  $75 = (($74) + ($62))|0;
  $76 = (($62) - ($74))|0;
  $77 = ($76*2531)|0;
  $78 = $68 << 13;
  $79 = ($75*7791)|0;
  $80 = (($77) + ($78))|0;
  $81 = ($56*11443)|0;
  $82 = (($79) + ($81))|0;
  $83 = (($82) + ($80))|0;
  $84 = ($56*1812)|0;
  $85 = (($84) - ($79))|0;
  $86 = (($85) + ($80))|0;
  $87 = ($75*4815)|0;
  $88 = (($78) - ($77))|0;
  $89 = $76 << 12;
  $90 = (($88) - ($89))|0;
  $91 = (($56) - ($68))|0;
  $92 = (($91) - ($76))|0;
  $93 = $92 << 2;
  $94 = ($56*10323)|0;
  $95 = (($94) - ($87))|0;
  $96 = (($95) - ($90))|0;
  $97 = ($56*5260)|0;
  $98 = (($97) - ($87))|0;
  $99 = (($90) + ($98))|0;
  $100 = (($83) + ($47))|0;
  $101 = $100 >> 11;
  HEAP32[$$0253266>>2] = $101;
  $102 = (($47) - ($83))|0;
  $103 = $102 >> 11;
  $104 = ((($$0253266)) + 288|0);
  HEAP32[$104>>2] = $103;
  $105 = (($96) + ($49))|0;
  $106 = $105 >> 11;
  $107 = ((($$0253266)) + 32|0);
  HEAP32[$107>>2] = $106;
  $108 = (($49) - ($96))|0;
  $109 = $108 >> 11;
  $110 = ((($$0253266)) + 256|0);
  HEAP32[$110>>2] = $109;
  $111 = (($93) + ($28))|0;
  $112 = ((($$0253266)) + 64|0);
  HEAP32[$112>>2] = $111;
  $113 = (($28) - ($93))|0;
  $114 = ((($$0253266)) + 224|0);
  HEAP32[$114>>2] = $113;
  $115 = (($99) + ($50))|0;
  $116 = $115 >> 11;
  $117 = ((($$0253266)) + 96|0);
  HEAP32[$117>>2] = $116;
  $118 = (($50) - ($99))|0;
  $119 = $118 >> 11;
  $120 = ((($$0253266)) + 192|0);
  HEAP32[$120>>2] = $119;
  $121 = (($86) + ($48))|0;
  $122 = $121 >> 11;
  $123 = ((($$0253266)) + 128|0);
  HEAP32[$123>>2] = $122;
  $124 = (($48) - ($86))|0;
  $125 = $124 >> 11;
  $126 = ((($$0253266)) + 160|0);
  HEAP32[$126>>2] = $125;
  $127 = (($$0267) + 1)|0;
  $128 = ((($$0256264)) + 2|0);
  $129 = ((($$0255265)) + 4|0);
  $130 = ((($$0253266)) + 4|0);
  $exitcond268 = ($127|0)==(8);
  if ($exitcond268) {
   break;
  } else {
   $$0253266 = $130;$$0255265 = $129;$$0256264 = $128;$$0267 = $127;
  }
 }
 $131 = ((($7)) + 128|0);
 $$1254262 = $5;$$1263 = 0;
 while(1) {
  $132 = (($3) + ($$1263<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($4)|0);
  $135 = HEAP32[$$1254262>>2]|0;
  $136 = $135 << 13;
  $137 = (($136) + 131072)|0;
  $138 = ((($$1254262)) + 16|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139*9373)|0;
  $141 = (($137) + ($140))|0;
  $142 = Math_imul($139, -3580)|0;
  $143 = (($137) + ($142))|0;
  $144 = Math_imul($139, -11586)|0;
  $145 = (($137) + ($144))|0;
  $146 = ((($$1254262)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ((($$1254262)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + ($147))|0;
  $151 = ($150*6810)|0;
  $152 = ($147*4209)|0;
  $153 = (($151) + ($152))|0;
  $154 = Math_imul($149, -17828)|0;
  $155 = (($151) + ($154))|0;
  $156 = (($153) + ($141))|0;
  $157 = (($141) - ($153))|0;
  $158 = (($155) + ($143))|0;
  $159 = (($143) - ($155))|0;
  $160 = ((($$1254262)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($$1254262)) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ((($$1254262)) + 20|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $165 << 13;
  $167 = ((($$1254262)) + 28|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($168) + ($163))|0;
  $170 = (($163) - ($168))|0;
  $171 = ($170*2531)|0;
  $172 = ($169*7791)|0;
  $173 = (($171) + ($166))|0;
  $174 = ($161*11443)|0;
  $175 = (($172) + ($174))|0;
  $176 = (($175) + ($173))|0;
  $177 = ($161*1812)|0;
  $178 = (($177) - ($172))|0;
  $179 = (($178) + ($173))|0;
  $180 = ($169*4815)|0;
  $181 = (($166) - ($171))|0;
  $182 = $170 << 12;
  $183 = (($181) - ($182))|0;
  $184 = (($161) - ($170))|0;
  $185 = $184 << 13;
  $186 = (($185) - ($166))|0;
  $187 = ($161*10323)|0;
  $188 = (($187) - ($180))|0;
  $189 = (($188) - ($183))|0;
  $190 = ($161*5260)|0;
  $191 = (($190) - ($180))|0;
  $192 = (($183) + ($191))|0;
  $193 = (($176) + ($156))|0;
  $194 = $193 >>> 18;
  $195 = $194 & 1023;
  $196 = (($131) + ($195)|0);
  $197 = HEAP8[$196>>0]|0;
  HEAP8[$134>>0] = $197;
  $198 = (($156) - ($176))|0;
  $199 = $198 >>> 18;
  $200 = $199 & 1023;
  $201 = (($131) + ($200)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = ((($134)) + 9|0);
  HEAP8[$203>>0] = $202;
  $204 = (($189) + ($158))|0;
  $205 = $204 >>> 18;
  $206 = $205 & 1023;
  $207 = (($131) + ($206)|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = ((($134)) + 1|0);
  HEAP8[$209>>0] = $208;
  $210 = (($158) - ($189))|0;
  $211 = $210 >>> 18;
  $212 = $211 & 1023;
  $213 = (($131) + ($212)|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = ((($134)) + 8|0);
  HEAP8[$215>>0] = $214;
  $216 = (($186) + ($145))|0;
  $217 = $216 >>> 18;
  $218 = $217 & 1023;
  $219 = (($131) + ($218)|0);
  $220 = HEAP8[$219>>0]|0;
  $221 = ((($134)) + 2|0);
  HEAP8[$221>>0] = $220;
  $222 = (($145) - ($186))|0;
  $223 = $222 >>> 18;
  $224 = $223 & 1023;
  $225 = (($131) + ($224)|0);
  $226 = HEAP8[$225>>0]|0;
  $227 = ((($134)) + 7|0);
  HEAP8[$227>>0] = $226;
  $228 = (($192) + ($159))|0;
  $229 = $228 >>> 18;
  $230 = $229 & 1023;
  $231 = (($131) + ($230)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = ((($134)) + 3|0);
  HEAP8[$233>>0] = $232;
  $234 = (($159) - ($192))|0;
  $235 = $234 >>> 18;
  $236 = $235 & 1023;
  $237 = (($131) + ($236)|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = ((($134)) + 6|0);
  HEAP8[$239>>0] = $238;
  $240 = (($179) + ($157))|0;
  $241 = $240 >>> 18;
  $242 = $241 & 1023;
  $243 = (($131) + ($242)|0);
  $244 = HEAP8[$243>>0]|0;
  $245 = ((($134)) + 4|0);
  HEAP8[$245>>0] = $244;
  $246 = (($157) - ($179))|0;
  $247 = $246 >>> 18;
  $248 = $247 & 1023;
  $249 = (($131) + ($248)|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = ((($134)) + 5|0);
  HEAP8[$251>>0] = $250;
  $252 = ((($$1254262)) + 32|0);
  $253 = (($$1263) + 1)|0;
  $exitcond = ($253|0)==(10);
  if ($exitcond) {
   break;
  } else {
   $$1254262 = $252;$$1263 = $253;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_11x11($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0286294 = 0, $$0288293 = 0, $$0289292 = 0, $$0295 = 0, $$1287290 = 0, $$1291 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond296 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0286294 = $5;$$0288293 = $9;$$0289292 = $2;$$0295 = 0;
 while(1) {
  $10 = HEAP16[$$0289292>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0288293>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0289292)) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0288293)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ((($$0289292)) + 64|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ((($$0288293)) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $24)|0;
  $28 = ((($$0289292)) + 96|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0288293)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $30)|0;
  $34 = (($27) - ($33))|0;
  $35 = ($34*20862)|0;
  $36 = (($27) - ($21))|0;
  $37 = ($36*3529)|0;
  $38 = (($33) + ($21))|0;
  $39 = Math_imul($38, -9467)|0;
  $40 = (($38) - ($27))|0;
  $41 = ($40*11116)|0;
  $42 = (($41) + ($15))|0;
  $43 = Math_imul($27, -14924)|0;
  $44 = (($37) + ($43))|0;
  $45 = (($44) + ($35))|0;
  $46 = (($45) + ($42))|0;
  $47 = ($33*17333)|0;
  $48 = (($35) + ($47))|0;
  $49 = (($48) + ($42))|0;
  $50 = Math_imul($21, -12399)|0;
  $51 = (($37) + ($50))|0;
  $52 = (($51) + ($42))|0;
  $53 = (($42) + ($39))|0;
  $54 = Math_imul($33, -6461)|0;
  $55 = (($53) + ($54))|0;
  $56 = ($27*15929)|0;
  $57 = Math_imul($21, -11395)|0;
  $58 = (($56) + ($57))|0;
  $59 = (($58) + ($53))|0;
  $60 = Math_imul($40, -11585)|0;
  $61 = (($60) + ($15))|0;
  $62 = ((($$0289292)) + 16|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = ((($$0288293)) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($66, $64)|0;
  $68 = ((($$0289292)) + 48|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ((($$0288293)) + 96|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = Math_imul($72, $70)|0;
  $74 = ((($$0289292)) + 80|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = $75 << 16 >> 16;
  $77 = ((($$0288293)) + 160|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = Math_imul($78, $76)|0;
  $80 = ((($$0289292)) + 112|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = ((($$0288293)) + 224|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = Math_imul($84, $82)|0;
  $86 = (($73) + ($67))|0;
  $87 = (($79) + ($86))|0;
  $88 = (($87) + ($85))|0;
  $89 = ($88*3264)|0;
  $90 = ($86*7274)|0;
  $91 = (($79) + ($67))|0;
  $92 = ($91*5492)|0;
  $93 = (($85) + ($67))|0;
  $94 = ($93*3000)|0;
  $95 = (($89) + ($94))|0;
  $96 = Math_imul($67, -7562)|0;
  $97 = (($90) + ($96))|0;
  $98 = (($97) + ($92))|0;
  $99 = (($98) + ($95))|0;
  $100 = (($79) + ($73))|0;
  $101 = Math_imul($100, -9527)|0;
  $102 = (($89) + ($101))|0;
  $103 = ($73*16984)|0;
  $104 = Math_imul($79, -9766)|0;
  $105 = (($92) + ($104))|0;
  $106 = (($105) + ($102))|0;
  $107 = (($85) + ($73))|0;
  $108 = Math_imul($107, -14731)|0;
  $109 = (($90) + ($103))|0;
  $110 = (($109) + ($108))|0;
  $111 = (($110) + ($102))|0;
  $112 = ($85*17223)|0;
  $113 = (($108) + ($112))|0;
  $114 = (($113) + ($95))|0;
  $115 = Math_imul($73, -12019)|0;
  $116 = ($79*8203)|0;
  $117 = (($116) + ($115))|0;
  $118 = Math_imul($85, -13802)|0;
  $119 = (($117) + ($118))|0;
  $120 = (($119) + ($89))|0;
  $121 = (($99) + ($49))|0;
  $122 = $121 >> 11;
  HEAP32[$$0286294>>2] = $122;
  $123 = (($49) - ($99))|0;
  $124 = $123 >> 11;
  $125 = ((($$0286294)) + 320|0);
  HEAP32[$125>>2] = $124;
  $126 = (($111) + ($46))|0;
  $127 = $126 >> 11;
  $128 = ((($$0286294)) + 32|0);
  HEAP32[$128>>2] = $127;
  $129 = (($46) - ($111))|0;
  $130 = $129 >> 11;
  $131 = ((($$0286294)) + 288|0);
  HEAP32[$131>>2] = $130;
  $132 = (($106) + ($55))|0;
  $133 = $132 >> 11;
  $134 = ((($$0286294)) + 64|0);
  HEAP32[$134>>2] = $133;
  $135 = (($55) - ($106))|0;
  $136 = $135 >> 11;
  $137 = ((($$0286294)) + 256|0);
  HEAP32[$137>>2] = $136;
  $138 = (($114) + ($52))|0;
  $139 = $138 >> 11;
  $140 = ((($$0286294)) + 96|0);
  HEAP32[$140>>2] = $139;
  $141 = (($52) - ($114))|0;
  $142 = $141 >> 11;
  $143 = ((($$0286294)) + 224|0);
  HEAP32[$143>>2] = $142;
  $144 = (($120) + ($59))|0;
  $145 = $144 >> 11;
  $146 = ((($$0286294)) + 128|0);
  HEAP32[$146>>2] = $145;
  $147 = (($59) - ($120))|0;
  $148 = $147 >> 11;
  $149 = ((($$0286294)) + 192|0);
  HEAP32[$149>>2] = $148;
  $150 = $61 >> 11;
  $151 = ((($$0286294)) + 160|0);
  HEAP32[$151>>2] = $150;
  $152 = (($$0295) + 1)|0;
  $153 = ((($$0289292)) + 2|0);
  $154 = ((($$0288293)) + 4|0);
  $155 = ((($$0286294)) + 4|0);
  $exitcond296 = ($152|0)==(8);
  if ($exitcond296) {
   break;
  } else {
   $$0286294 = $155;$$0288293 = $154;$$0289292 = $153;$$0295 = $152;
  }
 }
 $156 = ((($7)) + 128|0);
 $$1287290 = $5;$$1291 = 0;
 while(1) {
  $157 = (($3) + ($$1291<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + ($4)|0);
  $160 = HEAP32[$$1287290>>2]|0;
  $161 = $160 << 13;
  $162 = (($161) + 131072)|0;
  $163 = ((($$1287290)) + 8|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($$1287290)) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($$1287290)) + 24|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) - ($168))|0;
  $170 = ($169*20862)|0;
  $171 = (($166) - ($164))|0;
  $172 = ($171*3529)|0;
  $173 = (($168) + ($164))|0;
  $174 = Math_imul($173, -9467)|0;
  $175 = (($173) - ($166))|0;
  $176 = ($175*11116)|0;
  $177 = (($176) + ($162))|0;
  $178 = Math_imul($166, -14924)|0;
  $179 = (($172) + ($178))|0;
  $180 = (($179) + ($170))|0;
  $181 = (($180) + ($177))|0;
  $182 = ($168*17333)|0;
  $183 = (($170) + ($182))|0;
  $184 = (($183) + ($177))|0;
  $185 = Math_imul($164, -12399)|0;
  $186 = (($172) + ($185))|0;
  $187 = (($186) + ($177))|0;
  $188 = (($177) + ($174))|0;
  $189 = Math_imul($168, -6461)|0;
  $190 = (($188) + ($189))|0;
  $191 = ($166*15929)|0;
  $192 = Math_imul($164, -11395)|0;
  $193 = (($191) + ($192))|0;
  $194 = (($193) + ($188))|0;
  $195 = Math_imul($175, -11585)|0;
  $196 = (($195) + ($162))|0;
  $197 = ((($$1287290)) + 4|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ((($$1287290)) + 12|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ((($$1287290)) + 20|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ((($$1287290)) + 28|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($200) + ($198))|0;
  $206 = (($205) + ($202))|0;
  $207 = (($206) + ($204))|0;
  $208 = ($207*3264)|0;
  $209 = ($205*7274)|0;
  $210 = (($202) + ($198))|0;
  $211 = ($210*5492)|0;
  $212 = (($204) + ($198))|0;
  $213 = ($212*3000)|0;
  $214 = (($208) + ($213))|0;
  $215 = Math_imul($198, -7562)|0;
  $216 = (($209) + ($215))|0;
  $217 = (($216) + ($211))|0;
  $218 = (($217) + ($214))|0;
  $219 = (($202) + ($200))|0;
  $220 = Math_imul($219, -9527)|0;
  $221 = (($208) + ($220))|0;
  $222 = ($200*16984)|0;
  $223 = Math_imul($202, -9766)|0;
  $224 = (($211) + ($223))|0;
  $225 = (($224) + ($221))|0;
  $226 = (($204) + ($200))|0;
  $227 = Math_imul($226, -14731)|0;
  $228 = (($209) + ($222))|0;
  $229 = (($228) + ($227))|0;
  $230 = (($229) + ($221))|0;
  $231 = ($204*17223)|0;
  $232 = (($227) + ($231))|0;
  $233 = (($232) + ($214))|0;
  $234 = Math_imul($200, -12019)|0;
  $235 = ($202*8203)|0;
  $236 = (($235) + ($234))|0;
  $237 = Math_imul($204, -13802)|0;
  $238 = (($236) + ($237))|0;
  $239 = (($238) + ($208))|0;
  $240 = (($218) + ($184))|0;
  $241 = $240 >>> 18;
  $242 = $241 & 1023;
  $243 = (($156) + ($242)|0);
  $244 = HEAP8[$243>>0]|0;
  HEAP8[$159>>0] = $244;
  $245 = (($184) - ($218))|0;
  $246 = $245 >>> 18;
  $247 = $246 & 1023;
  $248 = (($156) + ($247)|0);
  $249 = HEAP8[$248>>0]|0;
  $250 = ((($159)) + 10|0);
  HEAP8[$250>>0] = $249;
  $251 = (($230) + ($181))|0;
  $252 = $251 >>> 18;
  $253 = $252 & 1023;
  $254 = (($156) + ($253)|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = ((($159)) + 1|0);
  HEAP8[$256>>0] = $255;
  $257 = (($181) - ($230))|0;
  $258 = $257 >>> 18;
  $259 = $258 & 1023;
  $260 = (($156) + ($259)|0);
  $261 = HEAP8[$260>>0]|0;
  $262 = ((($159)) + 9|0);
  HEAP8[$262>>0] = $261;
  $263 = (($225) + ($190))|0;
  $264 = $263 >>> 18;
  $265 = $264 & 1023;
  $266 = (($156) + ($265)|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = ((($159)) + 2|0);
  HEAP8[$268>>0] = $267;
  $269 = (($190) - ($225))|0;
  $270 = $269 >>> 18;
  $271 = $270 & 1023;
  $272 = (($156) + ($271)|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = ((($159)) + 8|0);
  HEAP8[$274>>0] = $273;
  $275 = (($233) + ($187))|0;
  $276 = $275 >>> 18;
  $277 = $276 & 1023;
  $278 = (($156) + ($277)|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = ((($159)) + 3|0);
  HEAP8[$280>>0] = $279;
  $281 = (($187) - ($233))|0;
  $282 = $281 >>> 18;
  $283 = $282 & 1023;
  $284 = (($156) + ($283)|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = ((($159)) + 7|0);
  HEAP8[$286>>0] = $285;
  $287 = (($239) + ($194))|0;
  $288 = $287 >>> 18;
  $289 = $288 & 1023;
  $290 = (($156) + ($289)|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = ((($159)) + 4|0);
  HEAP8[$292>>0] = $291;
  $293 = (($194) - ($239))|0;
  $294 = $293 >>> 18;
  $295 = $294 & 1023;
  $296 = (($156) + ($295)|0);
  $297 = HEAP8[$296>>0]|0;
  $298 = ((($159)) + 6|0);
  HEAP8[$298>>0] = $297;
  $299 = $196 >>> 18;
  $300 = $299 & 1023;
  $301 = (($156) + ($300)|0);
  $302 = HEAP8[$301>>0]|0;
  $303 = ((($159)) + 5|0);
  HEAP8[$303>>0] = $302;
  $304 = ((($$1287290)) + 32|0);
  $305 = (($$1291) + 1)|0;
  $exitcond = ($305|0)==(11);
  if ($exitcond) {
   break;
  } else {
   $$1287290 = $304;$$1291 = $305;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_12x12($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0291300 = 0, $$0293299 = 0, $$0294298 = 0, $$0301 = 0, $$1292296 = 0, $$1297 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond302 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0291300 = $5;$$0293299 = $9;$$0294298 = $2;$$0301 = 0;
 while(1) {
  $10 = HEAP16[$$0294298>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0293299>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0294298)) + 64|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0293299)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18*10033)|0;
  $22 = Math_imul($21, $20)|0;
  $23 = (($22) + ($15))|0;
  $24 = (($15) - ($22))|0;
  $25 = ((($$0294298)) + 32|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = ((($$0293299)) + 64|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = Math_imul($29, $27)|0;
  $31 = ($30*11190)|0;
  $32 = $30 << 13;
  $33 = ((($$0294298)) + 96|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = ((($$0293299)) + 192|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $35 << 13;
  $39 = Math_imul($38, $37)|0;
  $40 = (($32) - ($39))|0;
  $41 = (($40) + ($15))|0;
  $42 = (($15) - ($40))|0;
  $43 = (($39) + ($31))|0;
  $44 = (($43) + ($23))|0;
  $45 = (($23) - ($43))|0;
  $46 = ($30*2998)|0;
  $47 = (($46) - ($39))|0;
  $48 = (($47) + ($24))|0;
  $49 = (($24) - ($47))|0;
  $50 = ((($$0294298)) + 16|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = ((($$0293299)) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = Math_imul($54, $52)|0;
  $56 = ((($$0294298)) + 48|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57 << 16 >> 16;
  $59 = ((($$0293299)) + 96|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = Math_imul($60, $58)|0;
  $62 = ((($$0294298)) + 80|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = ((($$0293299)) + 160|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($66, $64)|0;
  $68 = ((($$0294298)) + 112|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ((($$0293299)) + 224|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = Math_imul($72, $70)|0;
  $74 = ($61*10703)|0;
  $75 = Math_imul($61, -4433)|0;
  $76 = (($67) + ($55))|0;
  $77 = (($73) + ($76))|0;
  $78 = ($77*7053)|0;
  $79 = ($76*2139)|0;
  $80 = (($78) + ($79))|0;
  $81 = ($55*2295)|0;
  $82 = (($74) + ($81))|0;
  $83 = (($82) + ($80))|0;
  $84 = (($73) + ($67))|0;
  $85 = Math_imul($84, -8565)|0;
  $86 = Math_imul($67, -12112)|0;
  $87 = (($86) + ($75))|0;
  $88 = (($87) + ($85))|0;
  $89 = (($88) + ($80))|0;
  $90 = ($73*12998)|0;
  $91 = (($90) - ($74))|0;
  $92 = (($91) + ($78))|0;
  $93 = (($92) + ($85))|0;
  $94 = Math_imul($55, -5540)|0;
  $95 = (($75) + ($94))|0;
  $96 = Math_imul($73, -16244)|0;
  $97 = (($95) + ($96))|0;
  $98 = (($97) + ($78))|0;
  $99 = (($55) - ($73))|0;
  $100 = (($61) - ($67))|0;
  $101 = (($99) + ($100))|0;
  $102 = ($101*4433)|0;
  $103 = ($99*6270)|0;
  $104 = (($102) + ($103))|0;
  $105 = Math_imul($100, -15137)|0;
  $106 = (($102) + ($105))|0;
  $107 = (($83) + ($44))|0;
  $108 = $107 >> 11;
  HEAP32[$$0291300>>2] = $108;
  $109 = (($44) - ($83))|0;
  $110 = $109 >> 11;
  $111 = ((($$0291300)) + 352|0);
  HEAP32[$111>>2] = $110;
  $112 = (($104) + ($41))|0;
  $113 = $112 >> 11;
  $114 = ((($$0291300)) + 32|0);
  HEAP32[$114>>2] = $113;
  $115 = (($41) - ($104))|0;
  $116 = $115 >> 11;
  $117 = ((($$0291300)) + 320|0);
  HEAP32[$117>>2] = $116;
  $118 = (($89) + ($48))|0;
  $119 = $118 >> 11;
  $120 = ((($$0291300)) + 64|0);
  HEAP32[$120>>2] = $119;
  $121 = (($48) - ($89))|0;
  $122 = $121 >> 11;
  $123 = ((($$0291300)) + 288|0);
  HEAP32[$123>>2] = $122;
  $124 = (($93) + ($49))|0;
  $125 = $124 >> 11;
  $126 = ((($$0291300)) + 96|0);
  HEAP32[$126>>2] = $125;
  $127 = (($49) - ($93))|0;
  $128 = $127 >> 11;
  $129 = ((($$0291300)) + 256|0);
  HEAP32[$129>>2] = $128;
  $130 = (($106) + ($42))|0;
  $131 = $130 >> 11;
  $132 = ((($$0291300)) + 128|0);
  HEAP32[$132>>2] = $131;
  $133 = (($42) - ($106))|0;
  $134 = $133 >> 11;
  $135 = ((($$0291300)) + 224|0);
  HEAP32[$135>>2] = $134;
  $136 = (($98) + ($45))|0;
  $137 = $136 >> 11;
  $138 = ((($$0291300)) + 160|0);
  HEAP32[$138>>2] = $137;
  $139 = (($45) - ($98))|0;
  $140 = $139 >> 11;
  $141 = ((($$0291300)) + 192|0);
  HEAP32[$141>>2] = $140;
  $142 = (($$0301) + 1)|0;
  $143 = ((($$0294298)) + 2|0);
  $144 = ((($$0293299)) + 4|0);
  $145 = ((($$0291300)) + 4|0);
  $exitcond302 = ($142|0)==(8);
  if ($exitcond302) {
   break;
  } else {
   $$0291300 = $145;$$0293299 = $144;$$0294298 = $143;$$0301 = $142;
  }
 }
 $146 = ((($7)) + 128|0);
 $$1292296 = $5;$$1297 = 0;
 while(1) {
  $147 = (($3) + ($$1297<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + ($4)|0);
  $150 = HEAP32[$$1292296>>2]|0;
  $151 = $150 << 13;
  $152 = (($151) + 131072)|0;
  $153 = ((($$1292296)) + 16|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154*10033)|0;
  $156 = (($152) + ($155))|0;
  $157 = (($152) - ($155))|0;
  $158 = ((($$1292296)) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159*11190)|0;
  $161 = $159 << 13;
  $162 = ((($$1292296)) + 24|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $163 << 13;
  $165 = (($161) - ($164))|0;
  $166 = (($165) + ($152))|0;
  $167 = (($152) - ($165))|0;
  $168 = (($164) + ($160))|0;
  $169 = (($168) + ($156))|0;
  $170 = (($156) - ($168))|0;
  $171 = ($159*2998)|0;
  $172 = (($171) - ($164))|0;
  $173 = (($172) + ($157))|0;
  $174 = (($157) - ($172))|0;
  $175 = ((($$1292296)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($$1292296)) + 12|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($$1292296)) + 20|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($$1292296)) + 28|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ($178*10703)|0;
  $184 = Math_imul($178, -4433)|0;
  $185 = (($180) + ($176))|0;
  $186 = (($185) + ($182))|0;
  $187 = ($186*7053)|0;
  $188 = ($185*2139)|0;
  $189 = (($187) + ($188))|0;
  $190 = ($176*2295)|0;
  $191 = (($183) + ($190))|0;
  $192 = (($191) + ($189))|0;
  $193 = (($182) + ($180))|0;
  $194 = Math_imul($193, -8565)|0;
  $195 = Math_imul($180, -12112)|0;
  $196 = (($195) + ($184))|0;
  $197 = (($196) + ($194))|0;
  $198 = (($197) + ($189))|0;
  $199 = ($182*12998)|0;
  $200 = (($199) - ($183))|0;
  $201 = (($200) + ($187))|0;
  $202 = (($201) + ($194))|0;
  $203 = Math_imul($176, -5540)|0;
  $204 = (($184) + ($203))|0;
  $205 = Math_imul($182, -16244)|0;
  $206 = (($204) + ($205))|0;
  $207 = (($206) + ($187))|0;
  $208 = (($176) - ($182))|0;
  $209 = (($178) - ($180))|0;
  $210 = (($208) + ($209))|0;
  $211 = ($210*4433)|0;
  $212 = ($208*6270)|0;
  $213 = (($211) + ($212))|0;
  $214 = Math_imul($209, -15137)|0;
  $215 = (($211) + ($214))|0;
  $216 = (($192) + ($169))|0;
  $217 = $216 >>> 18;
  $218 = $217 & 1023;
  $219 = (($146) + ($218)|0);
  $220 = HEAP8[$219>>0]|0;
  HEAP8[$149>>0] = $220;
  $221 = (($169) - ($192))|0;
  $222 = $221 >>> 18;
  $223 = $222 & 1023;
  $224 = (($146) + ($223)|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = ((($149)) + 11|0);
  HEAP8[$226>>0] = $225;
  $227 = (($213) + ($166))|0;
  $228 = $227 >>> 18;
  $229 = $228 & 1023;
  $230 = (($146) + ($229)|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = ((($149)) + 1|0);
  HEAP8[$232>>0] = $231;
  $233 = (($166) - ($213))|0;
  $234 = $233 >>> 18;
  $235 = $234 & 1023;
  $236 = (($146) + ($235)|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = ((($149)) + 10|0);
  HEAP8[$238>>0] = $237;
  $239 = (($198) + ($173))|0;
  $240 = $239 >>> 18;
  $241 = $240 & 1023;
  $242 = (($146) + ($241)|0);
  $243 = HEAP8[$242>>0]|0;
  $244 = ((($149)) + 2|0);
  HEAP8[$244>>0] = $243;
  $245 = (($173) - ($198))|0;
  $246 = $245 >>> 18;
  $247 = $246 & 1023;
  $248 = (($146) + ($247)|0);
  $249 = HEAP8[$248>>0]|0;
  $250 = ((($149)) + 9|0);
  HEAP8[$250>>0] = $249;
  $251 = (($202) + ($174))|0;
  $252 = $251 >>> 18;
  $253 = $252 & 1023;
  $254 = (($146) + ($253)|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = ((($149)) + 3|0);
  HEAP8[$256>>0] = $255;
  $257 = (($174) - ($202))|0;
  $258 = $257 >>> 18;
  $259 = $258 & 1023;
  $260 = (($146) + ($259)|0);
  $261 = HEAP8[$260>>0]|0;
  $262 = ((($149)) + 8|0);
  HEAP8[$262>>0] = $261;
  $263 = (($215) + ($167))|0;
  $264 = $263 >>> 18;
  $265 = $264 & 1023;
  $266 = (($146) + ($265)|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = ((($149)) + 4|0);
  HEAP8[$268>>0] = $267;
  $269 = (($167) - ($215))|0;
  $270 = $269 >>> 18;
  $271 = $270 & 1023;
  $272 = (($146) + ($271)|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = ((($149)) + 7|0);
  HEAP8[$274>>0] = $273;
  $275 = (($207) + ($170))|0;
  $276 = $275 >>> 18;
  $277 = $276 & 1023;
  $278 = (($146) + ($277)|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = ((($149)) + 5|0);
  HEAP8[$280>>0] = $279;
  $281 = (($170) - ($207))|0;
  $282 = $281 >>> 18;
  $283 = $282 & 1023;
  $284 = (($146) + ($283)|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = ((($149)) + 6|0);
  HEAP8[$286>>0] = $285;
  $287 = ((($$1292296)) + 32|0);
  $288 = (($$1297) + 1)|0;
  $exitcond = ($288|0)==(12);
  if ($exitcond) {
   break;
  } else {
   $$1292296 = $287;$$1297 = $288;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_13x13($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0330339 = 0, $$0332338 = 0, $$0333337 = 0, $$0340 = 0, $$1331335 = 0, $$1336 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond341 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0330339 = $5;$$0332338 = $9;$$0333337 = $2;$$0340 = 0;
 while(1) {
  $10 = HEAP16[$$0333337>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0332338>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0333337)) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0332338)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ((($$0333337)) + 64|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ((($$0332338)) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $24)|0;
  $28 = ((($$0333337)) + 96|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0332338)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $30)|0;
  $34 = (($33) + ($27))|0;
  $35 = (($27) - ($33))|0;
  $36 = ($34*9465)|0;
  $37 = ($35*793)|0;
  $38 = (($37) + ($15))|0;
  $39 = ($21*11249)|0;
  $40 = (($36) + ($39))|0;
  $41 = (($40) + ($38))|0;
  $42 = ($21*4108)|0;
  $43 = (($42) - ($36))|0;
  $44 = (($43) + ($38))|0;
  $45 = ($34*2592)|0;
  $46 = ($35*3989)|0;
  $47 = (($46) + ($15))|0;
  $48 = ($21*8672)|0;
  $49 = (($48) - ($45))|0;
  $50 = (($49) + ($47))|0;
  $51 = Math_imul($21, -10258)|0;
  $52 = (($45) + ($51))|0;
  $53 = (($52) + ($47))|0;
  $54 = ($34*3570)|0;
  $55 = Math_imul($35, -7678)|0;
  $56 = (($15) + ($55))|0;
  $57 = Math_imul($21, -1396)|0;
  $58 = (($57) - ($54))|0;
  $59 = (($58) + ($56))|0;
  $60 = Math_imul($21, -6581)|0;
  $61 = (($54) + ($60))|0;
  $62 = (($61) + ($56))|0;
  $63 = (($35) - ($21))|0;
  $64 = ($63*11585)|0;
  $65 = (($64) + ($15))|0;
  $66 = ((($$0333337)) + 16|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = ((($$0332338)) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = Math_imul($70, $68)|0;
  $72 = ((($$0333337)) + 48|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = ((($$0332338)) + 96|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = Math_imul($76, $74)|0;
  $78 = ((($$0333337)) + 80|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79 << 16 >> 16;
  $81 = ((($$0332338)) + 160|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($82, $80)|0;
  $84 = ((($$0333337)) + 112|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85 << 16 >> 16;
  $87 = ((($$0332338)) + 224|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = Math_imul($88, $86)|0;
  $90 = (($77) + ($71))|0;
  $91 = ($90*10832)|0;
  $92 = (($83) + ($71))|0;
  $93 = ($92*9534)|0;
  $94 = (($89) + ($71))|0;
  $95 = ($94*7682)|0;
  $96 = Math_imul($71, -16549)|0;
  $97 = (($91) + ($96))|0;
  $98 = (($97) + ($93))|0;
  $99 = (($98) + ($95))|0;
  $100 = (($83) + ($77))|0;
  $101 = Math_imul($100, -2773)|0;
  $102 = ($77*6859)|0;
  $103 = Math_imul($83, -12879)|0;
  $104 = (($101) + ($103))|0;
  $105 = (($104) + ($93))|0;
  $106 = (($89) + ($77))|0;
  $107 = Math_imul($106, -9534)|0;
  $108 = (($91) + ($102))|0;
  $109 = (($108) + ($101))|0;
  $110 = (($109) + ($107))|0;
  $111 = ($89*18068)|0;
  $112 = (($107) + ($111))|0;
  $113 = (($112) + ($95))|0;
  $114 = (($89) + ($83))|0;
  $115 = Math_imul($114, -5384)|0;
  $116 = (($105) + ($115))|0;
  $117 = (($113) + ($115))|0;
  $118 = ($94*2773)|0;
  $119 = ($71*2611)|0;
  $120 = Math_imul($77, -3818)|0;
  $121 = (($83) - ($77))|0;
  $122 = ($121*7682)|0;
  $123 = (($120) + ($119))|0;
  $124 = (($123) + ($122))|0;
  $125 = (($124) + ($118))|0;
  $126 = ($83*3150)|0;
  $127 = (($122) + ($126))|0;
  $128 = Math_imul($89, -14273)|0;
  $129 = (($127) + ($128))|0;
  $130 = (($129) + ($118))|0;
  $131 = (($99) + ($41))|0;
  $132 = $131 >> 11;
  HEAP32[$$0330339>>2] = $132;
  $133 = (($41) - ($99))|0;
  $134 = $133 >> 11;
  $135 = ((($$0330339)) + 384|0);
  HEAP32[$135>>2] = $134;
  $136 = (($110) + ($50))|0;
  $137 = $136 >> 11;
  $138 = ((($$0330339)) + 32|0);
  HEAP32[$138>>2] = $137;
  $139 = (($50) - ($110))|0;
  $140 = $139 >> 11;
  $141 = ((($$0330339)) + 352|0);
  HEAP32[$141>>2] = $140;
  $142 = (($116) + ($44))|0;
  $143 = $142 >> 11;
  $144 = ((($$0330339)) + 64|0);
  HEAP32[$144>>2] = $143;
  $145 = (($44) - ($116))|0;
  $146 = $145 >> 11;
  $147 = ((($$0330339)) + 320|0);
  HEAP32[$147>>2] = $146;
  $148 = (($117) + ($59))|0;
  $149 = $148 >> 11;
  $150 = ((($$0330339)) + 96|0);
  HEAP32[$150>>2] = $149;
  $151 = (($59) - ($117))|0;
  $152 = $151 >> 11;
  $153 = ((($$0330339)) + 288|0);
  HEAP32[$153>>2] = $152;
  $154 = (($125) + ($62))|0;
  $155 = $154 >> 11;
  $156 = ((($$0330339)) + 128|0);
  HEAP32[$156>>2] = $155;
  $157 = (($62) - ($125))|0;
  $158 = $157 >> 11;
  $159 = ((($$0330339)) + 256|0);
  HEAP32[$159>>2] = $158;
  $160 = (($130) + ($53))|0;
  $161 = $160 >> 11;
  $162 = ((($$0330339)) + 160|0);
  HEAP32[$162>>2] = $161;
  $163 = (($53) - ($130))|0;
  $164 = $163 >> 11;
  $165 = ((($$0330339)) + 224|0);
  HEAP32[$165>>2] = $164;
  $166 = $65 >> 11;
  $167 = ((($$0330339)) + 192|0);
  HEAP32[$167>>2] = $166;
  $168 = (($$0340) + 1)|0;
  $169 = ((($$0333337)) + 2|0);
  $170 = ((($$0332338)) + 4|0);
  $171 = ((($$0330339)) + 4|0);
  $exitcond341 = ($168|0)==(8);
  if ($exitcond341) {
   break;
  } else {
   $$0330339 = $171;$$0332338 = $170;$$0333337 = $169;$$0340 = $168;
  }
 }
 $172 = ((($7)) + 128|0);
 $$1331335 = $5;$$1336 = 0;
 while(1) {
  $173 = (($3) + ($$1336<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($174) + ($4)|0);
  $176 = HEAP32[$$1331335>>2]|0;
  $177 = $176 << 13;
  $178 = (($177) + 131072)|0;
  $179 = ((($$1331335)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($$1331335)) + 16|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($$1331335)) + 24|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + ($182))|0;
  $186 = (($182) - ($184))|0;
  $187 = ($185*9465)|0;
  $188 = ($186*793)|0;
  $189 = (($188) + ($178))|0;
  $190 = ($180*11249)|0;
  $191 = (($187) + ($190))|0;
  $192 = (($191) + ($189))|0;
  $193 = ($180*4108)|0;
  $194 = (($193) - ($187))|0;
  $195 = (($194) + ($189))|0;
  $196 = ($185*2592)|0;
  $197 = ($186*3989)|0;
  $198 = (($197) + ($178))|0;
  $199 = ($180*8672)|0;
  $200 = (($199) - ($196))|0;
  $201 = (($200) + ($198))|0;
  $202 = Math_imul($180, -10258)|0;
  $203 = (($196) + ($202))|0;
  $204 = (($203) + ($198))|0;
  $205 = ($185*3570)|0;
  $206 = Math_imul($186, -7678)|0;
  $207 = (($178) + ($206))|0;
  $208 = Math_imul($180, -1396)|0;
  $209 = (($208) - ($205))|0;
  $210 = (($209) + ($207))|0;
  $211 = Math_imul($180, -6581)|0;
  $212 = (($205) + ($211))|0;
  $213 = (($212) + ($207))|0;
  $214 = (($186) - ($180))|0;
  $215 = ($214*11585)|0;
  $216 = (($215) + ($178))|0;
  $217 = ((($$1331335)) + 4|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ((($$1331335)) + 12|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ((($$1331335)) + 20|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($$1331335)) + 28|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($220) + ($218))|0;
  $226 = ($225*10832)|0;
  $227 = (($222) + ($218))|0;
  $228 = ($227*9534)|0;
  $229 = (($224) + ($218))|0;
  $230 = ($229*7682)|0;
  $231 = Math_imul($218, -16549)|0;
  $232 = (($226) + ($231))|0;
  $233 = (($232) + ($228))|0;
  $234 = (($233) + ($230))|0;
  $235 = (($222) + ($220))|0;
  $236 = Math_imul($235, -2773)|0;
  $237 = ($220*6859)|0;
  $238 = Math_imul($222, -12879)|0;
  $239 = (($236) + ($238))|0;
  $240 = (($239) + ($228))|0;
  $241 = (($224) + ($220))|0;
  $242 = Math_imul($241, -9534)|0;
  $243 = (($226) + ($237))|0;
  $244 = (($243) + ($236))|0;
  $245 = (($244) + ($242))|0;
  $246 = ($224*18068)|0;
  $247 = (($242) + ($246))|0;
  $248 = (($247) + ($230))|0;
  $249 = (($224) + ($222))|0;
  $250 = Math_imul($249, -5384)|0;
  $251 = (($240) + ($250))|0;
  $252 = (($248) + ($250))|0;
  $253 = ($229*2773)|0;
  $254 = ($218*2611)|0;
  $255 = Math_imul($220, -3818)|0;
  $256 = (($222) - ($220))|0;
  $257 = ($256*7682)|0;
  $258 = (($255) + ($254))|0;
  $259 = (($258) + ($257))|0;
  $260 = (($259) + ($253))|0;
  $261 = ($222*3150)|0;
  $262 = (($257) + ($261))|0;
  $263 = Math_imul($224, -14273)|0;
  $264 = (($262) + ($263))|0;
  $265 = (($264) + ($253))|0;
  $266 = (($234) + ($192))|0;
  $267 = $266 >>> 18;
  $268 = $267 & 1023;
  $269 = (($172) + ($268)|0);
  $270 = HEAP8[$269>>0]|0;
  HEAP8[$175>>0] = $270;
  $271 = (($192) - ($234))|0;
  $272 = $271 >>> 18;
  $273 = $272 & 1023;
  $274 = (($172) + ($273)|0);
  $275 = HEAP8[$274>>0]|0;
  $276 = ((($175)) + 12|0);
  HEAP8[$276>>0] = $275;
  $277 = (($245) + ($201))|0;
  $278 = $277 >>> 18;
  $279 = $278 & 1023;
  $280 = (($172) + ($279)|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = ((($175)) + 1|0);
  HEAP8[$282>>0] = $281;
  $283 = (($201) - ($245))|0;
  $284 = $283 >>> 18;
  $285 = $284 & 1023;
  $286 = (($172) + ($285)|0);
  $287 = HEAP8[$286>>0]|0;
  $288 = ((($175)) + 11|0);
  HEAP8[$288>>0] = $287;
  $289 = (($251) + ($195))|0;
  $290 = $289 >>> 18;
  $291 = $290 & 1023;
  $292 = (($172) + ($291)|0);
  $293 = HEAP8[$292>>0]|0;
  $294 = ((($175)) + 2|0);
  HEAP8[$294>>0] = $293;
  $295 = (($195) - ($251))|0;
  $296 = $295 >>> 18;
  $297 = $296 & 1023;
  $298 = (($172) + ($297)|0);
  $299 = HEAP8[$298>>0]|0;
  $300 = ((($175)) + 10|0);
  HEAP8[$300>>0] = $299;
  $301 = (($252) + ($210))|0;
  $302 = $301 >>> 18;
  $303 = $302 & 1023;
  $304 = (($172) + ($303)|0);
  $305 = HEAP8[$304>>0]|0;
  $306 = ((($175)) + 3|0);
  HEAP8[$306>>0] = $305;
  $307 = (($210) - ($252))|0;
  $308 = $307 >>> 18;
  $309 = $308 & 1023;
  $310 = (($172) + ($309)|0);
  $311 = HEAP8[$310>>0]|0;
  $312 = ((($175)) + 9|0);
  HEAP8[$312>>0] = $311;
  $313 = (($260) + ($213))|0;
  $314 = $313 >>> 18;
  $315 = $314 & 1023;
  $316 = (($172) + ($315)|0);
  $317 = HEAP8[$316>>0]|0;
  $318 = ((($175)) + 4|0);
  HEAP8[$318>>0] = $317;
  $319 = (($213) - ($260))|0;
  $320 = $319 >>> 18;
  $321 = $320 & 1023;
  $322 = (($172) + ($321)|0);
  $323 = HEAP8[$322>>0]|0;
  $324 = ((($175)) + 8|0);
  HEAP8[$324>>0] = $323;
  $325 = (($265) + ($204))|0;
  $326 = $325 >>> 18;
  $327 = $326 & 1023;
  $328 = (($172) + ($327)|0);
  $329 = HEAP8[$328>>0]|0;
  $330 = ((($175)) + 5|0);
  HEAP8[$330>>0] = $329;
  $331 = (($204) - ($265))|0;
  $332 = $331 >>> 18;
  $333 = $332 & 1023;
  $334 = (($172) + ($333)|0);
  $335 = HEAP8[$334>>0]|0;
  $336 = ((($175)) + 7|0);
  HEAP8[$336>>0] = $335;
  $337 = $216 >>> 18;
  $338 = $337 & 1023;
  $339 = (($172) + ($338)|0);
  $340 = HEAP8[$339>>0]|0;
  $341 = ((($175)) + 6|0);
  HEAP8[$341>>0] = $340;
  $342 = ((($$1331335)) + 32|0);
  $343 = (($$1336) + 1)|0;
  $exitcond = ($343|0)==(13);
  if ($exitcond) {
   break;
  } else {
   $$1331335 = $342;$$1336 = $343;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_14x14($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0332340 = 0, $$0334339 = 0, $$0335338 = 0, $$0341 = 0, $$1333336 = 0, $$1337 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond342 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0332340 = $5;$$0334339 = $9;$$0335338 = $2;$$0341 = 0;
 while(1) {
  $10 = HEAP16[$$0335338>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0334339>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0335338)) + 64|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0334339)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ($21*10438)|0;
  $23 = ($21*2578)|0;
  $24 = (($22) + ($15))|0;
  $25 = (($23) + ($15))|0;
  $26 = Math_imul($21, -7223)|0;
  $27 = (($26) + ($15))|0;
  $28 = Math_imul($21, -11586)|0;
  $29 = (($28) + ($15))|0;
  $30 = $29 >> 11;
  $31 = ((($$0335338)) + 32|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = ((($$0334339)) + 64|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = Math_imul($35, $33)|0;
  $37 = ((($$0335338)) + 96|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ((($$0334339)) + 192|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = Math_imul($41, $39)|0;
  $43 = (($42) + ($36))|0;
  $44 = ($43*9058)|0;
  $45 = ($36*2237)|0;
  $46 = (($44) + ($45))|0;
  $47 = Math_imul($42, -14084)|0;
  $48 = (($44) + ($47))|0;
  $49 = ($36*5027)|0;
  $50 = Math_imul($42, -11295)|0;
  $51 = (($50) + ($49))|0;
  $52 = (($46) + ($24))|0;
  $53 = (($24) - ($46))|0;
  $54 = (($48) + ($25))|0;
  $55 = (($25) - ($48))|0;
  $56 = (($51) + ($27))|0;
  $57 = (($27) - ($51))|0;
  $58 = ((($$0335338)) + 16|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ((($$0334339)) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = Math_imul($62, $60)|0;
  $64 = ((($$0335338)) + 48|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65 << 16 >> 16;
  $67 = ((($$0334339)) + 96|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = Math_imul($68, $66)|0;
  $70 = ((($$0335338)) + 80|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = ((($$0334339)) + 160|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($74, $72)|0;
  $76 = ((($$0335338)) + 112|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77 << 16 >> 16;
  $79 = ((($$0334339)) + 224|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = Math_imul($80, $78)|0;
  $82 = $81 << 13;
  $83 = (($75) + ($63))|0;
  $84 = (($69) + ($63))|0;
  $85 = ($84*10935)|0;
  $86 = ($83*9810)|0;
  $87 = Math_imul($63, -9232)|0;
  $88 = (($85) + ($87))|0;
  $89 = (($88) + ($86))|0;
  $90 = (($89) + ($82))|0;
  $91 = ($83*6164)|0;
  $92 = Math_imul($63, -8693)|0;
  $93 = (($91) + ($92))|0;
  $94 = (($63) - ($69))|0;
  $95 = ($94*3826)|0;
  $96 = (($95) - ($82))|0;
  $97 = (($93) + ($96))|0;
  $98 = (($75) + ($69))|0;
  $99 = Math_imul($98, -1297)|0;
  $100 = (($99) - ($82))|0;
  $101 = Math_imul($69, -3474)|0;
  $102 = (($85) + ($101))|0;
  $103 = (($102) + ($100))|0;
  $104 = Math_imul($75, -19447)|0;
  $105 = (($86) + ($104))|0;
  $106 = (($105) + ($100))|0;
  $107 = (($75) - ($69))|0;
  $108 = ($107*11512)|0;
  $109 = Math_imul($75, -13850)|0;
  $110 = (($108) + ($109))|0;
  $111 = (($110) + ($91))|0;
  $112 = (($111) + ($82))|0;
  $113 = ($69*5529)|0;
  $114 = (($108) + ($113))|0;
  $115 = (($114) + ($96))|0;
  $116 = (($94) - ($75))|0;
  $117 = (($116) + ($81))|0;
  $118 = $117 << 2;
  $119 = (($90) + ($52))|0;
  $120 = $119 >> 11;
  HEAP32[$$0332340>>2] = $120;
  $121 = (($52) - ($90))|0;
  $122 = $121 >> 11;
  $123 = ((($$0332340)) + 416|0);
  HEAP32[$123>>2] = $122;
  $124 = (($103) + ($54))|0;
  $125 = $124 >> 11;
  $126 = ((($$0332340)) + 32|0);
  HEAP32[$126>>2] = $125;
  $127 = (($54) - ($103))|0;
  $128 = $127 >> 11;
  $129 = ((($$0332340)) + 384|0);
  HEAP32[$129>>2] = $128;
  $130 = (($106) + ($56))|0;
  $131 = $130 >> 11;
  $132 = ((($$0332340)) + 64|0);
  HEAP32[$132>>2] = $131;
  $133 = (($56) - ($106))|0;
  $134 = $133 >> 11;
  $135 = ((($$0332340)) + 352|0);
  HEAP32[$135>>2] = $134;
  $136 = (($118) + ($30))|0;
  $137 = ((($$0332340)) + 96|0);
  HEAP32[$137>>2] = $136;
  $138 = (($30) - ($118))|0;
  $139 = ((($$0332340)) + 320|0);
  HEAP32[$139>>2] = $138;
  $140 = (($112) + ($57))|0;
  $141 = $140 >> 11;
  $142 = ((($$0332340)) + 128|0);
  HEAP32[$142>>2] = $141;
  $143 = (($57) - ($112))|0;
  $144 = $143 >> 11;
  $145 = ((($$0332340)) + 288|0);
  HEAP32[$145>>2] = $144;
  $146 = (($115) + ($55))|0;
  $147 = $146 >> 11;
  $148 = ((($$0332340)) + 160|0);
  HEAP32[$148>>2] = $147;
  $149 = (($55) - ($115))|0;
  $150 = $149 >> 11;
  $151 = ((($$0332340)) + 256|0);
  HEAP32[$151>>2] = $150;
  $152 = (($97) + ($53))|0;
  $153 = $152 >> 11;
  $154 = ((($$0332340)) + 192|0);
  HEAP32[$154>>2] = $153;
  $155 = (($53) - ($97))|0;
  $156 = $155 >> 11;
  $157 = ((($$0332340)) + 224|0);
  HEAP32[$157>>2] = $156;
  $158 = (($$0341) + 1)|0;
  $159 = ((($$0335338)) + 2|0);
  $160 = ((($$0334339)) + 4|0);
  $161 = ((($$0332340)) + 4|0);
  $exitcond342 = ($158|0)==(8);
  if ($exitcond342) {
   break;
  } else {
   $$0332340 = $161;$$0334339 = $160;$$0335338 = $159;$$0341 = $158;
  }
 }
 $162 = ((($7)) + 128|0);
 $$1333336 = $5;$$1337 = 0;
 while(1) {
  $163 = (($3) + ($$1337<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + ($4)|0);
  $166 = HEAP32[$$1333336>>2]|0;
  $167 = $166 << 13;
  $168 = (($167) + 131072)|0;
  $169 = ((($$1333336)) + 16|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170*10438)|0;
  $172 = ($170*2578)|0;
  $173 = (($168) + ($171))|0;
  $174 = (($168) + ($172))|0;
  $175 = Math_imul($170, -7223)|0;
  $176 = (($168) + ($175))|0;
  $177 = Math_imul($170, -11586)|0;
  $178 = (($168) + ($177))|0;
  $179 = ((($$1333336)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($$1333336)) + 24|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($182) + ($180))|0;
  $184 = ($183*9058)|0;
  $185 = ($180*2237)|0;
  $186 = (($184) + ($185))|0;
  $187 = Math_imul($182, -14084)|0;
  $188 = (($184) + ($187))|0;
  $189 = ($180*5027)|0;
  $190 = Math_imul($182, -11295)|0;
  $191 = (($190) + ($189))|0;
  $192 = (($186) + ($173))|0;
  $193 = (($173) - ($186))|0;
  $194 = (($188) + ($174))|0;
  $195 = (($174) - ($188))|0;
  $196 = (($191) + ($176))|0;
  $197 = (($176) - ($191))|0;
  $198 = ((($$1333336)) + 4|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = ((($$1333336)) + 12|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ((($$1333336)) + 20|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($$1333336)) + 28|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 << 13;
  $207 = (($203) + ($199))|0;
  $208 = (($201) + ($199))|0;
  $209 = ($208*10935)|0;
  $210 = ($207*9810)|0;
  $211 = Math_imul($199, -9232)|0;
  $212 = (($209) + ($211))|0;
  $213 = (($212) + ($210))|0;
  $214 = (($213) + ($206))|0;
  $215 = ($207*6164)|0;
  $216 = Math_imul($199, -8693)|0;
  $217 = (($215) + ($216))|0;
  $218 = (($199) - ($201))|0;
  $219 = ($218*3826)|0;
  $220 = (($219) - ($206))|0;
  $221 = (($217) + ($220))|0;
  $222 = (($203) + ($201))|0;
  $223 = Math_imul($222, -1297)|0;
  $224 = (($223) - ($206))|0;
  $225 = Math_imul($201, -3474)|0;
  $226 = (($209) + ($225))|0;
  $227 = (($226) + ($224))|0;
  $228 = Math_imul($203, -19447)|0;
  $229 = (($210) + ($228))|0;
  $230 = (($229) + ($224))|0;
  $231 = (($203) - ($201))|0;
  $232 = ($231*11512)|0;
  $233 = Math_imul($203, -13850)|0;
  $234 = (($206) + ($233))|0;
  $235 = (($234) + ($232))|0;
  $236 = (($235) + ($215))|0;
  $237 = ($201*5529)|0;
  $238 = (($232) + ($237))|0;
  $239 = (($238) + ($220))|0;
  $240 = (($218) - ($203))|0;
  $241 = $240 << 13;
  $242 = (($241) + ($206))|0;
  $243 = (($214) + ($192))|0;
  $244 = $243 >>> 18;
  $245 = $244 & 1023;
  $246 = (($162) + ($245)|0);
  $247 = HEAP8[$246>>0]|0;
  HEAP8[$165>>0] = $247;
  $248 = (($192) - ($214))|0;
  $249 = $248 >>> 18;
  $250 = $249 & 1023;
  $251 = (($162) + ($250)|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = ((($165)) + 13|0);
  HEAP8[$253>>0] = $252;
  $254 = (($227) + ($194))|0;
  $255 = $254 >>> 18;
  $256 = $255 & 1023;
  $257 = (($162) + ($256)|0);
  $258 = HEAP8[$257>>0]|0;
  $259 = ((($165)) + 1|0);
  HEAP8[$259>>0] = $258;
  $260 = (($194) - ($227))|0;
  $261 = $260 >>> 18;
  $262 = $261 & 1023;
  $263 = (($162) + ($262)|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = ((($165)) + 12|0);
  HEAP8[$265>>0] = $264;
  $266 = (($230) + ($196))|0;
  $267 = $266 >>> 18;
  $268 = $267 & 1023;
  $269 = (($162) + ($268)|0);
  $270 = HEAP8[$269>>0]|0;
  $271 = ((($165)) + 2|0);
  HEAP8[$271>>0] = $270;
  $272 = (($196) - ($230))|0;
  $273 = $272 >>> 18;
  $274 = $273 & 1023;
  $275 = (($162) + ($274)|0);
  $276 = HEAP8[$275>>0]|0;
  $277 = ((($165)) + 11|0);
  HEAP8[$277>>0] = $276;
  $278 = (($242) + ($178))|0;
  $279 = $278 >>> 18;
  $280 = $279 & 1023;
  $281 = (($162) + ($280)|0);
  $282 = HEAP8[$281>>0]|0;
  $283 = ((($165)) + 3|0);
  HEAP8[$283>>0] = $282;
  $284 = (($178) - ($242))|0;
  $285 = $284 >>> 18;
  $286 = $285 & 1023;
  $287 = (($162) + ($286)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = ((($165)) + 10|0);
  HEAP8[$289>>0] = $288;
  $290 = (($236) + ($197))|0;
  $291 = $290 >>> 18;
  $292 = $291 & 1023;
  $293 = (($162) + ($292)|0);
  $294 = HEAP8[$293>>0]|0;
  $295 = ((($165)) + 4|0);
  HEAP8[$295>>0] = $294;
  $296 = (($197) - ($236))|0;
  $297 = $296 >>> 18;
  $298 = $297 & 1023;
  $299 = (($162) + ($298)|0);
  $300 = HEAP8[$299>>0]|0;
  $301 = ((($165)) + 9|0);
  HEAP8[$301>>0] = $300;
  $302 = (($239) + ($195))|0;
  $303 = $302 >>> 18;
  $304 = $303 & 1023;
  $305 = (($162) + ($304)|0);
  $306 = HEAP8[$305>>0]|0;
  $307 = ((($165)) + 5|0);
  HEAP8[$307>>0] = $306;
  $308 = (($195) - ($239))|0;
  $309 = $308 >>> 18;
  $310 = $309 & 1023;
  $311 = (($162) + ($310)|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = ((($165)) + 8|0);
  HEAP8[$313>>0] = $312;
  $314 = (($221) + ($193))|0;
  $315 = $314 >>> 18;
  $316 = $315 & 1023;
  $317 = (($162) + ($316)|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = ((($165)) + 6|0);
  HEAP8[$319>>0] = $318;
  $320 = (($193) - ($221))|0;
  $321 = $320 >>> 18;
  $322 = $321 & 1023;
  $323 = (($162) + ($322)|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = ((($165)) + 7|0);
  HEAP8[$325>>0] = $324;
  $326 = ((($$1333336)) + 32|0);
  $327 = (($$1337) + 1)|0;
  $exitcond = ($327|0)==(14);
  if ($exitcond) {
   break;
  } else {
   $$1333336 = $326;$$1337 = $327;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_15x15($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0352372 = 0, $$0354371 = 0, $$0355370 = 0, $$0373 = 0, $$1353368 = 0, $$1369 = 0, $$neg356 = 0, $$neg362 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond374 = 0, $factor = 0, $factor365 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0352372 = $5;$$0354371 = $9;$$0355370 = $2;$$0373 = 0;
 while(1) {
  $10 = HEAP16[$$0355370>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0354371>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0355370)) + 32|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0354371)) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ((($$0355370)) + 64|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ((($$0354371)) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $24)|0;
  $28 = ((($$0355370)) + 96|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0354371)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $30)|0;
  $34 = ($33*9373)|0;
  $35 = Math_imul($33, -3580)|0;
  $36 = (($35) + ($15))|0;
  $37 = (($34) + ($15))|0;
  $38 = Math_imul($33, -11586)|0;
  $39 = (($38) + ($15))|0;
  $40 = (($21) - ($27))|0;
  $41 = (($27) + ($21))|0;
  $42 = ($41*10958)|0;
  $43 = ($40*374)|0;
  $44 = ($21*11795)|0;
  $45 = (($43) + ($42))|0;
  $46 = (($45) + ($37))|0;
  $47 = (($44) - ($42))|0;
  $48 = (($47) + ($43))|0;
  $49 = (($48) + ($36))|0;
  $50 = ($41*4482)|0;
  $$neg362 = Math_imul($40, -3271)|0;
  $51 = (($37) - ($50))|0;
  $52 = (($51) + ($$neg362))|0;
  $53 = (($50) - ($44))|0;
  $54 = (($53) + ($$neg362))|0;
  $55 = (($54) + ($36))|0;
  $56 = ($41*6476)|0;
  $57 = ($40*2896)|0;
  $58 = (($57) + ($56))|0;
  $59 = (($58) + ($36))|0;
  $60 = (($37) - ($56))|0;
  $61 = (($60) + ($57))|0;
  $62 = ($40*5792)|0;
  $63 = (($39) + ($62))|0;
  $factor365 = Math_imul($40, -11584)|0;
  $64 = (($factor365) + ($39))|0;
  $65 = ((($$0355370)) + 16|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = ((($$0354371)) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = Math_imul($69, $67)|0;
  $71 = ((($$0355370)) + 48|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = ((($$0354371)) + 96|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = Math_imul($75, $73)|0;
  $77 = ((($$0355370)) + 80|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = ((($$0354371)) + 160|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79*10033)|0;
  $83 = Math_imul($82, $81)|0;
  $84 = ((($$0355370)) + 112|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85 << 16 >> 16;
  $87 = ((($$0354371)) + 224|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = Math_imul($88, $86)|0;
  $90 = (($76) - ($89))|0;
  $91 = (($90) + ($70))|0;
  $92 = ($91*6810)|0;
  $93 = ($70*4209)|0;
  $94 = (($92) + ($93))|0;
  $95 = Math_imul($90, -17828)|0;
  $96 = (($92) + ($95))|0;
  $97 = Math_imul($76, -6810)|0;
  $98 = Math_imul($76, -11018)|0;
  $99 = (($70) - ($89))|0;
  $100 = ($99*11522)|0;
  $101 = (($100) + ($83))|0;
  $102 = ($89*20131)|0;
  $103 = (($102) - ($98))|0;
  $104 = (($103) + ($101))|0;
  $105 = Math_imul($70, -9113)|0;
  $106 = (($97) + ($105))|0;
  $107 = (($106) + ($101))|0;
  $108 = ($99*10033)|0;
  $109 = (($108) - ($83))|0;
  $110 = (($89) + ($70))|0;
  $111 = ($110*4712)|0;
  $112 = ($70*3897)|0;
  $113 = (($97) + ($112))|0;
  $114 = (($113) - ($83))|0;
  $115 = (($114) + ($111))|0;
  $116 = Math_imul($89, -7121)|0;
  $117 = (($83) + ($98))|0;
  $118 = (($117) + ($116))|0;
  $119 = (($118) + ($111))|0;
  $120 = (($104) + ($46))|0;
  $121 = $120 >> 11;
  HEAP32[$$0352372>>2] = $121;
  $122 = (($46) - ($104))|0;
  $123 = $122 >> 11;
  $124 = ((($$0352372)) + 448|0);
  HEAP32[$124>>2] = $123;
  $125 = (($94) + ($59))|0;
  $126 = $125 >> 11;
  $127 = ((($$0352372)) + 32|0);
  HEAP32[$127>>2] = $126;
  $128 = (($59) - ($94))|0;
  $129 = $128 >> 11;
  $130 = ((($$0352372)) + 416|0);
  HEAP32[$130>>2] = $129;
  $131 = (($109) + ($63))|0;
  $132 = $131 >> 11;
  $133 = ((($$0352372)) + 64|0);
  HEAP32[$133>>2] = $132;
  $134 = (($63) - ($109))|0;
  $135 = $134 >> 11;
  $136 = ((($$0352372)) + 384|0);
  HEAP32[$136>>2] = $135;
  $137 = (($115) + ($49))|0;
  $138 = $137 >> 11;
  $139 = ((($$0352372)) + 96|0);
  HEAP32[$139>>2] = $138;
  $140 = (($49) - ($115))|0;
  $141 = $140 >> 11;
  $142 = ((($$0352372)) + 352|0);
  HEAP32[$142>>2] = $141;
  $143 = (($96) + ($61))|0;
  $144 = $143 >> 11;
  $145 = ((($$0352372)) + 128|0);
  HEAP32[$145>>2] = $144;
  $146 = (($61) - ($96))|0;
  $147 = $146 >> 11;
  $148 = ((($$0352372)) + 320|0);
  HEAP32[$148>>2] = $147;
  $149 = (($119) + ($52))|0;
  $150 = $149 >> 11;
  $151 = ((($$0352372)) + 160|0);
  HEAP32[$151>>2] = $150;
  $152 = (($52) - ($119))|0;
  $153 = $152 >> 11;
  $154 = ((($$0352372)) + 288|0);
  HEAP32[$154>>2] = $153;
  $155 = (($107) + ($55))|0;
  $156 = $155 >> 11;
  $157 = ((($$0352372)) + 192|0);
  HEAP32[$157>>2] = $156;
  $158 = (($55) - ($107))|0;
  $159 = $158 >> 11;
  $160 = ((($$0352372)) + 256|0);
  HEAP32[$160>>2] = $159;
  $161 = $64 >> 11;
  $162 = ((($$0352372)) + 224|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$0373) + 1)|0;
  $164 = ((($$0355370)) + 2|0);
  $165 = ((($$0354371)) + 4|0);
  $166 = ((($$0352372)) + 4|0);
  $exitcond374 = ($163|0)==(8);
  if ($exitcond374) {
   break;
  } else {
   $$0352372 = $166;$$0354371 = $165;$$0355370 = $164;$$0373 = $163;
  }
 }
 $167 = ((($7)) + 128|0);
 $$1353368 = $5;$$1369 = 0;
 while(1) {
  $168 = (($3) + ($$1369<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + ($4)|0);
  $171 = HEAP32[$$1353368>>2]|0;
  $172 = $171 << 13;
  $173 = (($172) + 131072)|0;
  $174 = ((($$1353368)) + 8|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($$1353368)) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($$1353368)) + 24|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179*9373)|0;
  $181 = Math_imul($179, -3580)|0;
  $182 = (($181) + ($173))|0;
  $183 = (($180) + ($173))|0;
  $184 = Math_imul($179, -11586)|0;
  $185 = (($184) + ($173))|0;
  $186 = (($175) - ($177))|0;
  $187 = (($177) + ($175))|0;
  $188 = ($187*10958)|0;
  $189 = ($186*374)|0;
  $190 = ($175*11795)|0;
  $191 = (($189) + ($188))|0;
  $192 = (($191) + ($183))|0;
  $193 = (($190) - ($188))|0;
  $194 = (($193) + ($189))|0;
  $195 = (($194) + ($182))|0;
  $196 = ($187*4482)|0;
  $$neg356 = Math_imul($186, -3271)|0;
  $197 = (($183) - ($196))|0;
  $198 = (($197) + ($$neg356))|0;
  $199 = (($196) - ($190))|0;
  $200 = (($199) + ($$neg356))|0;
  $201 = (($200) + ($182))|0;
  $202 = ($187*6476)|0;
  $203 = ($186*2896)|0;
  $204 = (($203) + ($202))|0;
  $205 = (($204) + ($182))|0;
  $206 = (($183) - ($202))|0;
  $207 = (($206) + ($203))|0;
  $208 = ($186*5792)|0;
  $209 = (($185) + ($208))|0;
  $factor = Math_imul($186, -11584)|0;
  $210 = (($factor) + ($185))|0;
  $211 = ((($$1353368)) + 4|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($$1353368)) + 12|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($$1353368)) + 20|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ($216*10033)|0;
  $218 = ((($$1353368)) + 28|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($214) - ($219))|0;
  $221 = (($220) + ($212))|0;
  $222 = ($221*6810)|0;
  $223 = ($212*4209)|0;
  $224 = (($222) + ($223))|0;
  $225 = Math_imul($220, -17828)|0;
  $226 = (($222) + ($225))|0;
  $227 = Math_imul($214, -6810)|0;
  $228 = Math_imul($214, -11018)|0;
  $229 = (($212) - ($219))|0;
  $230 = ($229*11522)|0;
  $231 = (($230) + ($217))|0;
  $232 = ($219*20131)|0;
  $233 = (($232) - ($228))|0;
  $234 = (($233) + ($231))|0;
  $235 = Math_imul($212, -9113)|0;
  $236 = (($227) + ($235))|0;
  $237 = (($236) + ($231))|0;
  $238 = ($229*10033)|0;
  $239 = (($238) - ($217))|0;
  $240 = (($219) + ($212))|0;
  $241 = ($240*4712)|0;
  $242 = ($212*3897)|0;
  $243 = (($227) + ($242))|0;
  $244 = (($243) - ($217))|0;
  $245 = (($244) + ($241))|0;
  $246 = Math_imul($219, -7121)|0;
  $247 = (($217) + ($228))|0;
  $248 = (($247) + ($246))|0;
  $249 = (($248) + ($241))|0;
  $250 = (($234) + ($192))|0;
  $251 = $250 >>> 18;
  $252 = $251 & 1023;
  $253 = (($167) + ($252)|0);
  $254 = HEAP8[$253>>0]|0;
  HEAP8[$170>>0] = $254;
  $255 = (($192) - ($234))|0;
  $256 = $255 >>> 18;
  $257 = $256 & 1023;
  $258 = (($167) + ($257)|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = ((($170)) + 14|0);
  HEAP8[$260>>0] = $259;
  $261 = (($224) + ($205))|0;
  $262 = $261 >>> 18;
  $263 = $262 & 1023;
  $264 = (($167) + ($263)|0);
  $265 = HEAP8[$264>>0]|0;
  $266 = ((($170)) + 1|0);
  HEAP8[$266>>0] = $265;
  $267 = (($205) - ($224))|0;
  $268 = $267 >>> 18;
  $269 = $268 & 1023;
  $270 = (($167) + ($269)|0);
  $271 = HEAP8[$270>>0]|0;
  $272 = ((($170)) + 13|0);
  HEAP8[$272>>0] = $271;
  $273 = (($239) + ($209))|0;
  $274 = $273 >>> 18;
  $275 = $274 & 1023;
  $276 = (($167) + ($275)|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = ((($170)) + 2|0);
  HEAP8[$278>>0] = $277;
  $279 = (($209) - ($239))|0;
  $280 = $279 >>> 18;
  $281 = $280 & 1023;
  $282 = (($167) + ($281)|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = ((($170)) + 12|0);
  HEAP8[$284>>0] = $283;
  $285 = (($245) + ($195))|0;
  $286 = $285 >>> 18;
  $287 = $286 & 1023;
  $288 = (($167) + ($287)|0);
  $289 = HEAP8[$288>>0]|0;
  $290 = ((($170)) + 3|0);
  HEAP8[$290>>0] = $289;
  $291 = (($195) - ($245))|0;
  $292 = $291 >>> 18;
  $293 = $292 & 1023;
  $294 = (($167) + ($293)|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = ((($170)) + 11|0);
  HEAP8[$296>>0] = $295;
  $297 = (($226) + ($207))|0;
  $298 = $297 >>> 18;
  $299 = $298 & 1023;
  $300 = (($167) + ($299)|0);
  $301 = HEAP8[$300>>0]|0;
  $302 = ((($170)) + 4|0);
  HEAP8[$302>>0] = $301;
  $303 = (($207) - ($226))|0;
  $304 = $303 >>> 18;
  $305 = $304 & 1023;
  $306 = (($167) + ($305)|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = ((($170)) + 10|0);
  HEAP8[$308>>0] = $307;
  $309 = (($249) + ($198))|0;
  $310 = $309 >>> 18;
  $311 = $310 & 1023;
  $312 = (($167) + ($311)|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = ((($170)) + 5|0);
  HEAP8[$314>>0] = $313;
  $315 = (($198) - ($249))|0;
  $316 = $315 >>> 18;
  $317 = $316 & 1023;
  $318 = (($167) + ($317)|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = ((($170)) + 9|0);
  HEAP8[$320>>0] = $319;
  $321 = (($237) + ($201))|0;
  $322 = $321 >>> 18;
  $323 = $322 & 1023;
  $324 = (($167) + ($323)|0);
  $325 = HEAP8[$324>>0]|0;
  $326 = ((($170)) + 6|0);
  HEAP8[$326>>0] = $325;
  $327 = (($201) - ($237))|0;
  $328 = $327 >>> 18;
  $329 = $328 & 1023;
  $330 = (($167) + ($329)|0);
  $331 = HEAP8[$330>>0]|0;
  $332 = ((($170)) + 8|0);
  HEAP8[$332>>0] = $331;
  $333 = $210 >>> 18;
  $334 = $333 & 1023;
  $335 = (($167) + ($334)|0);
  $336 = HEAP8[$335>>0]|0;
  $337 = ((($170)) + 7|0);
  HEAP8[$337>>0] = $336;
  $338 = ((($$1353368)) + 32|0);
  $339 = (($$1369) + 1)|0;
  $exitcond = ($339|0)==(15);
  if ($exitcond) {
   break;
  } else {
   $$1353368 = $338;$$1369 = $339;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_16x16($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0403411 = 0, $$0405410 = 0, $$0406409 = 0, $$0412 = 0, $$1404407 = 0, $$1408 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond413 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0403411 = $5;$$0405410 = $9;$$0406409 = $2;$$0412 = 0;
 while(1) {
  $10 = HEAP16[$$0406409>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = HEAP32[$$0405410>>2]|0;
  $13 = $11 << 13;
  $14 = Math_imul($13, $12)|0;
  $15 = $14 | 1024;
  $16 = ((($$0406409)) + 64|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($$0405410)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($20, $18)|0;
  $22 = ($21*10703)|0;
  $23 = ($21*4433)|0;
  $24 = (($22) + ($15))|0;
  $25 = (($15) - ($22))|0;
  $26 = (($23) + ($15))|0;
  $27 = (($15) - ($23))|0;
  $28 = ((($$0406409)) + 32|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$0405410)) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $30)|0;
  $34 = ((($$0406409)) + 96|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = ((($$0405410)) + 192|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = Math_imul($38, $36)|0;
  $40 = (($33) - ($39))|0;
  $41 = ($40*2260)|0;
  $42 = ($40*11363)|0;
  $43 = ($39*20995)|0;
  $44 = (($42) + ($43))|0;
  $45 = ($33*7373)|0;
  $46 = (($41) + ($45))|0;
  $47 = Math_imul($33, -4926)|0;
  $48 = (($42) + ($47))|0;
  $49 = Math_imul($39, -4176)|0;
  $50 = (($41) + ($49))|0;
  $51 = (($44) + ($24))|0;
  $52 = (($24) - ($44))|0;
  $53 = (($46) + ($26))|0;
  $54 = (($26) - ($46))|0;
  $55 = (($48) + ($27))|0;
  $56 = (($27) - ($48))|0;
  $57 = (($50) + ($25))|0;
  $58 = (($25) - ($50))|0;
  $59 = ((($$0406409)) + 16|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = ((($$0405410)) + 32|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($63, $61)|0;
  $65 = ((($$0406409)) + 48|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = ((($$0405410)) + 96|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = Math_imul($69, $67)|0;
  $71 = ((($$0406409)) + 80|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = ((($$0405410)) + 160|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = Math_imul($75, $73)|0;
  $77 = ((($$0406409)) + 112|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = ((($$0405410)) + 224|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = Math_imul($81, $79)|0;
  $83 = (($76) + ($64))|0;
  $84 = (($70) + ($64))|0;
  $85 = ($84*11086)|0;
  $86 = ($83*10217)|0;
  $87 = (($82) + ($64))|0;
  $88 = ($87*8956)|0;
  $89 = (($64) - ($82))|0;
  $90 = ($89*7350)|0;
  $91 = ($83*5461)|0;
  $92 = (($64) - ($70))|0;
  $93 = ($92*3363)|0;
  $94 = Math_imul($64, -18730)|0;
  $95 = (($85) + ($94))|0;
  $96 = (($95) + ($86))|0;
  $97 = (($96) + ($88))|0;
  $98 = Math_imul($64, -15038)|0;
  $99 = (($93) + ($98))|0;
  $100 = (($99) + ($91))|0;
  $101 = (($100) + ($90))|0;
  $102 = (($76) + ($70))|0;
  $103 = ($102*1136)|0;
  $104 = ($70*589)|0;
  $105 = Math_imul($76, -9222)|0;
  $106 = (($103) + ($105))|0;
  $107 = (($106) + ($86))|0;
  $108 = (($76) - ($70))|0;
  $109 = ($108*11529)|0;
  $110 = Math_imul($76, -6278)|0;
  $111 = (($109) + ($110))|0;
  $112 = (($111) + ($91))|0;
  $113 = ($70*16154)|0;
  $114 = (($82) + ($70))|0;
  $115 = Math_imul($114, -5461)|0;
  $116 = (($85) + ($104))|0;
  $117 = (($116) + ($103))|0;
  $118 = (($117) + ($115))|0;
  $119 = ($82*8728)|0;
  $120 = (($115) + ($119))|0;
  $121 = (($120) + ($88))|0;
  $122 = Math_imul($114, -10217)|0;
  $123 = ($82*25733)|0;
  $124 = (($122) + ($123))|0;
  $125 = (($124) + ($90))|0;
  $126 = (($93) + ($113))|0;
  $127 = (($126) + ($109))|0;
  $128 = (($127) + ($122))|0;
  $129 = (($82) + ($76))|0;
  $130 = Math_imul($129, -11086)|0;
  $131 = (($107) + ($130))|0;
  $132 = (($121) + ($130))|0;
  $133 = (($82) - ($76))|0;
  $134 = ($133*3363)|0;
  $135 = (($125) + ($134))|0;
  $136 = (($112) + ($134))|0;
  $137 = (($97) + ($51))|0;
  $138 = $137 >> 11;
  HEAP32[$$0403411>>2] = $138;
  $139 = (($51) - ($97))|0;
  $140 = $139 >> 11;
  $141 = ((($$0403411)) + 480|0);
  HEAP32[$141>>2] = $140;
  $142 = (($118) + ($53))|0;
  $143 = $142 >> 11;
  $144 = ((($$0403411)) + 32|0);
  HEAP32[$144>>2] = $143;
  $145 = (($53) - ($118))|0;
  $146 = $145 >> 11;
  $147 = ((($$0403411)) + 448|0);
  HEAP32[$147>>2] = $146;
  $148 = (($131) + ($55))|0;
  $149 = $148 >> 11;
  $150 = ((($$0403411)) + 64|0);
  HEAP32[$150>>2] = $149;
  $151 = (($55) - ($131))|0;
  $152 = $151 >> 11;
  $153 = ((($$0403411)) + 416|0);
  HEAP32[$153>>2] = $152;
  $154 = (($132) + ($57))|0;
  $155 = $154 >> 11;
  $156 = ((($$0403411)) + 96|0);
  HEAP32[$156>>2] = $155;
  $157 = (($57) - ($132))|0;
  $158 = $157 >> 11;
  $159 = ((($$0403411)) + 384|0);
  HEAP32[$159>>2] = $158;
  $160 = (($135) + ($58))|0;
  $161 = $160 >> 11;
  $162 = ((($$0403411)) + 128|0);
  HEAP32[$162>>2] = $161;
  $163 = (($58) - ($135))|0;
  $164 = $163 >> 11;
  $165 = ((($$0403411)) + 352|0);
  HEAP32[$165>>2] = $164;
  $166 = (($136) + ($56))|0;
  $167 = $166 >> 11;
  $168 = ((($$0403411)) + 160|0);
  HEAP32[$168>>2] = $167;
  $169 = (($56) - ($136))|0;
  $170 = $169 >> 11;
  $171 = ((($$0403411)) + 320|0);
  HEAP32[$171>>2] = $170;
  $172 = (($128) + ($54))|0;
  $173 = $172 >> 11;
  $174 = ((($$0403411)) + 192|0);
  HEAP32[$174>>2] = $173;
  $175 = (($54) - ($128))|0;
  $176 = $175 >> 11;
  $177 = ((($$0403411)) + 288|0);
  HEAP32[$177>>2] = $176;
  $178 = (($101) + ($52))|0;
  $179 = $178 >> 11;
  $180 = ((($$0403411)) + 224|0);
  HEAP32[$180>>2] = $179;
  $181 = (($52) - ($101))|0;
  $182 = $181 >> 11;
  $183 = ((($$0403411)) + 256|0);
  HEAP32[$183>>2] = $182;
  $184 = (($$0412) + 1)|0;
  $185 = ((($$0406409)) + 2|0);
  $186 = ((($$0405410)) + 4|0);
  $187 = ((($$0403411)) + 4|0);
  $exitcond413 = ($184|0)==(8);
  if ($exitcond413) {
   break;
  } else {
   $$0403411 = $187;$$0405410 = $186;$$0406409 = $185;$$0412 = $184;
  }
 }
 $188 = ((($7)) + 128|0);
 $$1404407 = $5;$$1408 = 0;
 while(1) {
  $189 = (($3) + ($$1408<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + ($4)|0);
  $192 = HEAP32[$$1404407>>2]|0;
  $193 = $192 << 13;
  $194 = (($193) + 131072)|0;
  $195 = ((($$1404407)) + 16|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196*10703)|0;
  $198 = ($196*4433)|0;
  $199 = (($194) + ($197))|0;
  $200 = (($194) - ($197))|0;
  $201 = (($194) + ($198))|0;
  $202 = (($194) - ($198))|0;
  $203 = ((($$1404407)) + 8|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ((($$1404407)) + 24|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($204) - ($206))|0;
  $208 = ($207*2260)|0;
  $209 = ($207*11363)|0;
  $210 = ($206*20995)|0;
  $211 = (($209) + ($210))|0;
  $212 = ($204*7373)|0;
  $213 = (($208) + ($212))|0;
  $214 = Math_imul($204, -4926)|0;
  $215 = (($209) + ($214))|0;
  $216 = Math_imul($206, -4176)|0;
  $217 = (($208) + ($216))|0;
  $218 = (($211) + ($199))|0;
  $219 = (($199) - ($211))|0;
  $220 = (($213) + ($201))|0;
  $221 = (($201) - ($213))|0;
  $222 = (($215) + ($202))|0;
  $223 = (($202) - ($215))|0;
  $224 = (($217) + ($200))|0;
  $225 = (($200) - ($217))|0;
  $226 = ((($$1404407)) + 4|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = ((($$1404407)) + 12|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ((($$1404407)) + 20|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ((($$1404407)) + 28|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($231) + ($227))|0;
  $235 = (($229) + ($227))|0;
  $236 = ($235*11086)|0;
  $237 = ($234*10217)|0;
  $238 = (($233) + ($227))|0;
  $239 = ($238*8956)|0;
  $240 = (($227) - ($233))|0;
  $241 = ($240*7350)|0;
  $242 = ($234*5461)|0;
  $243 = (($227) - ($229))|0;
  $244 = ($243*3363)|0;
  $245 = Math_imul($227, -18730)|0;
  $246 = (($236) + ($245))|0;
  $247 = (($246) + ($237))|0;
  $248 = (($247) + ($239))|0;
  $249 = Math_imul($227, -15038)|0;
  $250 = (($244) + ($249))|0;
  $251 = (($250) + ($242))|0;
  $252 = (($251) + ($241))|0;
  $253 = (($231) + ($229))|0;
  $254 = ($253*1136)|0;
  $255 = ($229*589)|0;
  $256 = Math_imul($231, -9222)|0;
  $257 = (($254) + ($256))|0;
  $258 = (($257) + ($237))|0;
  $259 = (($231) - ($229))|0;
  $260 = ($259*11529)|0;
  $261 = Math_imul($231, -6278)|0;
  $262 = (($260) + ($261))|0;
  $263 = (($262) + ($242))|0;
  $264 = ($229*16154)|0;
  $265 = (($233) + ($229))|0;
  $266 = Math_imul($265, -5461)|0;
  $267 = (($236) + ($255))|0;
  $268 = (($267) + ($254))|0;
  $269 = (($268) + ($266))|0;
  $270 = ($233*8728)|0;
  $271 = (($266) + ($270))|0;
  $272 = (($271) + ($239))|0;
  $273 = Math_imul($265, -10217)|0;
  $274 = ($233*25733)|0;
  $275 = (($273) + ($274))|0;
  $276 = (($275) + ($241))|0;
  $277 = (($244) + ($264))|0;
  $278 = (($277) + ($260))|0;
  $279 = (($278) + ($273))|0;
  $280 = (($233) + ($231))|0;
  $281 = Math_imul($280, -11086)|0;
  $282 = (($258) + ($281))|0;
  $283 = (($272) + ($281))|0;
  $284 = (($233) - ($231))|0;
  $285 = ($284*3363)|0;
  $286 = (($276) + ($285))|0;
  $287 = (($263) + ($285))|0;
  $288 = (($248) + ($218))|0;
  $289 = $288 >>> 18;
  $290 = $289 & 1023;
  $291 = (($188) + ($290)|0);
  $292 = HEAP8[$291>>0]|0;
  HEAP8[$191>>0] = $292;
  $293 = (($218) - ($248))|0;
  $294 = $293 >>> 18;
  $295 = $294 & 1023;
  $296 = (($188) + ($295)|0);
  $297 = HEAP8[$296>>0]|0;
  $298 = ((($191)) + 15|0);
  HEAP8[$298>>0] = $297;
  $299 = (($269) + ($220))|0;
  $300 = $299 >>> 18;
  $301 = $300 & 1023;
  $302 = (($188) + ($301)|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = ((($191)) + 1|0);
  HEAP8[$304>>0] = $303;
  $305 = (($220) - ($269))|0;
  $306 = $305 >>> 18;
  $307 = $306 & 1023;
  $308 = (($188) + ($307)|0);
  $309 = HEAP8[$308>>0]|0;
  $310 = ((($191)) + 14|0);
  HEAP8[$310>>0] = $309;
  $311 = (($282) + ($222))|0;
  $312 = $311 >>> 18;
  $313 = $312 & 1023;
  $314 = (($188) + ($313)|0);
  $315 = HEAP8[$314>>0]|0;
  $316 = ((($191)) + 2|0);
  HEAP8[$316>>0] = $315;
  $317 = (($222) - ($282))|0;
  $318 = $317 >>> 18;
  $319 = $318 & 1023;
  $320 = (($188) + ($319)|0);
  $321 = HEAP8[$320>>0]|0;
  $322 = ((($191)) + 13|0);
  HEAP8[$322>>0] = $321;
  $323 = (($283) + ($224))|0;
  $324 = $323 >>> 18;
  $325 = $324 & 1023;
  $326 = (($188) + ($325)|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = ((($191)) + 3|0);
  HEAP8[$328>>0] = $327;
  $329 = (($224) - ($283))|0;
  $330 = $329 >>> 18;
  $331 = $330 & 1023;
  $332 = (($188) + ($331)|0);
  $333 = HEAP8[$332>>0]|0;
  $334 = ((($191)) + 12|0);
  HEAP8[$334>>0] = $333;
  $335 = (($286) + ($225))|0;
  $336 = $335 >>> 18;
  $337 = $336 & 1023;
  $338 = (($188) + ($337)|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = ((($191)) + 4|0);
  HEAP8[$340>>0] = $339;
  $341 = (($225) - ($286))|0;
  $342 = $341 >>> 18;
  $343 = $342 & 1023;
  $344 = (($188) + ($343)|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = ((($191)) + 11|0);
  HEAP8[$346>>0] = $345;
  $347 = (($287) + ($223))|0;
  $348 = $347 >>> 18;
  $349 = $348 & 1023;
  $350 = (($188) + ($349)|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = ((($191)) + 5|0);
  HEAP8[$352>>0] = $351;
  $353 = (($223) - ($287))|0;
  $354 = $353 >>> 18;
  $355 = $354 & 1023;
  $356 = (($188) + ($355)|0);
  $357 = HEAP8[$356>>0]|0;
  $358 = ((($191)) + 10|0);
  HEAP8[$358>>0] = $357;
  $359 = (($279) + ($221))|0;
  $360 = $359 >>> 18;
  $361 = $360 & 1023;
  $362 = (($188) + ($361)|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = ((($191)) + 6|0);
  HEAP8[$364>>0] = $363;
  $365 = (($221) - ($279))|0;
  $366 = $365 >>> 18;
  $367 = $366 & 1023;
  $368 = (($188) + ($367)|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = ((($191)) + 9|0);
  HEAP8[$370>>0] = $369;
  $371 = (($252) + ($219))|0;
  $372 = $371 >>> 18;
  $373 = $372 & 1023;
  $374 = (($188) + ($373)|0);
  $375 = HEAP8[$374>>0]|0;
  $376 = ((($191)) + 7|0);
  HEAP8[$376>>0] = $375;
  $377 = (($219) - ($252))|0;
  $378 = $377 >>> 18;
  $379 = $378 & 1023;
  $380 = (($188) + ($379)|0);
  $381 = HEAP8[$380>>0]|0;
  $382 = ((($191)) + 8|0);
  HEAP8[$382>>0] = $381;
  $383 = ((($$1404407)) + 32|0);
  $384 = (($$1408) + 1)|0;
  $exitcond = ($384|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$1404407 = $383;$$1408 = $384;
  }
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_4x4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0152172 = 0, $$0152172$be = 0, $$0154169 = 0, $$0154169$be = 0, $$0155166 = 0, $$0155166$be = 0, $$0174 = 0, $$0174$be = 0, $$2 = 0, $$2$1 = 0, $$2$2 = 0, $$sink = 0, $$sink157 = 0, $$sink158 = 0, $$sink158$1 = 0, $$sink158$2 = 0, $$sink158$3 = 0, $$sink160 = 0, $$sink160$1 = 0, $$sink160$2 = 0;
 var $$sink160$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $$0152172 = $5;$$0154169 = $9;$$0155166 = $2;$$0174 = 8;
 while(1) {
  $10 = ($$0174|0)==(4);
  if ($10) {
   $$0174$be = 3;
  } else {
   $11 = ((($$0155166)) + 16|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ((($$0155166)) + 32|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $12 | $14;
   $16 = ($15<<16>>16)==(0);
   if ($16) {
    $17 = ((($$0155166)) + 48|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = ($18<<16>>16)==(0);
    if ($19) {
     $20 = ((($$0155166)) + 80|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = ($21<<16>>16)==(0);
     if ($22) {
      $23 = ((($$0155166)) + 96|0);
      $24 = HEAP16[$23>>1]|0;
      $25 = ($24<<16>>16)==(0);
      if ($25) {
       $26 = ((($$0155166)) + 112|0);
       $27 = HEAP16[$26>>1]|0;
       $28 = ($27<<16>>16)==(0);
       if ($28) {
        $29 = HEAP16[$$0155166>>1]|0;
        $30 = $29 << 16 >> 16;
        $31 = HEAP32[$$0154169>>2]|0;
        $32 = $30 << 2;
        $33 = Math_imul($32, $31)|0;
        HEAP32[$$0152172>>2] = $33;
        $34 = ((($$0152172)) + 32|0);
        HEAP32[$34>>2] = $33;
        $35 = ((($$0152172)) + 64|0);
        HEAP32[$35>>2] = $33;
        $$sink = $33;$$sink157 = 24;
       } else {
        $42 = 0;
        label = 9;
       }
      } else {
       $42 = 0;
       label = 9;
      }
     } else {
      $42 = 0;
      label = 9;
     }
    } else {
     $42 = 0;
     label = 9;
    }
   } else {
    $42 = $14;
    label = 9;
   }
   if ((label|0) == 9) {
    label = 0;
    $36 = HEAP16[$$0155166>>1]|0;
    $37 = $36 << 16 >> 16;
    $38 = HEAP32[$$0154169>>2]|0;
    $39 = $37 << 14;
    $40 = Math_imul($39, $38)|0;
    $41 = $42 << 16 >> 16;
    $43 = ((($$0154169)) + 64|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($$0155166)) + 96|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46 << 16 >> 16;
    $48 = ((($$0154169)) + 192|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($41*15137)|0;
    $51 = Math_imul($50, $44)|0;
    $52 = Math_imul($47, -6270)|0;
    $53 = Math_imul($52, $49)|0;
    $54 = (($53) + ($51))|0;
    $55 = (($54) + ($40))|0;
    $56 = (($40) - ($54))|0;
    $57 = ((($$0155166)) + 112|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = ((($$0154169)) + 224|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = Math_imul($61, $59)|0;
    $63 = ((($$0155166)) + 80|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64 << 16 >> 16;
    $66 = ((($$0154169)) + 160|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = Math_imul($67, $65)|0;
    $69 = ((($$0155166)) + 48|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70 << 16 >> 16;
    $72 = ((($$0154169)) + 96|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = Math_imul($73, $71)|0;
    $75 = $12 << 16 >> 16;
    $76 = ((($$0154169)) + 32|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = Math_imul($77, $75)|0;
    $79 = Math_imul($62, -1730)|0;
    $80 = ($68*11893)|0;
    $81 = (($80) + ($79))|0;
    $82 = Math_imul($74, -17799)|0;
    $83 = (($81) + ($82))|0;
    $84 = ($78*8697)|0;
    $85 = (($83) + ($84))|0;
    $86 = Math_imul($62, -4176)|0;
    $87 = Math_imul($68, -4926)|0;
    $88 = (($87) + ($86))|0;
    $89 = ($74*7373)|0;
    $90 = (($88) + ($89))|0;
    $91 = ($78*20995)|0;
    $92 = (($90) + ($91))|0;
    $93 = (($55) + 2048)|0;
    $94 = (($93) + ($92))|0;
    $95 = $94 >> 12;
    HEAP32[$$0152172>>2] = $95;
    $96 = (($93) - ($92))|0;
    $97 = $96 >> 12;
    $98 = ((($$0152172)) + 96|0);
    HEAP32[$98>>2] = $97;
    $99 = (($56) + 2048)|0;
    $100 = (($99) + ($85))|0;
    $101 = $100 >> 12;
    $102 = ((($$0152172)) + 32|0);
    HEAP32[$102>>2] = $101;
    $103 = (($99) - ($85))|0;
    $104 = $103 >> 12;
    $$sink = $104;$$sink157 = 16;
   }
   $105 = (($$0152172) + ($$sink157<<2)|0);
   HEAP32[$105>>2] = $$sink;
   $106 = (($$0174) + -1)|0;
   $107 = ($$0174|0)>(1);
   if ($107) {
    $$0174$be = $106;
   } else {
    break;
   }
  }
  $$0155166$be = ((($$0155166)) + 2|0);
  $$0154169$be = ((($$0154169)) + 4|0);
  $$0152172$be = ((($$0152172)) + 4|0);
  $$0152172 = $$0152172$be;$$0154169 = $$0154169$be;$$0155166 = $$0155166$be;$$0174 = $$0174$be;
 }
 $108 = ((($7)) + 128|0);
 $109 = HEAP32[$3>>2]|0;
 $110 = (($109) + ($4)|0);
 $111 = ((($5)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($5)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $112 | $114;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = ((($5)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)==(0);
  if ($119) {
   $120 = ((($5)) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(0);
   if ($122) {
    $123 = ((($5)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($124|0)==(0);
    if ($125) {
     $126 = ((($5)) + 28|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = HEAP32[$5>>2]|0;
      $130 = (($129) + 16)|0;
      $131 = $130 >>> 5;
      $132 = $131 & 1023;
      $133 = (($108) + ($132)|0);
      $134 = HEAP8[$133>>0]|0;
      HEAP8[$110>>0] = $134;
      $135 = ((($110)) + 1|0);
      HEAP8[$135>>0] = $134;
      $136 = ((($110)) + 2|0);
      HEAP8[$136>>0] = $134;
      $$sink158 = $134;$$sink160 = 3;
     } else {
      $140 = 0;
      label = 18;
     }
    } else {
     $140 = 0;
     label = 18;
    }
   } else {
    $140 = 0;
    label = 18;
   }
  } else {
   $140 = 0;
   label = 18;
  }
 } else {
  $140 = $114;
  label = 18;
 }
 if ((label|0) == 18) {
  $137 = HEAP32[$5>>2]|0;
  $138 = $137 << 14;
  $139 = ($140*15137)|0;
  $141 = ((($5)) + 24|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = Math_imul($142, -6270)|0;
  $144 = (($143) + ($139))|0;
  $145 = (($144) + ($138))|0;
  $146 = (($138) - ($144))|0;
  $147 = ((($5)) + 28|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ((($5)) + 20|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($5)) + 12|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = Math_imul($148, -1730)|0;
  $154 = ($150*11893)|0;
  $155 = (($154) + ($153))|0;
  $156 = Math_imul($152, -17799)|0;
  $157 = (($155) + ($156))|0;
  $158 = ($112*8697)|0;
  $159 = (($157) + ($158))|0;
  $160 = Math_imul($148, -4176)|0;
  $161 = Math_imul($150, -4926)|0;
  $162 = (($161) + ($160))|0;
  $163 = ($152*7373)|0;
  $164 = (($162) + ($163))|0;
  $165 = ($112*20995)|0;
  $166 = (($164) + ($165))|0;
  $167 = (($145) + 262144)|0;
  $168 = (($167) + ($166))|0;
  $169 = $168 >>> 19;
  $170 = $169 & 1023;
  $171 = (($108) + ($170)|0);
  $172 = HEAP8[$171>>0]|0;
  HEAP8[$110>>0] = $172;
  $173 = (($167) - ($166))|0;
  $174 = $173 >>> 19;
  $175 = $174 & 1023;
  $176 = (($108) + ($175)|0);
  $177 = HEAP8[$176>>0]|0;
  $178 = ((($110)) + 3|0);
  HEAP8[$178>>0] = $177;
  $179 = (($146) + 262144)|0;
  $180 = (($179) + ($159))|0;
  $181 = $180 >>> 19;
  $182 = $181 & 1023;
  $183 = (($108) + ($182)|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = ((($110)) + 1|0);
  HEAP8[$185>>0] = $184;
  $186 = (($179) - ($159))|0;
  $187 = $186 >>> 19;
  $188 = $187 & 1023;
  $189 = (($108) + ($188)|0);
  $190 = HEAP8[$189>>0]|0;
  $$sink158 = $190;$$sink160 = 2;
 }
 $191 = (($110) + ($$sink160)|0);
 HEAP8[$191>>0] = $$sink158;
 $$2 = ((($5)) + 32|0);
 $192 = ((($3)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($193) + ($4)|0);
 $195 = ((($5)) + 36|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($5)) + 40|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $196 | $198;
 $200 = ($199|0)==(0);
 if ($200) {
  $201 = ((($5)) + 44|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ($202|0)==(0);
  if ($203) {
   $204 = ((($5)) + 52|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ($205|0)==(0);
   if ($206) {
    $207 = ((($5)) + 56|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)==(0);
    if ($209) {
     $210 = ((($5)) + 60|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0);
     if ($212) {
      $267 = HEAP32[$$2>>2]|0;
      $268 = (($267) + 16)|0;
      $269 = $268 >>> 5;
      $270 = $269 & 1023;
      $271 = (($108) + ($270)|0);
      $272 = HEAP8[$271>>0]|0;
      HEAP8[$194>>0] = $272;
      $273 = ((($194)) + 1|0);
      HEAP8[$273>>0] = $272;
      $274 = ((($194)) + 2|0);
      HEAP8[$274>>0] = $272;
      $$sink158$1 = $272;$$sink160$1 = 3;
     } else {
      $216 = 0;
      label = 24;
     }
    } else {
     $216 = 0;
     label = 24;
    }
   } else {
    $216 = 0;
    label = 24;
   }
  } else {
   $216 = 0;
   label = 24;
  }
 } else {
  $216 = $198;
  label = 24;
 }
 if ((label|0) == 24) {
  $213 = HEAP32[$$2>>2]|0;
  $214 = $213 << 14;
  $215 = ($216*15137)|0;
  $217 = ((($5)) + 56|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = Math_imul($218, -6270)|0;
  $220 = (($219) + ($215))|0;
  $221 = (($220) + ($214))|0;
  $222 = (($214) - ($220))|0;
  $223 = ((($5)) + 60|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = ((($5)) + 52|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ((($5)) + 44|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = Math_imul($224, -1730)|0;
  $230 = ($226*11893)|0;
  $231 = (($230) + ($229))|0;
  $232 = Math_imul($228, -17799)|0;
  $233 = (($231) + ($232))|0;
  $234 = ($196*8697)|0;
  $235 = (($233) + ($234))|0;
  $236 = Math_imul($224, -4176)|0;
  $237 = Math_imul($226, -4926)|0;
  $238 = (($237) + ($236))|0;
  $239 = ($228*7373)|0;
  $240 = (($238) + ($239))|0;
  $241 = ($196*20995)|0;
  $242 = (($240) + ($241))|0;
  $243 = (($221) + 262144)|0;
  $244 = (($243) + ($242))|0;
  $245 = $244 >>> 19;
  $246 = $245 & 1023;
  $247 = (($108) + ($246)|0);
  $248 = HEAP8[$247>>0]|0;
  HEAP8[$194>>0] = $248;
  $249 = (($243) - ($242))|0;
  $250 = $249 >>> 19;
  $251 = $250 & 1023;
  $252 = (($108) + ($251)|0);
  $253 = HEAP8[$252>>0]|0;
  $254 = ((($194)) + 3|0);
  HEAP8[$254>>0] = $253;
  $255 = (($222) + 262144)|0;
  $256 = (($255) + ($235))|0;
  $257 = $256 >>> 19;
  $258 = $257 & 1023;
  $259 = (($108) + ($258)|0);
  $260 = HEAP8[$259>>0]|0;
  $261 = ((($194)) + 1|0);
  HEAP8[$261>>0] = $260;
  $262 = (($255) - ($235))|0;
  $263 = $262 >>> 19;
  $264 = $263 & 1023;
  $265 = (($108) + ($264)|0);
  $266 = HEAP8[$265>>0]|0;
  $$sink158$1 = $266;$$sink160$1 = 2;
 }
 $275 = (($194) + ($$sink160$1)|0);
 HEAP8[$275>>0] = $$sink158$1;
 $$2$1 = ((($5)) + 64|0);
 $276 = ((($3)) + 8|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = (($277) + ($4)|0);
 $279 = ((($5)) + 68|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = ((($5)) + 72|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = $280 | $282;
 $284 = ($283|0)==(0);
 if ($284) {
  $285 = ((($5)) + 76|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = ($286|0)==(0);
  if ($287) {
   $288 = ((($5)) + 84|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = ($289|0)==(0);
   if ($290) {
    $291 = ((($5)) + 88|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = ($292|0)==(0);
    if ($293) {
     $294 = ((($5)) + 92|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)==(0);
     if ($296) {
      $351 = HEAP32[$$2$1>>2]|0;
      $352 = (($351) + 16)|0;
      $353 = $352 >>> 5;
      $354 = $353 & 1023;
      $355 = (($108) + ($354)|0);
      $356 = HEAP8[$355>>0]|0;
      HEAP8[$278>>0] = $356;
      $357 = ((($278)) + 1|0);
      HEAP8[$357>>0] = $356;
      $358 = ((($278)) + 2|0);
      HEAP8[$358>>0] = $356;
      $$sink158$2 = $356;$$sink160$2 = 3;
     } else {
      $300 = 0;
      label = 31;
     }
    } else {
     $300 = 0;
     label = 31;
    }
   } else {
    $300 = 0;
    label = 31;
   }
  } else {
   $300 = 0;
   label = 31;
  }
 } else {
  $300 = $282;
  label = 31;
 }
 if ((label|0) == 31) {
  $297 = HEAP32[$$2$1>>2]|0;
  $298 = $297 << 14;
  $299 = ($300*15137)|0;
  $301 = ((($5)) + 88|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = Math_imul($302, -6270)|0;
  $304 = (($303) + ($299))|0;
  $305 = (($304) + ($298))|0;
  $306 = (($298) - ($304))|0;
  $307 = ((($5)) + 92|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = ((($5)) + 84|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = ((($5)) + 76|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = Math_imul($308, -1730)|0;
  $314 = ($310*11893)|0;
  $315 = (($314) + ($313))|0;
  $316 = Math_imul($312, -17799)|0;
  $317 = (($315) + ($316))|0;
  $318 = ($280*8697)|0;
  $319 = (($317) + ($318))|0;
  $320 = Math_imul($308, -4176)|0;
  $321 = Math_imul($310, -4926)|0;
  $322 = (($321) + ($320))|0;
  $323 = ($312*7373)|0;
  $324 = (($322) + ($323))|0;
  $325 = ($280*20995)|0;
  $326 = (($324) + ($325))|0;
  $327 = (($305) + 262144)|0;
  $328 = (($327) + ($326))|0;
  $329 = $328 >>> 19;
  $330 = $329 & 1023;
  $331 = (($108) + ($330)|0);
  $332 = HEAP8[$331>>0]|0;
  HEAP8[$278>>0] = $332;
  $333 = (($327) - ($326))|0;
  $334 = $333 >>> 19;
  $335 = $334 & 1023;
  $336 = (($108) + ($335)|0);
  $337 = HEAP8[$336>>0]|0;
  $338 = ((($278)) + 3|0);
  HEAP8[$338>>0] = $337;
  $339 = (($306) + 262144)|0;
  $340 = (($339) + ($319))|0;
  $341 = $340 >>> 19;
  $342 = $341 & 1023;
  $343 = (($108) + ($342)|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = ((($278)) + 1|0);
  HEAP8[$345>>0] = $344;
  $346 = (($339) - ($319))|0;
  $347 = $346 >>> 19;
  $348 = $347 & 1023;
  $349 = (($108) + ($348)|0);
  $350 = HEAP8[$349>>0]|0;
  $$sink158$2 = $350;$$sink160$2 = 2;
 }
 $359 = (($278) + ($$sink160$2)|0);
 HEAP8[$359>>0] = $$sink158$2;
 $$2$2 = ((($5)) + 96|0);
 $360 = ((($3)) + 12|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = (($361) + ($4)|0);
 $363 = ((($5)) + 100|0);
 $364 = HEAP32[$363>>2]|0;
 $365 = ((($5)) + 104|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = $364 | $366;
 $368 = ($367|0)==(0);
 if ($368) {
  $369 = ((($5)) + 108|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = ($370|0)==(0);
  if ($371) {
   $372 = ((($5)) + 116|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ($373|0)==(0);
   if ($374) {
    $375 = ((($5)) + 120|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($376|0)==(0);
    if ($377) {
     $378 = ((($5)) + 124|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = ($379|0)==(0);
     if ($380) {
      $435 = HEAP32[$$2$2>>2]|0;
      $436 = (($435) + 16)|0;
      $437 = $436 >>> 5;
      $438 = $437 & 1023;
      $439 = (($108) + ($438)|0);
      $440 = HEAP8[$439>>0]|0;
      HEAP8[$362>>0] = $440;
      $441 = ((($362)) + 1|0);
      HEAP8[$441>>0] = $440;
      $442 = ((($362)) + 2|0);
      HEAP8[$442>>0] = $440;
      $$sink158$3 = $440;$$sink160$3 = 3;
      $443 = (($362) + ($$sink160$3)|0);
      HEAP8[$443>>0] = $$sink158$3;
      STACKTOP = sp;return;
     } else {
      $384 = 0;
     }
    } else {
     $384 = 0;
    }
   } else {
    $384 = 0;
   }
  } else {
   $384 = 0;
  }
 } else {
  $384 = $366;
 }
 $381 = HEAP32[$$2$2>>2]|0;
 $382 = $381 << 14;
 $383 = ($384*15137)|0;
 $385 = ((($5)) + 120|0);
 $386 = HEAP32[$385>>2]|0;
 $387 = Math_imul($386, -6270)|0;
 $388 = (($387) + ($383))|0;
 $389 = (($388) + ($382))|0;
 $390 = (($382) - ($388))|0;
 $391 = ((($5)) + 124|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = ((($5)) + 116|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = ((($5)) + 108|0);
 $396 = HEAP32[$395>>2]|0;
 $397 = Math_imul($392, -1730)|0;
 $398 = ($394*11893)|0;
 $399 = (($398) + ($397))|0;
 $400 = Math_imul($396, -17799)|0;
 $401 = (($399) + ($400))|0;
 $402 = ($364*8697)|0;
 $403 = (($401) + ($402))|0;
 $404 = Math_imul($392, -4176)|0;
 $405 = Math_imul($394, -4926)|0;
 $406 = (($405) + ($404))|0;
 $407 = ($396*7373)|0;
 $408 = (($406) + ($407))|0;
 $409 = ($364*20995)|0;
 $410 = (($408) + ($409))|0;
 $411 = (($389) + 262144)|0;
 $412 = (($411) + ($410))|0;
 $413 = $412 >>> 19;
 $414 = $413 & 1023;
 $415 = (($108) + ($414)|0);
 $416 = HEAP8[$415>>0]|0;
 HEAP8[$362>>0] = $416;
 $417 = (($411) - ($410))|0;
 $418 = $417 >>> 19;
 $419 = $418 & 1023;
 $420 = (($108) + ($419)|0);
 $421 = HEAP8[$420>>0]|0;
 $422 = ((($362)) + 3|0);
 HEAP8[$422>>0] = $421;
 $423 = (($390) + 262144)|0;
 $424 = (($423) + ($403))|0;
 $425 = $424 >>> 19;
 $426 = $425 & 1023;
 $427 = (($108) + ($426)|0);
 $428 = HEAP8[$427>>0]|0;
 $429 = ((($362)) + 1|0);
 HEAP8[$429>>0] = $428;
 $430 = (($423) - ($403))|0;
 $431 = $430 >>> 19;
 $432 = $431 & 1023;
 $433 = (($108) + ($432)|0);
 $434 = HEAP8[$433>>0]|0;
 $$sink158$3 = $434;$$sink160$3 = 2;
 $443 = (($362) + ($$sink160$3)|0);
 HEAP8[$443>>0] = $$sink158$3;
 STACKTOP = sp;return;
}
function _jpeg_idct_2x2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$2 = 0, $$sink = 0, $$sink$1 = 0, $$sink144 = 0, $$sink148 = 0, $$sink151 = 0, $$sink153 = 0, $$sink155 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp;
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 16|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ((($2)) + 48|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $11 | $13;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  $16 = ((($2)) + 80|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = ($17<<16>>16)==(0);
  if ($18) {
   $19 = ((($2)) + 112|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(0);
   if ($21) {
    $22 = HEAP16[$2>>1]|0;
    $23 = $22 << 16 >> 16;
    $24 = HEAP32[$9>>2]|0;
    $25 = $23 << 2;
    $26 = Math_imul($25, $24)|0;
    HEAP32[$5>>2] = $26;
    $$sink144 = $26;
   } else {
    $48 = 0;
    label = 5;
   }
  } else {
   $48 = 0;
   label = 5;
  }
 } else {
  $48 = $13;
  label = 5;
 }
 if ((label|0) == 5) {
  $27 = HEAP16[$2>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 << 15;
  $31 = Math_imul($30, $29)|0;
  $32 = ((($2)) + 112|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = ((($9)) + 224|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($34, -5906)|0;
  $38 = Math_imul($37, $36)|0;
  $39 = ((($2)) + 80|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ((($9)) + 160|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41*6967)|0;
  $45 = Math_imul($44, $43)|0;
  $46 = (($45) + ($38))|0;
  $47 = $48 << 16 >> 16;
  $49 = ((($9)) + 96|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, -10426)|0;
  $52 = Math_imul($51, $50)|0;
  $53 = (($46) + ($52))|0;
  $54 = $11 << 16 >> 16;
  $55 = ((($9)) + 32|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54*29692)|0;
  $58 = Math_imul($57, $56)|0;
  $59 = (($53) + ($58))|0;
  $60 = $31 | 4096;
  $61 = (($60) + ($59))|0;
  $62 = $61 >> 13;
  HEAP32[$5>>2] = $62;
  $63 = (($60) - ($59))|0;
  $64 = $63 >> 13;
  $$sink144 = $64;
 }
 $153 = ((($5)) + 32|0);
 HEAP32[$153>>2] = $$sink144;
 $154 = ((($2)) + 2|0);
 $155 = ((($9)) + 4|0);
 $156 = ((($5)) + 4|0);
 $157 = ((($2)) + 18|0);
 $158 = HEAP16[$157>>1]|0;
 $159 = ((($2)) + 50|0);
 $160 = HEAP16[$159>>1]|0;
 $161 = $158 | $160;
 $162 = ($161<<16>>16)==(0);
 if ($162) {
  $163 = ((($2)) + 82|0);
  $164 = HEAP16[$163>>1]|0;
  $165 = ($164<<16>>16)==(0);
  if ($165) {
   $166 = ((($2)) + 114|0);
   $167 = HEAP16[$166>>1]|0;
   $168 = ($167<<16>>16)==(0);
   if ($168) {
    $207 = HEAP16[$154>>1]|0;
    $208 = $207 << 16 >> 16;
    $209 = HEAP32[$155>>2]|0;
    $210 = $208 << 2;
    $211 = Math_imul($210, $209)|0;
    HEAP32[$156>>2] = $211;
    $$sink148 = $211;
   } else {
    $190 = 0;
    label = 19;
   }
  } else {
   $190 = 0;
   label = 19;
  }
 } else {
  $190 = $160;
  label = 19;
 }
 if ((label|0) == 19) {
  $169 = HEAP16[$154>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = HEAP32[$155>>2]|0;
  $172 = $170 << 15;
  $173 = Math_imul($172, $171)|0;
  $174 = ((($2)) + 114|0);
  $175 = HEAP16[$174>>1]|0;
  $176 = $175 << 16 >> 16;
  $177 = ((($9)) + 228|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = Math_imul($176, -5906)|0;
  $180 = Math_imul($179, $178)|0;
  $181 = ((($2)) + 82|0);
  $182 = HEAP16[$181>>1]|0;
  $183 = $182 << 16 >> 16;
  $184 = ((($9)) + 164|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ($183*6967)|0;
  $187 = Math_imul($186, $185)|0;
  $188 = (($187) + ($180))|0;
  $189 = $190 << 16 >> 16;
  $191 = ((($9)) + 100|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = Math_imul($189, -10426)|0;
  $194 = Math_imul($193, $192)|0;
  $195 = (($188) + ($194))|0;
  $196 = $158 << 16 >> 16;
  $197 = ((($9)) + 36|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($196*29692)|0;
  $200 = Math_imul($199, $198)|0;
  $201 = (($195) + ($200))|0;
  $202 = $173 | 4096;
  $203 = (($202) + ($201))|0;
  $204 = $203 >> 13;
  HEAP32[$156>>2] = $204;
  $205 = (($202) - ($201))|0;
  $206 = $205 >> 13;
  $$sink148 = $206;
 }
 $212 = ((($5)) + 36|0);
 HEAP32[$212>>2] = $$sink148;
 $213 = ((($2)) + 6|0);
 $214 = ((($9)) + 12|0);
 $215 = ((($5)) + 12|0);
 $216 = ((($2)) + 22|0);
 $217 = HEAP16[$216>>1]|0;
 $218 = ((($2)) + 54|0);
 $219 = HEAP16[$218>>1]|0;
 $220 = $217 | $219;
 $221 = ($220<<16>>16)==(0);
 if ($221) {
  $222 = ((($2)) + 86|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = ($223<<16>>16)==(0);
  if ($224) {
   $225 = ((($2)) + 118|0);
   $226 = HEAP16[$225>>1]|0;
   $227 = ($226<<16>>16)==(0);
   if ($227) {
    $266 = HEAP16[$213>>1]|0;
    $267 = $266 << 16 >> 16;
    $268 = HEAP32[$214>>2]|0;
    $269 = $267 << 2;
    $270 = Math_imul($269, $268)|0;
    HEAP32[$215>>2] = $270;
    $$sink151 = $270;
   } else {
    $249 = 0;
    label = 24;
   }
  } else {
   $249 = 0;
   label = 24;
  }
 } else {
  $249 = $219;
  label = 24;
 }
 if ((label|0) == 24) {
  $228 = HEAP16[$213>>1]|0;
  $229 = $228 << 16 >> 16;
  $230 = HEAP32[$214>>2]|0;
  $231 = $229 << 15;
  $232 = Math_imul($231, $230)|0;
  $233 = ((($2)) + 118|0);
  $234 = HEAP16[$233>>1]|0;
  $235 = $234 << 16 >> 16;
  $236 = ((($9)) + 236|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = Math_imul($235, -5906)|0;
  $239 = Math_imul($238, $237)|0;
  $240 = ((($2)) + 86|0);
  $241 = HEAP16[$240>>1]|0;
  $242 = $241 << 16 >> 16;
  $243 = ((($9)) + 172|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($242*6967)|0;
  $246 = Math_imul($245, $244)|0;
  $247 = (($246) + ($239))|0;
  $248 = $249 << 16 >> 16;
  $250 = ((($9)) + 108|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = Math_imul($248, -10426)|0;
  $253 = Math_imul($252, $251)|0;
  $254 = (($247) + ($253))|0;
  $255 = $217 << 16 >> 16;
  $256 = ((($9)) + 44|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($255*29692)|0;
  $259 = Math_imul($258, $257)|0;
  $260 = (($254) + ($259))|0;
  $261 = $232 | 4096;
  $262 = (($261) + ($260))|0;
  $263 = $262 >> 13;
  HEAP32[$215>>2] = $263;
  $264 = (($261) - ($260))|0;
  $265 = $264 >> 13;
  $$sink151 = $265;
 }
 $271 = ((($5)) + 44|0);
 HEAP32[$271>>2] = $$sink151;
 $272 = ((($2)) + 10|0);
 $273 = ((($9)) + 20|0);
 $274 = ((($5)) + 20|0);
 $275 = ((($2)) + 26|0);
 $276 = HEAP16[$275>>1]|0;
 $277 = ($276<<16>>16)==(0);
 $278 = ((($2)) + 58|0);
 if ($277) {
  $279 = HEAP16[$278>>1]|0;
  $280 = ($279<<16>>16)==(0);
  if ($280) {
   $281 = ((($2)) + 90|0);
   $282 = HEAP16[$281>>1]|0;
   $283 = ($282<<16>>16)==(0);
   if ($283) {
    $284 = ((($2)) + 122|0);
    $285 = HEAP16[$284>>1]|0;
    $286 = ($285<<16>>16)==(0);
    if ($286) {
     $325 = HEAP16[$272>>1]|0;
     $326 = $325 << 16 >> 16;
     $327 = HEAP32[$273>>2]|0;
     $328 = $326 << 2;
     $329 = Math_imul($328, $327)|0;
     HEAP32[$274>>2] = $329;
     $$sink153 = $329;
    } else {
     label = 30;
    }
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
 } else {
  label = 30;
 }
 if ((label|0) == 30) {
  $287 = HEAP16[$272>>1]|0;
  $288 = $287 << 16 >> 16;
  $289 = HEAP32[$273>>2]|0;
  $290 = $288 << 15;
  $291 = Math_imul($290, $289)|0;
  $292 = ((($2)) + 122|0);
  $293 = HEAP16[$292>>1]|0;
  $294 = $293 << 16 >> 16;
  $295 = ((($9)) + 244|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = Math_imul($294, -5906)|0;
  $298 = Math_imul($297, $296)|0;
  $299 = ((($2)) + 90|0);
  $300 = HEAP16[$299>>1]|0;
  $301 = $300 << 16 >> 16;
  $302 = ((($9)) + 180|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = ($301*6967)|0;
  $305 = Math_imul($304, $303)|0;
  $306 = (($305) + ($298))|0;
  $307 = HEAP16[$278>>1]|0;
  $308 = $307 << 16 >> 16;
  $309 = ((($9)) + 116|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = Math_imul($308, -10426)|0;
  $312 = Math_imul($311, $310)|0;
  $313 = (($306) + ($312))|0;
  $314 = $276 << 16 >> 16;
  $315 = ((($9)) + 52|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = ($314*29692)|0;
  $318 = Math_imul($317, $316)|0;
  $319 = (($313) + ($318))|0;
  $320 = $291 | 4096;
  $321 = (($320) + ($319))|0;
  $322 = $321 >> 13;
  HEAP32[$274>>2] = $322;
  $323 = (($320) - ($319))|0;
  $324 = $323 >> 13;
  $$sink153 = $324;
 }
 $330 = ((($5)) + 52|0);
 HEAP32[$330>>2] = $$sink153;
 $331 = ((($2)) + 14|0);
 $332 = ((($9)) + 28|0);
 $333 = ((($5)) + 28|0);
 $334 = ((($2)) + 30|0);
 $335 = HEAP16[$334>>1]|0;
 $336 = ($335<<16>>16)==(0);
 $337 = ((($2)) + 62|0);
 if ($336) {
  $338 = HEAP16[$337>>1]|0;
  $339 = ($338<<16>>16)==(0);
  if ($339) {
   $340 = ((($2)) + 94|0);
   $341 = HEAP16[$340>>1]|0;
   $342 = ($341<<16>>16)==(0);
   if ($342) {
    $343 = ((($2)) + 126|0);
    $344 = HEAP16[$343>>1]|0;
    $345 = ($344<<16>>16)==(0);
    if ($345) {
     $384 = HEAP16[$331>>1]|0;
     $385 = $384 << 16 >> 16;
     $386 = HEAP32[$332>>2]|0;
     $387 = $385 << 2;
     $388 = Math_imul($387, $386)|0;
     HEAP32[$333>>2] = $388;
     $$sink155 = $388;
    } else {
     label = 36;
    }
   } else {
    label = 36;
   }
  } else {
   label = 36;
  }
 } else {
  label = 36;
 }
 if ((label|0) == 36) {
  $346 = HEAP16[$331>>1]|0;
  $347 = $346 << 16 >> 16;
  $348 = HEAP32[$332>>2]|0;
  $349 = $347 << 15;
  $350 = Math_imul($349, $348)|0;
  $351 = ((($2)) + 126|0);
  $352 = HEAP16[$351>>1]|0;
  $353 = $352 << 16 >> 16;
  $354 = ((($9)) + 252|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = Math_imul($353, -5906)|0;
  $357 = Math_imul($356, $355)|0;
  $358 = ((($2)) + 94|0);
  $359 = HEAP16[$358>>1]|0;
  $360 = $359 << 16 >> 16;
  $361 = ((($9)) + 188|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ($360*6967)|0;
  $364 = Math_imul($363, $362)|0;
  $365 = (($364) + ($357))|0;
  $366 = HEAP16[$337>>1]|0;
  $367 = $366 << 16 >> 16;
  $368 = ((($9)) + 124|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = Math_imul($367, -10426)|0;
  $371 = Math_imul($370, $369)|0;
  $372 = (($365) + ($371))|0;
  $373 = $335 << 16 >> 16;
  $374 = ((($9)) + 60|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = ($373*29692)|0;
  $377 = Math_imul($376, $375)|0;
  $378 = (($372) + ($377))|0;
  $379 = $350 | 4096;
  $380 = (($379) + ($378))|0;
  $381 = $380 >> 13;
  HEAP32[$333>>2] = $381;
  $382 = (($379) - ($378))|0;
  $383 = $382 >> 13;
  $$sink155 = $383;
 }
 $389 = ((($5)) + 60|0);
 HEAP32[$389>>2] = $$sink155;
 $76 = ((($7)) + 128|0);
 $390 = HEAP32[$3>>2]|0;
 $78 = (($390) + ($4)|0);
 $92 = HEAP32[$156>>2]|0;
 $391 = ((($5)) + 12|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = $92 | $392;
 $394 = ($393|0)==(0);
 if ($394) {
  $65 = ((($5)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0);
  if ($67) {
   $68 = ((($5)) + 28|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0);
   if ($70) {
    $71 = HEAP32[$5>>2]|0;
    $72 = (($71) + 16)|0;
    $73 = $72 >>> 5;
    $74 = $73 & 1023;
    $75 = (($76) + ($74)|0);
    $77 = HEAP8[$75>>0]|0;
    HEAP8[$78>>0] = $77;
    $$sink = $77;
   } else {
    $89 = 0;
    label = 9;
   }
  } else {
   $89 = 0;
   label = 9;
  }
 } else {
  $89 = $392;
  label = 9;
 }
 if ((label|0) == 9) {
  $79 = HEAP32[$5>>2]|0;
  $80 = $79 << 15;
  $81 = ((($5)) + 28|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($82, -5906)|0;
  $84 = ((($5)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85*6967)|0;
  $87 = (($86) + ($83))|0;
  $88 = Math_imul($89, -10426)|0;
  $90 = (($87) + ($88))|0;
  $91 = ($92*29692)|0;
  $93 = (($90) + ($91))|0;
  $94 = (($80) + 524288)|0;
  $95 = (($94) + ($93))|0;
  $96 = $95 >>> 20;
  $97 = $96 & 1023;
  $98 = (($76) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  HEAP8[$78>>0] = $99;
  $100 = (($94) - ($93))|0;
  $101 = $100 >>> 20;
  $102 = $101 & 1023;
  $103 = (($76) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $$sink = $104;
 }
 $105 = ((($78)) + 1|0);
 HEAP8[$105>>0] = $$sink;
 $$2 = ((($5)) + 32|0);
 $106 = ((($3)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + ($4)|0);
 $109 = ((($5)) + 36|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($5)) + 44|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $110 | $112;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = ((($5)) + 52|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($116|0)==(0);
  if ($117) {
   $118 = ((($5)) + 60|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($119|0)==(0);
   if ($120) {
    $146 = HEAP32[$$2>>2]|0;
    $147 = (($146) + 16)|0;
    $148 = $147 >>> 5;
    $149 = $148 & 1023;
    $150 = (($76) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    HEAP8[$108>>0] = $151;
    $$sink$1 = $151;
    $152 = ((($108)) + 1|0);
    HEAP8[$152>>0] = $$sink$1;
    STACKTOP = sp;return;
   } else {
    $131 = 0;
   }
  } else {
   $131 = 0;
  }
 } else {
  $131 = $112;
 }
 $121 = HEAP32[$$2>>2]|0;
 $122 = $121 << 15;
 $123 = ((($5)) + 60|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = Math_imul($124, -5906)|0;
 $126 = ((($5)) + 52|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127*6967)|0;
 $129 = (($128) + ($125))|0;
 $130 = Math_imul($131, -10426)|0;
 $132 = (($129) + ($130))|0;
 $133 = ($110*29692)|0;
 $134 = (($132) + ($133))|0;
 $135 = (($122) + 524288)|0;
 $136 = (($135) + ($134))|0;
 $137 = $136 >>> 20;
 $138 = $137 & 1023;
 $139 = (($76) + ($138)|0);
 $140 = HEAP8[$139>>0]|0;
 HEAP8[$108>>0] = $140;
 $141 = (($135) - ($134))|0;
 $142 = $141 >>> 20;
 $143 = $142 & 1023;
 $144 = (($76) + ($143)|0);
 $145 = HEAP8[$144>>0]|0;
 $$sink$1 = $145;
 $152 = ((($108)) + 1|0);
 HEAP8[$152>>0] = $$sink$1;
 STACKTOP = sp;return;
}
function _jpeg_idct_1x1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 324|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 128|0);
 $8 = ((($1)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP16[$2>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = HEAP32[$9>>2]|0;
 $13 = Math_imul($12, $11)|0;
 $14 = (($13) + 4)|0;
 $15 = $14 >>> 3;
 $16 = $15 & 1023;
 $17 = (($7) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) + ($4)|0);
 HEAP8[$20>>0] = $18;
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3859]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (15476 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[3859] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(15444)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (15476 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[3859] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(15456)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (15476 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[3859] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(15444)>>2] = $76;
     HEAP32[(15456)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(15440)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (15740 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (15740 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(15440)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(15456)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (15476 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[3859] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(15444)>>2] = $$0173$lcssa$i;
       HEAP32[(15456)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(15440)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (15740 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (15740 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(15444)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (15740 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(15440)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (15476 + ($388<<2)|0);
          $390 = HEAP32[3859]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[3859] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (15740 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(15440)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(15444)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(15456)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(15456)>>2] = $467;
   HEAP32[(15444)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(15444)>>2] = 0;
   HEAP32[(15456)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(15448)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(15448)>>2] = $482;
  $483 = HEAP32[(15460)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(15460)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[3977]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(15916)>>2] = 4096;
  HEAP32[(15912)>>2] = 4096;
  HEAP32[(15920)>>2] = -1;
  HEAP32[(15924)>>2] = -1;
  HEAP32[(15928)>>2] = 0;
  HEAP32[(15880)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[3977] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(15916)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(15876)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(15868)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(15880)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(15460)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (15884);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(15912)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(15868)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(15876)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(15916)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(15880)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(15880)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(15868)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(15868)>>2] = $583;
  $584 = HEAP32[(15872)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(15872)>>2] = $583;
  }
  $586 = HEAP32[(15460)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(15452)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(15452)>>2] = $$748$i;
    }
    HEAP32[(15884)>>2] = $$748$i;
    HEAP32[(15888)>>2] = $$723947$i;
    HEAP32[(15896)>>2] = 0;
    $591 = HEAP32[3977]|0;
    HEAP32[(15472)>>2] = $591;
    HEAP32[(15468)>>2] = -1;
    HEAP32[(15488)>>2] = (15476);
    HEAP32[(15484)>>2] = (15476);
    HEAP32[(15496)>>2] = (15484);
    HEAP32[(15492)>>2] = (15484);
    HEAP32[(15504)>>2] = (15492);
    HEAP32[(15500)>>2] = (15492);
    HEAP32[(15512)>>2] = (15500);
    HEAP32[(15508)>>2] = (15500);
    HEAP32[(15520)>>2] = (15508);
    HEAP32[(15516)>>2] = (15508);
    HEAP32[(15528)>>2] = (15516);
    HEAP32[(15524)>>2] = (15516);
    HEAP32[(15536)>>2] = (15524);
    HEAP32[(15532)>>2] = (15524);
    HEAP32[(15544)>>2] = (15532);
    HEAP32[(15540)>>2] = (15532);
    HEAP32[(15552)>>2] = (15540);
    HEAP32[(15548)>>2] = (15540);
    HEAP32[(15560)>>2] = (15548);
    HEAP32[(15556)>>2] = (15548);
    HEAP32[(15568)>>2] = (15556);
    HEAP32[(15564)>>2] = (15556);
    HEAP32[(15576)>>2] = (15564);
    HEAP32[(15572)>>2] = (15564);
    HEAP32[(15584)>>2] = (15572);
    HEAP32[(15580)>>2] = (15572);
    HEAP32[(15592)>>2] = (15580);
    HEAP32[(15588)>>2] = (15580);
    HEAP32[(15600)>>2] = (15588);
    HEAP32[(15596)>>2] = (15588);
    HEAP32[(15608)>>2] = (15596);
    HEAP32[(15604)>>2] = (15596);
    HEAP32[(15616)>>2] = (15604);
    HEAP32[(15612)>>2] = (15604);
    HEAP32[(15624)>>2] = (15612);
    HEAP32[(15620)>>2] = (15612);
    HEAP32[(15632)>>2] = (15620);
    HEAP32[(15628)>>2] = (15620);
    HEAP32[(15640)>>2] = (15628);
    HEAP32[(15636)>>2] = (15628);
    HEAP32[(15648)>>2] = (15636);
    HEAP32[(15644)>>2] = (15636);
    HEAP32[(15656)>>2] = (15644);
    HEAP32[(15652)>>2] = (15644);
    HEAP32[(15664)>>2] = (15652);
    HEAP32[(15660)>>2] = (15652);
    HEAP32[(15672)>>2] = (15660);
    HEAP32[(15668)>>2] = (15660);
    HEAP32[(15680)>>2] = (15668);
    HEAP32[(15676)>>2] = (15668);
    HEAP32[(15688)>>2] = (15676);
    HEAP32[(15684)>>2] = (15676);
    HEAP32[(15696)>>2] = (15684);
    HEAP32[(15692)>>2] = (15684);
    HEAP32[(15704)>>2] = (15692);
    HEAP32[(15700)>>2] = (15692);
    HEAP32[(15712)>>2] = (15700);
    HEAP32[(15708)>>2] = (15700);
    HEAP32[(15720)>>2] = (15708);
    HEAP32[(15716)>>2] = (15708);
    HEAP32[(15728)>>2] = (15716);
    HEAP32[(15724)>>2] = (15716);
    HEAP32[(15736)>>2] = (15724);
    HEAP32[(15732)>>2] = (15724);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(15460)>>2] = $600;
    HEAP32[(15448)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(15924)>>2]|0;
    HEAP32[(15464)>>2] = $606;
   } else {
    $$024367$i = (15884);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(15448)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(15460)>>2] = $631;
       HEAP32[(15448)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(15924)>>2]|0;
       HEAP32[(15464)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(15452)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(15452)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (15884);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (15884);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(15448)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(15448)>>2] = $678;
        HEAP32[(15460)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(15456)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(15444)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(15444)>>2] = $684;
         HEAP32[(15456)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[3859]|0;
            $703 = $702 & $701;
            HEAP32[3859] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (15740 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(15440)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(15440)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (15476 + ($763<<2)|0);
         $765 = HEAP32[3859]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[3859] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (15740 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(15440)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(15440)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (15884);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(15460)>>2] = $866;
    HEAP32[(15448)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(15924)>>2]|0;
    HEAP32[(15464)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(15884)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(15884)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(15884)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(15884)+12>>2]|0;
    HEAP32[(15884)>>2] = $$748$i;
    HEAP32[(15888)>>2] = $$723947$i;
    HEAP32[(15896)>>2] = 0;
    HEAP32[(15892)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (15476 + ($888<<2)|0);
      $890 = HEAP32[3859]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[3859] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (15740 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(15440)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(15440)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(15448)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(15448)>>2] = $963;
   $964 = HEAP32[(15460)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(15460)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(15452)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(15456)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(15444)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[3859]|0;
     $29 = $28 & $27;
     HEAP32[3859] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (15740 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(15440)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(15440)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(15460)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(15448)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(15448)>>2] = $98;
   HEAP32[(15460)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(15456)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(15456)>>2] = 0;
   HEAP32[(15444)>>2] = 0;
   return;
  }
  $103 = HEAP32[(15456)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(15444)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(15444)>>2] = $106;
   HEAP32[(15456)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[3859]|0;
     $122 = $121 & $120;
     HEAP32[3859] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (15740 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(15440)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(15440)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(15456)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(15444)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (15476 + ($183<<2)|0);
  $185 = HEAP32[3859]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[3859] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (15740 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(15440)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(15440)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(15468)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(15468)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (15892);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(15468)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(15916)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(15460)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(15448)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(15460)>>2] = $33;
  HEAP32[(15448)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(15456)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(15444)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(15444)>>2] = $storemerge1;
  HEAP32[(15456)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[3859]|0;
    $81 = $80 & $79;
    HEAP32[3859] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (15740 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(15440)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(15440)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(15456)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(15444)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[3859]|0;
     $25 = $24 & $23;
     HEAP32[3859] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (15740 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(15440)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(15440)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(15460)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(15448)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(15448)>>2] = $89;
   HEAP32[(15460)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(15456)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(15456)>>2] = 0;
   HEAP32[(15444)>>2] = 0;
   return;
  }
  $94 = HEAP32[(15456)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(15444)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(15444)>>2] = $97;
   HEAP32[(15456)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[3859]|0;
     $113 = $112 & $111;
     HEAP32[3859] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (15740 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(15440)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(15440)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(15456)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(15444)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (15476 + ($174<<2)|0);
  $176 = HEAP32[3859]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[3859] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (15740 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(15440)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(15440)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_380($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15996|0);
}
function _dummy_380($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 16000 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_14()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$$47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 17;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (1872 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$44 = $33;
      }
      while(1) {
       $41 = $$141 << 6;
       $42 = ((($$1)) + 1|0);
       $43 = $44&255;
       $45 = (($43) + -128)|0;
       $46 = $45 | $41;
       $47 = (($$144) + -1)|0;
       $48 = ($46|0)<(0);
       if (!($48)) {
        break;
       }
       $50 = ($47|0)==(0);
       if ($50) {
        $$2 = $46;
        break L14;
       }
       $51 = HEAP8[$42>>0]|0;
       $52 = $51 & -64;
       $53 = ($52<<24>>24)==(-128);
       if ($53) {
        $$1 = $42;$$141 = $46;$$144 = $47;$44 = $51;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $46;
      $49 = (($2) - ($47))|0;
      $$0 = $49;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $54 = (___errno_location()|0);
  HEAP32[$54>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_14() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2464|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=2708; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 255]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((12677 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 13141;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$280 = $244;$282 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 13141;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 13141 : (13143);
     $$$ = $270 ? $$ : (13142);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 13141;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 13141;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 13151;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 13141;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (13141 + ($240)|0);
    $$286 = $or$cond278 ? 13141 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$280 = $229;$282 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$280 = $275;$282 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 13141;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $281 = ($280|0)!=(0);
   $283 = ($282|0)!=(0);
   $284 = $281 | $283;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$345,$347);
  _pad($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (13189 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_206()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_419($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 13158;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (13159) : (13164);
  $$$ = $16 ? $$ : (13161);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_419($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 13177 : 13181;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 15374 : 13185;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (13189 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,13205,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,13205,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_419($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___pthread_self_206() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (13207 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 13295;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 13295;
  } else {
   $$01214 = 13295;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 255]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 255]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($$|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165167 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((15100) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165167 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((15100) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($$166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $93 = ($92|0)<(0);
        $94 = $93 << 31 >> 31;
        $95 = $92 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165168 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$262 = $103;$264 = $102;
       } else {
        $$1165168 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$262 = $292;$264 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165167 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165167) + -1)|0;
     $120 = $119 & $$1165167;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165167*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (15356 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((15100) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($$1165167>>>0)>($134>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((15100) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($$1165167>>>0)>($148>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($$1165167>>>0)<=($154>>>0);
      $157 = ($153>>>0)<($158>>>0);
      $159 = ($152>>>0)<($160>>>0);
      $161 = ($153|0)==($158|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165168 = $$1165167;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $166 | $168;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((15100) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($$1165167>>>0)<=($180>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165168 = $$1165167;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((15100) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($$1165167>>>0)>($124>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165167)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((15100) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($$1165167>>>0)>($199>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($$1165167>>>0)>($203>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165167|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$208 = $296;$210 = $295;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165167|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((15100) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($$1165167>>>0)>($236>>>0);
       if ($237) {
        $$7198 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165168 = $$1165167;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165168 = $$1165167;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((15100) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($$1165168>>>0)>($240>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((15100) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($$1165168>>>0)>($251>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $294;$264 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$25 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$25 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$25 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($26) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $25;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 255]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 255]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (15365 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (15374 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0, $$pre$phi201Z2D = 0.0, $$pre200 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$50 = 0;$52 = 0;$95 = $38;$97 = $39;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $$pre = $$2 | 32;
  if ($43) {
   label = 20;
  } else {
   $44 = (($$pre) + -97)|0;
   $45 = ($44>>>0)<(6);
   $46 = ($$2|0)==(46);
   $or$cond6 = $46 | $45;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
   if ($46) {
    $47 = ($$0146|0)==(0);
    if ($47) {
     $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$211 = $52;$212 = $50;$213 = $52;$214 = $50;
    } else {
     $$2$lcssa = 46;
     break;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $48 = ($$2|0)>(57);
   $49 = (($$pre) + -87)|0;
   $$0133 = $48 ? $49 : $42;
   $51 = ($50|0)<(0);
   $53 = ($52>>>0)<(8);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $51 | $55;
   do {
    if ($56) {
     $57 = $$0159 << 4;
     $58 = (($$0133) + ($57))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $58;
    } else {
     $59 = ($50|0)<(0);
     $60 = ($52>>>0)<(14);
     $61 = ($50|0)==(0);
     $62 = $61 & $60;
     $63 = $59 | $62;
     if ($63) {
      $64 = (+($$0133|0));
      $65 = $$0152 * 0.0625;
      $66 = $65 * $64;
      $67 = $$0155 + $66;
      $$1149 = $$0148;$$1153 = $65;$$1156 = $67;$$1160 = $$0159;
      break;
     } else {
      $68 = ($$0133|0)==(0);
      $69 = ($$0148|0)!=(0);
      $or$cond = $69 | $68;
      $70 = $$0152 * 0.5;
      $71 = $$0155 + $70;
      $$0155$ = $or$cond ? $$0155 : $71;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $72 = (_i64Add(($52|0),($50|0),1,0)|0);
   $73 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$211 = $95;$212 = $97;$213 = $72;$214 = $73;
  }
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$7>>2]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = ((($74)) + 1|0);
   HEAP32[$5>>2] = $77;
   $78 = HEAP8[$74>>0]|0;
   $79 = $78&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $79;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  } else {
   $80 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $80;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  }
 }
 $81 = ($$2144|0)==(0);
 do {
  if ($81) {
   $82 = HEAP32[$7>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = HEAP32[$5>>2]|0;
    $85 = ((($84)) + -1|0);
    HEAP32[$5>>2] = $85;
   }
   $86 = ($4|0)==(0);
   if ($86) {
    ___shlim($0,0);
   } else {
    if (!($83)) {
     $87 = HEAP32[$5>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$5>>2] = $88;
    }
    $89 = ($$0146|0)==(0);
    $brmerge = $89 | $83;
    if (!($brmerge)) {
     $90 = HEAP32[$5>>2]|0;
     $91 = ((($90)) + -1|0);
     HEAP32[$5>>2] = $91;
    }
   }
   $92 = (+($3|0));
   $93 = $92 * 0.0;
   $$0165 = $93;
  } else {
   $94 = ($$0146|0)==(0);
   $96 = $94 ? $52 : $95;
   $98 = $94 ? $50 : $97;
   $99 = ($50|0)<(0);
   $100 = ($52>>>0)<(8);
   $101 = ($50|0)==(0);
   $102 = $101 & $100;
   $103 = $99 | $102;
   if ($103) {
    $$3162183 = $$0159;$105 = $52;$106 = $50;
    while(1) {
     $104 = $$3162183 << 4;
     $107 = (_i64Add(($105|0),($106|0),1,0)|0);
     $108 = tempRet0;
     $109 = ($106|0)<(0);
     $110 = ($105>>>0)<(7);
     $111 = ($106|0)==(0);
     $112 = $111 & $110;
     $113 = $109 | $112;
     if ($113) {
      $$3162183 = $104;$105 = $107;$106 = $108;
     } else {
      $$3162$lcssa = $104;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $114 = $$2$lcssa | 32;
   $115 = ($114|0)==(112);
   if ($115) {
    $116 = (_scanexp($0,$4)|0);
    $117 = tempRet0;
    $118 = ($116|0)==(0);
    $119 = ($117|0)==(-2147483648);
    $120 = $118 & $119;
    if ($120) {
     $121 = ($4|0)==(0);
     if ($121) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $122 = HEAP32[$7>>2]|0;
     $123 = ($122|0)==(0|0);
     if ($123) {
      $134 = 0;$135 = 0;
     } else {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + -1|0);
      HEAP32[$5>>2] = $125;
      $134 = 0;$135 = 0;
     }
    } else {
     $134 = $116;$135 = $117;
    }
   } else {
    $126 = HEAP32[$7>>2]|0;
    $127 = ($126|0)==(0|0);
    if ($127) {
     $134 = 0;$135 = 0;
    } else {
     $128 = HEAP32[$5>>2]|0;
     $129 = ((($128)) + -1|0);
     HEAP32[$5>>2] = $129;
     $134 = 0;$135 = 0;
    }
   }
   $130 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $131 = tempRet0;
   $132 = (_i64Add(($130|0),($131|0),-32,-1)|0);
   $133 = tempRet0;
   $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
   $137 = tempRet0;
   $138 = ($$3162$lcssa|0)==(0);
   if ($138) {
    $139 = (+($3|0));
    $140 = $139 * 0.0;
    $$0165 = $140;
    break;
   }
   $141 = (0 - ($2))|0;
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = ($137|0)>($143|0);
   $145 = ($136>>>0)>($141>>>0);
   $146 = ($137|0)==($143|0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    $149 = (___errno_location()|0);
    HEAP32[$149>>2] = 34;
    $150 = (+($3|0));
    $151 = $150 * 1.7976931348623157E+308;
    $152 = $151 * 1.7976931348623157E+308;
    $$0165 = $152;
    break;
   }
   $153 = (($2) + -106)|0;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = ($137|0)<($155|0);
   $157 = ($136>>>0)<($153>>>0);
   $158 = ($137|0)==($155|0);
   $159 = $158 & $157;
   $160 = $156 | $159;
   if ($160) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0165 = $165;
    break;
   }
   $161 = ($$3162$lcssa|0)>(-1);
   if ($161) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$170 = $136;$171 = $137;
    while(1) {
     $166 = !($$3158179 >= 0.5);
     $167 = $$4163178 << 1;
     $168 = $$3158179 + -1.0;
     $not$ = $166 ^ 1;
     $169 = $not$&1;
     $$5164 = $167 | $169;
     $$pn = $166 ? $$3158179 : $168;
     $$4 = $$3158179 + $$pn;
     $172 = (_i64Add(($170|0),($171|0),-1,-1)|0);
     $173 = tempRet0;
     $174 = ($$5164|0)>(-1);
     if ($174) {
      $$3158179 = $$4;$$4163178 = $$5164;$170 = $172;$171 = $173;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$181 = $172;$182 = $173;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$181 = $136;$182 = $137;
   }
   $175 = ($1|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = ($2|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = (_i64Subtract(32,0,($2|0),($178|0))|0);
   $180 = tempRet0;
   $183 = (_i64Add(($179|0),($180|0),($181|0),($182|0))|0);
   $184 = tempRet0;
   $185 = ($184|0)<($176|0);
   $186 = ($183>>>0)<($1>>>0);
   $187 = ($184|0)==($176|0);
   $188 = $187 & $186;
   $189 = $185 | $188;
   if ($189) {
    $190 = ($183|0)>(0);
    if ($190) {
     $$0166 = $183;
     label = 59;
    } else {
     $$0166170 = 0;$194 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $191 = ($$0166|0)<(53);
    $192 = (84 - ($$0166))|0;
    if ($191) {
     $$0166170 = $$0166;$194 = $192;
     label = 61;
    } else {
     $$pre200 = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phi201Z2D = $$pre200;
    }
   }
   if ((label|0) == 61) {
    $193 = (+($3|0));
    $195 = (+_scalbn(1.0,$194));
    $196 = (+_copysignl($195,$193));
    $$0151 = $196;$$0166169 = $$0166170;$$pre$phi201Z2D = $193;
   }
   $197 = ($$0166169|0)<(32);
   $198 = $$3158$lcssa != 0.0;
   $or$cond4 = $198 & $197;
   $199 = $$4163$lcssa & 1;
   $200 = ($199|0)==(0);
   $or$cond168 = $200 & $or$cond4;
   $201 = $or$cond168&1;
   $$6 = (($$4163$lcssa) + ($201))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $202 = (+($$6>>>0));
   $203 = $$pre$phi201Z2D * $202;
   $204 = $$0151 + $203;
   $205 = $$5 * $$pre$phi201Z2D;
   $206 = $205 + $204;
   $207 = $206 - $$0151;
   $208 = $207 != 0.0;
   if (!($208)) {
    $209 = (___errno_location()|0);
    HEAP32[$209>>2] = 34;
   }
   $210 = (+_scalbnl($207,$181));
   $$0165 = $210;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0;
 var $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$413 = 0, $$423 = 0, $$4349493 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$neg440 = 0, $$neg441 = 0, $$pre = 0, $$pre551 = 0;
 var $$promoted = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond420 = 0, $or$cond420$not = 0, $or$cond421 = 0, $or$cond424 = 0, $or$cond5 = 0;
 var $or$cond579 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$368 = 0;$369 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$368 = $27;$369 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$368 = 0;$369 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341511 = 0;$$0345510 = 0;$$0401507 = 0;$$1394509 = $$0393;$$3399508 = $$2398;$$3512 = $$2;$370 = $39;$371 = $37;$372 = $368;$373 = $369;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($370) {
      $cond = ($$1394509|0)==(0);
      if ($cond) {
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = 1;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $44;$375 = $45;$376 = $44;$377 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345510|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3512|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401507;
      $49 = ($$0341511|0)==(0);
      $$pre551 = (($6) + ($$0345510<<2)|0);
      if ($49) {
       $$sink = $371;
      } else {
       $50 = HEAP32[$$pre551>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3512) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre551>>2] = $$sink;
      $54 = (($$0341511) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($$0345510) + ($56))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394509;$$2403 = $$$0401;$$4400 = 1;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341511 = $$2343;$$0345510 = $$2347;$$0401507 = $$2403;$$1394509 = $$2395;$$3399508 = $$4400;$$3512 = $$3$be;$370 = $68;$371 = $66;$372 = $374;$373 = $375;$44 = $376;$45 = $377;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $374;$72 = $376;$74 = $375;$75 = $377;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399508|0)!=(0);
   $$0341463 = $$0341511;$$0345467 = $$0345510;$$0401473 = $$0401507;$378 = $44;$379 = $45;$380 = $372;$381 = $373;$382 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $368;$72 = 0;$74 = $369;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$378 = $72;$379 = $75;$380 = $73;$381 = $76;$382 = $77;
     label = 37;
     break;
    } else {
     $$0341462 = $$0341$lcssa;$$0345466 = $$0345$lcssa;$$0401472 = $$0401$lcssa;$383 = $72;$384 = $75;$385 = $77;$386 = $73;$387 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341461 = $$0341$lcssa;$$0345465 = $$0345$lcssa;$$0401471 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341462 = $$0341463;$$0345466 = $$0345467;$$0401472 = $$0401473;$383 = $378;$384 = $379;$385 = $382;$386 = $380;$387 = $381;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($382) {
    $$0341461 = $$0341463;$$0345465 = $$0345467;$$0401471 = $$0401473;$104 = $380;$106 = $378;$107 = $381;$109 = $379;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($385) {
   $$0341461 = $$0341462;$$0345465 = $$0345466;$$0401471 = $$0401472;$104 = $386;$106 = $383;$107 = $387;$109 = $384;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341461|0)==(0);
   if ($146) {
    $$3348 = $$0345465;
   } else {
    $147 = ($$0341461|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345465<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344501 = $$0341461;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344501) + 1)|0;
      $152 = ($$3344501|0)<(8);
      if ($152) {
       $$3344501 = $151;$150 = $149;
      } else {
       break;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $153 = (($$0345465) + 1)|0;
    $$3348 = $153;
   }
   $154 = ($$0401471|0)<(9);
   if ($154) {
    $155 = ($$0401471|0)<=($104|0);
    $156 = ($104|0)<(18);
    $or$cond5 = $155 & $156;
    if ($or$cond5) {
     $157 = ($104|0)==(9);
     if ($157) {
      $158 = (+($4|0));
      $159 = HEAP32[$6>>2]|0;
      $160 = (+($159>>>0));
      $161 = $158 * $160;
      $$1 = $161;
      break;
     }
     $162 = ($104|0)<(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $167 = (8 - ($104))|0;
      $168 = (2832 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (+($169|0));
      $171 = $166 / $170;
      $$1 = $171;
      break;
     }
     $$neg440 = Math_imul($104, -3)|0;
     $$neg441 = (($2) + 27)|0;
     $172 = (($$neg441) + ($$neg440))|0;
     $173 = ($172|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $174 = $$pre >>> $172;
     $175 = ($174|0)==(0);
     $or$cond579 = $173 | $175;
     if ($or$cond579) {
      $176 = (+($4|0));
      $177 = (+($$pre>>>0));
      $178 = $176 * $177;
      $179 = (($104) + -10)|0;
      $180 = (2832 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (+($181|0));
      $183 = $178 * $182;
      $$1 = $183;
      break;
     }
    }
   }
   $184 = (($104|0) % 9)&-1;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0380$ph = 0;$$1373$ph446 = $$3348;$$2352$ph447 = 0;$$2387$ph445 = $104;
   } else {
    $186 = ($104|0)>(-1);
    $187 = (($184) + 9)|0;
    $188 = $186 ? $184 : $187;
    $189 = (8 - ($188))|0;
    $190 = (2832 + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$3348|0)==(0);
    if ($192) {
     $$0350$lcssa553 = 0;$$0372 = 0;$$0385$lcssa552 = $104;
    } else {
     $193 = (1000000000 / ($191|0))&-1;
     $$0340494 = 0;$$0350492 = 0;$$0385491 = $104;$$4349493 = 0;
     while(1) {
      $194 = (($6) + ($$4349493<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195>>>0) % ($191>>>0))&-1;
      $197 = (($195>>>0) / ($191>>>0))&-1;
      $198 = (($197) + ($$0340494))|0;
      HEAP32[$194>>2] = $198;
      $199 = Math_imul($193, $196)|0;
      $200 = ($$4349493|0)==($$0350492|0);
      $201 = ($198|0)==(0);
      $or$cond418 = $200 & $201;
      $202 = (($$0350492) + 1)|0;
      $203 = $202 & 127;
      $204 = (($$0385491) + -9)|0;
      $$$0385 = $or$cond418 ? $204 : $$0385491;
      $$$0350 = $or$cond418 ? $203 : $$0350492;
      $205 = (($$4349493) + 1)|0;
      $206 = ($205|0)==($$3348|0);
      if ($206) {
       break;
      } else {
       $$0340494 = $199;$$0350492 = $$$0350;$$0385491 = $$$0385;$$4349493 = $205;
      }
     }
     $207 = ($199|0)==(0);
     if ($207) {
      $$0350$lcssa553 = $$$0350;$$0372 = $$3348;$$0385$lcssa552 = $$$0385;
     } else {
      $208 = (($6) + ($$3348<<2)|0);
      $209 = (($$3348) + 1)|0;
      HEAP32[$208>>2] = $199;
      $$0350$lcssa553 = $$$0350;$$0372 = $209;$$0385$lcssa552 = $$$0385;
     }
    }
    $210 = (9 - ($188))|0;
    $211 = (($210) + ($$0385$lcssa552))|0;
    $$0380$ph = 0;$$1373$ph446 = $$0372;$$2352$ph447 = $$0350$lcssa553;$$2387$ph445 = $211;
   }
   L101: while(1) {
    $212 = ($$2387$ph445|0)<(18);
    $213 = ($$2387$ph445|0)==(18);
    $214 = (($6) + ($$2352$ph447<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph446;
    while(1) {
     if (!($212)) {
      if (!($213)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = $$2387$ph445;$$6378$ph = $$1373;
       break L101;
      }
      $215 = HEAP32[$214>>2]|0;
      $216 = ($215>>>0)<(9007199);
      if (!($216)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $217 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $217;
     while(1) {
      $$5 = $$5$in & 127;
      $218 = (($6) + ($$5<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (_bitshift64Shl(($219|0),0,29)|0);
      $221 = tempRet0;
      $222 = (_i64Add(($220|0),($221|0),($$0334|0),0)|0);
      $223 = tempRet0;
      $224 = ($223>>>0)>(0);
      $225 = ($222>>>0)>(1000000000);
      $226 = ($223|0)==(0);
      $227 = $226 & $225;
      $228 = $224 | $227;
      if ($228) {
       $229 = (___udivdi3(($222|0),($223|0),1000000000,0)|0);
       $230 = tempRet0;
       $231 = (___uremdi3(($222|0),($223|0),1000000000,0)|0);
       $232 = tempRet0;
       $$1335 = $229;$$sink419$off0 = $231;
      } else {
       $$1335 = 0;$$sink419$off0 = $222;
      }
      HEAP32[$218>>2] = $$sink419$off0;
      $233 = (($$2374) + 127)|0;
      $234 = $233 & 127;
      $235 = ($$5|0)!=($234|0);
      $236 = ($$5|0)==($$2352$ph447|0);
      $or$cond420 = $235 | $236;
      $or$cond420$not = $or$cond420 ^ 1;
      $237 = ($$sink419$off0|0)==(0);
      $or$cond421 = $237 & $or$cond420$not;
      $$3375 = $or$cond421 ? $$5 : $$2374;
      $238 = (($$5) + -1)|0;
      if ($236) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $238;
      }
     }
     $239 = (($$0380) + -29)|0;
     $240 = ($$1335|0)==(0);
     if ($240) {
      $$0380 = $239;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $241 = (($$2387$ph445) + 9)|0;
    $242 = (($$2352$ph447) + 127)|0;
    $243 = $242 & 127;
    $244 = ($243|0)==($$3375|0);
    $245 = (($$3375) + 127)|0;
    $246 = $245 & 127;
    $247 = (($$3375) + 126)|0;
    $248 = $247 & 127;
    $249 = (($6) + ($248<<2)|0);
    if ($244) {
     $250 = (($6) + ($246<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$249>>2]|0;
     $253 = $252 | $251;
     HEAP32[$249>>2] = $253;
     $$4376 = $246;
    } else {
     $$4376 = $$3375;
    }
    $254 = (($6) + ($243<<2)|0);
    HEAP32[$254>>2] = $$1335;
    $$0380$ph = $239;$$1373$ph446 = $$4376;$$2352$ph447 = $243;$$2387$ph445 = $241;
   }
   L119: while(1) {
    $291 = (($$6378$ph) + 1)|0;
    $288 = $291 & 127;
    $292 = (($$6378$ph) + 127)|0;
    $293 = $292 & 127;
    $294 = (($6) + ($293<<2)|0);
    $$1381$ph557 = $$1381$ph;$$4354$ph558 = $$4354$ph;$$4389$ph = $$4389$ph443;
    while(1) {
     $267 = ($$4389$ph|0)==(18);
     $295 = ($$4389$ph|0)>(27);
     $$423 = $295 ? 9 : 1;
     $$1381 = $$1381$ph557;$$4354 = $$4354$ph558;
     while(1) {
      $$0336484 = 0;
      while(1) {
       $255 = (($$0336484) + ($$4354))|0;
       $256 = $255 & 127;
       $257 = ($256|0)==($$6378$ph|0);
       if ($257) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $258 = (($6) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (2864 + ($$0336484<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($259>>>0)<($261>>>0);
       if ($262) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $263 = ($259>>>0)>($261>>>0);
       if ($263) {
        break;
       }
       $264 = (($$0336484) + 1)|0;
       $265 = ($$0336484|0)<(1);
       if ($265) {
        $$0336484 = $264;
       } else {
        $$1337 = $264;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $266 = ($$1337|0)==(2);
       $or$cond11 = $267 & $266;
       if ($or$cond11) {
        $$0365482 = 0.0;$$4483 = 0;$$9481 = $$6378$ph;
        break L119;
       }
      }
      $268 = (($$423) + ($$1381))|0;
      $269 = ($$4354|0)==($$6378$ph|0);
      if ($269) {
       $$1381 = $268;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $270 = 1 << $$423;
     $271 = (($270) + -1)|0;
     $272 = 1000000000 >>> $$423;
     $$0332488 = 0;$$5355486 = $$4354;$$5390485 = $$4389$ph;$$6487 = $$4354;
     while(1) {
      $273 = (($6) + ($$6487<<2)|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & $271;
      $276 = $274 >>> $$423;
      $277 = (($276) + ($$0332488))|0;
      HEAP32[$273>>2] = $277;
      $278 = Math_imul($275, $272)|0;
      $279 = ($$6487|0)==($$5355486|0);
      $280 = ($277|0)==(0);
      $or$cond424 = $279 & $280;
      $281 = (($$5355486) + 1)|0;
      $282 = $281 & 127;
      $283 = (($$5390485) + -9)|0;
      $$$5390 = $or$cond424 ? $283 : $$5390485;
      $$$5355 = $or$cond424 ? $282 : $$5355486;
      $284 = (($$6487) + 1)|0;
      $285 = $284 & 127;
      $286 = ($285|0)==($$6378$ph|0);
      if ($286) {
       break;
      } else {
       $$0332488 = $278;$$5355486 = $$$5355;$$5390485 = $$$5390;$$6487 = $285;
      }
     }
     $287 = ($278|0)==(0);
     if ($287) {
      $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $289 = ($288|0)==($$$5355|0);
     if (!($289)) {
      break;
     }
     $296 = HEAP32[$294>>2]|0;
     $297 = $296 | 1;
     HEAP32[$294>>2] = $297;
     $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
    }
    $290 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$290>>2] = $278;
    $$1381$ph = $268;$$4354$ph = $$$5355;$$4389$ph443 = $$$5390;$$6378$ph = $288;
   }
   while(1) {
    $298 = (($$4483) + ($$4354))|0;
    $299 = $298 & 127;
    $300 = ($299|0)==($$9481|0);
    $301 = (($$9481) + 1)|0;
    $302 = $301 & 127;
    if ($300) {
     $303 = (($302) + -1)|0;
     $304 = (($6) + ($303<<2)|0);
     HEAP32[$304>>2] = 0;
     $$10 = $302;
    } else {
     $$10 = $$9481;
    }
    $305 = $$0365482 * 1.0E+9;
    $306 = (($6) + ($299<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (+($307>>>0));
    $309 = $305 + $308;
    $310 = (($$4483) + 1)|0;
    $exitcond = ($310|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365482 = $309;$$4483 = $310;$$9481 = $$10;
    }
   }
   $311 = (+($4|0));
   $312 = $309 * $311;
   $313 = (($$1381) + 53)|0;
   $314 = (($313) - ($3))|0;
   $315 = ($314|0)<($2|0);
   $316 = ($314|0)>(0);
   $$ = $316 ? $314 : 0;
   $$0333 = $315 ? $$ : $2;
   $317 = ($$0333|0)<(53);
   if ($317) {
    $318 = (105 - ($$0333))|0;
    $319 = (+_scalbn(1.0,$318));
    $320 = (+_copysignl($319,$312));
    $321 = (53 - ($$0333))|0;
    $322 = (+_scalbn(1.0,$321));
    $323 = (+_fmodl($312,$322));
    $324 = $312 - $323;
    $325 = $320 + $324;
    $$0360 = $320;$$0361 = $323;$$1366 = $325;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $312;
   }
   $326 = (($$4354) + 2)|0;
   $327 = $326 & 127;
   $328 = ($327|0)==($$10|0);
   if ($328) {
    $$3364 = $$0361;
   } else {
    $329 = (($6) + ($327<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330>>>0)<(500000000);
    do {
     if ($331) {
      $332 = ($330|0)==(0);
      if ($332) {
       $333 = (($$4354) + 3)|0;
       $334 = $333 & 127;
       $335 = ($334|0)==($$10|0);
       if ($335) {
        $$1362 = $$0361;
        break;
       }
      }
      $336 = $311 * 0.25;
      $337 = $336 + $$0361;
      $$1362 = $337;
     } else {
      $338 = ($330|0)==(500000000);
      if (!($338)) {
       $339 = $311 * 0.75;
       $340 = $339 + $$0361;
       $$1362 = $340;
       break;
      }
      $341 = (($$4354) + 3)|0;
      $342 = $341 & 127;
      $343 = ($342|0)==($$10|0);
      if ($343) {
       $344 = $311 * 0.5;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      } else {
       $346 = $311 * 0.75;
       $347 = $346 + $$0361;
       $$1362 = $347;
       break;
      }
     }
    } while(0);
    $348 = (53 - ($$0333))|0;
    $349 = ($348|0)>(1);
    if ($349) {
     $350 = (+_fmodl($$1362,1.0));
     $351 = $350 != 0.0;
     if ($351) {
      $$3364 = $$1362;
     } else {
      $352 = $$1362 + 1.0;
      $$3364 = $352;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $353 = $$1366 + $$3364;
   $354 = $353 - $$0360;
   $355 = $313 & 2147483647;
   $356 = (-2 - ($sum))|0;
   $357 = ($355|0)>($356|0);
   do {
    if ($357) {
     $358 = (+Math_abs((+$354)));
     $359 = !($358 >= 9007199254740992.0);
     $360 = $354 * 0.5;
     $not$ = $359 ^ 1;
     $361 = $not$&1;
     $$3383 = (($$1381) + ($361))|0;
     $$2367 = $359 ? $354 : $360;
     $362 = (($$3383) + 50)|0;
     $363 = ($362|0)>($7|0);
     if (!($363)) {
      $364 = ($$0333|0)!=($314|0);
      $narrow = $364 | $359;
      $$2371$v = $315 & $narrow;
      $365 = $$3364 != 0.0;
      $or$cond14 = $365 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $366 = (___errno_location()|0);
     HEAP32[$366>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $354;$$4384 = $$1381;
    }
   } while(0);
   $367 = (+_scalbnl($$3368,$$4384));
   $$1 = $367;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_130($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_130($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 127]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_494()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((16004|0));
 return (16012|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((16004|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[583]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[583]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 255]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___pthread_self_494() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(15378,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 2;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 5;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(15936)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(15378,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $$0$ = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $$0$ | 524288;
 $$2 = $9 ? $$0$ : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $$2$ = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $$2$ | 512;
 $$4 = $13 ? $14 : $$2$;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $$$4 = $15 ? $16 : $$4;
 return ($$$4|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 173;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_426($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288$ = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0;
 var $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$317 = 0;
 var $$318 = 0, $$319 = 0, $$320 = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0;
 var $$9 = 0, $$9314 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$pr = 0, $$pr324 = 0, $$pr327 = 0, $$pre = 0, $$pre458 = 0, $$pre460 = 0, $$sink = 0, $$sink$in = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor332 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond316 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $313 = $10;
 } else {
  $313 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273408 = $1;$$0283407 = 0;$$0288404 = 0;$$0305402 = 0;$20 = $11;$315 = 0;
   L6: while(1) {
    $19 = $20&255;
    $21 = (_isspace($19)|0);
    $22 = ($21|0)==(0);
    L8: do {
     if ($22) {
      $49 = HEAP8[$$0273408>>0]|0;
      $50 = ($49<<24>>24)==(37);
      L10: do {
       if ($50) {
        $51 = ((($$0273408)) + 1|0);
        $52 = HEAP8[$51>>0]|0;
        L12: do {
         switch ($52<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $73 = ((($$0273408)) + 2|0);
          $$0293 = 0;$$2275 = $73;
          break;
         }
         default: {
          $74 = $52&255;
          $75 = (_isdigit($74)|0);
          $76 = ($75|0)==(0);
          if (!($76)) {
           $77 = ((($$0273408)) + 2|0);
           $78 = HEAP8[$77>>0]|0;
           $79 = ($78<<24>>24)==(36);
           if ($79) {
            $80 = HEAP8[$51>>0]|0;
            $81 = $80&255;
            $82 = (($81) + -48)|0;
            $83 = (_arg_n_580($2,$82)|0);
            $84 = ((($$0273408)) + 3|0);
            $$0293 = $83;$$2275 = $84;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $85 = $arglist_current;
          $86 = ((0) + 4|0);
          $expanded1 = $86;
          $expanded = (($expanded1) - 1)|0;
          $87 = (($85) + ($expanded))|0;
          $88 = ((0) + 4|0);
          $expanded5 = $88;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $89 = $87 & $expanded3;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next = ((($90)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $91;$$2275 = $51;
         }
         }
        } while(0);
        $92 = HEAP8[$$2275>>0]|0;
        $93 = $92&255;
        $94 = (_isdigit($93)|0);
        $95 = ($94|0)==(0);
        if ($95) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266397 = 0;$$3396 = $$2275;
         while(1) {
          $96 = ($$0266397*10)|0;
          $97 = HEAP8[$$3396>>0]|0;
          $98 = $97&255;
          $99 = (($96) + -48)|0;
          $100 = (($99) + ($98))|0;
          $101 = ((($$3396)) + 1|0);
          $102 = HEAP8[$101>>0]|0;
          $103 = $102&255;
          $104 = (_isdigit($103)|0);
          $105 = ($104|0)==(0);
          if ($105) {
           $$0266$lcssa = $100;$$3$lcssa = $101;
           break;
          } else {
           $$0266397 = $100;$$3396 = $101;
          }
         }
        }
        $106 = HEAP8[$$3$lcssa>>0]|0;
        $107 = ($106<<24>>24)==(109);
        $108 = ((($$3$lcssa)) + 1|0);
        if ($107) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $$pr = HEAP8[$108>>0]|0;
         $$0270 = $110;$$1306 = 0;$$4 = $108;$112 = $$pr;$318 = 0;
        } else {
         $$0270 = 0;$$1306 = $$0305402;$$4 = $$3$lcssa;$112 = $106;$318 = $315;
        }
        $111 = ((($$4)) + 1|0);
        switch ($112<<24>>24) {
        case 104:  {
         $113 = HEAP8[$111>>0]|0;
         $114 = ($113<<24>>24)==(104);
         $115 = ((($$4)) + 2|0);
         $$317 = $114 ? $115 : $111;
         $$318 = $114 ? -2 : -1;
         $$0268 = $$318;$$5 = $$317;
         break;
        }
        case 108:  {
         $116 = HEAP8[$111>>0]|0;
         $117 = ($116<<24>>24)==(108);
         $118 = ((($$4)) + 2|0);
         $$319 = $117 ? $118 : $111;
         $$320 = $117 ? 3 : 1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $111;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $111;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $111;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$319 = $318;
         label = 136;
         break L6;
        }
        }
        $119 = HEAP8[$$5>>0]|0;
        $120 = $119&255;
        $121 = $120 & 47;
        $122 = ($121|0)==(3);
        $123 = $120 | 32;
        $$ = $122 ? $123 : $120;
        $$$0268 = $122 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $124 = ($$0266$lcssa|0)>(1);
         $$$0266 = $124 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283407;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283407;
         break;
        }
        case 110:  {
         $125 = ($$0283407|0)<(0);
         $126 = $125 << 31 >> 31;
         _store_int_581($$0293,$$$0268,$$0283407,$126);
         $$11 = $$5;$$1289 = $$0288404;$$2285 = $$0283407;$$6311 = $$1306;$316 = $318;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $127 = HEAP32[$13>>2]|0;
          $128 = HEAP32[$14>>2]|0;
          $129 = ($127>>>0)<($128>>>0);
          if ($129) {
           $130 = ((($127)) + 1|0);
           HEAP32[$13>>2] = $130;
           $131 = HEAP8[$127>>0]|0;
           $132 = $131&255;
           $134 = $132;
          } else {
           $133 = (___shgetc($0)|0);
           $134 = $133;
          }
          $135 = (_isspace($134)|0);
          $136 = ($135|0)==(0);
          if ($136) {
           break;
          }
         }
         $137 = HEAP32[$14>>2]|0;
         $138 = ($137|0)==(0|0);
         if ($138) {
          $$pre458 = HEAP32[$13>>2]|0;
          $146 = $$pre458;
         } else {
          $139 = HEAP32[$13>>2]|0;
          $140 = ((($139)) + -1|0);
          HEAP32[$13>>2] = $140;
          $141 = $140;
          $146 = $141;
         }
         $142 = HEAP32[$15>>2]|0;
         $143 = HEAP32[$16>>2]|0;
         $144 = (($142) + ($$0283407))|0;
         $145 = (($144) + ($146))|0;
         $147 = (($145) - ($143))|0;
         $$1267 = $$0266$lcssa;$$1284 = $147;
        }
        }
        ___shlim($0,$$1267);
        $148 = HEAP32[$13>>2]|0;
        $149 = HEAP32[$14>>2]|0;
        $150 = ($148>>>0)<($149>>>0);
        if ($150) {
         $151 = ((($148)) + 1|0);
         HEAP32[$13>>2] = $151;
         $154 = $149;
        } else {
         $152 = (___shgetc($0)|0);
         $153 = ($152|0)<(0);
         if ($153) {
          $$7312 = $$1306;$319 = $318;
          label = 136;
          break L6;
         }
         $$pr327 = HEAP32[$14>>2]|0;
         $154 = $$pr327;
        }
        $155 = ($154|0)==(0|0);
        if (!($155)) {
         $156 = HEAP32[$13>>2]|0;
         $157 = ((($156)) + -1|0);
         HEAP32[$13>>2] = $157;
        }
        L58: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $158 = ($$|0)==(99);
          $159 = $$ | 16;
          $160 = ($159|0)==(115);
          L60: do {
           if ($160) {
            $161 = ($$|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($161) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $162 = ((($$5)) + 1|0);
            $163 = HEAP8[$162>>0]|0;
            $164 = ($163<<24>>24)==(94);
            $165 = ((($$5)) + 2|0);
            $$0292 = $164&1;
            $$6 = $164 ? $165 : $162;
            (_memset(($4|0),($$0292|0),257)|0);
            HEAP8[$4>>0] = 0;
            $166 = HEAP8[$$6>>0]|0;
            switch ($166<<24>>24) {
            case 45:  {
             $$6$pn = $$6;$$sink330 = 46;
             label = 65;
             break;
            }
            case 93:  {
             $$6$pn = $$6;$$sink330 = 94;
             label = 65;
             break;
            }
            default: {
             $$7 = $$6;$168 = $166;
            }
            }
            while(1) {
             if ((label|0) == 65) {
              label = 0;
              $$sink$in = $$0292 ^ 1;
              $$sink = $$sink$in&255;
              $167 = (($4) + ($$sink330)|0);
              HEAP8[$167>>0] = $$sink;
              $$7$ph = ((($$6$pn)) + 1|0);
              $$pr324 = HEAP8[$$7$ph>>0]|0;
              $$7 = $$7$ph;$168 = $$pr324;
             }
             L70: do {
              switch ($168<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$319 = $318;
               label = 136;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L60;
               break;
              }
              case 45:  {
               $169 = ((($$7)) + 1|0);
               $170 = HEAP8[$169>>0]|0;
               switch ($170<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$183 = 45;
                break L70;
                break;
               }
               default: {
               }
               }
               $171 = ((($$7)) + -1|0);
               $172 = HEAP8[$171>>0]|0;
               $173 = ($172&255)<($170&255);
               if ($173) {
                $174 = $172&255;
                $175 = $$0292 ^ 1;
                $176 = $175&255;
                $$0286399 = $174;
                while(1) {
                 $177 = (($$0286399) + 1)|0;
                 $178 = (($4) + ($177)|0);
                 HEAP8[$178>>0] = $176;
                 $179 = HEAP8[$169>>0]|0;
                 $180 = $179&255;
                 $181 = ($177|0)<($180|0);
                 if ($181) {
                  $$0286399 = $177;
                 } else {
                  $$8 = $169;$183 = $179;
                  break;
                 }
                }
               } else {
                $$8 = $169;$183 = $170;
               }
               break;
              }
              default: {
               $$8 = $$7;$183 = $168;
              }
              }
             } while(0);
             $182 = $183&255;
             $184 = (($182) + 1)|0;
             $$6$pn = $$8;$$sink330 = $184;
             label = 65;
            }
           }
          } while(0);
          $185 = (($$1267) + 1)|0;
          $186 = $158 ? $185 : 31;
          $187 = ($$$0268|0)==(1);
          $188 = ($$0270|0)!=(0);
          L78: do {
           if ($187) {
            if ($188) {
             $189 = $186 << 2;
             $190 = (_malloc($189)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $$7312 = 0;$319 = 0;
              label = 136;
              break L6;
             } else {
              $321 = $190;
             }
            } else {
             $321 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $186;$$0278$ph = 0;$$ph = $321;
            L83: while(1) {
             $192 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L87: while(1) {
               $193 = HEAP32[$13>>2]|0;
               $194 = HEAP32[$14>>2]|0;
               $195 = ($193>>>0)<($194>>>0);
               if ($195) {
                $196 = ((($193)) + 1|0);
                HEAP32[$13>>2] = $196;
                $197 = HEAP8[$193>>0]|0;
                $198 = $197&255;
                $201 = $198;
               } else {
                $199 = (___shgetc($0)|0);
                $201 = $199;
               }
               $200 = (($201) + 1)|0;
               $202 = (($4) + ($200)|0);
               $203 = HEAP8[$202>>0]|0;
               $204 = ($203<<24>>24)==(0);
               if ($204) {
                break L83;
               }
               $205 = $201&255;
               HEAP8[$6>>0] = $205;
               $206 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($206|0) {
               case -1:  {
                $$7312 = 0;$319 = $$ph;
                label = 136;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L87;
               }
               }
              }
              if ($192) {
               $$1279 = $$0278$ph336;
              } else {
               $207 = (($$ph) + ($$0278$ph336<<2)|0);
               $208 = (($$0278$ph336) + 1)|0;
               $209 = HEAP32[$5>>2]|0;
               HEAP32[$207>>2] = $209;
               $$1279 = $208;
              }
              $210 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $188 & $210;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor332 = $$0276$ph << 1;
             $211 = $factor332 | 1;
             $212 = $211 << 2;
             $213 = (_realloc($$ph,$212)|0);
             $214 = ($213|0)==(0|0);
             if ($214) {
              $$7312 = 0;$319 = $$ph;
              label = 136;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $211;$$ph = $213;$$0278$ph = $$0278$ph$phi;
             }
            }
            $215 = (_mbsinit($3)|0);
            $216 = ($215|0)==(0);
            if ($216) {
             $$7312 = 0;$319 = $$ph;
             label = 136;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$322 = $$ph;
            }
           } else {
            if ($188) {
             $217 = (_malloc($186)|0);
             $218 = ($217|0)==(0|0);
             if ($218) {
              $$7312 = 0;$319 = 0;
              label = 136;
              break L6;
             } else {
              $$1277$ph = $186;$$2280$ph = 0;$$2307$ph = $217;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $219 = HEAP32[$13>>2]|0;
               $220 = HEAP32[$14>>2]|0;
               $221 = ($219>>>0)<($220>>>0);
               if ($221) {
                $222 = ((($219)) + 1|0);
                HEAP32[$13>>2] = $222;
                $223 = HEAP8[$219>>0]|0;
                $224 = $223&255;
                $227 = $224;
               } else {
                $225 = (___shgetc($0)|0);
                $227 = $225;
               }
               $226 = (($227) + 1)|0;
               $228 = (($4) + ($226)|0);
               $229 = HEAP8[$228>>0]|0;
               $230 = ($229<<24>>24)==(0);
               if ($230) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$322 = 0;
                break L78;
               }
               $231 = $227&255;
               $232 = (($$2280) + 1)|0;
               $233 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$233>>0] = $231;
               $234 = ($232|0)==($$1277$ph|0);
               if ($234) {
                break;
               } else {
                $$2280 = $232;
               }
              }
              $factor = $$1277$ph << 1;
              $235 = $factor | 1;
              $236 = (_realloc($$2307$ph,$235)|0);
              $237 = ($236|0)==(0|0);
              if ($237) {
               $$7312 = $$2307$ph;$319 = 0;
               label = 136;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $235;$$2307$ph = $236;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $238 = ($$0293|0)==(0|0);
            if ($238) {
             while(1) {
              $254 = HEAP32[$13>>2]|0;
              $255 = HEAP32[$14>>2]|0;
              $256 = ($254>>>0)<($255>>>0);
              if ($256) {
               $257 = ((($254)) + 1|0);
               HEAP32[$13>>2] = $257;
               $258 = HEAP8[$254>>0]|0;
               $259 = $258&255;
               $262 = $259;
              } else {
               $260 = (___shgetc($0)|0);
               $262 = $260;
              }
              $261 = (($262) + 1)|0;
              $263 = (($4) + ($261)|0);
              $264 = HEAP8[$263>>0]|0;
              $265 = ($264<<24>>24)==(0);
              if ($265) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$322 = 0;
               break L78;
              }
             }
            } else {
             $$3281 = 0;
            }
            while(1) {
             $239 = HEAP32[$13>>2]|0;
             $240 = HEAP32[$14>>2]|0;
             $241 = ($239>>>0)<($240>>>0);
             if ($241) {
              $242 = ((($239)) + 1|0);
              HEAP32[$13>>2] = $242;
              $243 = HEAP8[$239>>0]|0;
              $244 = $243&255;
              $247 = $244;
             } else {
              $245 = (___shgetc($0)|0);
              $247 = $245;
             }
             $246 = (($247) + 1)|0;
             $248 = (($4) + ($246)|0);
             $249 = HEAP8[$248>>0]|0;
             $250 = ($249<<24>>24)==(0);
             if ($250) {
              $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$322 = 0;
              break L78;
             }
             $251 = $247&255;
             $252 = (($$3281) + 1)|0;
             $253 = (($$0293) + ($$3281)|0);
             HEAP8[$253>>0] = $251;
             $$3281 = $252;
            }
           }
          } while(0);
          $266 = HEAP32[$14>>2]|0;
          $267 = ($266|0)==(0|0);
          if ($267) {
           $$pre460 = HEAP32[$13>>2]|0;
           $274 = $$pre460;
          } else {
           $268 = HEAP32[$13>>2]|0;
           $269 = ((($268)) + -1|0);
           HEAP32[$13>>2] = $269;
           $270 = $269;
           $274 = $270;
          }
          $271 = HEAP32[$15>>2]|0;
          $272 = HEAP32[$16>>2]|0;
          $273 = (($274) - ($272))|0;
          $275 = (($273) + ($271))|0;
          $276 = ($275|0)==(0);
          if ($276) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$4309;$312 = $322;
           break L6;
          }
          $$not = $158 ^ 1;
          $277 = ($275|0)==($$1267|0);
          $or$cond316 = $277 | $$not;
          if (!($or$cond316)) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$4309;$312 = $322;
           break L6;
          }
          do {
           if ($188) {
            if ($187) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($158) {
           $$10 = $$9;$$5310 = $$4309;$320 = $322;
          } else {
           $278 = ($$5299|0)==(0|0);
           if (!($278)) {
            $279 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$279>>2] = 0;
           }
           $280 = ($$4309|0)==(0|0);
           if ($280) {
            $$10 = $$9;$$5310 = 0;$320 = $322;
            break L58;
           }
           $281 = (($$4309) + ($$4282)|0);
           HEAP8[$281>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$320 = $322;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 124;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 124;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 124;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 124;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $292 = (+___floatscan($0,$$$0268,0));
          $293 = HEAP32[$15>>2]|0;
          $294 = HEAP32[$13>>2]|0;
          $295 = HEAP32[$16>>2]|0;
          $296 = (($295) - ($294))|0;
          $297 = ($293|0)==($296|0);
          if ($297) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$1306;$312 = $318;
           break L6;
          }
          $298 = ($$0293|0)==(0|0);
          if ($298) {
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $299 = $292;
            HEAPF32[$$0293>>2] = $299;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $292;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $292;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$320 = $318;
         }
         }
        } while(0);
        do {
         if ((label|0) == 124) {
          label = 0;
          $282 = (___intscan($0,$$0272,0,-1,-1)|0);
          $283 = tempRet0;
          $284 = HEAP32[$15>>2]|0;
          $285 = HEAP32[$13>>2]|0;
          $286 = HEAP32[$16>>2]|0;
          $287 = (($286) - ($285))|0;
          $288 = ($284|0)==($287|0);
          if ($288) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$1306;$312 = $318;
           break L6;
          }
          $289 = ($$|0)==(112);
          $290 = ($$0293|0)!=(0|0);
          $or$cond3 = $290 & $289;
          if ($or$cond3) {
           $291 = $282;
           HEAP32[$$0293>>2] = $291;
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
           break;
          } else {
           _store_int_581($$0293,$$$0268,$282,$283);
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
           break;
          }
         }
        } while(0);
        $300 = HEAP32[$15>>2]|0;
        $301 = HEAP32[$13>>2]|0;
        $302 = HEAP32[$16>>2]|0;
        $303 = (($300) + ($$1284))|0;
        $304 = (($303) + ($301))|0;
        $305 = (($304) - ($302))|0;
        $306 = ($$0293|0)!=(0|0);
        $307 = $306&1;
        $$0288$ = (($$0288404) + ($307))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $305;$$6311 = $$5310;$316 = $320;
        break L8;
       }
      } while(0);
      $53 = $50&1;
      $54 = (($$0273408) + ($53)|0);
      ___shlim($0,0);
      $55 = HEAP32[$13>>2]|0;
      $56 = HEAP32[$14>>2]|0;
      $57 = ($55>>>0)<($56>>>0);
      if ($57) {
       $58 = ((($55)) + 1|0);
       HEAP32[$13>>2] = $58;
       $59 = HEAP8[$55>>0]|0;
       $60 = $59&255;
       $64 = $60;
      } else {
       $61 = (___shgetc($0)|0);
       $64 = $61;
      }
      $62 = HEAP8[$54>>0]|0;
      $63 = $62&255;
      $65 = ($64|0)==($63|0);
      if (!($65)) {
       label = 22;
       break L6;
      }
      $72 = (($$0283407) + 1)|0;
      $$11 = $54;$$1289 = $$0288404;$$2285 = $72;$$6311 = $$0305402;$316 = $315;
     } else {
      $$1274 = $$0273408;
      while(1) {
       $23 = ((($$1274)) + 1|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = $24&255;
       $26 = (_isspace($25)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        break;
       } else {
        $$1274 = $23;
       }
      }
      ___shlim($0,0);
      while(1) {
       $28 = HEAP32[$13>>2]|0;
       $29 = HEAP32[$14>>2]|0;
       $30 = ($28>>>0)<($29>>>0);
       if ($30) {
        $31 = ((($28)) + 1|0);
        HEAP32[$13>>2] = $31;
        $32 = HEAP8[$28>>0]|0;
        $33 = $32&255;
        $35 = $33;
       } else {
        $34 = (___shgetc($0)|0);
        $35 = $34;
       }
       $36 = (_isspace($35)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        break;
       }
      }
      $38 = HEAP32[$14>>2]|0;
      $39 = ($38|0)==(0|0);
      if ($39) {
       $$pre = HEAP32[$13>>2]|0;
       $47 = $$pre;
      } else {
       $40 = HEAP32[$13>>2]|0;
       $41 = ((($40)) + -1|0);
       HEAP32[$13>>2] = $41;
       $42 = $41;
       $47 = $42;
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = HEAP32[$16>>2]|0;
      $45 = (($43) + ($$0283407))|0;
      $46 = (($45) + ($47))|0;
      $48 = (($46) - ($44))|0;
      $$11 = $$1274;$$1289 = $$0288404;$$2285 = $48;$$6311 = $$0305402;$316 = $315;
     }
    } while(0);
    $308 = ((($$11)) + 1|0);
    $309 = HEAP8[$308>>0]|0;
    $310 = ($309<<24>>24)==(0);
    if ($310) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273408 = $308;$$0283407 = $$2285;$$0288404 = $$1289;$$0305402 = $$6311;$20 = $309;$315 = $316;
    }
   }
   if ((label|0) == 22) {
    $66 = HEAP32[$14>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = HEAP32[$13>>2]|0;
     $69 = ((($68)) + -1|0);
     HEAP32[$13>>2] = $69;
    }
    $70 = ($64|0)>(-1);
    $71 = ($$0288404|0)!=(0);
    $or$cond5 = $71 | $70;
    if ($or$cond5) {
     $$3291 = $$0288404;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305402;$317 = $315;
     label = 137;
    }
   }
   else if ((label|0) == 136) {
    $$old4 = ($$0288404|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$317 = $319;
     label = 137;
    } else {
     $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$7312;$312 = $319;
    }
   }
   if ((label|0) == 137) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$312 = $317;
   }
   $311 = ($$2|0)==(0);
   if ($311) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($312);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $314 = ($313|0)==(0);
 if (!($314)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n_580($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_581($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($$027$|0))|0);
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 255]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$57 = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$57|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$57)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$57)|0);
  $27 = (($4) - ($$57))|0;
  $$054$ph = $27;$$056$ph = $26;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $28 = ($$054$ph|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 255]($3,$$05659,$$05460)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$05460) - ($33))|0;
    $41 = (($$05659) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$05460 = $40;$$05659 = $41;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$05460))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _isprint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -32)|0;
 $2 = ($1>>>0)<(95);
 $3 = $2&1;
 return ($3|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(8);
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,b0,b0,b0,b0,b0,_print_text_marker,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,_fill_input_buffer,b0,b0,b0,b0,_fill_mem_input_buffer,_consume_markers,b0,b0,b0,b0,_read_markers,_read_restart_marker,_skip_variable,_get_interesting_appn,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,_consume_data,b0,_dummy_consume_data,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,_jpeg_resync_to_restart,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,_decode_mcu_AC_refine,_decode_mcu_DC_refine,_decode_mcu_AC_first,_decode_mcu_DC_first,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_decode_mcu_AC_first_316,_decode_mcu_DC_first_315,_decode_mcu_AC_refine_318,_decode_mcu_DC_refine_317
,_decode_mcu,b1,b1,b1,_decompress_data,b1,_decompress_onepass,_decompress_smooth_data,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_decode_mcu_378,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdio_read,___stdio_seek,___stdout_write,___stdio_write,_sn_write,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_alloc_small,_alloc_large,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_do_read_426,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_alloc_sarray,_alloc_barray,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_access_virt_sarray,_access_virt_barray,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_request_virt_sarray,_request_virt_barray,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,_init_source,b6,b6,b6,_term_source,_init_mem_source,b6,b6,_reset_input_controller,_start_input_pass,_finish_input_pass,_reset_marker_reader,b6,b6,b6,b6,_prepare_for_output_pass,_finish_output_pass,_start_pass_merged_upsample,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,_start_pass_phuff_decoder,b6,b6,b6,b6,b6,b6,b6,b6,_start_pass_upsample,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_error_exit,b6,_output_message,b6,_reset_error_mgr,b6
,_finish_pass_1_quant,_new_color_map_1_quant,b6,b6,b6,b6,b6,b6,_new_color_map_2_quant,b6,_finish_pass1,b6,b6,_finish_pass2,b6,b6,b6,b6,b6,b6,_realize_virt_arrays,b6,b6,b6,_self_destruct,_start_pass,b6,b6,b6,b6
,b6,_start_input_pass_353,_start_output_pass,b6,b6,b6,b6,b6,_start_pass_dcolor,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_start_pass_360,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_start_pass_huff_decoder,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,b7,b7,b7,b7,b7,b7,b7,_start_output_gif,b7,_finish_output_gif,_calc_buffer_dimensions_gif,_start_output_ppm,_finish_output_ppm,_calc_buffer_dimensions_ppm,b7,b7,b7,b7,_start_output_bmp,_finish_output_bmp,b7,b7,_start_output_tga,_finish_output_tga,_calc_buffer_dimensions_tga,b7,b7,b7
,b7,b7,b7,b7,_skip_input_data,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,_start_pass_dpost,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emit_message,b7,_format_message,b7,_start_pass_1_quant
,b7,b7,b7,b7,b7,b7,b7,_start_pass_2_quant,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_free_pool,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_start_pass_main,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,_put_pixel_rows,b8,b8,b8,b8,b8,_copy_pixel_rows,_put_demapped_rgb,_put_demapped_gray,_put_pixel_rows_77,b8,b8,_put_gray_rows,_put_pixel_rows_146,b8,b8,b8,_put_gray_rows_150,_put_demapped_gray_149,_put_pixel_rows_151
,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,_noop_quantize,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_h2v2_merged_upsample,_jsimd_h2v2_merged_upsample,_h2v2_merged_upsample_565,_h2v2_merged_upsample_565D,b9,_h2v1_merged_upsample,_jsimd_h2v1_merged_upsample,_h2v1_merged_upsample_565
,_h2v1_merged_upsample_565D,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_noop_upsample,_fullsize_upsample,_h2v1_fancy_upsample,_jsimd_h2v1_fancy_upsample,_h2v1_upsample,_jsimd_h2v1_upsample,_h1v2_fancy_upsample,_h2v2_fancy_upsample,_jsimd_h2v2_fancy_upsample,_h2v2_upsample,_jsimd_h2v2_upsample,_int_upsample,b9,b9,b9,b9,b9,b9
,b9,b9,_color_quantize,_color_quantize3,_quantize_ord_dither,_quantize3_ord_dither,_quantize_fs_dither,b9,b9,_prescan_quantize,b9,_pass2_no_dither,_pass2_fs_dither,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_process_data_context_main,_process_data_simple_main,_process_data_crank_post,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,_noop_convert,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,_grayscale_convert,_rgb_gray_convert,_jsimd_ycc_rgb_convert,_ycc_rgb_convert,_gray_rgb_convert,_jsimd_ycc_rgb565_convert,_ycc_rgb565_convert,_gray_rgb565_convert,_rgb_rgb565_convert,_ycc_rgb565D_convert,_gray_rgb565D_convert,_rgb_rgb565D_convert,_ycck_cmyk_convert,_null_convert,_rgb_rgb_convert,b10,_jsimd_idct_2x2,_jpeg_idct_2x2,_jsimd_idct_4x4,_jpeg_idct_4x4,_jsimd_idct_islow
,_jpeg_idct_islow,_jsimd_idct_ifast,_jpeg_idct_ifast,_jsimd_idct_float,_jpeg_idct_float,_jpeg_idct_1x1,_jpeg_idct_3x3,_jpeg_idct_5x5,_jpeg_idct_6x6,_jpeg_idct_7x7,_jpeg_idct_9x9,_jpeg_idct_10x10,_jpeg_idct_11x11,_jpeg_idct_12x12,_jpeg_idct_13x13,_jpeg_idct_14x14,_jpeg_idct_15x15,_jpeg_idct_16x16,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_merged_2v_upsample,b11,b11,b11,b11,_merged_1v_upsample,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,_post_process_1pass,_post_process_prepass,_post_process_2pass,b11,_sep_upsample,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



    var file = null;

    // Try to get output file.
    try {
        // read processed image data in file
        file = FS.readFile("/output.jpg");
    } catch (e) {
        // Cleaning up input png from MEMFS
        FS.unlink("/input.jpg");
        return new Error("No output file: " + stderr);
    }

    // Cleanup files from
    FS.unlink("/output.jpg");
    FS.unlink("/input.jpg");

    return {
        "data": file,
        "stdout": stdout,
        "stderr": stderr
    };
};


// for npm...
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = djpeg;
} else {
    djpeg.call(this);
}
